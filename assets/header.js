"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){var r;if(e)return"string"==typeof e?_arrayLikeToArray(e,t):"Map"===(r="Object"===(r=Object.prototype.toString.call(e).slice(8,-1))&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(e,t):void 0}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,_toPropertyKey(n.key),n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function _toPropertyKey(e){e=_toPrimitive(e,"string");return"symbol"===_typeof(e)?e:String(e)}function _toPrimitive(e,t){if("object"!==_typeof(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0===r)return("string"===t?String:Number)(e);r=r.call(e,t||"default");if("object"!==_typeof(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&_setPrototypeOf(e,t)}function _createSuper(r){var n=_isNativeReflectConstruct();return function(){var e,t=_getPrototypeOf(r);return _possibleConstructorReturn(this,n?(e=_getPrototypeOf(this).constructor,Reflect.construct(t,arguments,e)):t.apply(this,arguments))}}function _possibleConstructorReturn(e,t){if(t&&("object"===_typeof(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(e)}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _wrapNativeSuper(e){var r="function"==typeof Map?new Map:void 0;return(_wrapNativeSuper=function(e){if(null===e||!_isNativeFunction(e))return e;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==r){if(r.has(e))return r.get(e);r.set(e,t)}function t(){return _construct(e,arguments,_getPrototypeOf(this).constructor)}return t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),_setPrototypeOf(t,e)})(e)}function _construct(e,t,r){return(_construct=_isNativeReflectConstruct()?Reflect.construct.bind():function(e,t,r){var n=[null];n.push.apply(n,t);t=new(Function.bind.apply(e,n));return r&&_setPrototypeOf(t,r.prototype),t}).apply(null,arguments)}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}function _isNativeFunction(e){return-1!==Function.toString.call(e).indexOf("[native code]")}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}!function n(o,i,u){function a(t,e){if(!i[t]){if(!o[t]){var r="function"==typeof require&&require;if(!e&&r)return r(t,!0);if(s)return s(t,!0);throw(e=new Error("Cannot find module '"+t+"'")).code="MODULE_NOT_FOUND",e}r=i[t]={exports:{}},o[t][0].call(r.exports,function(e){return a(o[t][1][e]||e)},r,r.exports,n,o,i,u)}return i[t].exports}for(var s="function"==typeof require&&require,e=0;e<u.length;e++)a(u[e]);return a}({1:[function(e,t,r){e("./scripts/pubsub");customElements.get("s-header")||customElements.define("s-header",function(){_inherits(t,_wrapNativeSuper(HTMLElement));var e=_createSuper(t);function t(){return _classCallCheck(this,t),e.call(this)}return _createClass(t,[{key:"connectedCallback",value:function(){var t=this;this.megaMenus=Array.from(this.querySelectorAll(".s-mega-menu")),this.menuItems=this.querySelectorAll(".s-header__menu_item"),this.querySelector(".s-header__account_cart").addEventListener("click",this.opeenCartDrawer),PubSub.subscribe("cart-updated",this.updateCount.bind(this)),this.menuItems.forEach(function(e){t.addClassParentMenu(e),t.openMegaMenuMobile(e),t.openMegaMenuDesktop(e),t.closeMegaMenuDesktop(e)}),this.toggleMenuMobile(),this.closeMegaMenuMobile()}},{key:"opeenCartDrawer",value:function(){PubSub.publish("open-drawer")}},{key:"updateCount",value:function(){var t=this;fetch(window.theme.shopUrl+"/cart.js").then(function(e){return e.json()}).then(function(e){t.querySelector(".header_cart_count").innerHTML=e.item_count})}},{key:"addClassParentMenu",value:function(t){this.megaMenus.map(function(e){t.getElementsByTagName("a")[0].innerHTML==e.getAttribute("data-parent-menu")&&t.classList.add("s-header__menu_item--parent")})}},{key:"openMegaMenuDesktop",value:function(e){var r=this;e.addEventListener("mouseover",function(t){r.megaMenus.map(function(e){t.target.innerHTML==e.getAttribute("data-parent-menu")&&e.classList.add("active")})})}},{key:"closeMegaMenuDesktop",value:function(e){var r=this;e.addEventListener("mouseout",function(t){r.megaMenus.map(function(e){t.target.innerHTML==e.getAttribute("data-parent-menu")&&e.classList.remove("active")})})}},{key:"toggleMenuMobile",value:function(){var e=this;this.querySelector(".s-header__menu_btn").addEventListener("click",function(){return document.querySelector(".body_overlay").classList.toggle("active"),e.querySelector(".s-header").classList.toggle("s-header--menu-active"),document.querySelector("body").classList.toggle("hidden"),e.querySelector(".s-header__menu").classList.remove("hide"),e.megaMenus.map(function(e){e.classList.remove("active")})})}},{key:"openMegaMenuMobile",value:function(e){var r=this;e.querySelector(".s-header__menu_item_arrow").addEventListener("click",function(t){r.megaMenus.map(function(e){t.target.getAttribute("data-menu-name")==e.getAttribute("data-parent-menu")&&(e.classList.add("active"),r.querySelector(".s-header__menu").classList.add("hide"))})})}},{key:"closeMegaMenuMobile",value:function(){var t=this;this.querySelectorAll(".s-mega-menu__close").forEach(function(e){e.addEventListener("click",function(e){t.querySelector(".s-header__menu").classList.remove("hide"),t.megaMenus.map(function(e){e.classList.remove("active")})})})}}]),t}())},{"./scripts/pubsub":2}],2:[function(e,t,r){t.exports={EVENTS:{cartUpdated:"cart-updated",openCartDrawer:"open-drawer"},subscribers:{},subscribe:function(e,t){var r=this;return void 0===this.subscribers[e]&&(this.subscribers[e]=[]),this.subscribers[e]=[].concat(_toConsumableArray(this.subscribers[e]),[t]),function(){r.subscribers[e]=r.subscribers[e].filter(function(e){return e!==t})}},publish:function(e,t){this.subscribers[e]&&this.subscribers[e].forEach(function(e){e(t)})}}},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
