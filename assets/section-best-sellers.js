"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return _arrayWithoutHoles(t)||_iterableToArray(t)||_unsupportedIterableToArray(t)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(t,e){var r;if(t)return"string"==typeof t?_arrayLikeToArray(t,e):"Map"===(r="Object"===(r=Object.prototype.toString.call(t).slice(8,-1))&&t.constructor?t.constructor.name:r)||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(t,e):void 0}function _iterableToArray(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}function _arrayWithoutHoles(t){if(Array.isArray(t))return _arrayLikeToArray(t)}function _arrayLikeToArray(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,o=new Array(e);r<e;r++)o[r]=t[r];return o}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var o=e[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,_toPropertyKey(o.key),o)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&_setPrototypeOf(t,e)}function _createSuper(r){var o=_isNativeReflectConstruct();return function(){var t,e=_getPrototypeOf(r);return _possibleConstructorReturn(this,o?(t=_getPrototypeOf(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments))}}function _possibleConstructorReturn(t,e){if(e&&("object"===_typeof(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t)}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _wrapNativeSuper(t){var r="function"==typeof Map?new Map:void 0;return(_wrapNativeSuper=function(t){if(null===t||!_isNativeFunction(t))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==r){if(r.has(t))return r.get(t);r.set(t,e)}function e(){return _construct(t,arguments,_getPrototypeOf(this).constructor)}return e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),_setPrototypeOf(e,t)})(t)}function _construct(t,e,r){return(_construct=_isNativeReflectConstruct()?Reflect.construct.bind():function(t,e,r){var o=[null];o.push.apply(o,e);e=new(Function.bind.apply(t,o));return r&&_setPrototypeOf(e,r.prototype),e}).apply(null,arguments)}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return!1}}function _isNativeFunction(t){return-1!==Function.toString.call(t).indexOf("[native code]")}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _defineProperty(t,e,r){return(e=_toPropertyKey(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function _toPropertyKey(t){t=_toPrimitive(t,"string");return"symbol"===_typeof(t)?t:String(t)}function _toPrimitive(t,e){if("object"!==_typeof(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0===r)return("string"===e?String:Number)(t);r=r.call(t,e||"default");if("object"!==_typeof(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}!function o(n,i,c){function u(e,t){if(!i[e]){if(!n[e]){var r="function"==typeof require&&require;if(!t&&r)return r(e,!0);if(l)return l(e,!0);throw(t=new Error("Cannot find module '"+e+"'")).code="MODULE_NOT_FOUND",t}r=i[e]={exports:{}},n[e][0].call(r.exports,function(t){return u(n[e][1][t]||t)},r,r.exports,o,n,i,c)}return i[e].exports}for(var l="function"==typeof require&&require,t=0;t<c.length;t++)u(c[t]);return u}({1:[function(t,e,r){customElements.get("best-sellers")||customElements.define("best-sellers",function(){_inherits(r,_wrapNativeSuper(HTMLElement));var e=_createSuper(r);function r(){var t;return _classCallCheck(this,r),_defineProperty(_assertThisInitialized(t=e.call(this)),"nameCollection",t.dataset.collection),_defineProperty(_assertThisInitialized(t),"countProducts",t.dataset.count),_defineProperty(_assertThisInitialized(t),"numberPage",1),_defineProperty(_assertThisInitialized(t),"countLoadMore",1),_defineProperty(_assertThisInitialized(t),"countCollectionProducts",null),_defineProperty(_assertThisInitialized(t),"collectionProducts",[]),t}return _createClass(r,[{key:"connectedCallback",value:function(){var t=this;this.updateCollection(),this.querySelector(".best-sellers__btn").addEventListener("click",function(){return t.loadMore()})}},{key:"updateCollection",value:function(){var r=this;!1!==this.countCollectionProducts&&fetch(window.theme.shopUrl+"/collections/".concat(this.nameCollection,"?page=").concat(this.numberPage)).then(function(t){return t.text()}).then(function(t){var e,t=(new DOMParser).parseFromString(t,"text/html"),t=(t.querySelectorAll(".main-collection__product").forEach(function(t){return t.classList.value="best-sellers__product"}),Array.from(t.querySelectorAll(".best-sellers__product")));r.countCollectionProducts=null!=(e=r.countCollectionProducts)?e:t.length,r.countCollectionProducts>t.length&&(r.countCollectionProducts=!1),r.collectionProducts=[].concat(_toConsumableArray(r.collectionProducts),t),r.numberPage++,r.collectionProducts.length<r.countProducts*r.countLoadMore+ +r.countProducts&&r.updateCollection(),r.querySelector(".best-sellers__btn").disabled=!1})}},{key:"loadMore",value:function(){var r=this;if(console.log(this.collectionProducts.length),console.log(this.countLoadMore),console.log(this.countProducts),this.collectionProducts.length>this.countLoadMore*this.countProducts){var o=document.createElement("div");if(this.collectionProducts.forEach(function(t,e){e>=r.countProducts*r.countLoadMore&&e<r.countProducts*r.countLoadMore+ +r.countProducts&&o.appendChild(t)}),o.childElementCount<this.countProducts){for(var t=this.countProducts;t>o.childElementCount;t--)o.insertBefore(this.collectionProducts[this.collectionProducts.length-t],o.firstChild);this.querySelector(".best-sellers__btn").disabled=!0}this.querySelector(".best-sellers__products").innerHTML=o.innerHTML,this.countLoadMore++,this.countLoadMore*this.countProducts>this.collectionProducts.length-this.countProducts&&(this.querySelector(".best-sellers__btn").disabled=!0,this.updateCollection())}}}]),r}())},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvc2VjdGlvbi1iZXN0LXNlbGxlcnMuanMiLCJzZWN0aW9uLWJlc3Qtc2VsbGVycy5qcyJdLCJuYW1lcyI6WyJyIiwiZSIsIm4iLCJ0IiwibyIsImkiLCJmIiwiYyIsInJlcXVpcmUiLCJ1IiwiYSIsIkVycm9yIiwiY29kZSIsInAiLCJleHBvcnRzIiwiY2FsbCIsImxlbmd0aCIsIjEiLCJtb2R1bGUiLCJjdXN0b21FbGVtZW50cyIsImdldCIsImRlZmluZSIsIl9pbmhlcml0cyIsIlNCZXN0IiwiX3dyYXBOYXRpdmVTdXBlciIsIkhUTUxFbGVtZW50IiwiX3N1cGVyIiwiX2NyZWF0ZVN1cGVyIiwiX3RoaXMiLCJfY2xhc3NDYWxsQ2hlY2siLCJ0aGlzIiwiX2RlZmluZVByb3BlcnR5IiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsImRhdGFzZXQiLCJjb2xsZWN0aW9uIiwiY291bnQiLCJfY3JlYXRlQ2xhc3MiLCJrZXkiLCJ2YWx1ZSIsIl90aGlzMiIsInVwZGF0ZUNvbGxlY3Rpb24iLCJxdWVyeVNlbGVjdG9yIiwiYWRkRXZlbnRMaXN0ZW5lciIsImxvYWRNb3JlIiwiX3RoaXMzIiwiY291bnRDb2xsZWN0aW9uUHJvZHVjdHMiLCJmZXRjaCIsIndpbmRvdyIsInRoZW1lIiwic2hvcFVybCIsImNvbmNhdCIsIm5hbWVDb2xsZWN0aW9uIiwibnVtYmVyUGFnZSIsInRoZW4iLCJyZXMiLCJ0ZXh0IiwiZGF0YSIsIl90aGlzMyRjb3VudENvbGxlY3RpbyIsImh0bWwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJwcm9kdWN0cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwiZWwiLCJjbGFzc0xpc3QiLCJBcnJheSIsImZyb20iLCJjb2xsZWN0aW9uUHJvZHVjdHMiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJjb3VudFByb2R1Y3RzIiwiY291bnRMb2FkTW9yZSIsImRpc2FibGVkIiwiX3RoaXM0IiwiY29uc29sZSIsImxvZyIsIm5ld1Byb2R1Y3RzIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwicHJvZHVjdCIsImluZGV4IiwiYXBwZW5kQ2hpbGQiLCJjaGlsZEVsZW1lbnRDb3VudCIsImluc2VydEJlZm9yZSIsImZpcnN0Q2hpbGQiLCJpbm5lckhUTUwiXSwibWFwcGluZ3MiOiJxK0lBQUEsQ0FBQSxTQUFBQSxFQUFBQyxFQUFBQyxFQUFBQyxHQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEdBQUEsR0FBQSxDQUFBSixFQUFBRyxHQUFBLENBQUEsR0FBQSxDQUFBSixFQUFBSSxHQUFBLENBQUEsSUFBQUUsRUFBQSxZQUFBLE9BQUFDLFNBQUFBLFFBQUEsR0FBQSxDQUFBRixHQUFBQyxFQUFBLE9BQUFBLEVBQUFGLEVBQUEsQ0FBQSxDQUFBLEVBQUEsR0FBQUksRUFBQSxPQUFBQSxFQUFBSixFQUFBLENBQUEsQ0FBQSxFQUFBLE1BQUFLLEVBQUEsSUFBQUMsTUFBQSx1QkFBQU4sRUFBQSxHQUFBLEdBQUFPLEtBQUEsbUJBQUFGLENBQUEsQ0FBQUcsRUFBQVgsRUFBQUcsR0FBQSxDQUFBUyxRQUFBLEVBQUEsRUFBQWIsRUFBQUksR0FBQSxHQUFBVSxLQUFBRixFQUFBQyxRQUFBLFNBQUFkLEdBQUEsT0FBQUksRUFBQUgsRUFBQUksR0FBQSxHQUFBTCxJQUFBQSxDQUFBLENBQUEsRUFBQWEsRUFBQUEsRUFBQUMsUUFBQWQsRUFBQUMsRUFBQUMsRUFBQUMsQ0FBQSxDQUFBLENBQUEsT0FBQUQsRUFBQUcsR0FBQVMsT0FBQSxDQUFBLElBQUEsSUFBQUwsRUFBQSxZQUFBLE9BQUFELFNBQUFBLFFBQUFILEVBQUEsRUFBQUEsRUFBQUYsRUFBQWEsT0FBQVgsQ0FBQSxHQUFBRCxFQUFBRCxFQUFBRSxFQUFBLEVBQUEsT0FBQUQsQ0FBQSxFQUFBLENBQUFhLEVBQUEsQ0FBQSxTQUFBVCxFQUFBVSxFQUFBSixHQ0FBSyxlQUFBQyxJQUFBLGNBQUEsR0FDQUQsZUFBQUUsT0FB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QUFBakUsRUFBQXVFLEVBQUFNLGtCQUFBN0UsQ0FBQSxHQUNBdUUsRUFBQU8sYUFBQXJELEtBQUFzQyxtQkFBQXRDLEtBQUFzQyxtQkFBQXBELE9BQUFYLEdBQUF1RSxFQUFBUSxVQUFBLEVBRUF0RCxLQUFBVyxjQUFBLG9CQUFBLEVBQUErQixTQUFBLENBQUEsQ0FDQSxDQUVBMUMsS0FBQVcsY0FBQSx5QkFBQSxFQUFBNEMsVUFBQVQsRUFBQVMsVUFDQXZELEtBQUF5QyxhQUFBLEdBRUF6QyxLQUFBeUMsY0FBQXpDLEtBQUF3QyxjQUFBeEMsS0FBQXNDLG1CQUFBcEQsT0FBQWMsS0FBQXdDLGdCQUNBeEMsS0FBQVcsY0FBQSxvQkFBQSxFQUFBK0IsU0FBQSxDQUFBLEVBQ0ExQyxLQUFBVSxpQkFBQSxFQUVBLENBQ0EsQ0FBQSxFQUFBLEVBQUFqQixDQUFBLEVBdEVBLENBd0VBLENDR0EsRUFBRSxHQUFHLEVBQUUsR0QzRFAsQ0FBQSxFQUFBIiwiZmlsZSI6InNlY3Rpb24tYmVzdC1zZWxsZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsImlmICghY3VzdG9tRWxlbWVudHMuZ2V0KCdiZXN0LXNlbGxlcnMnKSkge1xyXG4gIGN1c3RvbUVsZW1lbnRzLmRlZmluZSgnYmVzdC1zZWxsZXJzJywgY2xhc3MgU0Jlc3QgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XHJcblxyXG4gICAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICB9XHJcbiAgICAgICBuYW1lQ29sbGVjdGlvbiA9IHRoaXMuZGF0YXNldC5jb2xsZWN0aW9uXHJcbiAgICAgICBjb3VudFByb2R1Y3RzID0gdGhpcy5kYXRhc2V0LmNvdW50XHJcbiAgICAgICBudW1iZXJQYWdlID0gMVxyXG4gICAgICAgY291bnRMb2FkTW9yZSA9IDFcclxuICAgICAgIGNvdW50Q29sbGVjdGlvblByb2R1Y3RzID0gbnVsbFxyXG4gICAgICAgY29sbGVjdGlvblByb2R1Y3RzID0gW11cclxuICAgICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XHJcblxyXG4gICAgICAgIHRoaXMudXBkYXRlQ29sbGVjdGlvbigpXHJcblxyXG4gICAgICAgIHRoaXMucXVlcnlTZWxlY3RvcignLmJlc3Qtc2VsbGVyc19fYnRuJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKT0+IHRoaXMubG9hZE1vcmUoKSlcclxuICAgICAgfVxyXG5cclxuICAgICAgdXBkYXRlQ29sbGVjdGlvbigpe1xyXG4gICAgICAgIGlmKHRoaXMuY291bnRDb2xsZWN0aW9uUHJvZHVjdHMgIT09IGZhbHNlKXtcclxuICAgICAgICBmZXRjaCh3aW5kb3cudGhlbWUuc2hvcFVybCArIGAvY29sbGVjdGlvbnMvJHt0aGlzLm5hbWVDb2xsZWN0aW9ufT9wYWdlPSR7dGhpcy5udW1iZXJQYWdlfWApXHJcbiAgICAgICAgICAudGhlbigocmVzKSA9PiByZXMudGV4dCgpKVxyXG4gICAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaHRtbCA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoZGF0YSwgXCJ0ZXh0L2h0bWxcIik7XHJcbiAgICAgICAgICAgIGh0bWwucXVlcnlTZWxlY3RvckFsbCgnLm1haW4tY29sbGVjdGlvbl9fcHJvZHVjdCcpLmZvckVhY2goZWwgPT4gZWwuY2xhc3NMaXN0LnZhbHVlID0gJ2Jlc3Qtc2VsbGVyc19fcHJvZHVjdCcgKVxyXG4gICAgICAgICAgICBjb25zdCBwcm9kdWN0cyA9IEFycmF5LmZyb20oaHRtbC5xdWVyeVNlbGVjdG9yQWxsKCcuYmVzdC1zZWxsZXJzX19wcm9kdWN0JykpXHJcbiAgICAgICAgICAgIHRoaXMuY291bnRDb2xsZWN0aW9uUHJvZHVjdHMgPSB0aGlzLmNvdW50Q29sbGVjdGlvblByb2R1Y3RzID8/IHByb2R1Y3RzLmxlbmd0aFxyXG5cclxuICAgICAgICAgICAgaWYodGhpcy5jb3VudENvbGxlY3Rpb25Qcm9kdWN0cyA+IHByb2R1Y3RzLmxlbmd0aCl0aGlzLmNvdW50Q29sbGVjdGlvblByb2R1Y3RzID0gZmFsc2VcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY29sbGVjdGlvblByb2R1Y3RzID0gWy4uLnRoaXMuY29sbGVjdGlvblByb2R1Y3RzLCAuLi5wcm9kdWN0c11cclxuICAgICAgICAgICAgdGhpcy5udW1iZXJQYWdlKytcclxuXHJcbiAgICAgICAgICAgIGlmKCh0aGlzLmNvbGxlY3Rpb25Qcm9kdWN0cy5sZW5ndGggPCAoKHRoaXMuY291bnRQcm9kdWN0cyAqIHRoaXMuY291bnRMb2FkTW9yZSkgKyAoK3RoaXMuY291bnRQcm9kdWN0cykpKSl7XHJcbiAgICAgICAgICAgICAgdGhpcy51cGRhdGVDb2xsZWN0aW9uKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoJy5iZXN0LXNlbGxlcnNfX2J0bicpLmRpc2FibGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxvYWRNb3JlKCl7XHJcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5jb2xsZWN0aW9uUHJvZHVjdHMubGVuZ3RoKTtcclxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmNvdW50TG9hZE1vcmUpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuY291bnRQcm9kdWN0cyk7XHJcbiAgICAgICAgaWYodGhpcy5jb2xsZWN0aW9uUHJvZHVjdHMubGVuZ3RoID4gKHRoaXMuY291bnRMb2FkTW9yZSAqIHRoaXMuY291bnRQcm9kdWN0cykpe1xyXG4gICAgICAgICAgY29uc3QgbmV3UHJvZHVjdHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxyXG4gICAgICAgICAgdGhpcy5jb2xsZWN0aW9uUHJvZHVjdHMuZm9yRWFjaCgocHJvZHVjdCwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgaWYoaW5kZXggPj0gdGhpcy5jb3VudFByb2R1Y3RzICogdGhpcy5jb3VudExvYWRNb3JlICYmIGluZGV4IDwgKHRoaXMuY291bnRQcm9kdWN0cyAqIHRoaXMuY291bnRMb2FkTW9yZSkgKyAoK3RoaXMuY291bnRQcm9kdWN0cykpe1xyXG4gICAgICAgICAgICAgIG5ld1Byb2R1Y3RzLmFwcGVuZENoaWxkKHByb2R1Y3QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KVxyXG5cclxuXHJcbiAgICAgICAgICBpZihuZXdQcm9kdWN0cy5jaGlsZEVsZW1lbnRDb3VudCA8IHRoaXMuY291bnRQcm9kdWN0cyl7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSB0aGlzLmNvdW50UHJvZHVjdHM7IGkgPiBuZXdQcm9kdWN0cy5jaGlsZEVsZW1lbnRDb3VudDsgaS0tKXtcclxuICAgICAgICAgICAgICBuZXdQcm9kdWN0cy5pbnNlcnRCZWZvcmUodGhpcy5jb2xsZWN0aW9uUHJvZHVjdHNbdGhpcy5jb2xsZWN0aW9uUHJvZHVjdHMubGVuZ3RoLWldLCBuZXdQcm9kdWN0cy5maXJzdENoaWxkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoJy5iZXN0LXNlbGxlcnNfX2J0bicpLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoJy5iZXN0LXNlbGxlcnNfX3Byb2R1Y3RzJykuaW5uZXJIVE1MID0gbmV3UHJvZHVjdHMuaW5uZXJIVE1MXHJcbiAgICAgICAgICB0aGlzLmNvdW50TG9hZE1vcmUrK1xyXG5cclxuICAgICAgICAgIGlmKCB0aGlzLmNvdW50TG9hZE1vcmUgKiB0aGlzLmNvdW50UHJvZHVjdHMgPiB0aGlzLmNvbGxlY3Rpb25Qcm9kdWN0cy5sZW5ndGggLSB0aGlzLmNvdW50UHJvZHVjdHMgKXtcclxuICAgICAgICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKCcuYmVzdC1zZWxsZXJzX19idG4nKS5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ29sbGVjdGlvbigpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgKVxyXG59IiwiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSh7MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5pZiAoIWN1c3RvbUVsZW1lbnRzLmdldCgnYmVzdC1zZWxsZXJzJykpIHtcclxuICBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ2Jlc3Qtc2VsbGVycycsIGNsYXNzIFNCZXN0IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xyXG5cclxuICAgICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgfVxyXG4gICAgICAgbmFtZUNvbGxlY3Rpb24gPSB0aGlzLmRhdGFzZXQuY29sbGVjdGlvblxyXG4gICAgICAgY291bnRQcm9kdWN0cyA9IHRoaXMuZGF0YXNldC5jb3VudFxyXG4gICAgICAgbnVtYmVyUGFnZSA9IDFcclxuICAgICAgIGNvdW50TG9hZE1vcmUgPSAxXHJcbiAgICAgICBjb3VudENvbGxlY3Rpb25Qcm9kdWN0cyA9IG51bGxcclxuICAgICAgIGNvbGxlY3Rpb25Qcm9kdWN0cyA9IFtdXHJcbiAgICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xyXG5cclxuICAgICAgICB0aGlzLnVwZGF0ZUNvbGxlY3Rpb24oKVxyXG5cclxuICAgICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoJy5iZXN0LXNlbGxlcnNfX2J0bicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCk9PiB0aGlzLmxvYWRNb3JlKCkpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHVwZGF0ZUNvbGxlY3Rpb24oKXtcclxuICAgICAgICBpZih0aGlzLmNvdW50Q29sbGVjdGlvblByb2R1Y3RzICE9PSBmYWxzZSl7XHJcbiAgICAgICAgZmV0Y2god2luZG93LnRoZW1lLnNob3BVcmwgKyBgL2NvbGxlY3Rpb25zLyR7dGhpcy5uYW1lQ29sbGVjdGlvbn0/cGFnZT0ke3RoaXMubnVtYmVyUGFnZX1gKVxyXG4gICAgICAgICAgLnRoZW4oKHJlcykgPT4gcmVzLnRleHQoKSlcclxuICAgICAgICAgIC50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGh0bWwgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKGRhdGEsIFwidGV4dC9odG1sXCIpO1xyXG4gICAgICAgICAgICBodG1sLnF1ZXJ5U2VsZWN0b3JBbGwoJy5tYWluLWNvbGxlY3Rpb25fX3Byb2R1Y3QnKS5mb3JFYWNoKGVsID0+IGVsLmNsYXNzTGlzdC52YWx1ZSA9ICdiZXN0LXNlbGxlcnNfX3Byb2R1Y3QnIClcclxuICAgICAgICAgICAgY29uc3QgcHJvZHVjdHMgPSBBcnJheS5mcm9tKGh0bWwucXVlcnlTZWxlY3RvckFsbCgnLmJlc3Qtc2VsbGVyc19fcHJvZHVjdCcpKVxyXG4gICAgICAgICAgICB0aGlzLmNvdW50Q29sbGVjdGlvblByb2R1Y3RzID0gdGhpcy5jb3VudENvbGxlY3Rpb25Qcm9kdWN0cyA/PyBwcm9kdWN0cy5sZW5ndGhcclxuXHJcbiAgICAgICAgICAgIGlmKHRoaXMuY291bnRDb2xsZWN0aW9uUHJvZHVjdHMgPiBwcm9kdWN0cy5sZW5ndGgpdGhpcy5jb3VudENvbGxlY3Rpb25Qcm9kdWN0cyA9IGZhbHNlXHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbGxlY3Rpb25Qcm9kdWN0cyA9IFsuLi50aGlzLmNvbGxlY3Rpb25Qcm9kdWN0cywgLi4ucHJvZHVjdHNdXHJcbiAgICAgICAgICAgIHRoaXMubnVtYmVyUGFnZSsrXHJcblxyXG4gICAgICAgICAgICBpZigodGhpcy5jb2xsZWN0aW9uUHJvZHVjdHMubGVuZ3RoIDwgKCh0aGlzLmNvdW50UHJvZHVjdHMgKiB0aGlzLmNvdW50TG9hZE1vcmUpICsgKCt0aGlzLmNvdW50UHJvZHVjdHMpKSkpe1xyXG4gICAgICAgICAgICAgIHRoaXMudXBkYXRlQ29sbGVjdGlvbigpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKCcuYmVzdC1zZWxsZXJzX19idG4nKS5kaXNhYmxlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBsb2FkTW9yZSgpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuY29sbGVjdGlvblByb2R1Y3RzLmxlbmd0aCk7XHJcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5jb3VudExvYWRNb3JlKTtcclxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmNvdW50UHJvZHVjdHMpO1xyXG4gICAgICAgIGlmKHRoaXMuY29sbGVjdGlvblByb2R1Y3RzLmxlbmd0aCA+ICh0aGlzLmNvdW50TG9hZE1vcmUgKiB0aGlzLmNvdW50UHJvZHVjdHMpKXtcclxuICAgICAgICAgIGNvbnN0IG5ld1Byb2R1Y3RzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcclxuICAgICAgICAgIHRoaXMuY29sbGVjdGlvblByb2R1Y3RzLmZvckVhY2goKHByb2R1Y3QsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIGlmKGluZGV4ID49IHRoaXMuY291bnRQcm9kdWN0cyAqIHRoaXMuY291bnRMb2FkTW9yZSAmJiBpbmRleCA8ICh0aGlzLmNvdW50UHJvZHVjdHMgKiB0aGlzLmNvdW50TG9hZE1vcmUpICsgKCt0aGlzLmNvdW50UHJvZHVjdHMpKXtcclxuICAgICAgICAgICAgICBuZXdQcm9kdWN0cy5hcHBlbmRDaGlsZChwcm9kdWN0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSlcclxuXHJcblxyXG4gICAgICAgICAgaWYobmV3UHJvZHVjdHMuY2hpbGRFbGVtZW50Q291bnQgPCB0aGlzLmNvdW50UHJvZHVjdHMpe1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5jb3VudFByb2R1Y3RzOyBpID4gbmV3UHJvZHVjdHMuY2hpbGRFbGVtZW50Q291bnQ7IGktLSl7XHJcbiAgICAgICAgICAgICAgbmV3UHJvZHVjdHMuaW5zZXJ0QmVmb3JlKHRoaXMuY29sbGVjdGlvblByb2R1Y3RzW3RoaXMuY29sbGVjdGlvblByb2R1Y3RzLmxlbmd0aC1pXSwgbmV3UHJvZHVjdHMuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKCcuYmVzdC1zZWxsZXJzX19idG4nKS5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKCcuYmVzdC1zZWxsZXJzX19wcm9kdWN0cycpLmlubmVySFRNTCA9IG5ld1Byb2R1Y3RzLmlubmVySFRNTFxyXG4gICAgICAgICAgdGhpcy5jb3VudExvYWRNb3JlKytcclxuXHJcbiAgICAgICAgICBpZiggdGhpcy5jb3VudExvYWRNb3JlICogdGhpcy5jb3VudFByb2R1Y3RzID4gdGhpcy5jb2xsZWN0aW9uUHJvZHVjdHMubGVuZ3RoIC0gdGhpcy5jb3VudFByb2R1Y3RzICl7XHJcbiAgICAgICAgICAgIHRoaXMucXVlcnlTZWxlY3RvcignLmJlc3Qtc2VsbGVyc19fYnRuJykuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUNvbGxlY3Rpb24oKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIClcclxufVxufSx7fV19LHt9LFsxXSlcblxuIl19
