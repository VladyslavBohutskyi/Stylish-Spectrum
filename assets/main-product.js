"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return _arrayWithoutHoles(t)||_iterableToArray(t)||_unsupportedIterableToArray(t)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(t,e){var r;if(t)return"string"==typeof t?_arrayLikeToArray(t,e):"Map"===(r="Object"===(r=Object.prototype.toString.call(t).slice(8,-1))&&t.constructor?t.constructor.name:r)||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(t,e):void 0}function _iterableToArray(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}function _arrayWithoutHoles(t){if(Array.isArray(t))return _arrayLikeToArray(t)}function _arrayLikeToArray(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,_toPropertyKey(n.key),n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function _toPropertyKey(t){t=_toPrimitive(t,"string");return"symbol"===_typeof(t)?t:String(t)}function _toPrimitive(t,e){if("object"!==_typeof(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0===r)return("string"===e?String:Number)(t);r=r.call(t,e||"default");if("object"!==_typeof(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&_setPrototypeOf(t,e)}function _createSuper(r){var n=_isNativeReflectConstruct();return function(){var t,e=_getPrototypeOf(r);return _possibleConstructorReturn(this,n?(t=_getPrototypeOf(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments))}}function _possibleConstructorReturn(t,e){if(e&&("object"===_typeof(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t)}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _wrapNativeSuper(t){var r="function"==typeof Map?new Map:void 0;return(_wrapNativeSuper=function(t){if(null===t||!_isNativeFunction(t))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==r){if(r.has(t))return r.get(t);r.set(t,e)}function e(){return _construct(t,arguments,_getPrototypeOf(this).constructor)}return e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),_setPrototypeOf(e,t)})(t)}function _construct(t,e,r){return(_construct=_isNativeReflectConstruct()?Reflect.construct.bind():function(t,e,r){var n=[null];n.push.apply(n,e);e=new(Function.bind.apply(t,n));return r&&_setPrototypeOf(e,r.prototype),e}).apply(null,arguments)}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return!1}}function _isNativeFunction(t){return-1!==Function.toString.call(t).indexOf("[native code]")}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}!function n(o,i,u){function c(e,t){if(!i[e]){if(!o[e]){var r="function"==typeof require&&require;if(!t&&r)return r(e,!0);if(a)return a(e,!0);throw(t=new Error("Cannot find module '"+e+"'")).code="MODULE_NOT_FOUND",t}r=i[e]={exports:{}},o[e][0].call(r.exports,function(t){return c(o[e][1][t]||t)},r,r.exports,n,o,i,u)}return i[e].exports}for(var a="function"==typeof require&&require,t=0;t<u.length;t++)c(u[t]);return c}({1:[function(t,e,r){t("./scripts/pubsub");customElements.get("main-product")||customElements.define("main-product",function(){_inherits(e,_wrapNativeSuper(HTMLElement));var t=_createSuper(e);function e(){return _classCallCheck(this,e),t.call(this)}return _createClass(e,[{key:"connectedCallback",value:function(){var e=this;this.variants=JSON.parse(this.getAttribute("data-variants")),this.options=this.querySelectorAll(".variants-option"),this.options.forEach(function(t){t.addEventListener("change",function(){e.variantOnClick()})}),this.changeCount(),this.querySelector(".add_to_cart").addEventListener("click",this.addToCart.bind(this)),PubSub.subscribe(PubSub.EVENTS.cartUpdated,this.showDrawer),this.initSliders()}},{key:"addToCart",value:function(){var t=this.querySelector(".shopify-product-form"),e=window.theme.shopUrl+window.theme.routes.cart_add_url,t={method:"POST",body:new FormData(t)};fetch(e,t).then(function(t){t.ok&&PubSub.publish(PubSub.EVENTS.cartUpdated)})}},{key:"initSliders",value:function(){this.slider=new Flickity(this.querySelector(".main-product__gallery-slider"),{contain:!1,wrapAround:!0,pageDots:!1,prevNextButtons:!1,percentPosition:!1});var t={asNavFor:this.querySelector(".main-product__gallery-slider"),contain:!1,wrapAround:!0,pageDots:!1,prevNextButtons:!1,percentPosition:!1};this.sliderNav=new Flickity(this.querySelector(".main-product__gallery-slider_nav"),t)}},{key:"showDrawer",value:function(){console.log("cartDrawer")}},{key:"changeCount",value:function(){var t=this.querySelector("#product-quantity"),e=this.querySelector(".product-count__value"),r=this.querySelector(".product-count__minus"),n=this.querySelector(".product-count__plus");r.addEventListener("click",function(){1<e.value&&(e.value=-1),t.value=e.value}),n.addEventListener("click",function(){e.value=+e.value+1,t.value=e.value})}},{key:"variantOnClick",value:function(){var n=this,e="",o=(this.options.forEach(function(t){e+="".concat(t.querySelector("input:checked").value," / ")}),e=e.slice(0,-3),"");this.variants.map(function(r){var t;r.title==e&&(o=r.id,history.replaceState(null,null,window.location.pathname+"?variant="+r.id),n.querySelectorAll(".main-product__gallery-slider .flickity-slider img").forEach(function(t,e){t.getAttribute("src")==r.featured_image.src&&n.slider.select(e)}),t=n.querySelector(".main-product__content_price").innerHTML[0],n.querySelector(".main-product__content_price").innerHTML="".concat(t+(r.price/100).toFixed(2)),r.available?n.querySelector(".main-product").classList.remove("sold-out"):n.querySelector(".main-product").classList.add("sold-out"))}),this.querySelector("#variant-select").value=o}}]),e}())},{"./scripts/pubsub":2}],2:[function(t,e,r){e.exports={EVENTS:{cartUpdated:"cart-updated"},subscribers:{},subscribe:function(t,e){var r=this;return void 0===this.subscribers[t]&&(this.subscribers[t]=[]),this.subscribers[t]=[].concat(_toConsumableArray(this.subscribers[t]),[e]),function(){r.subscribers[t]=r.subscribers[t].filter(function(t){return t!==e})}},publish:function(t,e){this.subscribers[t]&&this.subscribers[t].forEach(function(t){t(e)})}}},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
