"use strict";function ownKeys(e,t){var i,n=Object.keys(e);return Object.getOwnPropertySymbols&&(i=Object.getOwnPropertySymbols(e),t&&(i=i.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,i)),n}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(i),!0).forEach(function(t){_defineProperty(e,t,i[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):ownKeys(Object(i)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))})}return e}function _defineProperty(t,e,i){return(e=_toPropertyKey(e))in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function _toPropertyKey(t){t=_toPrimitive(t,"string");return"symbol"===_typeof(t)?t:String(t)}function _toPrimitive(t,e){if("object"!==_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0===i)return("string"===e?String:Number)(t);i=i.call(t,e||"default");if("object"!==_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}function _toConsumableArray(t){return _arrayWithoutHoles(t)||_iterableToArray(t)||_unsupportedIterableToArray(t)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArray(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}function _arrayWithoutHoles(t){if(Array.isArray(t))return _arrayLikeToArray(t)}function _createForOfIteratorHelper(t,e){var i,n,s,o,r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(r)return n=!(i=!0),{s:function(){r=r.call(t)},n:function(){var t=r.next();return i=t.done,t},e:function(t){n=!0,s=t},f:function(){try{i||null==r.return||r.return()}finally{if(n)throw s}}};if(Array.isArray(t)||(r=_unsupportedIterableToArray(t))||e&&t&&"number"==typeof t.length)return r&&(t=r),o=0,{s:e=function(){},n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:e};throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(t,e){var i;if(t)return"string"==typeof t?_arrayLikeToArray(t,e):"Map"===(i="Object"===(i=Object.prototype.toString.call(t).slice(8,-1))&&t.constructor?t.constructor.name:i)||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?_arrayLikeToArray(t,e):void 0}function _arrayLikeToArray(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,n=new Array(e);i<e;i++)n[i]=t[i];return n}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}!function n(s,o,r){function a(e,t){if(!o[e]){if(!s[e]){var i="function"==typeof require&&require;if(!t&&i)return i(e,!0);if(l)return l(e,!0);throw(t=new Error("Cannot find module '"+e+"'")).code="MODULE_NOT_FOUND",t}i=o[e]={exports:{}},s[e][0].call(i.exports,function(t){return a(s[e][1][t]||t)},i,i.exports,n,s,o,r)}return o[e].exports}for(var l="function"==typeof require&&require,t=0;t<r.length;t++)a(r[t]);return a}({1:[function(t,e,i){var n,s;n=window,s=function(){var i=function(){var t=window.Element.prototype;if(t.matches)return"matches";if(t.matchesSelector)return"matchesSelector";for(var e=["webkit","moz","ms","o"],i=0;i<e.length;i++){var n=e[i]+"MatchesSelector";if(t[n])return n}}();return function(t,e){return t[i](e)}},"function"==typeof define&&define.amd?define(s):"object"==_typeof(e)&&e.exports?e.exports=s():n.matchesSelector=s()},{}],2:[function(t,e,i){var n,s;n="undefined"!=typeof window?window:this,s=function(){function t(){}var e=t.prototype;return e.on=function(t,e){var i;return t&&e&&((i=(i=this._events=this._events||{})[t]=i[t]||[]).includes(e)||i.push(e)),this},e.once=function(t,e){var i;return t&&e&&(this.on(t,e),((i=this._onceEvents=this._onceEvents||{})[t]=i[t]||{})[e]=!0),this},e.off=function(t,e){t=this._events&&this._events[t];return t&&t.length&&-1!=(e=t.indexOf(e))&&t.splice(e,1),this},e.emitEvent=function(t,e){var i=this._events&&this._events[t];if(i&&i.length){i=i.slice(0),e=e||[];var n,s=this._onceEvents&&this._onceEvents[t],o=_createForOfIteratorHelper(i);try{for(o.s();!(n=o.n()).done;){var r=n.value;s&&s[r]&&(this.off(t,r),delete s[r]),r.apply(this,e)}}catch(t){o.e(t)}finally{o.f()}}return this},e.allOff=function(){return delete this._events,delete this._onceEvents,this},t},"object"==_typeof(e)&&e.exports?e.exports=s():n.EvEmitter=s()},{}],3:[function(t,e,i){var n,s;n=this,s=function(e){var i={extend:function(t,e){return Object.assign(t,e)},modulo:function(t,e){return(t%e+e)%e},makeArray:function(t){return Array.isArray(t)?t:null==t?[]:"object"==_typeof(t)&&"number"==typeof t.length?_toConsumableArray(t):[t]},removeFrom:function(t,e){e=t.indexOf(e);-1!=e&&t.splice(e,1)},getParent:function(t,e){for(;t.parentNode&&t!=document.body;)if((t=t.parentNode).matches(e))return t},getQueryElement:function(t){return"string"==typeof t?document.querySelector(t):t},handleEvent:function(t){var e="on"+t.type;this[e]&&this[e](t)},filterFindElements:function(t,n){return(t=i.makeArray(t)).filter(function(t){return t instanceof HTMLElement}).reduce(function(t,e){var i;return n?(e.matches(n)&&t.push(e),i=e.querySelectorAll(n),t=t.concat.apply(t,_toConsumableArray(i))):t.push(e),t},[])},debounceMethod:function(t,e,i){i=i||100;var n=t.prototype[e],s=e+"Timeout";t.prototype[e]=function(){var t=this,e=(clearTimeout(this[s]),arguments);this[s]=setTimeout(function(){n.apply(t,e),delete t[s]},i)}},docReady:function(t){var e=document.readyState;"complete"==e||"interactive"==e?setTimeout(t):document.addEventListener("DOMContentLoaded",t)},toDashed:function(t){return t.replace(/(.)([A-Z])/g,function(t,e,i){return e+"-"+i}).toLowerCase()}},a=e.console;return i.htmlInit=function(o,r){i.docReady(function(){var n="data-"+i.toDashed(r),t=document.querySelectorAll("[".concat(n,"]")),s=e.jQuery;_toConsumableArray(t).forEach(function(e){var t,i=e.getAttribute(n);try{t=i&&JSON.parse(i)}catch(t){return void(a&&a.error("Error parsing ".concat(n," on ").concat(e.className,": ").concat(t)))}i=new o(e,t);s&&s.data(e,r,i)})})},i},"object"==_typeof(e)&&e.exports?e.exports=s(n):n.fizzyUIUtils=s(n)},{}],4:[function(t,e,i){var n,s;n=window,s=function(i,n){i.create.asNavFor=function(){var t=this,e=(this.on("activate",this.activateAsNavFor),this.on("deactivate",this.deactivateAsNavFor),this.on("destroy",this.destroyAsNavFor),this.options.asNavFor);e&&setTimeout(function(){t.setNavCompanion(e)})};var t=i.prototype;return t.setNavCompanion=function(t){var e=this,t=(t=n.getQueryElement(t),i.data(t));t&&t!==this&&(this.navCompanion=t,this.onNavCompanionSelect=function(){e.navCompanionSelect()},t.on("select",this.onNavCompanionSelect),this.on("staticClick",this.onNavStaticClick),this.navCompanionSelect(!0))},t.navCompanionSelect=function(t){var e,i,n=this.navCompanion&&this.navCompanion.selectedCells;n&&(e=n[0],e=this.navCompanion.cells.indexOf(e),n=e+n.length-1,i=Math.floor((i=this.navCompanion.cellAlign,(n-e)*i+e)),this.selectCell(i,!1,t),this.removeNavSelectedElements(),i>=this.cells.length||(t=this.cells.slice(e,1+n),this.navSelectedElements=t.map(function(t){return t.element}),this.changeNavSelectedClass("add")))},t.changeNavSelectedClass=function(e){this.navSelectedElements.forEach(function(t){t.classList[e]("is-nav-selected")})},t.activateAsNavFor=function(){this.navCompanionSelect(!0)},t.removeNavSelectedElements=function(){this.navSelectedElements&&(this.changeNavSelectedClass("remove"),delete this.navSelectedElements)},t.onNavStaticClick=function(t,e,i,n){"number"==typeof n&&this.navCompanion.selectCell(n)},t.deactivateAsNavFor=function(){this.removeNavSelectedElements()},t.destroyAsNavFor=function(){this.navCompanion&&(this.navCompanion.off("select",this.onNavCompanionSelect),this.off("staticClick",this.onNavStaticClick),delete this.navCompanion)},i},"object"==_typeof(e)&&e.exports?e.exports=s(t("flickity"),t("fizzy-ui-utils")):n.Flickity=s(n.Flickity,n.fizzyUIUtils)},{"fizzy-ui-utils":3,flickity:29}],5:[function(t,e,i){var n,s;n="undefined"!=typeof window?window:this,s=function(t){t.create.fullscreen=function(){this.isFullscreen=!1,this.options.fullscreen&&(this.viewFullscreenButton=new n("view",this),this.exitFullscreenButton=new n("exit",this),this.on("activate",this._changeFullscreenActive),this.on("deactivate",this._changeFullscreenActive))};var e=t.prototype,i=(e._changeFullscreenActive=function(){var t=this.isActive?"appendChild":"removeChild",t=(this.element[t](this.viewFullscreenButton.element),this.element[t](this.exitFullscreenButton.element),this.isActive?"activate":"deactivate");this.viewFullscreenButton[t](),this.exitFullscreenButton[t]()},e.viewFullscreen=function(){this._changeFullscreen(!0),this.focus()},e.exitFullscreen=function(){this._changeFullscreen(!1)},e._changeFullscreen=function(t){var e;this.isFullscreen!==t&&(e=(this.isFullscreen=t)?"add":"remove",document.documentElement.classList[e]("is-flickity-fullscreen"),this.element.classList[e]("is-fullscreen"),this.resize(),this.isFullscreen&&this.reposition(),this.dispatchEvent("fullscreenChange",null,[t]))},e.toggleFullscreen=function(){this._changeFullscreen(!this.isFullscreen)},e.setGallerySize);function n(t,e){this.name=t,this.createButton(),this.createIcon(),this.onClick=function(){e[t+"Fullscreen"]()},this.clickHandler=this.onClick.bind(this)}e.setGallerySize=function(){this.options.setGallerySize&&(this.isFullscreen?this.viewport.style.height="":i.call(this))},t.keyboardHandlers[27]=function(){this.exitFullscreen()},n.prototype.createButton=function(){var t=this.element=document.createElement("button"),e=(t.className="flickity-button flickity-fullscreen-button flickity-fullscreen-button-"+this.name,t.setAttribute("type","button"),(e=this.name+" full-screen")[0].toUpperCase()+e.slice(1));t.setAttribute("aria-label",e),t.title=e};var s="http://www.w3.org/2000/svg",o={view:"M15,20,7,28h5v4H0V20H4v5l8-8Zm5-5,8-8v5h4V0H20V4h5l-8,8Z",exit:"M32,3l-7,7h5v4H18V2h4V7l7-7ZM3,32l7-7v5h4V18H2v4H7L0,29Z"};return n.prototype.createIcon=function(){var t=document.createElementNS(s,"svg"),e=(t.setAttribute("class","flickity-button-icon"),t.setAttribute("viewBox","0 0 32 32"),document.createElementNS(s,"path")),i=o[this.name];e.setAttribute("d",i),t.appendChild(e),this.element.appendChild(t)},n.prototype.activate=function(){this.element.addEventListener("click",this.clickHandler)},n.prototype.deactivate=function(){this.element.removeEventListener("click",this.clickHandler)},t.FullscreenButton=n,t},"object"==_typeof(e)&&e.exports?e.exports=s(t("flickity")):s(n.Flickity)},{flickity:29}],6:[function(t,e,i){var n,s;n=window,s=function(t,e,n){e.createMethods.push("_createImagesLoaded");var i=e.prototype;return i._createImagesLoaded=function(){this.on("activate",this.imagesLoaded)},i.imagesLoaded=function(){var i;this.options.imagesLoaded&&n((i=this).slider).on("progress",function(t,e){e=i.getParentCell(e.img),i.cellSizeChange(e&&e.element),i.options.freeScroll||i.positionSliderAtSelected()})},e},"function"==typeof define&&define.amd?define(["flickity/js/index","imagesloaded/imagesloaded"],function(t,e){return s(0,t,e)}):"object"==_typeof(e)&&e.exports?e.exports=s(0,t("flickity"),t("imagesloaded")):n.Flickity=s(0,n.Flickity,n.imagesLoaded)},{flickity:14,imagesloaded:21}],7:[function(t,e,i){var n,s;n="undefined"!=typeof window?window:this,s=function(){function t(){}var e=t.prototype;return e.on=function(t,e){var i;if(t&&e)return-1==(i=(i=this._events=this._events||{})[t]=i[t]||[]).indexOf(e)&&i.push(e),this},e.once=function(t,e){var i;if(t&&e)return this.on(t,e),((i=this._onceEvents=this._onceEvents||{})[t]=i[t]||{})[e]=!0,this},e.off=function(t,e){t=this._events&&this._events[t];if(t&&t.length)return-1!=(e=t.indexOf(e))&&t.splice(e,1),this},e.emitEvent=function(t,e){var i=this._events&&this._events[t];if(i&&i.length){i=i.slice(0),e=e||[];for(var n=this._onceEvents&&this._onceEvents[t],s=0;s<i.length;s++){var o=i[s];n&&n[o]&&(this.off(t,o),delete n[o]),o.apply(this,e)}return this}},e.allOff=function(){delete this._events,delete this._onceEvents},t},"function"==typeof define&&define.amd?define(s):"object"==_typeof(e)&&e.exports?e.exports=s():n.EvEmitter=s()},{}],8:[function(t,e,i){var n,s;n=window,s=function(i,o){var l={extend:function(t,e){for(var i in e)t[i]=e[i];return t},modulo:function(t,e){return(t%e+e)%e}},e=Array.prototype.slice,h=(l.makeArray=function(t){return Array.isArray(t)?t:null==t?[]:"object"==_typeof(t)&&"number"==typeof t.length?e.call(t):[t]},l.removeFrom=function(t,e){e=t.indexOf(e);-1!=e&&t.splice(e,1)},l.getParent=function(t,e){for(;t.parentNode&&t!=document.body;)if(t=t.parentNode,o(t,e))return t},l.getQueryElement=function(t){return"string"==typeof t?document.querySelector(t):t},l.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},l.filterFindElements=function(t,n){t=l.makeArray(t);var s=[];return t.forEach(function(t){if(t instanceof HTMLElement)if(n){o(t,n)&&s.push(t);for(var e=t.querySelectorAll(n),i=0;i<e.length;i++)s.push(e[i])}else s.push(t)}),s},l.debounceMethod=function(t,e,n){n=n||100;var s=t.prototype[e],o=e+"Timeout";t.prototype[e]=function(){var t=this[o],e=(clearTimeout(t),arguments),i=this;this[o]=setTimeout(function(){s.apply(i,e),delete i[o]},n)}},l.docReady=function(t){var e=document.readyState;"complete"==e||"interactive"==e?setTimeout(t):document.addEventListener("DOMContentLoaded",t)},l.toDashed=function(t){return t.replace(/(.)([A-Z])/g,function(t,e,i){return e+"-"+i}).toLowerCase()},i.console);return l.htmlInit=function(r,a){l.docReady(function(){var t=l.toDashed(a),n="data-"+t,e=document.querySelectorAll("["+n+"]"),t=document.querySelectorAll(".js-"+t),e=l.makeArray(e).concat(l.makeArray(t)),s=n+"-options",o=i.jQuery;e.forEach(function(e){var t,i=e.getAttribute(n)||e.getAttribute(s);try{t=i&&JSON.parse(i)}catch(t){return void(h&&h.error("Error parsing "+n+" on "+e.className+": "+t))}i=new r(e,t);o&&o.data(e,a,i)})})},l},"function"==typeof define&&define.amd?define(["desandro-matches-selector/matches-selector"],function(t){return s(n,t)}):"object"==_typeof(e)&&e.exports?e.exports=s(n,t("desandro-matches-selector")):n.fizzyUIUtils=s(n,n.matchesSelector)},{"desandro-matches-selector":1}],9:[function(t,e,i){var n,s;n=window,s=function(t,e,n){var i=e.prototype;return i.insert=function(t,e){var i,n,s,o,r,t=this._makeCells(t);t&&t.length&&(i=this.cells.length,e=void 0===e?i:e,r=t,n=document.createDocumentFragment(),r.forEach(function(t){n.appendChild(t.element)}),r=n,(s=e==i)?this.slider.appendChild(r):(o=this.cells[e].element,this.slider.insertBefore(r,o)),0===e?this.cells=t.concat(this.cells):s?this.cells=this.cells.concat(t):(r=this.cells.splice(e,i-e),this.cells=this.cells.concat(t).concat(r)),this._sizeCells(t),this.cellChange(e,!0))},i.append=function(t){this.insert(t,this.cells.length)},i.prepend=function(t){this.insert(t,0)},i.remove=function(t){var i,t=this.getCells(t);t&&t.length&&(i=this.cells.length-1,t.forEach(function(t){t.remove();var e=this.cells.indexOf(t);i=Math.min(e,i),n.removeFrom(this.cells,t)},this),this.cellChange(i,!0))},i.cellSizeChange=function(t){var t=this.getCell(t);t&&(t.getSize(),t=this.cells.indexOf(t),this.cellChange(t))},i.cellChange=function(t,e){var i=this.selectedElement,i=(this._positionCells(t),this._getWrapShiftCells(),this.setGallerySize(),this.getCell(i));i&&(this.selectedIndex=this.getCellSlideIndex(i)),this.selectedIndex=Math.min(this.slides.length-1,this.selectedIndex),this.emitEvent("cellChange",[t]),this.select(this.selectedIndex),e&&this.positionSliderAtSelected()},e},"function"==typeof define&&define.amd?define(["./flickity","fizzy-ui-utils/utils"],function(t,e){return s(0,t,e)}):"object"==_typeof(e)&&e.exports?e.exports=s(0,t("./flickity"),t("fizzy-ui-utils")):s(0,n.Flickity,n.fizzyUIUtils)},{"./flickity":13,"fizzy-ui-utils":8}],10:[function(t,e,i){var n,s;n=window,s=function(t,e){var i={startAnimation:function(){this.isAnimating||(this.isAnimating=!0,this.restingFrames=0,this.animate())},animate:function(){this.applyDragForce(),this.applySelectedAttraction();var t,e=this.x;this.integratePhysics(),this.positionSlider(),this.settle(e),this.isAnimating&&(t=this,requestAnimationFrame(function(){t.animate()}))},positionSlider:function(){var t=this.x;this.options.wrapAround&&1<this.cells.length&&(t=e.modulo(t,this.slideableWidth),t-=this.slideableWidth,this.shiftWrapCells(t)),this.setTranslateX(t,this.isAnimating),this.dispatchScrollEvent()},setTranslateX:function(t,e){t+=this.cursorPosition,t=this.options.rightToLeft?-t:t;t=this.getPositionValue(t);this.slider.style.transform=e?"translate3d("+t+",0,0)":"translateX("+t+")"},dispatchScrollEvent:function(){var t,e=this.slides[0];e&&(t=(e=-this.x-e.target)/this.slidesWidth,this.dispatchEvent("scroll",null,[t,e]))},positionSliderAtSelected:function(){this.cells.length&&(this.x=-this.selectedSlide.target,this.velocity=0,this.positionSlider())},getPositionValue:function(t){return this.options.percentPosition?.01*Math.round(t/this.size.innerWidth*1e4)+"%":Math.round(t)+"px"},settle:function(t){this.isPointerDown||Math.round(100*this.x)!=Math.round(100*t)||this.restingFrames++,2<this.restingFrames&&(this.isAnimating=!1,delete this.isFreeScrolling,this.positionSlider(),this.dispatchEvent("settle",null,[this.selectedIndex]))},shiftWrapCells:function(t){var e=this.cursorPosition+t,e=(this._shiftCells(this.beforeShiftCells,e,-1),this.size.innerWidth-(t+this.slideableWidth+this.cursorPosition));this._shiftCells(this.afterShiftCells,e,1)},_shiftCells:function(t,e,i){for(var n=0;n<t.length;n++){var s=t[n];s.wrapShift(0<e?i:0),e-=s.size.outerWidth}},_unshiftCells:function(t){if(t&&t.length)for(var e=0;e<t.length;e++)t[e].wrapShift(0)},integratePhysics:function(){this.x+=this.velocity,this.velocity*=this.getFrictionFactor()},applyForce:function(t){this.velocity+=t},getFrictionFactor:function(){return 1-this.options[this.isFreeScrolling?"freeScrollFriction":"friction"]},getRestingPosition:function(){return this.x+this.velocity/(1-this.getFrictionFactor())},applyDragForce:function(){var t;this.isDraggable&&this.isPointerDown&&(t=this.dragX-this.x-this.velocity,this.applyForce(t))},applySelectedAttraction:function(){var t;this.isDraggable&&this.isPointerDown||this.isFreeScrolling||!this.slides.length||(t=(-1*this.selectedSlide.target-this.x)*this.options.selectedAttraction,this.applyForce(t))}};return i},"function"==typeof define&&define.amd?define(["fizzy-ui-utils/utils"],function(t){return s(0,t)}):"object"==_typeof(e)&&e.exports?e.exports=s(0,t("fizzy-ui-utils")):(n.Flickity=n.Flickity||{},n.Flickity.animatePrototype=s(0,n.fizzyUIUtils))},{"fizzy-ui-utils":8}],11:[function(t,e,i){var n,s;n=window,s=function(t,e){function i(t,e){this.element=t,this.parent=e,this.create()}var n=i.prototype;return n.create=function(){this.element.style.position="absolute",this.element.setAttribute("aria-hidden","true"),this.x=0,this.shift=0,this.element.style[this.parent.originSide]=0},n.destroy=function(){this.unselect(),this.element.style.position="";var t=this.parent.originSide;this.element.style[t]="",this.element.style.transform="",this.element.removeAttribute("aria-hidden")},n.getSize=function(){this.size=e(this.element)},n.setPosition=function(t){this.x=t,this.updateTarget(),this.renderPosition(t)},n.updateTarget=n.setDefaultTarget=function(){var t="left"==this.parent.originSide?"marginLeft":"marginRight";this.target=this.x+this.size[t]+this.size.width*this.parent.cellAlign},n.renderPosition=function(t){var e="left"===this.parent.originSide?1:-1,t=this.parent.options.percentPosition?t*e*(this.parent.size.innerWidth/this.size.width):t*e;this.element.style.transform="translateX("+this.parent.getPositionValue(t)+")"},n.select=function(){this.element.classList.add("is-selected"),this.element.removeAttribute("aria-hidden")},n.unselect=function(){this.element.classList.remove("is-selected"),this.element.setAttribute("aria-hidden","true")},n.wrapShift=function(t){this.shift=t,this.renderPosition(this.x+this.parent.slideableWidth*t)},n.remove=function(){this.element.parentNode.removeChild(this.element)},i},"function"==typeof define&&define.amd?define(["get-size/get-size"],function(t){return s(0,t)}):"object"==_typeof(e)&&e.exports?e.exports=s(0,t("get-size")):(n.Flickity=n.Flickity||{},n.Flickity.Cell=s(0,n.getSize))},{"get-size":20}],12:[function(t,e,i){var n,s;n=window,s=function(i,t,e,o){o.extend(t.defaults,{draggable:">1",dragThreshold:3}),t.createMethods.push("_createDrag");var n=t.prototype,s=(o.extend(n,e.prototype),n._touchActionValue="pan-y",n._createDrag=function(){this.on("activate",this.onActivateDrag),this.on("uiChange",this._uiChangeDrag),this.on("deactivate",this.onDeactivateDrag),this.on("cellChange",this.updateDraggable)},n.onActivateDrag=function(){this.handles=[this.viewport],this.bindHandles(),this.updateDraggable()},n.onDeactivateDrag=function(){this.unbindHandles(),this.element.classList.remove("is-draggable")},n.updateDraggable=function(){">1"==this.options.draggable?this.isDraggable=1<this.slides.length:this.isDraggable=this.options.draggable,this.isDraggable?this.element.classList.add("is-draggable"):this.element.classList.remove("is-draggable")},n.bindDrag=function(){this.options.draggable=!0,this.updateDraggable()},n.unbindDrag=function(){this.options.draggable=!1,this.updateDraggable()},n._uiChangeDrag=function(){delete this.isFreeScrolling},n.pointerDown=function(t,e){this.isDraggable?this.okayPointerDown(t)&&(this._pointerDownPreventDefault(t),this.pointerDownFocus(t),document.activeElement!=this.element&&this.pointerDownBlur(),this.dragX=this.x,this.viewport.classList.add("is-pointer-down"),this.pointerDownScroll=r(),i.addEventListener("scroll",this),this._pointerDownDefault(t,e)):this._pointerDownDefault(t,e)},n._pointerDownDefault=function(t,e){this.pointerDownPointer={pageX:e.pageX,pageY:e.pageY},this._bindPostStartEvents(t),this.dispatchEvent("pointerDown",t,[e])},{INPUT:!0,TEXTAREA:!0,SELECT:!0});function r(){return{x:i.pageXOffset,y:i.pageYOffset}}return n.pointerDownFocus=function(t){s[t.target.nodeName]||this.focus()},n._pointerDownPreventDefault=function(t){var e="touchstart"==t.type,i="touch"==t.pointerType,n=s[t.target.nodeName];e||i||n||t.preventDefault()},n.hasDragStarted=function(t){return Math.abs(t.x)>this.options.dragThreshold},n.pointerUp=function(t,e){delete this.isTouchScrolling,this.viewport.classList.remove("is-pointer-down"),this.dispatchEvent("pointerUp",t,[e]),this._dragPointerUp(t,e)},n.pointerDone=function(){i.removeEventListener("scroll",this),delete this.pointerDownScroll},n.dragStart=function(t,e){this.isDraggable&&(this.dragStartPosition=this.x,this.startAnimation(),i.removeEventListener("scroll",this),this.dispatchEvent("dragStart",t,[e]))},n.pointerMove=function(t,e){var i=this._dragPointerMove(t,e);this.dispatchEvent("pointerMove",t,[e,i]),this._dragMove(t,e,i)},n.dragMove=function(t,e,i){var n,s;this.isDraggable&&(t.preventDefault(),this.previousDragX=this.dragX,n=this.options.rightToLeft?-1:1,this.options.wrapAround&&(i.x%=this.slideableWidth),n=this.dragStartPosition+i.x*n,!this.options.wrapAround&&this.slides.length&&(n=(n=(s=Math.max(-this.slides[0].target,this.dragStartPosition))<n?.5*(n+s):n)<(s=Math.min(-this.getLastSlide().target,this.dragStartPosition))?.5*(n+s):n),this.dragX=n,this.dragMoveTime=new Date,this.dispatchEvent("dragMove",t,[e,i]))},n.dragEnd=function(t,e){var i,n;this.isDraggable&&(this.options.freeScroll&&(this.isFreeScrolling=!0),i=this.dragEndRestingSelect(),this.options.freeScroll&&!this.options.wrapAround?(n=this.getRestingPosition(),this.isFreeScrolling=-n>this.slides[0].target&&-n<this.getLastSlide().target):this.options.freeScroll||i!=this.selectedIndex||(i+=this.dragEndBoostSelect()),delete this.previousDragX,this.isDragSelect=this.options.wrapAround,this.select(i),delete this.isDragSelect,this.dispatchEvent("dragEnd",t,[e]))},n.dragEndRestingSelect=function(){var t=this.getRestingPosition(),e=Math.abs(this.getSlideDistance(-t,this.selectedIndex)),i=this._getClosestResting(t,e,1),t=this._getClosestResting(t,e,-1);return(i.distance<t.distance?i:t).index},n._getClosestResting=function(t,e,i){for(var n=this.selectedIndex,s=1/0,o=this.options.contain&&!this.options.wrapAround?function(t,e){return t<=e}:function(t,e){return t<e};o(e,s)&&(s=e,null!==(e=this.getSlideDistance(-t,n+=i)));)e=Math.abs(e);return{distance:s,index:n-i}},n.getSlideDistance=function(t,e){var i=this.slides.length,n=this.options.wrapAround&&1<i,s=n?o.modulo(e,i):e,s=this.slides[s];return s?(n=n?this.slideableWidth*Math.floor(e/i):0,t-(s.target+n)):null},n.dragEndBoostSelect=function(){var t,e;return void 0===this.previousDragX||!this.dragMoveTime||100<new Date-this.dragMoveTime?0:(t=this.getSlideDistance(-this.dragX,this.selectedIndex),e=this.previousDragX-this.dragX,0<t&&0<e?1:t<0&&e<0?-1:0)},n.staticClick=function(t,e){var i=this.getParentCell(t.target),n=i&&i.element,i=i&&this.cells.indexOf(i);this.dispatchEvent("staticClick",t,[e,n,i])},n.onscroll=function(){var t=r(),e=this.pointerDownScroll.x-t.x,t=this.pointerDownScroll.y-t.y;(3<Math.abs(e)||3<Math.abs(t))&&this._pointerDone()},t},"function"==typeof define&&define.amd?define(["./flickity","unidragger/unidragger","fizzy-ui-utils/utils"],function(t,e,i){return s(n,t,e,i)}):"object"==_typeof(e)&&e.exports?e.exports=s(n,t("./flickity"),t("unidragger"),t("fizzy-ui-utils")):n.Flickity=s(n,n.Flickity,n.Unidragger,n.fizzyUIUtils)},{"./flickity":13,"fizzy-ui-utils":8,unidragger:22}],13:[function(t,e,i){var r,a;r=window,a=function(n,t,e,r,i,a,s){var o=n.jQuery,l=n.getComputedStyle,h=n.console;function c(t,e){for(t=r.makeArray(t);t.length;)e.appendChild(t.shift())}var d=0,u={};function f(t,e){var i,n=r.getQueryElement(t);if(n){if(this.element=n,this.element.flickityGUID)return(i=u[this.element.flickityGUID])&&i.option(e),i;o&&(this.$element=o(this.element)),this.options=r.extend({},this.constructor.defaults),this.option(e),this._create()}else h&&h.error("Bad element for Flickity: "+(n||t))}f.defaults={accessibility:!0,cellAlign:"center",freeScrollFriction:.075,friction:.28,namespaceJQueryEvents:!0,percentPosition:!0,resize:!0,selectedAttraction:.025,setGallerySize:!0},f.createMethods=[];var p=f.prototype,g=(r.extend(p,t.prototype),p._create=function(){var t,e=this.guid=++d;for(t in this.element.flickityGUID=e,(u[e]=this).selectedIndex=0,this.restingFrames=0,this.x=0,this.velocity=0,this.originSide=this.options.rightToLeft?"right":"left",this.viewport=document.createElement("div"),this.viewport.className="flickity-viewport",this._createSlider(),(this.options.resize||this.options.watchCSS)&&n.addEventListener("resize",this),this.options.on){var i=this.options.on[t];this.on(t,i)}f.createMethods.forEach(function(t){this[t]()},this),this.options.watchCSS?this.watchCSS():this.activate()},p.option=function(t){r.extend(this.options,t)},p.activate=function(){this.isActive||(this.isActive=!0,this.element.classList.add("flickity-enabled"),this.options.rightToLeft&&this.element.classList.add("flickity-rtl"),this.getSize(),c(this._filterFindCellElements(this.element.children),this.slider),this.viewport.appendChild(this.slider),this.element.appendChild(this.viewport),this.reloadCells(),this.options.accessibility&&(this.element.tabIndex=0,this.element.addEventListener("keydown",this)),this.emitEvent("activate"),this.selectInitialIndex(),this.isInitActivated=!0,this.dispatchEvent("ready"))},p._createSlider=function(){var t=document.createElement("div");t.className="flickity-slider",t.style[this.originSide]=0,this.slider=t},p._filterFindCellElements=function(t){return r.filterFindElements(t,this.options.cellSelector)},p.reloadCells=function(){this.cells=this._makeCells(this.slider.children),this.positionCells(),this._getWrapShiftCells(),this.setGallerySize()},p._makeCells=function(t){return this._filterFindCellElements(t).map(function(t){return new i(t,this)},this)},p.getLastCell=function(){return this.cells[this.cells.length-1]},p.getLastSlide=function(){return this.slides[this.slides.length-1]},p.positionCells=function(){this._sizeCells(this.cells),this._positionCells(0)},p._positionCells=function(t){this.maxCellHeight=(t=t||0)&&this.maxCellHeight||0;for(var e,i=0,n=(0<t&&(i=(e=this.cells[t-1]).x+e.size.outerWidth),this.cells.length),s=t;s<n;s++){var o=this.cells[s];o.setPosition(i),i+=o.size.outerWidth,this.maxCellHeight=Math.max(o.size.outerHeight,this.maxCellHeight)}this.slideableWidth=i,this.updateSlides(),this._containSlides(),this.slidesWidth=n?this.getLastSlide().target-this.slides[0].target:0},p._sizeCells=function(t){t.forEach(function(t){t.getSize()})},p.updateSlides=function(){var n,s,o;this.slides=[],this.cells.length&&(n=new a(this),this.slides.push(n),s="left"==this.originSide?"marginRight":"marginLeft",o=this._getCanCellFit(),this.cells.forEach(function(t,e){var i;n.cells.length&&(i=n.outerWidth-n.firstMargin+(t.size.outerWidth-t.size[s]),o.call(this,e,i)||(n.updateTarget(),n=new a(this),this.slides.push(n))),n.addCell(t)},this),n.updateTarget(),this.updateSelectedSlide())},p._getCanCellFit=function(){var e,i,t=this.options.groupCells;return t?"number"==typeof t?(e=parseInt(t,10),function(t){return t%e!=0}):(t="string"==typeof t&&t.match(/^(\d+)%$/),i=t?parseInt(t[1],10)/100:1,function(t,e){return e<=(this.size.innerWidth+1)*i}):function(){return!1}},p._init=p.reposition=function(){this.positionCells(),this.positionSliderAtSelected()},p.getSize=function(){this.size=e(this.element),this.setCellAlign(),this.cursorPosition=this.size.innerWidth*this.cellAlign},{center:{left:.5,right:.5},left:{left:0,right:1},right:{right:0,left:1}});return p.setCellAlign=function(){var t=g[this.options.cellAlign];this.cellAlign=t?t[this.originSide]:this.options.cellAlign},p.setGallerySize=function(){var t;this.options.setGallerySize&&(t=this.options.adaptiveHeight&&this.selectedSlide?this.selectedSlide.height:this.maxCellHeight,this.viewport.style.height=t+"px")},p._getWrapShiftCells=function(){var t,e;this.options.wrapAround&&(this._unshiftCells(this.beforeShiftCells),this._unshiftCells(this.afterShiftCells),t=this.cursorPosition,e=this.cells.length-1,this.beforeShiftCells=this._getGapCells(t,e,-1),t=this.size.innerWidth-this.cursorPosition,this.afterShiftCells=this._getGapCells(t,0,1))},p._getGapCells=function(t,e,i){for(var n=[];0<t;){var s=this.cells[e];if(!s)break;n.push(s),e+=i,t-=s.size.outerWidth}return n},p._containSlides=function(){var t,e,i,n,s,o;this.options.contain&&!this.options.wrapAround&&this.cells.length&&(t=(e=this.options.rightToLeft)?"marginRight":"marginLeft",e=e?"marginLeft":"marginRight",i=this.slideableWidth-this.getLastCell().size[e],n=i<this.size.innerWidth,s=this.cursorPosition+this.cells[0].size[t],o=i-this.size.innerWidth*(1-this.cellAlign),this.slides.forEach(function(t){n?t.target=i*this.cellAlign:(t.target=Math.max(t.target,s),t.target=Math.min(t.target,o))},this))},p.dispatchEvent=function(t,e,i){var n=e?[e].concat(i):i;this.emitEvent(t,n),o&&this.$element&&(n=t+=this.options.namespaceJQueryEvents?".flickity":"",e&&((e=new o.Event(e)).type=t,n=e),this.$element.trigger(n,i))},p.select=function(t,e,i){this.isActive&&(t=parseInt(t,10),this._wrapSelect(t),(this.options.wrapAround||e)&&(t=r.modulo(t,this.slides.length)),this.slides[t])&&(e=this.selectedIndex,this.selectedIndex=t,this.updateSelectedSlide(),i?this.positionSliderAtSelected():this.startAnimation(),this.options.adaptiveHeight&&this.setGallerySize(),this.dispatchEvent("select",null,[t]),t!=e&&this.dispatchEvent("change",null,[t]),this.dispatchEvent("cellSelect"))},p._wrapSelect=function(t){var e=this.slides.length;if(!(this.options.wrapAround&&1<e))return t;var i=r.modulo(t,e),n=Math.abs(i-this.selectedIndex),s=Math.abs(i+e-this.selectedIndex),i=Math.abs(i-e-this.selectedIndex);!this.isDragSelect&&s<n?t+=e:!this.isDragSelect&&i<n&&(t-=e),t<0?this.x-=this.slideableWidth:e<=t&&(this.x+=this.slideableWidth)},p.previous=function(t,e){this.select(this.selectedIndex-1,t,e)},p.next=function(t,e){this.select(this.selectedIndex+1,t,e)},p.updateSelectedSlide=function(){var t=this.slides[this.selectedIndex];t&&(this.unselectSelectedSlide(),(this.selectedSlide=t).select(),this.selectedCells=t.cells,this.selectedElements=t.getCellElements(),this.selectedCell=t.cells[0],this.selectedElement=this.selectedElements[0])},p.unselectSelectedSlide=function(){this.selectedSlide&&this.selectedSlide.unselect()},p.selectInitialIndex=function(){var t=this.options.initialIndex;if(this.isInitActivated)this.select(this.selectedIndex,!1,!0);else{if(t&&"string"==typeof t)if(this.queryCell(t))return void this.selectCell(t,!1,!0);var e=0;t&&this.slides[t]&&(e=t),this.select(e,!1,!0)}},p.selectCell=function(t,e,i){var t=this.queryCell(t);t&&(t=this.getCellSlideIndex(t),this.select(t,e,i))},p.getCellSlideIndex=function(t){for(var e=0;e<this.slides.length;e++)if(-1!=this.slides[e].cells.indexOf(t))return e},p.getCell=function(t){for(var e=0;e<this.cells.length;e++){var i=this.cells[e];if(i.element==t)return i}},p.getCells=function(t){t=r.makeArray(t);var e=[];return t.forEach(function(t){t=this.getCell(t);t&&e.push(t)},this),e},p.getCellElements=function(){return this.cells.map(function(t){return t.element})},p.getParentCell=function(t){var e=this.getCell(t);return e||(t=r.getParent(t,".flickity-slider > *"),this.getCell(t))},p.getAdjacentCellElements=function(t,e){if(!t)return this.selectedSlide.getCellElements();e=void 0===e?this.selectedIndex:e;var i=this.slides.length;if(i<=1+2*t)return this.getCellElements();for(var n=[],s=e-t;s<=e+t;s++){var o=this.options.wrapAround?r.modulo(s,i):s,o=this.slides[o];o&&(n=n.concat(o.getCellElements()))}return n},p.queryCell=function(t){if("number"==typeof t)return this.cells[t];if("string"==typeof t){if(t.match(/^[#.]?[\d/]/))return;t=this.element.querySelector(t)}return this.getCell(t)},p.uiChange=function(){this.emitEvent("uiChange")},p.childUIPointerDown=function(t){"touchstart"!=t.type&&t.preventDefault(),this.focus()},p.onresize=function(){this.watchCSS(),this.resize()},r.debounceMethod(f,"onresize",150),p.resize=function(){var t;!this.isActive||this.isAnimating||this.isDragging||(this.getSize(),this.options.wrapAround&&(this.x=r.modulo(this.x,this.slideableWidth)),this.positionCells(),this._getWrapShiftCells(),this.setGallerySize(),this.emitEvent("resize"),t=this.selectedElements&&this.selectedElements[0],this.selectCell(t,!1,!0))},p.watchCSS=function(){this.options.watchCSS&&(-1!=l(this.element,":after").content.indexOf("flickity")?this.activate():this.deactivate())},p.onkeydown=function(t){var e=document.activeElement&&document.activeElement!=this.element;this.options.accessibility&&!e&&(e=f.keyboardHandlers[t.keyCode])&&e.call(this)},f.keyboardHandlers={37:function(){var t=this.options.rightToLeft?"next":"previous";this.uiChange(),this[t]()},39:function(){var t=this.options.rightToLeft?"previous":"next";this.uiChange(),this[t]()}},p.focus=function(){var t=n.pageYOffset;this.element.focus({preventScroll:!0}),n.pageYOffset!=t&&n.scrollTo(n.pageXOffset,t)},p.deactivate=function(){this.isActive&&(this.element.classList.remove("flickity-enabled"),this.element.classList.remove("flickity-rtl"),this.unselectSelectedSlide(),this.cells.forEach(function(t){t.destroy()}),this.element.removeChild(this.viewport),c(this.slider.children,this.element),this.options.accessibility&&(this.element.removeAttribute("tabIndex"),this.element.removeEventListener("keydown",this)),this.isActive=!1,this.emitEvent("deactivate"))},p.destroy=function(){this.deactivate(),n.removeEventListener("resize",this),this.allOff(),this.emitEvent("destroy"),o&&this.$element&&o.removeData(this.element,"flickity"),delete this.element.flickityGUID,delete u[this.guid]},r.extend(p,s),f.data=function(t){t=(t=r.getQueryElement(t))&&t.flickityGUID;return t&&u[t]},r.htmlInit(f,"flickity"),o&&o.bridget&&o.bridget("flickity",f),f.setJQuery=function(t){o=t},f.Cell=i,f.Slide=a,f},"function"==typeof define&&define.amd?define(["ev-emitter/ev-emitter","get-size/get-size","fizzy-ui-utils/utils","./cell","./slide","./animate"],function(t,e,i,n,s,o){return a(r,t,e,i,n,s,o)}):"object"==_typeof(e)&&e.exports?e.exports=a(r,t("ev-emitter"),t("get-size"),t("fizzy-ui-utils"),t("./cell"),t("./slide"),t("./animate")):(e=r.Flickity,r.Flickity=a(r,r.EvEmitter,r.getSize,r.fizzyUIUtils,e.Cell,e.Slide,e.animatePrototype))},{"./animate":10,"./cell":11,"./slide":19,"ev-emitter":7,"fizzy-ui-utils":8,"get-size":20}],14:[function(t,e,i){var n;window,n=function(t){return t},"function"==typeof define&&define.amd?define(["./flickity","./drag","./prev-next-button","./page-dots","./player","./add-remove-cell","./lazyload"],n):"object"==_typeof(e)&&e.exports&&(e.exports=n(t("./flickity"),t("./drag"),t("./prev-next-button"),t("./page-dots"),t("./player"),t("./add-remove-cell"),t("./lazyload")))},{"./add-remove-cell":9,"./drag":12,"./flickity":13,"./lazyload":15,"./page-dots":16,"./player":17,"./prev-next-button":18}],15:[function(t,e,i){var n,s;n=window,s=function(t,e,s){e.createMethods.push("_createLazyload");var i=e.prototype;function n(t,e){this.img=t,this.flickity=e,this.load()}return i._createLazyload=function(){this.on("select",this.lazyLoad)},i.lazyLoad=function(){var e,t=this.options.lazyLoad;t&&(t=this.getAdjacentCellElements("number"==typeof t?t:0),e=[],t.forEach(function(t){t=function(t){if("IMG"==t.nodeName){var e=t.getAttribute("data-flickity-lazyload"),i=t.getAttribute("data-flickity-lazyload-src"),n=t.getAttribute("data-flickity-lazyload-srcset");if(e||i||n)return[t]}e=t.querySelectorAll("img[data-flickity-lazyload], img[data-flickity-lazyload-src], img[data-flickity-lazyload-srcset]");return s.makeArray(e)}(t);e=e.concat(t)}),e.forEach(function(t){new n(t,this)},this))},n.prototype.handleEvent=s.handleEvent,n.prototype.load=function(){this.img.addEventListener("load",this),this.img.addEventListener("error",this);var t=this.img.getAttribute("data-flickity-lazyload")||this.img.getAttribute("data-flickity-lazyload-src"),e=this.img.getAttribute("data-flickity-lazyload-srcset");this.img.src=t,e&&this.img.setAttribute("srcset",e),this.img.removeAttribute("data-flickity-lazyload"),this.img.removeAttribute("data-flickity-lazyload-src"),this.img.removeAttribute("data-flickity-lazyload-srcset")},n.prototype.onload=function(t){this.complete(t,"flickity-lazyloaded")},n.prototype.onerror=function(t){this.complete(t,"flickity-lazyerror")},n.prototype.complete=function(t,e){this.img.removeEventListener("load",this),this.img.removeEventListener("error",this);var i=this.flickity.getParentCell(this.img),i=i&&i.element;this.flickity.cellSizeChange(i),this.img.classList.add(e),this.flickity.dispatchEvent("lazyLoad",t,i)},e.LazyLoader=n,e},"function"==typeof define&&define.amd?define(["./flickity","fizzy-ui-utils/utils"],function(t,e){return s(0,t,e)}):"object"==_typeof(e)&&e.exports?e.exports=s(0,t("./flickity"),t("fizzy-ui-utils")):s(0,n.Flickity,n.fizzyUIUtils)},{"./flickity":13,"fizzy-ui-utils":8}],16:[function(t,e,i){var n,s;n=window,s=function(t,e,i,n){function s(t){this.parent=t,this._create()}(s.prototype=Object.create(i.prototype))._create=function(){this.holder=document.createElement("ol"),this.holder.className="flickity-page-dots",this.dots=[],this.handleClick=this.onClick.bind(this),this.on("pointerDown",this.parent.childUIPointerDown.bind(this.parent))},s.prototype.activate=function(){this.setDots(),this.holder.addEventListener("click",this.handleClick),this.bindStartEvent(this.holder),this.parent.element.appendChild(this.holder)},s.prototype.deactivate=function(){this.holder.removeEventListener("click",this.handleClick),this.unbindStartEvent(this.holder),this.parent.element.removeChild(this.holder)},s.prototype.setDots=function(){var t=this.parent.slides.length-this.dots.length;0<t?this.addDots(t):t<0&&this.removeDots(-t)},s.prototype.addDots=function(t){for(var e=document.createDocumentFragment(),i=[],n=this.dots.length,s=n+t,o=n;o<s;o++){var r=document.createElement("li");r.className="dot",r.setAttribute("aria-label","Page dot "+(o+1)),e.appendChild(r),i.push(r)}this.holder.appendChild(e),this.dots=this.dots.concat(i)},s.prototype.removeDots=function(t){this.dots.splice(this.dots.length-t,t).forEach(function(t){this.holder.removeChild(t)},this)},s.prototype.updateSelected=function(){this.selectedDot&&(this.selectedDot.className="dot",this.selectedDot.removeAttribute("aria-current")),this.dots.length&&(this.selectedDot=this.dots[this.parent.selectedIndex],this.selectedDot.className="dot is-selected",this.selectedDot.setAttribute("aria-current","step"))},s.prototype.onTap=s.prototype.onClick=function(t){var t=t.target;"LI"==t.nodeName&&(this.parent.uiChange(),t=this.dots.indexOf(t),this.parent.select(t))},s.prototype.destroy=function(){this.deactivate(),this.allOff()},e.PageDots=s,n.extend(e.defaults,{pageDots:!0}),e.createMethods.push("_createPageDots");i=e.prototype;return i._createPageDots=function(){this.options.pageDots&&(this.pageDots=new s(this),this.on("activate",this.activatePageDots),this.on("select",this.updateSelectedPageDots),this.on("cellChange",this.updatePageDots),this.on("resize",this.updatePageDots),this.on("deactivate",this.deactivatePageDots))},i.activatePageDots=function(){this.pageDots.activate()},i.updateSelectedPageDots=function(){this.pageDots.updateSelected()},i.updatePageDots=function(){this.pageDots.setDots()},i.deactivatePageDots=function(){this.pageDots.deactivate()},e.PageDots=s,e},"function"==typeof define&&define.amd?define(["./flickity","unipointer/unipointer","fizzy-ui-utils/utils"],function(t,e,i){return s(0,t,e,i)}):"object"==_typeof(e)&&e.exports?e.exports=s(0,t("./flickity"),t("unipointer"),t("fizzy-ui-utils")):s(0,n.Flickity,n.Unipointer,n.fizzyUIUtils)},{"./flickity":13,"fizzy-ui-utils":8,unipointer:40}],17:[function(t,e,i){var n,s;n=window,s=function(t,e,i){function n(t){this.parent=t,this.state="stopped",this.onVisibilityChange=this.visibilityChange.bind(this),this.onVisibilityPlay=this.visibilityPlay.bind(this)}(n.prototype=Object.create(t.prototype)).play=function(){"playing"!=this.state&&(document.hidden?document.addEventListener("visibilitychange",this.onVisibilityPlay):(this.state="playing",document.addEventListener("visibilitychange",this.onVisibilityChange),this.tick()))},n.prototype.tick=function(){var t,e;"playing"==this.state&&(t="number"==typeof(t=this.parent.options.autoPlay)?t:3e3,(e=this).clear(),this.timeout=setTimeout(function(){e.parent.next(!0),e.tick()},t))},n.prototype.stop=function(){this.state="stopped",this.clear(),document.removeEventListener("visibilitychange",this.onVisibilityChange)},n.prototype.clear=function(){clearTimeout(this.timeout)},n.prototype.pause=function(){"playing"==this.state&&(this.state="paused",this.clear())},n.prototype.unpause=function(){"paused"==this.state&&this.play()},n.prototype.visibilityChange=function(){this[document.hidden?"pause":"unpause"]()},n.prototype.visibilityPlay=function(){this.play(),document.removeEventListener("visibilitychange",this.onVisibilityPlay)},e.extend(i.defaults,{pauseAutoPlayOnHover:!0}),i.createMethods.push("_createPlayer");t=i.prototype;return t._createPlayer=function(){this.player=new n(this),this.on("activate",this.activatePlayer),this.on("uiChange",this.stopPlayer),this.on("pointerDown",this.stopPlayer),this.on("deactivate",this.deactivatePlayer)},t.activatePlayer=function(){this.options.autoPlay&&(this.player.play(),this.element.addEventListener("mouseenter",this))},t.playPlayer=function(){this.player.play()},t.stopPlayer=function(){this.player.stop()},t.pausePlayer=function(){this.player.pause()},t.unpausePlayer=function(){this.player.unpause()},t.deactivatePlayer=function(){this.player.stop(),this.element.removeEventListener("mouseenter",this)},t.onmouseenter=function(){this.options.pauseAutoPlayOnHover&&(this.player.pause(),this.element.addEventListener("mouseleave",this))},t.onmouseleave=function(){this.player.unpause(),this.element.removeEventListener("mouseleave",this)},i.Player=n,i},"function"==typeof define&&define.amd?define(["ev-emitter/ev-emitter","fizzy-ui-utils/utils","./flickity"],s):"object"==_typeof(e)&&e.exports?e.exports=s(t("ev-emitter"),t("fizzy-ui-utils"),t("./flickity")):s(n.EvEmitter,n.fizzyUIUtils,n.Flickity)},{"./flickity":13,"ev-emitter":7,"fizzy-ui-utils":8}],18:[function(t,e,i){var n,s;n=window,s=function(t,e,i,n){var s="http://www.w3.org/2000/svg";function o(t,e){this.direction=t,this.parent=e,this._create()}(o.prototype=Object.create(i.prototype))._create=function(){this.isEnabled=!0,this.isPrevious=-1==this.direction;var t=this.parent.options.rightToLeft?1:-1,t=(this.isLeft=this.direction==t,this.element=document.createElement("button")),e=(t.className="flickity-button flickity-prev-next-button",t.className+=this.isPrevious?" previous":" next",t.setAttribute("type","button"),this.disable(),t.setAttribute("aria-label",this.isPrevious?"Previous":"Next"),this.createSVG());t.appendChild(e),this.parent.on("select",this.update.bind(this)),this.on("pointerDown",this.parent.childUIPointerDown.bind(this.parent))},o.prototype.activate=function(){this.bindStartEvent(this.element),this.element.addEventListener("click",this),this.parent.element.appendChild(this.element)},o.prototype.deactivate=function(){this.parent.element.removeChild(this.element),this.unbindStartEvent(this.element),this.element.removeEventListener("click",this)},o.prototype.createSVG=function(){var t=document.createElementNS(s,"svg"),e=(t.setAttribute("class","flickity-button-icon"),t.setAttribute("viewBox","0 0 100 100"),document.createElementNS(s,"path")),i="string"!=typeof(i=this.parent.options.arrowShape)?"M "+i.x0+",50 L "+i.x1+","+(i.y1+50)+" L "+i.x2+","+(i.y2+50)+" L "+i.x3+",50  L "+i.x2+","+(50-i.y2)+" L "+i.x1+","+(50-i.y1)+" Z":i;return e.setAttribute("d",i),e.setAttribute("class","arrow"),this.isLeft||e.setAttribute("transform","translate(100, 100) rotate(180) "),t.appendChild(e),t},o.prototype.handleEvent=n.handleEvent,o.prototype.onclick=function(){var t;this.isEnabled&&(this.parent.uiChange(),t=this.isPrevious?"previous":"next",this.parent[t]())},o.prototype.enable=function(){this.isEnabled||(this.element.disabled=!1,this.isEnabled=!0)},o.prototype.disable=function(){this.isEnabled&&(this.element.disabled=!0,this.isEnabled=!1)},o.prototype.update=function(){var t=this.parent.slides;this.parent.options.wrapAround&&1<t.length?this.enable():(t=t.length?t.length-1:0,t=this.isPrevious?0:t,this[this.parent.selectedIndex==t?"disable":"enable"]())},o.prototype.destroy=function(){this.deactivate(),this.allOff()},n.extend(e.defaults,{prevNextButtons:!0,arrowShape:{x0:10,x1:60,y1:50,x2:70,y2:40,x3:30}}),e.createMethods.push("_createPrevNextButtons");i=e.prototype;return i._createPrevNextButtons=function(){this.options.prevNextButtons&&(this.prevButton=new o(-1,this),this.nextButton=new o(1,this),this.on("activate",this.activatePrevNextButtons))},i.activatePrevNextButtons=function(){this.prevButton.activate(),this.nextButton.activate(),this.on("deactivate",this.deactivatePrevNextButtons)},i.deactivatePrevNextButtons=function(){this.prevButton.deactivate(),this.nextButton.deactivate(),this.off("deactivate",this.deactivatePrevNextButtons)},e.PrevNextButton=o,e},"function"==typeof define&&define.amd?define(["./flickity","unipointer/unipointer","fizzy-ui-utils/utils"],function(t,e,i){return s(0,t,e,i)}):"object"==_typeof(e)&&e.exports?e.exports=s(0,t("./flickity"),t("unipointer"),t("fizzy-ui-utils")):s(0,n.Flickity,n.Unipointer,n.fizzyUIUtils)},{"./flickity":13,"fizzy-ui-utils":8,unipointer:40}],19:[function(t,e,i){var n,s;n=window,s=function(){function t(t){this.parent=t,this.isOriginLeft="left"==t.originSide,this.cells=[],this.outerWidth=0,this.height=0}var e=t.prototype;return e.addCell=function(t){var e;this.cells.push(t),this.outerWidth+=t.size.outerWidth,this.height=Math.max(t.size.outerHeight,this.height),1==this.cells.length&&(this.x=t.x,e=this.isOriginLeft?"marginLeft":"marginRight",this.firstMargin=t.size[e])},e.updateTarget=function(){var t=this.isOriginLeft?"marginRight":"marginLeft",e=this.getLastCell(),e=e?e.size[t]:0,t=this.outerWidth-(this.firstMargin+e);this.target=this.x+this.firstMargin+t*this.parent.cellAlign},e.getLastCell=function(){return this.cells[this.cells.length-1]},e.select=function(){this.cells.forEach(function(t){t.select()})},e.unselect=function(){this.cells.forEach(function(t){t.unselect()})},e.getCellElements=function(){return this.cells.map(function(t){return t.element})},t},"function"==typeof define&&define.amd?define(s):"object"==_typeof(e)&&e.exports?e.exports=s():(n.Flickity=n.Flickity||{},n.Flickity.Slide=s())},{}],20:[function(t,e,i){var n,s;n=window,s=function(){function m(t){var e=parseFloat(t);return-1==t.indexOf("%")&&!isNaN(e)&&e}var e="undefined"==typeof console?function(){}:function(t){console.error(t)},v=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"],y=v.length;function b(t){t=getComputedStyle(t);return t||e("Style returned "+t+". Are you running this code in a hidden iframe on Firefox? See https://bit.ly/getsizebug1"),t}var E,C=!1;function S(t){if(C||(C=!0,(c=document.createElement("div")).style.width="200px",c.style.padding="1px 2px 3px 4px",c.style.borderStyle="solid",c.style.borderWidth="1px 2px 3px 4px",c.style.boxSizing="border-box",(h=document.body||document.documentElement).appendChild(c),o=b(c),E=200==Math.round(m(o.width)),S.isBoxSizeOuter=E,h.removeChild(c)),(t="string"==typeof t?document.querySelector(t):t)&&"object"==_typeof(t)&&t.nodeType){var e=b(t);if("none"==e.display){for(var i={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},n=0;n<y;n++)i[v[n]]=0;return i}for(var s={},o=(s.width=t.offsetWidth,s.height=t.offsetHeight,s.isBorderBox="border-box"==e.boxSizing),r=0;r<y;r++){var a=v[r],l=e[a],l=parseFloat(l);s[a]=isNaN(l)?0:l}var h=s.paddingLeft+s.paddingRight,c=s.paddingTop+s.paddingBottom,t=s.marginLeft+s.marginRight,d=s.marginTop+s.marginBottom,u=s.borderLeftWidth+s.borderRightWidth,f=s.borderTopWidth+s.borderBottomWidth,p=o&&E,g=m(e.width),g=(!1!==g&&(s.width=g+(p?0:h+u)),m(e.height));return!1!==g&&(s.height=g+(p?0:c+f)),s.innerWidth=s.width-(h+u),s.innerHeight=s.height-(c+f),s.outerWidth=s.width+t,s.outerHeight=s.height+d,s}}return S},"function"==typeof define&&define.amd?define(s):"object"==_typeof(e)&&e.exports?e.exports=s():n.getSize=s()},{}],21:[function(t,e,i){var n,s;n="undefined"!=typeof window?window:this,s=function(e,t){var o=e.jQuery,r=e.console;function a(t,e){for(var i in e)t[i]=e[i];return t}var l=Array.prototype.slice;function h(t,e,i){if(!(this instanceof h))return new h(t,e,i);var n,s=t;(s="string"==typeof t?document.querySelectorAll(t):s)?(this.elements=(n=s,Array.isArray(n)?n:"object"==_typeof(n)&&"number"==typeof n.length?l.call(n):[n]),this.options=a({},this.options),"function"==typeof e?i=e:a(this.options,e),i&&this.on("always",i),this.getImages(),o&&(this.jqDeferred=new o.Deferred),setTimeout(this.check.bind(this))):r.error("Bad element for imagesLoaded "+(s||t))}(h.prototype=Object.create(t.prototype)).options={},h.prototype.getImages=function(){this.images=[],this.elements.forEach(this.addElementImages,this)},h.prototype.addElementImages=function(t){"IMG"==t.nodeName&&this.addImage(t),!0===this.options.background&&this.addElementBackgroundImages(t);var e=t.nodeType;if(e&&c[e]){for(var i=t.querySelectorAll("img"),n=0;n<i.length;n++){var s=i[n];this.addImage(s)}if("string"==typeof this.options.background)for(var o=t.querySelectorAll(this.options.background),n=0;n<o.length;n++){var r=o[n];this.addElementBackgroundImages(r)}}};var c={1:!0,9:!0,11:!0};function i(t){this.img=t}function n(t,e){this.url=t,this.element=e,this.img=new Image}return h.prototype.addElementBackgroundImages=function(t){var e=getComputedStyle(t);if(e)for(var i=/url\((['"])?(.*?)\1\)/gi,n=i.exec(e.backgroundImage);null!==n;){var s=n&&n[2];s&&this.addBackground(s,t),n=i.exec(e.backgroundImage)}},h.prototype.addImage=function(t){t=new i(t);this.images.push(t)},h.prototype.addBackground=function(t,e){t=new n(t,e);this.images.push(t)},h.prototype.check=function(){var n=this;function e(t,e,i){setTimeout(function(){n.progress(t,e,i)})}this.progressedCount=0,this.hasAnyBroken=!1,this.images.length?this.images.forEach(function(t){t.once("progress",e),t.check()}):this.complete()},h.prototype.progress=function(t,e,i){this.progressedCount++,this.hasAnyBroken=this.hasAnyBroken||!t.isLoaded,this.emitEvent("progress",[this,t,e]),this.jqDeferred&&this.jqDeferred.notify&&this.jqDeferred.notify(this,t),this.progressedCount==this.images.length&&this.complete(),this.options.debug&&r&&r.log("progress: "+i,t,e)},h.prototype.complete=function(){var t=this.hasAnyBroken?"fail":"done";this.isComplete=!0,this.emitEvent(t,[this]),this.emitEvent("always",[this]),this.jqDeferred&&(t=this.hasAnyBroken?"reject":"resolve",this.jqDeferred[t](this))},(i.prototype=Object.create(t.prototype)).check=function(){this.getIsImageComplete()?this.confirm(0!==this.img.naturalWidth,"naturalWidth"):(this.proxyImage=new Image,this.proxyImage.addEventListener("load",this),this.proxyImage.addEventListener("error",this),this.img.addEventListener("load",this),this.img.addEventListener("error",this),this.proxyImage.src=this.img.src)},i.prototype.getIsImageComplete=function(){return this.img.complete&&this.img.naturalWidth},i.prototype.confirm=function(t,e){this.isLoaded=t,this.emitEvent("progress",[this,this.img,e])},i.prototype.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},i.prototype.onload=function(){this.confirm(!0,"onload"),this.unbindEvents()},i.prototype.onerror=function(){this.confirm(!1,"onerror"),this.unbindEvents()},i.prototype.unbindEvents=function(){this.proxyImage.removeEventListener("load",this),this.proxyImage.removeEventListener("error",this),this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},(n.prototype=Object.create(i.prototype)).check=function(){this.img.addEventListener("load",this),this.img.addEventListener("error",this),this.img.src=this.url,this.getIsImageComplete()&&(this.confirm(0!==this.img.naturalWidth,"naturalWidth"),this.unbindEvents())},n.prototype.unbindEvents=function(){this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},n.prototype.confirm=function(t,e){this.isLoaded=t,this.emitEvent("progress",[this,this.element,e])},(h.makeJQueryPlugin=function(t){(t=t||e.jQuery)&&((o=t).fn.imagesLoaded=function(t,e){return new h(this,t,e).jqDeferred.promise(o(this))})})(),h},"function"==typeof define&&define.amd?define(["ev-emitter/ev-emitter"],function(t){return s(n,t)}):"object"==_typeof(e)&&e.exports?e.exports=s(n,t("ev-emitter")):n.imagesLoaded=s(n,n.EvEmitter)},{"ev-emitter":7}],22:[function(t,e,i){var n,s;n=window,s=function(o,t){function e(){}var i=e.prototype=Object.create(t.prototype),n=(i.bindHandles=function(){this._bindHandles(!0)},i.unbindHandles=function(){this._bindHandles(!1)},i._bindHandles=function(t){for(var e=(t=void 0===t||t)?"addEventListener":"removeEventListener",i=t?this._touchActionValue:"",n=0;n<this.handles.length;n++){var s=this.handles[n];this._bindStartEvent(s,t),s[e]("click",this),o.PointerEvent&&(s.style.touchAction=i)}},i._touchActionValue="none",i.pointerDown=function(t,e){this.okayPointerDown(t)&&(this.pointerDownPointer={pageX:e.pageX,pageY:e.pageY},t.preventDefault(),this.pointerDownBlur(),this._bindPostStartEvents(t),this.emitEvent("pointerDown",[t,e]))},{TEXTAREA:!0,INPUT:!0,SELECT:!0,OPTION:!0}),s={radio:!0,checkbox:!0,button:!0,submit:!0,image:!0,file:!0};return i.okayPointerDown=function(t){var e=n[t.target.nodeName],t=s[t.target.type],e=!e||t;return e||this._pointerReset(),e},i.pointerDownBlur=function(){var t=document.activeElement;t&&t.blur&&t!=document.body&&t.blur()},i.pointerMove=function(t,e){var i=this._dragPointerMove(t,e);this.emitEvent("pointerMove",[t,e,i]),this._dragMove(t,e,i)},i._dragPointerMove=function(t,e){var i={x:e.pageX-this.pointerDownPointer.pageX,y:e.pageY-this.pointerDownPointer.pageY};return!this.isDragging&&this.hasDragStarted(i)&&this._dragStart(t,e),i},i.hasDragStarted=function(t){return 3<Math.abs(t.x)||3<Math.abs(t.y)},i.pointerUp=function(t,e){this.emitEvent("pointerUp",[t,e]),this._dragPointerUp(t,e)},i._dragPointerUp=function(t,e){this.isDragging?this._dragEnd(t,e):this._staticClick(t,e)},i._dragStart=function(t,e){this.isDragging=!0,this.isPreventingClicks=!0,this.dragStart(t,e)},i.dragStart=function(t,e){this.emitEvent("dragStart",[t,e])},i._dragMove=function(t,e,i){this.isDragging&&this.dragMove(t,e,i)},i.dragMove=function(t,e,i){t.preventDefault(),this.emitEvent("dragMove",[t,e,i])},i._dragEnd=function(t,e){this.isDragging=!1,setTimeout(function(){delete this.isPreventingClicks}.bind(this)),this.dragEnd(t,e)},i.dragEnd=function(t,e){this.emitEvent("dragEnd",[t,e])},i.onclick=function(t){this.isPreventingClicks&&t.preventDefault()},i._staticClick=function(t,e){this.isIgnoringMouseUp&&"mouseup"==t.type||(this.staticClick(t,e),"mouseup"!=t.type&&(this.isIgnoringMouseUp=!0,setTimeout(function(){delete this.isIgnoringMouseUp}.bind(this),400)))},i.staticClick=function(t,e){this.emitEvent("staticClick",[t,e])},e.getPointerPoint=t.getPointerPoint,e},"function"==typeof define&&define.amd?define(["unipointer/unipointer"],function(t){return s(n,t)}):"object"==_typeof(e)&&e.exports?e.exports=s(n,t("unipointer")):n.Unidragger=s(n,n.Unipointer)},{unipointer:40}],23:[function(t,e,i){var n,s;n="undefined"!=typeof window?window:this,s=function(t,s){var e=t.prototype;return e.insert=function(t,e){var i,n,s,o,r,t=this._makeCells(t);t&&t.length&&(i=this.cells.length,e=void 0===e?i:e,r=t,n=document.createDocumentFragment(),r.forEach(function(t){return n.appendChild(t.element)}),r=n,(s=e===i)?this.slider.appendChild(r):(o=this.cells[e].element,this.slider.insertBefore(r,o)),0===e?this.cells=t.concat(this.cells):s?this.cells=this.cells.concat(t):(r=this.cells.splice(e,i-e),this.cells=this.cells.concat(t).concat(r)),this._sizeCells(t),this.cellChange(e),this.positionSliderAtSelected())},e.append=function(t){this.insert(t,this.cells.length)},e.prepend=function(t){this.insert(t,0)},e.remove=function(t){var i,n=this,t=this.getCells(t);t&&t.length&&(i=this.cells.length-1,t.forEach(function(t){t.remove();var e=n.cells.indexOf(t);i=Math.min(e,i),s.removeFrom(n.cells,t)}),this.cellChange(i),this.positionSliderAtSelected())},e.cellSizeChange=function(t){var t=this.getCell(t);t&&(t.getSize(),t=this.cells.indexOf(t),this.cellChange(t))},e.cellChange=function(t){var e=this.selectedElement,e=(this._positionCells(t),this._updateWrapShiftCells(),this.setGallerySize(),this.getCell(e));e&&(this.selectedIndex=this.getCellSlideIndex(e)),this.selectedIndex=Math.min(this.slides.length-1,this.selectedIndex),this.emitEvent("cellChange",[t]),this.select(this.selectedIndex)},t},"object"==_typeof(e)&&e.exports?e.exports=s(t("./core"),t("fizzy-ui-utils")):s(n.Flickity,n.fizzyUIUtils)},{"./core":26,"fizzy-ui-utils":3}],24:[function(t,e,i){var n,s;n="undefined"!=typeof window?window:this,s=function(e){var t={startAnimation:function(){this.isAnimating||(this.isAnimating=!0,this.restingFrames=0,this.animate())},animate:function(){var t=this,e=(this.applyDragForce(),this.applySelectedAttraction(),this.x);this.integratePhysics(),this.positionSlider(),this.settle(e),this.isAnimating&&requestAnimationFrame(function(){return t.animate()})},positionSlider:function(){var t=this.x;this.isWrapping&&(t=e.modulo(t,this.slideableWidth)-this.slideableWidth,this.shiftWrapCells(t)),this.setTranslateX(t,this.isAnimating),this.dispatchScrollEvent()},setTranslateX:function(t,e){t+=this.cursorPosition,this.options.rightToLeft&&(t=-t);t=this.getPositionValue(t);this.slider.style.transform=e?"translate3d(".concat(t,",0,0)"):"translateX(".concat(t,")")},dispatchScrollEvent:function(){var t,e=this.slides[0];e&&(t=(e=-this.x-e.target)/this.slidesWidth,this.dispatchEvent("scroll",null,[t,e]))},positionSliderAtSelected:function(){this.cells.length&&(this.x=-this.selectedSlide.target,this.velocity=0,this.positionSlider())},getPositionValue:function(t){return this.options.percentPosition?.01*Math.round(t/this.size.innerWidth*1e4)+"%":Math.round(t)+"px"},settle:function(t){this.isPointerDown||Math.round(100*this.x)!==Math.round(100*t)||this.restingFrames++,2<this.restingFrames&&(this.isAnimating=!1,delete this.isFreeScrolling,this.positionSlider(),this.dispatchEvent("settle",null,[this.selectedIndex]))},shiftWrapCells:function(t){var e=this.cursorPosition+t,e=(this._shiftCells(this.beforeShiftCells,e,-1),this.size.innerWidth-(t+this.slideableWidth+this.cursorPosition));this._shiftCells(this.afterShiftCells,e,1)},_shiftCells:function(t,i,n){var s=this;t.forEach(function(t){var e=0<i?n:0;s._wrapShiftCell(t,e),i-=t.size.outerWidth})},_unshiftCells:function(t){var e=this;t&&t.length&&t.forEach(function(t){return e._wrapShiftCell(t,0)})},_wrapShiftCell:function(t,e){this._renderCellPosition(t,t.x+this.slideableWidth*e)},integratePhysics:function(){this.x+=this.velocity,this.velocity*=this.getFrictionFactor()},applyForce:function(t){this.velocity+=t},getFrictionFactor:function(){return 1-this.options[this.isFreeScrolling?"freeScrollFriction":"friction"]},getRestingPosition:function(){return this.x+this.velocity/(1-this.getFrictionFactor())},applyDragForce:function(){var t;this.isDraggable&&this.isPointerDown&&(t=this.dragX-this.x-this.velocity,this.applyForce(t))},applySelectedAttraction:function(){var t;this.isDraggable&&this.isPointerDown||this.isFreeScrolling||!this.slides.length||(t=(-1*this.selectedSlide.target-this.x)*this.options.selectedAttraction,this.applyForce(t))}};return t},"object"==_typeof(e)&&e.exports?e.exports=s(t("fizzy-ui-utils")):(n.Flickity=n.Flickity||{},n.Flickity.animatePrototype=s(n.fizzyUIUtils))},{"fizzy-ui-utils":3}],25:[function(t,e,i){var n,s;n="undefined"!=typeof window?window:this,s=function(t){var e="flickity-cell";function i(t){this.element=t,this.element.classList.add(e),this.x=0,this.unselect()}var n=i.prototype;return n.destroy=function(){this.unselect(),this.element.classList.remove(e),this.element.style.transform="",this.element.removeAttribute("aria-hidden")},n.getSize=function(){this.size=t(this.element)},n.select=function(){this.element.classList.add("is-selected"),this.element.removeAttribute("aria-hidden")},n.unselect=function(){this.element.classList.remove("is-selected"),this.element.setAttribute("aria-hidden","true")},n.remove=function(){this.element.remove()},i},"object"==_typeof(e)&&e.exports?e.exports=s(t("get-size")):(n.Flickity=n.Flickity||{},n.Flickity.Cell=s(n.getSize))},{"get-size":35}],26:[function(t,e,i){var n,s;n="undefined"!=typeof window?window:this,s=function(a,t,e,l,i,h,n){var s=a.getComputedStyle,o=a.console,r=a.jQuery,c=0,d={};function u(t,e){var i,n=l.getQueryElement(t);if(n){if(this.element=n,this.element.flickityGUID)return(i=d[this.element.flickityGUID])&&i.option(e),i;r&&(this.$element=r(this.element)),this.options=_objectSpread({},this.constructor.defaults),this.option(e),this._create()}else o&&o.error("Bad element for Flickity: ".concat(n||t))}u.defaults={accessibility:!0,cellAlign:"center",freeScrollFriction:.075,friction:.28,namespaceJQueryEvents:!0,percentPosition:!0,resize:!0,selectedAttraction:.025,setGallerySize:!0},u.create={};var f=u.prototype,p=(Object.assign(f,t.prototype),f._create=function(){var t,e,i=this.options,n=i.resize,s=i.watchCSS,i=i.rightToLeft,o=this.guid=++c;for(t in this.element.flickityGUID=o,(d[o]=this).selectedIndex=0,this.restingFrames=0,this.x=0,this.velocity=0,this.beginMargin=i?"marginRight":"marginLeft",this.endMargin=i?"marginLeft":"marginRight",this.viewport=document.createElement("div"),this.viewport.className="flickity-viewport",this._createSlider(),this.focusableElems=[this.element],(n||s)&&a.addEventListener("resize",this),this.options.on){var r=this.options.on[t];this.on(t,r)}for(e in u.create)u.create[e].call(this);s?this.watchCSS():this.activate()},f.option=function(t){Object.assign(this.options,t)},f.activate=function(){var t,e;this.isActive||(this.isActive=!0,this.element.classList.add("flickity-enabled"),this.options.rightToLeft&&this.element.classList.add("flickity-rtl"),this.getSize(),e=this._filterFindCellElements(this.element.children),(t=this.slider).append.apply(t,_toConsumableArray(e)),this.viewport.append(this.slider),this.element.append(this.viewport),this.reloadCells(),this.options.accessibility&&(this.element.tabIndex=0,this.element.addEventListener("keydown",this)),this.emitEvent("activate"),this.selectInitialIndex(),this.isInitActivated=!0,this.dispatchEvent("ready"))},f._createSlider=function(){var t=document.createElement("div");t.className="flickity-slider",this.slider=t},f._filterFindCellElements=function(t){return l.filterFindElements(t,this.options.cellSelector)},f.reloadCells=function(){this.cells=this._makeCells(this.slider.children),this.positionCells(),this._updateWrapShiftCells(),this.setGallerySize()},f._makeCells=function(t){return this._filterFindCellElements(t).map(function(t){return new i(t)})},f.getLastCell=function(){return this.cells[this.cells.length-1]},f.getLastSlide=function(){return this.slides[this.slides.length-1]},f.positionCells=function(){this._sizeCells(this.cells),this._positionCells(0)},f._positionCells=function(t){var e,i=this,n=(this.maxCellHeight=(t=t||0)&&this.maxCellHeight||0,0);0<t&&(e=this.cells[t-1],n=e.x+e.size.outerWidth),this.cells.slice(t).forEach(function(t){t.x=n,i._renderCellPosition(t,n),n+=t.size.outerWidth,i.maxCellHeight=Math.max(t.size.outerHeight,i.maxCellHeight)}),this.slideableWidth=n,this.updateSlides(),this._containSlides(),this.slidesWidth=this.cells.length?this.getLastSlide().target-this.slides[0].target:0},f._renderCellPosition=function(t,e){e*=this.options.rightToLeft?-1:1,this.options.percentPosition&&(e*=this.size.innerWidth/t.size.width),e=this.getPositionValue(e);t.element.style.transform="translateX( ".concat(e," )")},f._sizeCells=function(t){t.forEach(function(t){return t.getSize()})},f.updateSlides=function(){var n,s,o,r,a=this;this.slides=[],this.cells.length&&(n=this.beginMargin,s=this.endMargin,o=new h(n,s,this.cellAlign),this.slides.push(o),r=this._getCanCellFit(),this.cells.forEach(function(t,e){var i;o.cells.length&&(i=o.outerWidth-o.firstMargin+(t.size.outerWidth-t.size[s]),r(e,i)||(o.updateTarget(),o=new h(n,s,a.cellAlign),a.slides.push(o))),o.addCell(t)}),o.updateTarget(),this.updateSelectedSlide())},f._getCanCellFit=function(){var e,t,i,n=this.options.groupCells;return n?"number"==typeof n?(e=parseInt(n,10),function(t){return t%e!=0}):(t=1,(n="string"==typeof n&&n.match(/^(\d+)%$/))&&(t=parseInt(n[1],10)/100),i=(this.size.innerWidth+1)*t,function(t,e){return e<=i}):function(){return!1}},f._init=f.reposition=function(){this.positionCells(),this.positionSliderAtSelected()},f.getSize=function(){this.size=e(this.element),this.setCellAlign(),this.cursorPosition=this.size.innerWidth*this.cellAlign},{left:0,center:.5,right:1}),g=(f.setCellAlign=function(){var t=this.options,e=t.cellAlign,t=t.rightToLeft,i=p[e];this.cellAlign=void 0!==i?i:e,t&&(this.cellAlign=1-this.cellAlign)},f.setGallerySize=function(){var t;this.options.setGallerySize&&(t=this.options.adaptiveHeight&&this.selectedSlide?this.selectedSlide.height:this.maxCellHeight,this.viewport.style.height="".concat(t,"px"))},f._updateWrapShiftCells=function(){var t,e;this.isWrapping=this.getIsWrapping(),this.isWrapping&&(this._unshiftCells(this.beforeShiftCells),this._unshiftCells(this.afterShiftCells),e=this.cursorPosition,t=this.cells.length-1,this.beforeShiftCells=this._getGapCells(e,t,-1),e=this.size.innerWidth-this.cursorPosition,this.afterShiftCells=this._getGapCells(e,0,1))},f.getIsWrapping=function(){var t=this.options.wrapAround;if(!t||this.slides.length<2)return!1;if("fill"===t){var e=this.slideableWidth-this.size.innerWidth;if(!(e>this.size.innerWidth)){var i,n=_createForOfIteratorHelper(this.cells);try{for(n.s();!(i=n.n()).done;)if(i.value.size.outerWidth>e)return!1}catch(t){n.e(t)}finally{n.f()}}}return!0},f._getGapCells=function(t,e,i){for(var n=[];0<t;){var s=this.cells[e];if(!s)break;n.push(s),e+=i,t-=s.size.outerWidth}return n},f._containSlides=function(){var e,i,n,s=this;this.options.contain&&!this.isWrapping&&this.cells.length&&((e=this.slideableWidth-this.getLastCell().size[this.endMargin])<this.size.innerWidth?this.slides.forEach(function(t){t.target=e*s.cellAlign}):(i=this.cursorPosition+this.cells[0].size[this.beginMargin],n=e-this.size.innerWidth*(1-this.cellAlign),this.slides.forEach(function(t){t.target=Math.max(t.target,i),t.target=Math.min(t.target,n)})))},f.dispatchEvent=function(t,e,i){var n=e?[e].concat(i):i;this.emitEvent(t,n),r&&this.$element&&(n=t+=this.options.namespaceJQueryEvents?".flickity":"",e&&((e=new r.Event(e)).type=t,n=e),this.$element.trigger(n,i))},["dragStart","dragMove","dragEnd","pointerDown","pointerMove","pointerEnd","staticClick"]),m=f.emitEvent,t=(f.emitEvent=function(t,e){var i,n;"staticClick"===t&&(i=(n=this.getParentCell(e[0].target))&&n.element,n=n&&this.cells.indexOf(n),e=e.concat(i,n)),m.call(this,t,e),g.includes(t)&&r&&this.$element&&(t+=this.options.namespaceJQueryEvents?".flickity":"",i=e.shift(0),(n=new r.Event(i)).type=t,this.$element.trigger(n,e))},f.select=function(t,e,i){this.isActive&&(t=parseInt(t,10),this._wrapSelect(t),(this.isWrapping||e)&&(t=l.modulo(t,this.slides.length)),this.slides[t])&&(e=this.selectedIndex,this.selectedIndex=t,this.updateSelectedSlide(),i?this.positionSliderAtSelected():this.startAnimation(),this.options.adaptiveHeight&&this.setGallerySize(),this.dispatchEvent("select",null,[t]),t!==e)&&this.dispatchEvent("change",null,[t])},f._wrapSelect=function(t){var e,i,n,s,o,r;this.isWrapping&&(e=this.selectedIndex,i=this.slideableWidth,n=this.slides.length,this.isDragSelect||(r=l.modulo(t,n),s=Math.abs(r-e),o=Math.abs(r+n-e),r=Math.abs(r-n-e),o<s?t+=n:r<s&&(t-=n)),t<0?this.x-=i:n<=t&&(this.x+=i))},f.previous=function(t,e){this.select(this.selectedIndex-1,t,e)},f.next=function(t,e){this.select(this.selectedIndex+1,t,e)},f.updateSelectedSlide=function(){var t=this.slides[this.selectedIndex];t&&(this.unselectSelectedSlide(),(this.selectedSlide=t).select(),this.selectedCells=t.cells,this.selectedElements=t.getCellElements(),this.selectedCell=t.cells[0],this.selectedElement=this.selectedElements[0])},f.unselectSelectedSlide=function(){this.selectedSlide&&this.selectedSlide.unselect()},f.selectInitialIndex=function(){var t=this.options.initialIndex;if(this.isInitActivated)this.select(this.selectedIndex,!1,!0);else{if(t&&"string"==typeof t)if(this.queryCell(t))return void this.selectCell(t,!1,!0);var e=0;t&&this.slides[t]&&(e=t),this.select(e,!1,!0)}},f.selectCell=function(t,e,i){var t=this.queryCell(t);t&&(t=this.getCellSlideIndex(t),this.select(t,e,i))},f.getCellSlideIndex=function(e){var t=this.slides.find(function(t){return t.cells.includes(e)});return this.slides.indexOf(t)},f.getCell=function(t){var e,i=_createForOfIteratorHelper(this.cells);try{for(i.s();!(e=i.n()).done;){var n=e.value;if(n.element===t)return n}}catch(t){i.e(t)}finally{i.f()}},f.getCells=function(t){var e=this;return(t=l.makeArray(t)).map(function(t){return e.getCell(t)}).filter(Boolean)},f.getCellElements=function(){return this.cells.map(function(t){return t.element})},f.getParentCell=function(t){var e=this.getCell(t);return e||(e=t.closest(".flickity-slider > *"),this.getCell(e))},f.getAdjacentCellElements=function(t,e){if(!t)return this.selectedSlide.getCellElements();e=void 0===e?this.selectedIndex:e;var i=this.slides.length;if(i<=1+2*t)return this.getCellElements();for(var n=[],s=e-t;s<=e+t;s++){var o=this.isWrapping?l.modulo(s,i):s,o=this.slides[o];o&&(n=n.concat(o.getCellElements()))}return n},f.queryCell=function(t){return"number"==typeof t?this.cells[t]:("string"==typeof t&&!t.match(/^[#.]?[\d/]/)&&(t=this.element.querySelector(t)),this.getCell(t))},f.uiChange=function(){this.emitEvent("uiChange")},f.onresize=function(){this.watchCSS(),this.resize()},l.debounceMethod(u,"onresize",150),f.resize=function(){var t;!this.isActive||this.isAnimating||this.isDragging||(this.getSize(),this.isWrapping&&(this.x=l.modulo(this.x,this.slideableWidth)),this.positionCells(),this._updateWrapShiftCells(),this.setGallerySize(),this.emitEvent("resize"),t=this.selectedElements&&this.selectedElements[0],this.selectCell(t,!1,!0))},f.watchCSS=function(){this.options.watchCSS&&(s(this.element,":after").content.includes("flickity")?this.activate():this.deactivate())},f.onkeydown=function(t){var e=document.activeElement,t=u.keyboardHandlers[t.key];this.options.accessibility&&e&&t&&this.focusableElems.some(function(t){return e===t})&&t.call(this)},u.keyboardHandlers={ArrowLeft:function(){this.uiChange(),this[this.options.rightToLeft?"next":"previous"]()},ArrowRight:function(){this.uiChange(),this[this.options.rightToLeft?"previous":"next"]()}},f.focus=function(){this.element.focus({preventScroll:!0})},f.deactivate=function(){var t;this.isActive&&(this.element.classList.remove("flickity-enabled"),this.element.classList.remove("flickity-rtl"),this.unselectSelectedSlide(),this.cells.forEach(function(t){return t.destroy()}),this.viewport.remove(),(t=this.element).append.apply(t,_toConsumableArray(this.slider.children)),this.options.accessibility&&(this.element.removeAttribute("tabIndex"),this.element.removeEventListener("keydown",this)),this.isActive=!1,this.emitEvent("deactivate"))},f.destroy=function(){this.deactivate(),a.removeEventListener("resize",this),this.allOff(),this.emitEvent("destroy"),r&&this.$element&&r.removeData(this.element,"flickity"),delete this.element.flickityGUID,delete d[this.guid]},Object.assign(f,n),u.data=function(t){if(t=l.getQueryElement(t))return d[t.flickityGUID]},l.htmlInit(u,"flickity"),a.jQueryBridget);return r&&t&&t("flickity",u,r),u.setJQuery=function(t){r=t},u.Cell=i,u.Slide=h,u},"object"==_typeof(e)&&e.exports?e.exports=s(n,t("ev-emitter"),t("get-size"),t("fizzy-ui-utils"),t("./cell"),t("./slide"),t("./animate")):(e=n.Flickity,n.Flickity=s(n,n.EvEmitter,n.getSize,n.fizzyUIUtils,e.Cell,e.Slide,e.animatePrototype))},{"./animate":24,"./cell":25,"./slide":34,"ev-emitter":2,"fizzy-ui-utils":3,"get-size":35}],27:[function(t,e,i){var n,s;n="undefined"!=typeof window?window:this,s=function(s,t,e,o){Object.assign(t.defaults,{draggable:">1",dragThreshold:3});var i=t.prototype;function r(){return{x:s.pageXOffset,y:s.pageYOffset}}return Object.assign(i,e.prototype),i.touchActionValue="",t.create.drag=function(){this.on("activate",this.onActivateDrag),this.on("uiChange",this._uiChangeDrag),this.on("deactivate",this.onDeactivateDrag),this.on("cellChange",this.updateDraggable),this.on("pointerDown",this.handlePointerDown),this.on("pointerUp",this.handlePointerUp),this.on("pointerDown",this.handlePointerDone),this.on("dragStart",this.handleDragStart),this.on("dragMove",this.handleDragMove),this.on("dragEnd",this.handleDragEnd),this.on("staticClick",this.handleStaticClick)},i.onActivateDrag=function(){this.handles=[this.viewport],this.bindHandles(),this.updateDraggable()},i.onDeactivateDrag=function(){this.unbindHandles(),this.element.classList.remove("is-draggable")},i.updateDraggable=function(){">1"===this.options.draggable?this.isDraggable=1<this.slides.length:this.isDraggable=this.options.draggable,this.element.classList.toggle("is-draggable",this.isDraggable)},i._uiChangeDrag=function(){delete this.isFreeScrolling},i.handlePointerDown=function(t){var e,i,n;this.isDraggable&&(e="touchstart"===t.type,i="touch"===t.pointerType,n=t.target.matches("input, textarea, select"),e||i||n||t.preventDefault(),n||this.focus(),document.activeElement!==this.element&&document.activeElement.blur(),this.dragX=this.x,this.viewport.classList.add("is-pointer-down"),this.pointerDownScroll=r(),s.addEventListener("scroll",this)),this.bindActivePointerEvents(t)},i.hasDragStarted=function(t){return Math.abs(t.x)>this.options.dragThreshold},i.handlePointerUp=function(){delete this.isTouchScrolling,this.viewport.classList.remove("is-pointer-down")},i.handlePointerDone=function(){s.removeEventListener("scroll",this),delete this.pointerDownScroll},i.handleDragStart=function(){this.isDraggable&&(this.dragStartPosition=this.x,this.startAnimation(),s.removeEventListener("scroll",this))},i.handleDragMove=function(t,e,i){this.isDraggable&&(t.preventDefault(),this.previousDragX=this.dragX,t=this.options.rightToLeft?-1:1,this.isWrapping&&(i.x%=this.slideableWidth),i=this.dragStartPosition+i.x*t,this.isWrapping||(i=(i=(t=Math.max(-this.slides[0].target,this.dragStartPosition))<i?.5*(i+t):i)<(t=Math.min(-this.getLastSlide().target,this.dragStartPosition))?.5*(i+t):i),this.dragX=i,this.dragMoveTime=new Date)},i.handleDragEnd=function(){var t,e,i;this.isDraggable&&((t=this.options.freeScroll)&&(this.isFreeScrolling=!0),e=this.dragEndRestingSelect(),t&&!this.isWrapping?(i=this.getRestingPosition(),this.isFreeScrolling=-i>this.slides[0].target&&-i<this.getLastSlide().target):t||e!==this.selectedIndex||(e+=this.dragEndBoostSelect()),delete this.previousDragX,this.isDragSelect=this.isWrapping,this.select(e),delete this.isDragSelect)},i.dragEndRestingSelect=function(){var t=this.getRestingPosition(),e=Math.abs(this.getSlideDistance(-t,this.selectedIndex)),i=this._getClosestResting(t,e,1),t=this._getClosestResting(t,e,-1);return(i.distance<t.distance?i:t).index},i._getClosestResting=function(t,e,i){for(var n=this.selectedIndex,s=1/0,o=this.options.contain&&!this.isWrapping?function(t,e){return t<=e}:function(t,e){return t<e};o(e,s)&&(s=e,null!==(e=this.getSlideDistance(-t,n+=i)));)e=Math.abs(e);return{distance:s,index:n-i}},i.getSlideDistance=function(t,e){var i=this.slides.length,n=this.options.wrapAround&&1<i,s=n?o.modulo(e,i):e,s=this.slides[s];return s?(n=n?this.slideableWidth*Math.floor(e/i):0,t-(s.target+n)):null},i.dragEndBoostSelect=function(){var t,e;return void 0===this.previousDragX||!this.dragMoveTime||100<new Date-this.dragMoveTime?0:(t=this.getSlideDistance(-this.dragX,this.selectedIndex),e=this.previousDragX-this.dragX,0<t&&0<e?1:t<0&&e<0?-1:0)},i.onscroll=function(){var t=r(),e=this.pointerDownScroll.x-t.x,t=this.pointerDownScroll.y-t.y;(3<Math.abs(e)||3<Math.abs(t))&&this.pointerDone()},t},"object"==_typeof(e)&&e.exports?e.exports=s(n,t("./core"),t("unidragger"),t("fizzy-ui-utils")):n.Flickity=s(n,n.Flickity,n.Unidragger,n.fizzyUIUtils)},{"./core":26,"fizzy-ui-utils":3,unidragger:38}],28:[function(t,e,i){var n,s;n="undefined"!=typeof window?window:this,s=function(t,e){return t.create.imagesLoaded=function(){this.on("activate",this.imagesLoaded)},t.prototype.imagesLoaded=function(){var i=this;this.options.imagesLoaded&&e(this.slider).on("progress",function(t,e){e=i.getParentCell(e.img);i.cellSizeChange(e&&e.element),i.options.freeScroll||i.positionSliderAtSelected()})},t},"object"==_typeof(e)&&e.exports?e.exports=s(t("./core"),t("imagesloaded")):s(n.Flickity,n.imagesLoaded)},{"./core":26,imagesloaded:36}],29:[function(t,e,i){var n;"object"==_typeof(e)&&e.exports&&(n=t("./core"),t("./drag"),t("./prev-next-button"),t("./page-dots"),t("./player"),t("./add-remove-cell"),t("./lazyload"),t("./imagesloaded"),e.exports=n)},{"./add-remove-cell":23,"./core":26,"./drag":27,"./imagesloaded":28,"./lazyload":30,"./page-dots":31,"./player":32,"./prev-next-button":33}],30:[function(t,e,i){var n,s;n="undefined"!=typeof window?window:this,s=function(t,e){var s="data-flickity-lazyload",o="".concat(s,"-src"),r="".concat(s,"-srcset"),a="img[".concat(s,"], img[").concat(o,"], ")+"img[".concat(r,"], source[").concat(r,"]"),i=(t.create.lazyLoad=function(){this.on("select",this.lazyLoad),this.handleLazyLoadComplete=this.onLazyLoadComplete.bind(this)},t.prototype);function n(t){if(t.matches("img")){var e=t.getAttribute(s),i=t.getAttribute(o),n=t.getAttribute(r);if(e||i||n)return t}return _toConsumableArray(t.querySelectorAll(a))}function l(t,e){this.img=t,this.onComplete=e,this.load()}return i.lazyLoad=function(){var e=this,t=this.options.lazyLoad;t&&this.getAdjacentCellElements("number"==typeof t?t:0).map(n).flat().forEach(function(t){return new l(t,e.handleLazyLoadComplete)})},i.onLazyLoadComplete=function(t,e){t=this.getParentCell(t),t=t&&t.element;this.cellSizeChange(t),this.dispatchEvent("lazyLoad",e,t)},l.prototype.handleEvent=e.handleEvent,l.prototype.load=function(){this.img.addEventListener("load",this),this.img.addEventListener("error",this);var t=this.img.getAttribute(s)||this.img.getAttribute(o),e=this.img.getAttribute(r);this.img.src=t,e&&this.img.setAttribute("srcset",e),this.img.removeAttribute(s),this.img.removeAttribute(o),this.img.removeAttribute(r)},l.prototype.onload=function(t){this.complete(t,"flickity-lazyloaded")},l.prototype.onerror=function(t){this.complete(t,"flickity-lazyerror")},l.prototype.complete=function(t,e){this.img.removeEventListener("load",this),this.img.removeEventListener("error",this),(this.img.parentNode.matches("picture")?this.img.parentNode:this.img).classList.add(e),this.onComplete(this.img,t)},t.LazyLoader=l,t},"object"==_typeof(e)&&e.exports?e.exports=s(t("./core"),t("fizzy-ui-utils")):s(n.Flickity,n.fizzyUIUtils)},{"./core":26,"fizzy-ui-utils":3}],31:[function(t,e,i){var n,s;n="undefined"!=typeof window?window:this,s=function(t,i){function e(){this.holder=document.createElement("div"),this.holder.className="flickity-page-dots",this.dots=[]}e.prototype.setDots=function(t){t-=this.dots.length;0<t?this.addDots(t):t<0&&this.removeDots(-t)},e.prototype.addDots=function(t){var e,n=this,t=new Array(t).fill().map(function(t,e){var i=document.createElement("button"),e=(i.setAttribute("type","button"),e+1+n.dots.length);return i.className="flickity-page-dot",i.textContent="View slide ".concat(e),i});(e=this.holder).append.apply(e,_toConsumableArray(t)),this.dots=this.dots.concat(t)},e.prototype.removeDots=function(t){this.dots.splice(this.dots.length-t,t).forEach(function(t){return t.remove()})},e.prototype.updateSelected=function(t){this.selectedDot&&(this.selectedDot.classList.remove("is-selected"),this.selectedDot.removeAttribute("aria-current")),this.dots.length&&(this.selectedDot=this.dots[t],this.selectedDot.classList.add("is-selected"),this.selectedDot.setAttribute("aria-current","step"))},t.PageDots=e,Object.assign(t.defaults,{pageDots:!0}),t.create.pageDots=function(){this.options.pageDots&&(this.pageDots=new e,this.handlePageDotsClick=this.onPageDotsClick.bind(this),this.on("activate",this.activatePageDots),this.on("select",this.updateSelectedPageDots),this.on("cellChange",this.updatePageDots),this.on("resize",this.updatePageDots),this.on("deactivate",this.deactivatePageDots))};var n=t.prototype;return n.activatePageDots=function(){var t;this.pageDots.setDots(this.slides.length),(t=this.focusableElems).push.apply(t,_toConsumableArray(this.pageDots.dots)),this.pageDots.holder.addEventListener("click",this.handlePageDotsClick),this.element.append(this.pageDots.holder)},n.onPageDotsClick=function(t){t=this.pageDots.dots.indexOf(t.target);-1!==t&&(this.uiChange(),this.select(t))},n.updateSelectedPageDots=function(){this.pageDots.updateSelected(this.selectedIndex)},n.updatePageDots=function(){var t,e=this;this.pageDots.dots.forEach(function(t){i.removeFrom(e.focusableElems,t)}),this.pageDots.setDots(this.slides.length),(t=this.focusableElems).push.apply(t,_toConsumableArray(this.pageDots.dots))},n.deactivatePageDots=function(){this.pageDots.holder.remove(),this.pageDots.holder.removeEventListener("click",this.handlePageDotsClick)},t.PageDots=e,t},"object"==_typeof(e)&&e.exports?e.exports=s(t("./core"),t("fizzy-ui-utils")):s(n.Flickity,n.fizzyUIUtils)},{"./core":26,"fizzy-ui-utils":3}],32:[function(t,e,i){var n,s;n="undefined"!=typeof window?window:this,s=function(t){function e(t,e){this.autoPlay=t,this.onTick=e,this.state="stopped",this.onVisibilityChange=this.visibilityChange.bind(this),this.onVisibilityPlay=this.visibilityPlay.bind(this)}e.prototype.play=function(){"playing"!==this.state&&(document.hidden?document.addEventListener("visibilitychange",this.onVisibilityPlay):(this.state="playing",document.addEventListener("visibilitychange",this.onVisibilityChange),this.tick()))},e.prototype.tick=function(){var t,e=this;"playing"===this.state&&(t="number"==typeof this.autoPlay?this.autoPlay:3e3,this.clear(),this.timeout=setTimeout(function(){e.onTick(),e.tick()},t))},e.prototype.stop=function(){this.state="stopped",this.clear(),document.removeEventListener("visibilitychange",this.onVisibilityChange)},e.prototype.clear=function(){clearTimeout(this.timeout)},e.prototype.pause=function(){"playing"===this.state&&(this.state="paused",this.clear())},e.prototype.unpause=function(){"paused"===this.state&&this.play()},e.prototype.visibilityChange=function(){this[document.hidden?"pause":"unpause"]()},e.prototype.visibilityPlay=function(){this.play(),document.removeEventListener("visibilitychange",this.onVisibilityPlay)},Object.assign(t.defaults,{pauseAutoPlayOnHover:!0}),t.create.player=function(){var t=this;this.player=new e(this.options.autoPlay,function(){t.next(!0)}),this.on("activate",this.activatePlayer),this.on("uiChange",this.stopPlayer),this.on("pointerDown",this.stopPlayer),this.on("deactivate",this.deactivatePlayer)};var i=t.prototype;return i.activatePlayer=function(){this.options.autoPlay&&(this.player.play(),this.element.addEventListener("mouseenter",this))},i.playPlayer=function(){this.player.play()},i.stopPlayer=function(){this.player.stop()},i.pausePlayer=function(){this.player.pause()},i.unpausePlayer=function(){this.player.unpause()},i.deactivatePlayer=function(){this.player.stop(),this.element.removeEventListener("mouseenter",this)},i.onmouseenter=function(){this.options.pauseAutoPlayOnHover&&(this.player.pause(),this.element.addEventListener("mouseleave",this))},i.onmouseleave=function(){this.player.unpause(),this.element.removeEventListener("mouseleave",this)},t.Player=e,t},"object"==_typeof(e)&&e.exports?e.exports=s(t("./core")):s(n.Flickity)},{"./core":26}],33:[function(t,e,i){var n,s;n="undefined"!=typeof window?window:this,s=function(t){var h="http://www.w3.org/2000/svg";function s(t,e,i){this.increment=t,this.direction=e,this.isPrevious="previous"===t,this.isLeft="left"===e,this._create(i)}s.prototype._create=function(t){var e=this.element=document.createElement("button"),i=(e.className="flickity-button flickity-prev-next-button ".concat(this.increment),this.isPrevious?"Previous":"Next"),i=(e.setAttribute("type","button"),e.setAttribute("aria-label",i),this.disable(),this.createSVG(i,t));e.append(i)},s.prototype.createSVG=function(t,e){var i,n,s,o,r=document.createElementNS(h,"svg"),a=(r.setAttribute("class","flickity-button-icon"),r.setAttribute("viewBox","0 0 100 100"),document.createElementNS(h,"title")),t=(a.append(t),document.createElementNS(h,"path")),l="string"==typeof(e=e)?e:(l=e.x0,i=e.x1,n=e.x2,s=e.x3,o=e.y1,e=e.y2,"M ".concat(l,", 50\n    L ").concat(i,", ").concat(o+50,"\n    L ").concat(n,", ").concat(e+50,"\n    L ").concat(s,", 50\n    L ").concat(n,", ").concat(50-e,"\n    L ").concat(i,", ").concat(50-o,"\n    Z"));return t.setAttribute("d",l),t.setAttribute("class","arrow"),this.isLeft||t.setAttribute("transform","translate(100, 100) rotate(180)"),r.append(a,t),r},s.prototype.enable=function(){this.element.removeAttribute("disabled")},s.prototype.disable=function(){this.element.setAttribute("disabled",!0)},Object.assign(t.defaults,{prevNextButtons:!0,arrowShape:{x0:10,x1:60,y1:50,x2:70,y2:40,x3:30}}),t.create.prevNextButtons=function(){var t,e,i,n=this;this.options.prevNextButtons&&(t=(e=this.options).rightToLeft,e=e.arrowShape,i=t?"left":"right",this.prevButton=new s("previous",t?"right":"left",e),this.nextButton=new s("next",i,e),this.focusableElems.push(this.prevButton.element),this.focusableElems.push(this.nextButton.element),this.handlePrevButtonClick=function(){n.uiChange(),n.previous()},this.handleNextButtonClick=function(){n.uiChange(),n.next()},this.on("activate",this.activatePrevNextButtons),this.on("select",this.updatePrevNextButtons))};var e=t.prototype;return e.updatePrevNextButtons=function(){var t=this.slides.length?this.slides.length-1:0;this.updatePrevNextButton(this.prevButton,0),this.updatePrevNextButton(this.nextButton,t)},e.updatePrevNextButton=function(t,e){this.isWrapping&&1<this.slides.length?t.enable():(t[(e=this.selectedIndex!==e)?"enable":"disable"](),e||document.activeElement!==t.element||this.focus())},e.activatePrevNextButtons=function(){this.prevButton.element.addEventListener("click",this.handlePrevButtonClick),this.nextButton.element.addEventListener("click",this.handleNextButtonClick),this.element.append(this.prevButton.element,this.nextButton.element),this.on("deactivate",this.deactivatePrevNextButtons)},e.deactivatePrevNextButtons=function(){this.prevButton.element.remove(),this.nextButton.element.remove(),this.prevButton.element.removeEventListener("click",this.handlePrevButtonClick),this.nextButton.element.removeEventListener("click",this.handleNextButtonClick),this.off("deactivate",this.deactivatePrevNextButtons)},t.PrevNextButton=s,t},"object"==_typeof(e)&&e.exports?e.exports=s(t("./core")):s(n.Flickity)},{"./core":26}],34:[function(t,e,i){var n,s;n="undefined"!=typeof window?window:this,s=function(){function t(t,e,i){this.beginMargin=t,this.endMargin=e,this.cellAlign=i,this.cells=[],this.outerWidth=0,this.height=0}var e=t.prototype;return e.addCell=function(t){this.cells.push(t),this.outerWidth+=t.size.outerWidth,this.height=Math.max(t.size.outerHeight,this.height),1===this.cells.length&&(this.x=t.x,this.firstMargin=t.size[this.beginMargin])},e.updateTarget=function(){var t=this.getLastCell(),t=t?t.size[this.endMargin]:0,t=this.outerWidth-(this.firstMargin+t);this.target=this.x+this.firstMargin+t*this.cellAlign},e.getLastCell=function(){return this.cells[this.cells.length-1]},e.select=function(){this.cells.forEach(function(t){return t.select()})},e.unselect=function(){this.cells.forEach(function(t){return t.unselect()})},e.getCellElements=function(){return this.cells.map(function(t){return t.element})},t},"object"==_typeof(e)&&e.exports?e.exports=s():(n.Flickity=n.Flickity||{},n.Flickity.Slide=s())},{}],35:[function(t,e,i){var n,s;n=window,s=function(){function d(t){var e=parseFloat(t);return-1==t.indexOf("%")&&!isNaN(e)&&e}var u=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"];u.length;return function(t){var i,e,n,s,o,r,a,l,h,c;if((t="string"==typeof t?document.querySelector(t):t)&&"object"==_typeof(t)&&t.nodeType)return"none"==(i=getComputedStyle(t)).display?(e={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},u.forEach(function(t){e[t]=0}),e):((n={}).width=t.offsetWidth,n.height=t.offsetHeight,t=n.isBorderBox="border-box"==i.boxSizing,u.forEach(function(t){var e=i[t],e=parseFloat(e);n[t]=isNaN(e)?0:e}),s=n.paddingLeft+n.paddingRight,o=n.paddingTop+n.paddingBottom,r=n.marginLeft+n.marginRight,a=n.marginTop+n.marginBottom,l=n.borderLeftWidth+n.borderRightWidth,h=n.borderTopWidth+n.borderBottomWidth,!1!==(c=d(i.width))&&(n.width=c+(t?0:s+l)),!1!==(c=d(i.height))&&(n.height=c+(t?0:o+h)),n.innerWidth=n.width-(s+l),n.innerHeight=n.height-(o+h),n.outerWidth=n.width+r,n.outerHeight=n.height+a,n)}},"object"==_typeof(e)&&e.exports?e.exports=s():n.getSize=s()},{}],36:[function(t,e,i){var n,s;n="undefined"!=typeof window?window:this,s=function(e,t){var o=e.jQuery,r=e.console;function a(t,e,i){if(!(this instanceof a))return new a(t,e,i);var n,s=t;(s="string"==typeof t?document.querySelectorAll(t):s)?(this.elements=(n=s,Array.isArray(n)?n:"object"==_typeof(n)&&"number"==typeof n.length?_toConsumableArray(n):[n]),this.options={},"function"==typeof e?i=e:Object.assign(this.options,e),i&&this.on("always",i),this.getImages(),o&&(this.jqDeferred=new o.Deferred),setTimeout(this.check.bind(this))):r.error("Bad element for imagesLoaded ".concat(s||t))}(a.prototype=Object.create(t.prototype)).getImages=function(){this.images=[],this.elements.forEach(this.addElementImages,this)};var l=[1,9,11],s=(a.prototype.addElementImages=function(t){"IMG"===t.nodeName&&this.addImage(t),!0===this.options.background&&this.addElementBackgroundImages(t);var e=t.nodeType;if(e&&l.includes(e)){var i,n=_createForOfIteratorHelper(t.querySelectorAll("img"));try{for(n.s();!(i=n.n()).done;){var s=i.value;this.addImage(s)}}catch(t){n.e(t)}finally{n.f()}if("string"==typeof this.options.background){var o,r=_createForOfIteratorHelper(t.querySelectorAll(this.options.background));try{for(r.s();!(o=r.n()).done;){var a=o.value;this.addElementBackgroundImages(a)}}catch(t){r.e(t)}finally{r.f()}}}},/url\((['"])?(.*?)\1\)/gi);function i(t){this.img=t}function n(t,e){this.url=t,this.element=e,this.img=new Image}return a.prototype.addElementBackgroundImages=function(t){var e=getComputedStyle(t);if(e)for(var i=s.exec(e.backgroundImage);null!==i;){var n=i&&i[2];n&&this.addBackground(n,t),i=s.exec(e.backgroundImage)}},a.prototype.addImage=function(t){t=new i(t);this.images.push(t)},a.prototype.addBackground=function(t,e){t=new n(t,e);this.images.push(t)},a.prototype.check=function(){var e,n=this;this.progressedCount=0,this.hasAnyBroken=!1,this.images.length?(e=function(t,e,i){setTimeout(function(){n.progress(t,e,i)})},this.images.forEach(function(t){t.once("progress",e),t.check()})):this.complete()},a.prototype.progress=function(t,e,i){this.progressedCount++,this.hasAnyBroken=this.hasAnyBroken||!t.isLoaded,this.emitEvent("progress",[this,t,e]),this.jqDeferred&&this.jqDeferred.notify&&this.jqDeferred.notify(this,t),this.progressedCount===this.images.length&&this.complete(),this.options.debug&&r&&r.log("progress: ".concat(i),t,e)},a.prototype.complete=function(){var t=this.hasAnyBroken?"fail":"done";this.isComplete=!0,this.emitEvent(t,[this]),this.emitEvent("always",[this]),this.jqDeferred&&(t=this.hasAnyBroken?"reject":"resolve",this.jqDeferred[t](this))},(i.prototype=Object.create(t.prototype)).check=function(){this.getIsImageComplete()?this.confirm(0!==this.img.naturalWidth,"naturalWidth"):(this.proxyImage=new Image,this.img.crossOrigin&&(this.proxyImage.crossOrigin=this.img.crossOrigin),this.proxyImage.addEventListener("load",this),this.proxyImage.addEventListener("error",this),this.img.addEventListener("load",this),this.img.addEventListener("error",this),this.proxyImage.src=this.img.currentSrc||this.img.src)},i.prototype.getIsImageComplete=function(){return this.img.complete&&this.img.naturalWidth},i.prototype.confirm=function(t,e){this.isLoaded=t;t=this.img.parentNode,t="PICTURE"===t.nodeName?t:this.img;this.emitEvent("progress",[this,t,e])},i.prototype.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},i.prototype.onload=function(){this.confirm(!0,"onload"),this.unbindEvents()},i.prototype.onerror=function(){this.confirm(!1,"onerror"),this.unbindEvents()},i.prototype.unbindEvents=function(){this.proxyImage.removeEventListener("load",this),this.proxyImage.removeEventListener("error",this),this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},(n.prototype=Object.create(i.prototype)).check=function(){this.img.addEventListener("load",this),this.img.addEventListener("error",this),this.img.src=this.url,this.getIsImageComplete()&&(this.confirm(0!==this.img.naturalWidth,"naturalWidth"),this.unbindEvents())},n.prototype.unbindEvents=function(){this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},n.prototype.confirm=function(t,e){this.isLoaded=t,this.emitEvent("progress",[this,this.element,e])},(a.makeJQueryPlugin=function(t){(t=t||e.jQuery)&&((o=t).fn.imagesLoaded=function(t,e){return new a(this,t,e).jqDeferred.promise(o(this))})})(),a},"object"==_typeof(e)&&e.exports?e.exports=s(n,t("ev-emitter")):n.imagesLoaded=s(n,n.EvEmitter)},{"ev-emitter":2}],37:[function(t,e,i){var n="undefined"!=typeof window?window:{},s=function(n,u,o){var f,p,t,g,T,r,m,e,c,N,a,B,j,i,O,l,d,v,U,y,b,E,H,C,R,q,X,G,s,h,V,Q,S,w,$,x,Y,J,Z,z,D,_,k,A,K,tt,et,it,P,nt,st,ot,rt,L,I,F,at,M,lt,ht,ct,W,dt,ut,ft,pt,gt,mt,vt={lazyClass:"lazyload",loadedClass:"lazyloaded",loadingClass:"lazyloading",preloadClass:"lazypreload",errorClass:"lazyerror",autosizesClass:"lazyautosizes",fastLoadedClass:"ls-is-cached",iframeLoadMode:0,srcAttr:"data-src",srcsetAttr:"data-srcset",sizesAttr:"data-sizes",minSize:40,customMedia:{},init:!0,expFactor:1.5,hFac:.8,loadMode:2,loadHidden:!0,ricTimeout:0,throttleDelay:125};for(t in p=n.lazySizesConfig||n.lazysizesConfig||{},vt)t in p||(p[t]=vt[t]);return u&&u.getElementsByClassName?(g=u.documentElement,T=n.HTMLPictureElement,m="getAttribute",e=n[r="addEventListener"].bind(n),c=n.setTimeout,N=n.requestAnimationFrame||c,a=n.requestIdleCallback,B=/^picture$/i,j=["load","error","lazyincluded","_lazyloaded"],i={},O=Array.prototype.forEach,l=function(t,e){return i[e]||(i[e]=new RegExp("(\\s|^)"+e+"(\\s|$)")),i[e].test(t[m]("class")||"")&&i[e]},d=function(t,e){l(t,e)||t.setAttribute("class",(t[m]("class")||"").trim()+" "+e)},v=function(t,e){(e=l(t,e))&&t.setAttribute("class",(t[m]("class")||"").replace(e," "))},U=function t(e,i,n){var s=n?r:"removeEventListener";n&&t(e,i),j.forEach(function(t){e[s](t,i)})},y=function(t,e,i,n,s){var o=u.createEvent("Event");return(i=i||{}).instance=f,o.initEvent(e,!n,!s),o.detail=i,t.dispatchEvent(o),o},b=function(t,e){var i;!T&&(i=n.picturefill||p.pf)?(e&&e.src&&!t[m]("srcset")&&t.setAttribute("srcset",e.src),i({reevaluate:!0,elements:[t]})):e&&e.src&&(t.src=e.src)},E=function(t,e){return(getComputedStyle(t,null)||{})[e]},H=function(t,e,i){for(i=i||t.offsetWidth;i<p.minSize&&e&&!t._lazysizesWidth;)i=e.offsetWidth,e=e.parentNode;return i},G=[],s=X=[],bt._lsFlush=yt,C=bt,h=function(i,t){return t?function(){C(i)}:function(){var t=this,e=arguments;C(function(){i.apply(t,e)})}},V=function(t){function e(){var t=o.now()-n;t<99?c(e,99-t):(a||s)(s)}var i,n,s=function(){i=null,t()};return function(){n=o.now(),i=i||c(e,99)}},st=/^img$/i,ot=/^iframe$/i,rt="onscroll"in n&&!/(gle|ing)bot/.test(navigator.userAgent),F=-1,at=function(t){return(A=null==A?"hidden"==E(u.body,"visibility"):A)||!("hidden"==E(t.parentNode,"visibility")&&"hidden"==E(t,"visibility"))},K=Ct,et=I=L=0,it=p.throttleDelay,P=p.ricTimeout,nt=a&&49<P?function(){a(St,{timeout:P}),P!==p.ricTimeout&&(P=p.ricTimeout)}:h(function(){c(St)},!0),lt=h(wt),ht=function(t){lt({target:t.target})},ct=h(function(e,t,i,n,s){var o,r,a,l,h;(r=y(e,"lazybeforeunveil",t)).defaultPrevented||(n&&(i?d(e,p.autosizesClass):e.setAttribute("sizes",n)),i=e[m](p.srcsetAttr),n=e[m](p.srcAttr),s&&(o=(l=e.parentNode)&&B.test(l.nodeName||"")),a=t.firesLoad||"src"in e&&(i||n||o),r={target:e},d(e,p.loadingClass),a&&(clearTimeout($),$=c(Et,2500),U(e,ht,!0)),o&&O.call(l.getElementsByTagName("source"),xt),i?e.setAttribute("srcset",i):n&&!o&&(ot.test(e.nodeName)?(t=n,0==(h=(l=e).getAttribute("data-load-mode")||p.iframeLoadMode)?l.contentWindow.location.replace(t):1==h&&(l.src=t)):e.src=n),s&&(i||o)&&b(e,{src:n})),e._lazyRace&&delete e._lazyRace,v(e,p.lazyClass),C(function(){var t=e.complete&&1<e.naturalWidth;a&&!t||(t&&d(e,p.fastLoadedClass),wt(r),e._lazyCache=!0,c(function(){"_lazyCache"in e&&delete e._lazyCache},9)),"lazy"==e.loading&&I--},!0)}),dt=V(function(){p.loadMode=3,M()}),Q={_:function(){Y=o.now(),f.elements=u.getElementsByClassName(p.lazyClass),S=u.getElementsByClassName(p.lazyClass+" "+p.preloadClass),e("scroll",M,!0),e("resize",M,!0),e("pageshow",function(t){var e;t.persisted&&(e=u.querySelectorAll("."+p.loadingClass)).length&&e.forEach&&N(function(){e.forEach(function(t){t.complete&&W(t)})})}),n.MutationObserver?new MutationObserver(M).observe(g,{childList:!0,subtree:!0,attributes:!0}):(g[r]("DOMNodeInserted",M,!0),g[r]("DOMAttrModified",M,!0),setInterval(M,999)),e("hashchange",M,!0),["focus","mouseover","click","load","transitionend","animationend"].forEach(function(t){u[r](t,M,!0)}),/d$|^c/.test(u.readyState)?Dt():(e("load",Dt),u[r]("DOMContentLoaded",M),c(Dt,2e4)),f.elements.length?(Ct(),C._lsFlush()):M()},checkElems:M=function(t){var e;(t=!0===t)&&(P=33),tt||(tt=!0,(e=it-(o.now()-et))<0&&(e=0),t||e<9?nt():c(nt,e))},unveil:W=function(t){var e,i,n,s;t._lazyRace||!(!(s="auto"==(n=(i=st.test(t.nodeName))&&(t[m](p.sizesAttr)||t[m]("sizes"))))&&w||!i||!t[m]("src")&&!t.srcset||t.complete||l(t,p.errorClass))&&l(t,p.lazyClass)||(e=y(t,"lazyunveilread").detail,s&&ut.updateElem(t,!0,t.offsetWidth),t._lazyRace=!0,I++,ct(t,e,s,n,i))},_aLSL:zt},pt=h(function(t,e,i,n){var s,o,r;if(t._lazysizesWidth=n,t.setAttribute("sizes",n+="px"),B.test(e.nodeName||""))for(o=0,r=(s=e.getElementsByTagName("source")).length;o<r;o++)s[o].setAttribute("sizes",n);i.detail.dataAttr||b(t,i.detail)}),ut={_:function(){ft=u.getElementsByClassName(p.autosizesClass),e("resize",gt)},checkElems:gt=V(function(){var t,e=ft.length;if(e)for(t=0;t<e;t++)_t(ft[t])}),updateElem:_t},mt=function t(){!t.i&&u.getElementsByClassName&&(t.i=!0,ut._(),Q._())},c(function(){p.init&&mt()}),f={cfg:p,autoSizer:ut,loader:Q,init:mt,uP:b,aC:d,rC:v,hC:l,fire:y,gW:H,rAF:C}):{init:function(){},cfg:p,noSupport:!0};function yt(){var t=s;for(s=X.length?G:X,q=!(R=!0);t.length;)t.shift()();R=!1}function bt(t,e){R&&!e?t.apply(this,arguments):(s.push(t),q||(q=!0,(u.hidden?c:N)(yt)))}function Et(t){I--,t&&!(I<0)&&t.target||(I=0)}function Ct(){var t,e,i,n,s,o,r,a,l,h,c,d=f.elements;if((x=p.loadMode)&&I<8&&(t=d.length)){for(e=0,F++;e<t;e++)if(d[e]&&!d[e]._lazyRace)if(!rt||f.prematureUnveil&&f.prematureUnveil(d[e]))W(d[e]);else if((r=d[e][m]("data-expand"))&&(s=+r)||(s=L),l||(l=!p.expand||p.expand<1?500<g.clientHeight&&500<g.clientWidth?500:370:p.expand,h=(f._defEx=l)*p.expFactor,c=p.hFac,A=null,L<h&&I<1&&2<F&&2<x&&!u.hidden?(L=h,F=0):L=1<x&&1<F&&I<6?l:0),a!==s&&(J=innerWidth+s*c,Z=innerHeight+s,o=-1*s,a=s),h=d[e].getBoundingClientRect(),(k=h.bottom)>=o&&(z=h.top)<=Z&&(_=h.right)>=o*c&&(D=h.left)<=J&&(k||_||D||z)&&(p.loadHidden||at(d[e]))&&(w&&I<3&&!r&&(x<3||F<4)||function(t,e){var i,n=t,s=at(t);for(z-=e,k+=e,D-=e,_+=e;s&&(n=n.offsetParent)&&n!=u.body&&n!=g;)(s=0<(E(n,"opacity")||1))&&"visible"!=E(n,"overflow")&&(i=n.getBoundingClientRect(),s=_>i.left&&D<i.right&&k>i.top-1&&z<i.bottom+1);return s}(d[e],s))){if(W(d[e]),n=!0,9<I)break}else!n&&w&&!i&&I<4&&F<4&&2<x&&(S[0]||p.preloadAfterLoad)&&(S[0]||!r&&(k||_||D||z||"auto"!=d[e][m](p.sizesAttr)))&&(i=S[0]||d[e]);i&&!n&&W(i)}}function St(){tt=!1,et=o.now(),K()}function wt(t){var e=t.target;e._lazyCache?delete e._lazyCache:(Et(t),d(e,p.loadedClass),v(e,p.loadingClass),U(e,ht),y(e,"lazyloaded"))}function xt(t){var e,i=t[m](p.srcsetAttr);(e=p.customMedia[t[m]("data-media")||t[m]("media")])&&t.setAttribute("media",e),i&&t.setAttribute("srcset",i)}function zt(){3==p.loadMode&&(p.loadMode=2),dt()}function Dt(){w||(o.now()-Y<999?c(Dt,999):(w=!0,p.loadMode=3,M(),e("scroll",zt,!0)))}function _t(t,e,i){var n=t.parentNode;n&&(i=H(t,n,i),(e=y(t,"lazybeforesizes",{width:i,dataAttr:!!e})).defaultPrevented||(i=e.detail.width)&&i!==t._lazysizesWidth&&pt(t,n,e,i))}};s=s(n,n.document,Date),n.lazySizes=s,"object"==_typeof(e)&&e.exports&&(e.exports=s)},{}],38:[function(t,e,i){var n,s;n="undefined"!=typeof window?window:this,s=function(s,t){function e(){}var o,i,t=e.prototype=Object.create(t.prototype),r=(t.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},i="ontouchstart"in s?(o="touchstart",["touchmove","touchend","touchcancel"]):s.PointerEvent?(o="pointerdown",["pointermove","pointerup","pointercancel"]):(o="mousedown",["mousemove","mouseup"]),t.touchActionValue="none",t.bindHandles=function(){this._bindHandles("addEventListener",this.touchActionValue)},t.unbindHandles=function(){this._bindHandles("removeEventListener","")},t._bindHandles=function(e,i){var n=this;this.handles.forEach(function(t){t[e](o,n),t[e]("click",n),s.PointerEvent&&(t.style.touchAction=i)})},t.bindActivePointerEvents=function(){var e=this;i.forEach(function(t){s.addEventListener(t,e)})},t.unbindActivePointerEvents=function(){var e=this;i.forEach(function(t){s.removeEventListener(t,e)})},t.withPointer=function(t,e){e.pointerId===this.pointerIdentifier&&this[t](e,e)},t.withTouch=function(t,e){var i,n,s=_createForOfIteratorHelper(e.changedTouches);try{for(s.s();!(n=s.n()).done;){var o=n.value;o.identifier===this.pointerIdentifier&&(i=o)}}catch(t){s.e(t)}finally{s.f()}i&&this[t](e,i)},t.onmousedown=function(t){this.pointerDown(t,t)},t.ontouchstart=function(t){this.pointerDown(t,t.changedTouches[0])},t.onpointerdown=function(t){this.pointerDown(t,t)},["TEXTAREA","INPUT","SELECT","OPTION"]),a=["radio","checkbox","button","submit","image","file"];return t.pointerDown=function(t,e){var i=r.includes(t.target.nodeName),n=a.includes(t.target.type);this.isPointerDown||t.button||i&&!n||(this.isPointerDown=!0,this.pointerIdentifier=void 0!==e.pointerId?e.pointerId:e.identifier,this.pointerDownPointer={pageX:e.pageX,pageY:e.pageY},this.bindActivePointerEvents(),this.emitEvent("pointerDown",[t,e]))},t.onmousemove=function(t){this.pointerMove(t,t)},t.onpointermove=function(t){this.withPointer("pointerMove",t)},t.ontouchmove=function(t){this.withTouch("pointerMove",t)},t.pointerMove=function(t,e){var i={x:e.pageX-this.pointerDownPointer.pageX,y:e.pageY-this.pointerDownPointer.pageY};this.emitEvent("pointerMove",[t,e,i]),!this.isDragging&&this.hasDragStarted(i)&&this.dragStart(t,e),this.isDragging&&this.dragMove(t,e,i)},t.hasDragStarted=function(t){return 3<Math.abs(t.x)||3<Math.abs(t.y)},t.dragStart=function(t,e){this.isDragging=!0,this.isPreventingClicks=!0,this.emitEvent("dragStart",[t,e])},t.dragMove=function(t,e,i){this.emitEvent("dragMove",[t,e,i])},t.onmouseup=function(t){this.pointerUp(t,t)},t.onpointerup=function(t){this.withPointer("pointerUp",t)},t.ontouchend=function(t){this.withTouch("pointerUp",t)},t.pointerUp=function(t,e){this.pointerDone(),this.emitEvent("pointerUp",[t,e]),this.isDragging?this.dragEnd(t,e):this.staticClick(t,e)},t.dragEnd=function(t,e){var i=this;this.isDragging=!1,setTimeout(function(){return delete i.isPreventingClicks}),this.emitEvent("dragEnd",[t,e])},t.pointerDone=function(){this.isPointerDown=!1,delete this.pointerIdentifier,this.unbindActivePointerEvents(),this.emitEvent("pointerDone")},t.onpointercancel=function(t){this.withPointer("pointerCancel",t)},t.ontouchcancel=function(t){this.withTouch("pointerCancel",t)},t.pointerCancel=function(t,e){this.pointerDone(),this.emitEvent("pointerCancel",[t,e])},t.onclick=function(t){this.isPreventingClicks&&t.preventDefault()},t.staticClick=function(t,e){var i=this,n="mouseup"===t.type;n&&this.isIgnoringMouseUp||(this.emitEvent("staticClick",[t,e]),n&&(this.isIgnoringMouseUp=!0,setTimeout(function(){delete i.isIgnoringMouseUp},400)))},e},"object"==_typeof(e)&&e.exports?e.exports=s(n,t("ev-emitter")):n.Unidragger=s(n,n.EvEmitter)},{"ev-emitter":2}],39:[function(t,e,i){arguments[4][7][0].apply(i,arguments)},{dup:7}],40:[function(t,e,i){var n,s;n=window,s=function(n,t){function e(){}var t=e.prototype=Object.create(t.prototype),i=(t.bindStartEvent=function(t){this._bindStartEvent(t,!0)},t.unbindStartEvent=function(t){this._bindStartEvent(t,!1)},t._bindStartEvent=function(t,e){var e=(e=void 0===e||e)?"addEventListener":"removeEventListener",i="mousedown";"ontouchstart"in n?i="touchstart":n.PointerEvent&&(i="pointerdown"),t[e](i,this)},t.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},t.getTouch=function(t){for(var e=0;e<t.length;e++){var i=t[e];if(i.identifier==this.pointerIdentifier)return i}},t.onmousedown=function(t){var e=t.button;e&&0!==e&&1!==e||this._pointerDown(t,t)},t.ontouchstart=function(t){this._pointerDown(t,t.changedTouches[0])},t.onpointerdown=function(t){this._pointerDown(t,t)},t._pointerDown=function(t,e){t.button||this.isPointerDown||(this.isPointerDown=!0,this.pointerIdentifier=void 0!==e.pointerId?e.pointerId:e.identifier,this.pointerDown(t,e))},t.pointerDown=function(t,e){this._bindPostStartEvents(t),this.emitEvent("pointerDown",[t,e])},{mousedown:["mousemove","mouseup"],touchstart:["touchmove","touchend","touchcancel"],pointerdown:["pointermove","pointerup","pointercancel"]});return t._bindPostStartEvents=function(t){t&&((t=i[t.type]).forEach(function(t){n.addEventListener(t,this)},this),this._boundPointerEvents=t)},t._unbindPostStartEvents=function(){this._boundPointerEvents&&(this._boundPointerEvents.forEach(function(t){n.removeEventListener(t,this)},this),delete this._boundPointerEvents)},t.onmousemove=function(t){this._pointerMove(t,t)},t.onpointermove=function(t){t.pointerId==this.pointerIdentifier&&this._pointerMove(t,t)},t.ontouchmove=function(t){var e=this.getTouch(t.changedTouches);e&&this._pointerMove(t,e)},t._pointerMove=function(t,e){this.pointerMove(t,e)},t.pointerMove=function(t,e){this.emitEvent("pointerMove",[t,e])},t.onmouseup=function(t){this._pointerUp(t,t)},t.onpointerup=function(t){t.pointerId==this.pointerIdentifier&&this._pointerUp(t,t)},t.ontouchend=function(t){var e=this.getTouch(t.changedTouches);e&&this._pointerUp(t,e)},t._pointerUp=function(t,e){this._pointerDone(),this.pointerUp(t,e)},t.pointerUp=function(t,e){this.emitEvent("pointerUp",[t,e])},t._pointerDone=function(){this._pointerReset(),this._unbindPostStartEvents(),this.pointerDone()},t._pointerReset=function(){this.isPointerDown=!1,delete this.pointerIdentifier},t.pointerDone=function(){},t.onpointercancel=function(t){t.pointerId==this.pointerIdentifier&&this._pointerCancel(t,t)},t.ontouchcancel=function(t){var e=this.getTouch(t.changedTouches);e&&this._pointerCancel(t,e)},t._pointerCancel=function(t,e){this._pointerDone(),this.pointerCancel(t,e)},t.pointerCancel=function(t,e){this.emitEvent("pointerCancel",[t,e])},e.getPointerPoint=function(t){return{x:t.pageX,y:t.pageY}},e},"function"==typeof define&&define.amd?define(["ev-emitter/ev-emitter"],function(t){return s(n,t)}):"object"==_typeof(e)&&e.exports?e.exports=s(n,t("ev-emitter")):n.Unipointer=s(n,n.EvEmitter)},{"ev-emitter":39}],41:[function(t,e,i){window.Flickity=t("flickity"),t("lazysizes"),t("flickity-imagesloaded"),t("flickity-fullscreen"),t("flickity-as-nav-for"),window.PubSub=t("./scripts/pubsub")},{"./scripts/pubsub":42,flickity:29,"flickity-as-nav-for":4,"flickity-fullscreen":5,"flickity-imagesloaded":6,lazysizes:37}],42:[function(t,e,i){e.exports={EVENTS:{cartUpdated:"cart-updated"},subscribers:{},subscribe:function(t,e){var i=this;return void 0===this.subscribers[t]&&(this.subscribers[t]=[]),this.subscribers[t]=[].concat(_toConsumableArray(this.subscribers[t]),[e]),function(){i.subscribers[t]=i.subscribers[t].filter(function(t){return t!==e})}},publish:function(t,e){this.subscribers[t]&&this.subscribers[t].forEach(function(t){t(e)})}}},{}]},{},[41]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvZGVzYW5kcm8tbWF0Y2hlcy1zZWxlY3Rvci9tYXRjaGVzLXNlbGVjdG9yLmpzIiwiZ2xvYmFsLmpzIiwibm9kZV9tb2R1bGVzL2V2LWVtaXR0ZXIvZXYtZW1pdHRlci5qcyIsIm5vZGVfbW9kdWxlcy9maXp6eS11aS11dGlscy91dGlscy5qcyIsIm5vZGVfbW9kdWxlcy9mbGlja2l0eS1hcy1uYXYtZm9yL2FzLW5hdi1mb3IuanMiLCJub2RlX21vZHVsZXMvZmxpY2tpdHktZnVsbHNjcmVlbi9mdWxsc2NyZWVuLmpzIiwibm9kZV9tb2R1bGVzL2ZsaWNraXR5LWltYWdlc2xvYWRlZC9mbGlja2l0eS1pbWFnZXNsb2FkZWQuanMiLCJub2RlX21vZHVsZXMvZmxpY2tpdHktaW1hZ2VzbG9hZGVkL25vZGVfbW9kdWxlcy9ldi1lbWl0dGVyL2V2LWVtaXR0ZXIuanMiLCJub2RlX21vZHVsZXMvZmxpY2tpdHktaW1hZ2VzbG9hZGVkL25vZGVfbW9kdWxlcy9maXp6eS11aS11dGlscy91dGlscy5qcyIsIm5vZGVfbW9kdWxlcy9mbGlja2l0eS1pbWFnZXNsb2FkZWQvbm9kZV9tb2R1bGVzL2ZsaWNraXR5L2pzL2FkZC1yZW1vdmUtY2VsbC5qcyIsIm5vZGVfbW9kdWxlcy9mbGlja2l0eS1pbWFnZXNsb2FkZWQvbm9kZV9tb2R1bGVzL2ZsaWNraXR5L2pzL2FuaW1hdGUuanMiLCJub2RlX21vZHVsZXMvZmxpY2tpdHktaW1hZ2VzbG9hZGVkL25vZGVfbW9kdWxlcy9mbGlja2l0eS9qcy9jZWxsLmpzIiwibm9kZV9tb2R1bGVzL2ZsaWNraXR5LWltYWdlc2xvYWRlZC9ub2RlX21vZHVsZXMvZmxpY2tpdHkvanMvZHJhZy5qcyIsIm5vZGVfbW9kdWxlcy9mbGlja2l0eS1pbWFnZXNsb2FkZWQvbm9kZV9tb2R1bGVzL2ZsaWNraXR5L2pzL2ZsaWNraXR5LmpzIiwibm9kZV9tb2R1bGVzL2ZsaWNraXR5LWltYWdlc2xvYWRlZC9ub2RlX21vZHVsZXMvZmxpY2tpdHkvanMvcGFnZS1kb3RzLmpzIiwibm9kZV9tb2R1bGVzL2ZsaWNraXR5LWltYWdlc2xvYWRlZC9ub2RlX21vZHVsZXMvZmxpY2tpdHkvanMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvZmxpY2tpdHktaW1hZ2VzbG9hZGVkL25vZGVfbW9kdWxlcy9mbGlja2l0eS9qcy9sYXp5bG9hZC5qcyIsIm5vZGVfbW9kdWxlcy9mbGlja2l0eS1pbWFnZXNsb2FkZWQvbm9kZV9tb2R1bGVzL2ZsaWNraXR5L2pzL3BsYXllci5qcyIsIm5vZGVfbW9kdWxlcy9mbGlja2l0eS1pbWFnZXNsb2FkZWQvbm9kZV9tb2R1bGVzL2ZsaWNraXR5L2pzL3ByZXYtbmV4dC1idXR0b24uanMiLCJub2RlX21vZHVsZXMvZmxpY2tpdHktaW1hZ2VzbG9hZGVkL25vZGVfbW9kdWxlcy9nZXQtc2l6ZS9nZXQtc2l6ZS5qcyIsIm5vZGVfbW9kdWxlcy9mbGlja2l0eS1pbWFnZXNsb2FkZWQvbm9kZV9tb2R1bGVzL2ltYWdlc2xvYWRlZC9pbWFnZXNsb2FkZWQuanMiLCJub2RlX21vZHVsZXMvZmxpY2tpdHktaW1hZ2VzbG9hZGVkL25vZGVfbW9kdWxlcy9mbGlja2l0eS9qcy9zbGlkZS5qcyIsIm5vZGVfbW9kdWxlcy9mbGlja2l0eS1pbWFnZXNsb2FkZWQvbm9kZV9tb2R1bGVzL3VuaWRyYWdnZXIvdW5pZHJhZ2dlci5qcyIsIm5vZGVfbW9kdWxlcy9mbGlja2l0eS9qcy9hbmltYXRlLmpzIiwibm9kZV9tb2R1bGVzL2ZsaWNraXR5L2pzL2NvcmUuanMiLCJub2RlX21vZHVsZXMvZmxpY2tpdHkvanMvYWRkLXJlbW92ZS1jZWxsLmpzIiwibm9kZV9tb2R1bGVzL2ZsaWNraXR5L2pzL2NlbGwuanMiLCJub2RlX21vZHVsZXMvZmxpY2tpdHkvanMvZHJhZy5qcyIsIm5vZGVfbW9kdWxlcy9mbGlja2l0eS9qcy9wcmV2LW5leHQtYnV0dG9uLmpzIiwibm9kZV9tb2R1bGVzL2ZsaWNraXR5L2pzL2ltYWdlc2xvYWRlZC5qcyIsIm5vZGVfbW9kdWxlcy9mbGlja2l0eS9qcy9zbGlkZS5qcyIsIm5vZGVfbW9kdWxlcy9mbGlja2l0eS9qcy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9mbGlja2l0eS9qcy9sYXp5bG9hZC5qcyIsIm5vZGVfbW9kdWxlcy9pbWFnZXNsb2FkZWQvaW1hZ2VzbG9hZGVkLmpzIiwibm9kZV9tb2R1bGVzL2ZsaWNraXR5L2pzL3BhZ2UtZG90cy5qcyIsIm5vZGVfbW9kdWxlcy9mbGlja2l0eS9qcy9wbGF5ZXIuanMiLCJub2RlX21vZHVsZXMvbGF6eXNpemVzL2xhenlzaXplcy5qcyIsIm5vZGVfbW9kdWxlcy9nZXQtc2l6ZS9nZXQtc2l6ZS5qcyIsIm5vZGVfbW9kdWxlcy91bmlkcmFnZ2VyL3VuaWRyYWdnZXIuanMiLCJub2RlX21vZHVsZXMvdW5pcG9pbnRlci91bmlwb2ludGVyLmpzIiwic3JjL2dsb2JhbC5qcyIsInNyYy9zY3JpcHRzL3B1YnN1Yi5qcyJdLCJuYW1lcyI6WyJyIiwiZSIsIm4iLCJ0IiwibyIsImkiLCJmIiwiYyIsInJlcXVpcmUiLCJ1IiwiYSIsIkVycm9yIiwiY29kZSIsInAiLCJleHBvcnRzIiwiY2FsbCIsImxlbmd0aCIsIjEiLCJtb2R1bGUiLCJ3aW5kb3ciLCJmYWN0b3J5IiwibWF0Y2hlc01ldGhvZCIsIkVsZW1Qcm90byIsIkVsZW1lbnQiLCJwcm90b3R5cGUiLCJtYXRjaGVzIiwibWF0Y2hlc1NlbGVjdG9yIiwicHJlZml4ZXMiLCJtZXRob2QiLCJlbGVtIiwic2VsZWN0b3IiLCJkZWZpbmUiLCJhbWQiLCJfdHlwZW9mIiwiMiIsImdsb2JhbCIsInRoaXMiLCJFdkVtaXR0ZXIiLCJwcm90byIsIm9uIiwiZXZlbnROYW1lIiwibGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJldmVudHMiLCJfZXZlbnRzIiwiaW5jbHVkZXMiLCJwdXNoIiwib25jZSIsIm9uY2VFdmVudHMiLCJfb25jZUV2ZW50cyIsIm9mZiIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsImVtaXRFdmVudCIsImFyZ3MiLCJzbGljZSIsIl9zdGVwIiwib25jZUxpc3RlbmVycyIsIl9pdGVyYXRvciIsIl9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIiwicyIsImRvbmUiLCJ2YWx1ZSIsImFwcGx5IiwiZXJyIiwiYWxsT2ZmIiwiMyIsInV0aWxzIiwiYiIsIk9iamVjdCIsImFzc2lnbiIsIm51bSIsImRpdiIsIm9iaiIsIkFycmF5IiwiaXNBcnJheSIsIl90b0NvbnN1bWFibGVBcnJheSIsImFyeSIsInBhcmVudE5vZGUiLCJkb2N1bWVudCIsImJvZHkiLCJxdWVyeVNlbGVjdG9yIiwiZXZlbnQiLCJ0eXBlIiwiZWxlbXMiLCJtYWtlQXJyYXkiLCJmaWx0ZXIiLCJIVE1MRWxlbWVudCIsInJlZHVjZSIsImZmRWxlbXMiLCJjaGlsZEVsZW1zIiwicXVlcnlTZWxlY3RvckFsbCIsImNvbmNhdCIsIl9jbGFzcyIsIm1ldGhvZE5hbWUiLCJ0aHJlc2hvbGQiLCJ0aW1lb3V0TmFtZSIsIl90aGlzMiIsImNsZWFyVGltZW91dCIsImFyZ3VtZW50cyIsInNldFRpbWVvdXQiLCJvbkRvY1JlYWR5IiwicmVhZHlTdGF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJzdHIiLCJyZXBsYWNlIiwibWF0Y2giLCIkMSIsIiQyIiwidG9Mb3dlckNhc2UiLCJjb25zb2xlIiwiaHRtbEluaXQiLCJXaWRnZXRDbGFzcyIsIm5hbWVzcGFjZSIsImRvY1JlYWR5IiwiZGF0YUF0dHIiLCJ0b0Rhc2hlZCIsImRhdGFBdHRyRWxlbXMiLCJqUXVlcnkiLCJmb3JFYWNoIiwib3B0aW9ucyIsImF0dHIiLCJnZXRBdHRyaWJ1dGUiLCJKU09OIiwicGFyc2UiLCJlcnJvciIsImNsYXNzTmFtZSIsImluc3RhbmNlIiwiZGF0YSIsImZpenp5VUlVdGlscyIsIjQiLCJGbGlja2l0eSIsImNyZWF0ZSIsImFzTmF2Rm9yIiwiX3RoaXMzIiwiYXNOYXZGb3JPcHRpb24iLCJhY3RpdmF0ZUFzTmF2Rm9yIiwiZGVhY3RpdmF0ZUFzTmF2Rm9yIiwiZGVzdHJveUFzTmF2Rm9yIiwic2V0TmF2Q29tcGFuaW9uIiwiX3RoaXM0IiwiY29tcGFuaW9uIiwiZ2V0UXVlcnlFbGVtZW50IiwibmF2Q29tcGFuaW9uIiwib25OYXZDb21wYW5pb25TZWxlY3QiLCJuYXZDb21wYW5pb25TZWxlY3QiLCJvbk5hdlN0YXRpY0NsaWNrIiwiaXNJbnN0YW50IiwiZmlyc3RJbmRleCIsImNvbXBhbmlvbkNlbGxzIiwic2VsZWN0ZWRDZWxscyIsInNlbGVjdGVkQ2VsbCIsImNlbGxzIiwibGFzdEluZGV4Iiwic2VsZWN0SW5kZXgiLCJNYXRoIiwiZmxvb3IiLCJjZWxsQWxpZ24iLCJzZWxlY3RDZWxsIiwicmVtb3ZlTmF2U2VsZWN0ZWRFbGVtZW50cyIsIm5hdlNlbGVjdGVkRWxlbWVudHMiLCJtYXAiLCJjZWxsIiwiZWxlbWVudCIsImNoYW5nZU5hdlNlbGVjdGVkQ2xhc3MiLCJuYXZFbGVtIiwiY2xhc3NMaXN0IiwicG9pbnRlciIsImNlbGxFbGVtZW50IiwiY2VsbEluZGV4IiwiZml6enktdWktdXRpbHMiLCJmbGlja2l0eSIsIjUiLCJmdWxsc2NyZWVuIiwiaXNGdWxsc2NyZWVuIiwidmlld0Z1bGxzY3JlZW5CdXR0b24iLCJGdWxsc2NyZWVuQnV0dG9uIiwiZXhpdEZ1bGxzY3JlZW5CdXR0b24iLCJfY2hhbmdlRnVsbHNjcmVlbkFjdGl2ZSIsInNldEdhbGxlcnlTaXplIiwiY2hpbGRNZXRob2QiLCJpc0FjdGl2ZSIsImFjdGl2ZU1ldGhvZCIsInZpZXdGdWxsc2NyZWVuIiwiX2NoYW5nZUZ1bGxzY3JlZW4iLCJmb2N1cyIsImV4aXRGdWxsc2NyZWVuIiwiaXNWaWV3IiwiY2xhc3NNZXRob2QiLCJkb2N1bWVudEVsZW1lbnQiLCJyZXNpemUiLCJyZXBvc2l0aW9uIiwiZGlzcGF0Y2hFdmVudCIsInRvZ2dsZUZ1bGxzY3JlZW4iLCJuYW1lIiwiY3JlYXRlQnV0dG9uIiwiY3JlYXRlSWNvbiIsIm9uQ2xpY2siLCJjbGlja0hhbmRsZXIiLCJiaW5kIiwidmlld3BvcnQiLCJzdHlsZSIsImhlaWdodCIsImtleWJvYXJkSGFuZGxlcnMiLCJjcmVhdGVFbGVtZW50IiwibGFiZWwiLCJzZXRBdHRyaWJ1dGUiLCJ0ZXh0IiwidG9VcHBlckNhc2UiLCJ0aXRsZSIsInN2Z1VSSSIsInBhdGhEaXJlY3Rpb25zIiwidmlldyIsImV4aXQiLCJzdmciLCJjcmVhdGVFbGVtZW50TlMiLCJwYXRoIiwiZGlyZWN0aW9uIiwiYXBwZW5kQ2hpbGQiLCJhY3RpdmF0ZSIsImRlYWN0aXZhdGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiNiIsImltYWdlc0xvYWRlZCIsImNyZWF0ZU1ldGhvZHMiLCJfY3JlYXRlSW1hZ2VzTG9hZGVkIiwiX3RoaXMiLCJzbGlkZXIiLCJpbWFnZSIsImdldFBhcmVudENlbGwiLCJpbWciLCJjZWxsU2l6ZUNoYW5nZSIsImZyZWVTY3JvbGwiLCJwb3NpdGlvblNsaWRlckF0U2VsZWN0ZWQiLCJpbWFnZXNsb2FkZWQiLCI3IiwicHJvcCIsImFycmF5U2xpY2UiLCJyZW1vdmVGcm9tIiwiZ2V0UGFyZW50IiwiaGFuZGxlRXZlbnQiLCJmaWx0ZXJGaW5kRWxlbWVudHMiLCJkZWJvdW5jZU1ldGhvZCIsInRpbWVvdXQiLCJjYWxsYmFjayIsImRhc2hlZE5hbWVzcGFjZSIsImpzRGFzaEVsZW1zIiwiZGF0YU9wdGlvbnNBdHRyIiwiZGVzYW5kcm8tbWF0Y2hlcy1zZWxlY3RvciIsImluc2VydCIsImxlbiIsImZyYWdtZW50IiwiaXNBcHBlbmQiLCJpbnNlcnRDZWxsRWxlbWVudCIsImVuZENlbGxzIiwiX21ha2VDZWxscyIsInVuZGVmaW5lZCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJpbnNlcnRCZWZvcmUiLCJfc2l6ZUNlbGxzIiwiY2VsbENoYW5nZSIsImFwcGVuZCIsInByZXBlbmQiLCJyZW1vdmUiLCJtaW5DZWxsSW5kZXgiLCJnZXRDZWxscyIsIm1pbiIsImdldENlbGwiLCJnZXRTaXplIiwiY2hhbmdlZENlbGxJbmRleCIsImlzUG9zaXRpb25pbmdTbGlkZXIiLCJwcmV2U2VsZWN0ZWRFbGVtIiwic2VsZWN0ZWRFbGVtZW50IiwiX3Bvc2l0aW9uQ2VsbHMiLCJfZ2V0V3JhcFNoaWZ0Q2VsbHMiLCJzZWxlY3RlZEluZGV4IiwiZ2V0Q2VsbFNsaWRlSW5kZXgiLCJzbGlkZXMiLCJzZWxlY3QiLCIuL2ZsaWNraXR5IiwidmVsb2NpdHkiLCIxMCIsImlzQW5pbWF0aW5nIiwicmVzdGluZ0ZyYW1lcyIsImFuaW1hdGUiLCJhcHBseURyYWdGb3JjZSIsImFwcGx5U2VsZWN0ZWRBdHRyYWN0aW9uIiwicHJldmlvdXNYIiwieCIsImludGVncmF0ZVBoeXNpY3MiLCJwb3NpdGlvblNsaWRlciIsInNldHRsZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIndyYXBBcm91bmQiLCJtb2R1bG8iLCJzbGlkZWFibGVXaWR0aCIsInNoaWZ0V3JhcENlbGxzIiwic2V0VHJhbnNsYXRlWCIsImRpc3BhdGNoU2Nyb2xsRXZlbnQiLCJpczNkIiwiY3Vyc29yUG9zaXRpb24iLCJyaWdodFRvTGVmdCIsInRyYW5zbGF0ZVgiLCJnZXRQb3NpdGlvblZhbHVlIiwidHJhbnNmb3JtIiwicHJvZ3Jlc3MiLCJmaXJzdFNsaWRlIiwicG9zaXRpb25YIiwidGFyZ2V0Iiwic2xpZGVzV2lkdGgiLCJzZWxlY3RlZFNsaWRlIiwicG9zaXRpb24iLCJwZXJjZW50UG9zaXRpb24iLCJyb3VuZCIsInNpemUiLCJpbm5lcldpZHRoIiwiaXNQb2ludGVyRG93biIsImlzRnJlZVNjcm9sbGluZyIsImJlZm9yZUdhcCIsImFmdGVyR2FwIiwiX3NoaWZ0Q2VsbHMiLCJiZWZvcmVTaGlmdENlbGxzIiwiYWZ0ZXJTaGlmdENlbGxzIiwiZ2FwIiwic2hpZnQiLCJ3cmFwU2hpZnQiLCJvdXRlcldpZHRoIiwiZ2V0RnJpY3Rpb25GYWN0b3IiLCJmb3JjZSIsImRyYWdGb3JjZSIsImlzRHJhZ2dhYmxlIiwiZHJhZ1giLCJhcHBseUZvcmNlIiwic2VsZWN0ZWRBdHRyYWN0aW9uIiwiYW5pbWF0ZVByb3RvdHlwZSIsIjExIiwiQ2VsbCIsInBhcmVudCIsIm9yaWdpblNpZGUiLCJkZXN0cm95IiwidW5zZWxlY3QiLCJzaWRlIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0UG9zaXRpb24iLCJ1cGRhdGVUYXJnZXQiLCJyZW5kZXJQb3NpdGlvbiIsInNldERlZmF1bHRUYXJnZXQiLCJtYXJnaW5Qcm9wZXJ0eSIsIndpZHRoIiwic2lkZU9mZnNldCIsImFkanVzdGVkWCIsImFkZCIsInJlbW92ZUNoaWxkIiwiZ2V0LXNpemUiLCIxMiIsIlVuaWRyYWdnZXIiLCJleHRlbmQiLCJkZWZhdWx0cyIsImRyYWdnYWJsZSIsImRyYWdUaHJlc2hvbGQiLCJmb2N1c05vZGVzIiwiX3RvdWNoQWN0aW9uVmFsdWUiLCJfY3JlYXRlRHJhZyIsIm9uQWN0aXZhdGVEcmFnIiwiX3VpQ2hhbmdlRHJhZyIsIm9uRGVhY3RpdmF0ZURyYWciLCJ1cGRhdGVEcmFnZ2FibGUiLCJoYW5kbGVzIiwiYmluZEhhbmRsZXMiLCJ1bmJpbmRIYW5kbGVzIiwiYmluZERyYWciLCJ1bmJpbmREcmFnIiwicG9pbnRlckRvd24iLCJva2F5UG9pbnRlckRvd24iLCJfcG9pbnRlckRvd25QcmV2ZW50RGVmYXVsdCIsInBvaW50ZXJEb3duRm9jdXMiLCJhY3RpdmVFbGVtZW50IiwicG9pbnRlckRvd25CbHVyIiwicG9pbnRlckRvd25TY3JvbGwiLCJnZXRTY3JvbGxQb3NpdGlvbiIsIl9wb2ludGVyRG93bkRlZmF1bHQiLCJwb2ludGVyRG93blBvaW50ZXIiLCJwYWdlWCIsInBhZ2VZIiwiX2JpbmRQb3N0U3RhcnRFdmVudHMiLCJJTlBVVCIsIlRFWFRBUkVBIiwiU0VMRUNUIiwicGFnZVhPZmZzZXQiLCJ5IiwicGFnZVlPZmZzZXQiLCJub2RlTmFtZSIsImlzVG91Y2hTdGFydCIsImlzVG91Y2hQb2ludGVyIiwicG9pbnRlclR5cGUiLCJpc0ZvY3VzTm9kZSIsInByZXZlbnREZWZhdWx0IiwiaGFzRHJhZ1N0YXJ0ZWQiLCJtb3ZlVmVjdG9yIiwiYWJzIiwicG9pbnRlclVwIiwiaXNUb3VjaFNjcm9sbGluZyIsIl9kcmFnUG9pbnRlclVwIiwicG9pbnRlckRvbmUiLCJkcmFnU3RhcnQiLCJkcmFnU3RhcnRQb3NpdGlvbiIsInN0YXJ0QW5pbWF0aW9uIiwicG9pbnRlck1vdmUiLCJfZHJhZ1BvaW50ZXJNb3ZlIiwiX2RyYWdNb3ZlIiwiZHJhZ01vdmUiLCJlbmRCb3VuZCIsInByZXZpb3VzRHJhZ1giLCJvcmlnaW5Cb3VuZCIsIm1heCIsImdldExhc3RTbGlkZSIsImRyYWdNb3ZlVGltZSIsIkRhdGUiLCJkcmFnRW5kIiwicmVzdGluZ1giLCJkcmFnRW5kUmVzdGluZ1NlbGVjdCIsImdldFJlc3RpbmdQb3NpdGlvbiIsImRyYWdFbmRCb29zdFNlbGVjdCIsImlzRHJhZ1NlbGVjdCIsImRpc3RhbmNlIiwiZ2V0U2xpZGVEaXN0YW5jZSIsInBvc2l0aXZlUmVzdGluZyIsIl9nZXRDbG9zZXN0UmVzdGluZyIsIm5lZ2F0aXZlUmVzdGluZyIsImluY3JlbWVudCIsIm1pbkRpc3RhbmNlIiwiSW5maW5pdHkiLCJjb25kaXRpb24iLCJjb250YWluIiwiZGlzdCIsIm1pbkRpc3QiLCJpc1dyYXBBcm91bmQiLCJzbGlkZUluZGV4Iiwic2xpZGUiLCJ3cmFwIiwiZGVsdGEiLCJzdGF0aWNDbGljayIsImNsaWNrZWRDZWxsIiwiY2VsbEVsZW0iLCJvbnNjcm9sbCIsInNjcm9sbCIsInNjcm9sbE1vdmVYIiwic2Nyb2xsTW92ZVkiLCJfcG9pbnRlckRvbmUiLCJ1bmlkcmFnZ2VyIiwiMTMiLCJTbGlkZSIsImdldENvbXB1dGVkU3R5bGUiLCJtb3ZlRWxlbWVudHMiLCJ0b0VsZW0iLCJHVUlEIiwiaW5zdGFuY2VzIiwicXVlcnlFbGVtZW50IiwiZmxpY2tpdHlHVUlEIiwib3B0aW9uIiwiJGVsZW1lbnQiLCJjb25zdHJ1Y3RvciIsIl9jcmVhdGUiLCJhY2Nlc3NpYmlsaXR5IiwiZnJlZVNjcm9sbEZyaWN0aW9uIiwiZnJpY3Rpb24iLCJuYW1lc3BhY2VKUXVlcnlFdmVudHMiLCJjZWxsQWxpZ25TaG9ydGhhbmRzIiwiaWQiLCJndWlkIiwiX2NyZWF0ZVNsaWRlciIsIndhdGNoQ1NTIiwib3B0cyIsIl9maWx0ZXJGaW5kQ2VsbEVsZW1lbnRzIiwiY2hpbGRyZW4iLCJyZWxvYWRDZWxscyIsInRhYkluZGV4Iiwic2VsZWN0SW5pdGlhbEluZGV4IiwiaXNJbml0QWN0aXZhdGVkIiwiY2VsbFNlbGVjdG9yIiwicG9zaXRpb25DZWxscyIsImdldExhc3RDZWxsIiwibWF4Q2VsbEhlaWdodCIsInN0YXJ0Q2VsbCIsImNlbGxYIiwib3V0ZXJIZWlnaHQiLCJ1cGRhdGVTbGlkZXMiLCJfY29udGFpblNsaWRlcyIsIm5leHRNYXJnaW4iLCJjYW5DZWxsRml0IiwiX2dldENhbkNlbGxGaXQiLCJzbGlkZVdpZHRoIiwiZmlyc3RNYXJnaW4iLCJhZGRDZWxsIiwidXBkYXRlU2VsZWN0ZWRTbGlkZSIsIm51bWJlciIsInBlcmNlbnQiLCJncm91cENlbGxzIiwicGFyc2VJbnQiLCJwZXJjZW50TWF0Y2giLCJfaW5pdCIsInNldENlbGxBbGlnbiIsImNlbnRlciIsImxlZnQiLCJyaWdodCIsInNob3J0aGFuZCIsImFkYXB0aXZlSGVpZ2h0IiwiZ2FwWCIsIl91bnNoaWZ0Q2VsbHMiLCJfZ2V0R2FwQ2VsbHMiLCJiZWdpbk1hcmdpbiIsImVuZE1hcmdpbiIsImNvbnRlbnRXaWR0aCIsImlzQ29udGVudFNtYWxsZXIiLCJiZWdpbkJvdW5kIiwiaXNSaWdodFRvTGVmdCIsImVtaXRBcmdzIiwiJGV2ZW50IiwialFFdmVudCIsIkV2ZW50IiwidHJpZ2dlciIsImlzV3JhcCIsIl93cmFwU2VsZWN0IiwicHJldkluZGV4Iiwid3JhcEluZGV4IiwiYmFja1dyYXBEZWx0YSIsImZvcmV3YXJkV3JhcERlbHRhIiwicHJldmlvdXMiLCJuZXh0IiwidW5zZWxlY3RTZWxlY3RlZFNsaWRlIiwic2VsZWN0ZWRFbGVtZW50cyIsImdldENlbGxFbGVtZW50cyIsImluaXRpYWxJbmRleCIsInF1ZXJ5Q2VsbCIsImdldEFkamFjZW50Q2VsbEVsZW1lbnRzIiwiYWRqQ291bnQiLCJjZWxsRWxlbXMiLCJ1aUNoYW5nZSIsImNoaWxkVUlQb2ludGVyRG93biIsIm9ucmVzaXplIiwiaXNEcmFnZ2luZyIsImNvbnRlbnQiLCJvbmtleWRvd24iLCJpc05vdEZvY3VzZWQiLCJoYW5kbGVyIiwia2V5Q29kZSIsIjM3IiwibGVmdE1ldGhvZCIsIjM5IiwicmlnaHRNZXRob2QiLCJwcmV2U2Nyb2xsWSIsInByZXZlbnRTY3JvbGwiLCJzY3JvbGxUbyIsInJlbW92ZURhdGEiLCJicmlkZ2V0Iiwic2V0SlF1ZXJ5IiwianEiLCJfRmxpY2tpdHkiLCIuL2FuaW1hdGUiLCIuL2NlbGwiLCIuL3NsaWRlIiwiZXYtZW1pdHRlciIsIjE0IiwiLi9hZGQtcmVtb3ZlLWNlbGwiLCIuL2RyYWciLCIuL2xhenlsb2FkIiwiLi9wYWdlLWRvdHMiLCIuL3BsYXllciIsIi4vcHJldi1uZXh0LWJ1dHRvbiIsIjE1IiwiTGF6eUxvYWRlciIsImxvYWQiLCJfY3JlYXRlTGF6eWxvYWQiLCJsYXp5TG9hZCIsImxhenlJbWFnZXMiLCJsYXp5Q2VsbEltYWdlcyIsImxhenlsb2FkQXR0ciIsInNyY0F0dHIiLCJzcmNzZXRBdHRyIiwiaW1ncyIsInNyYyIsInNyY3NldCIsIm9ubG9hZCIsImNvbXBsZXRlIiwib25lcnJvciIsInBsYXllciIsIjE2IiwiVW5pcG9pbnRlciIsIlBhZ2VEb3RzIiwiaG9sZGVyIiwiZG90cyIsImhhbmRsZUNsaWNrIiwic2V0RG90cyIsImJpbmRTdGFydEV2ZW50IiwidW5iaW5kU3RhcnRFdmVudCIsImFkZERvdHMiLCJyZW1vdmVEb3RzIiwiY291bnQiLCJuZXdEb3RzIiwiZG90IiwidXBkYXRlU2VsZWN0ZWQiLCJzZWxlY3RlZERvdCIsIm9uVGFwIiwicGFnZURvdHMiLCJfY3JlYXRlUGFnZURvdHMiLCJhY3RpdmF0ZVBhZ2VEb3RzIiwidXBkYXRlU2VsZWN0ZWRQYWdlRG90cyIsInVwZGF0ZVBhZ2VEb3RzIiwiZGVhY3RpdmF0ZVBhZ2VEb3RzIiwicHJldkJ1dHRvbiIsIlByZXZOZXh0QnV0dG9uIiwiMTciLCJQbGF5ZXIiLCJzdGF0ZSIsIm9uVmlzaWJpbGl0eUNoYW5nZSIsInZpc2liaWxpdHlDaGFuZ2UiLCJvblZpc2liaWxpdHlQbGF5IiwidmlzaWJpbGl0eVBsYXkiLCJwbGF5IiwiaGlkZGVuIiwidGljayIsInRpbWUiLCJhdXRvUGxheSIsImNsZWFyIiwic3RvcCIsInBhdXNlIiwidW5wYXVzZSIsInBhdXNlQXV0b1BsYXlPbkhvdmVyIiwiX2NyZWF0ZVBsYXllciIsImFjdGl2YXRlUGxheWVyIiwic3RvcFBsYXllciIsImRlYWN0aXZhdGVQbGF5ZXIiLCJwbGF5UGxheWVyIiwicGF1c2VQbGF5ZXIiLCJ1bnBhdXNlUGxheWVyIiwib25tb3VzZWVudGVyIiwib25tb3VzZWxlYXZlIiwiaXNFbmFibGVkIiwiaXNQcmV2aW91cyIsImxlZnREaXJlY3Rpb24iLCJpc0xlZnQiLCJkaXNhYmxlIiwiY3JlYXRlU1ZHIiwidXBkYXRlIiwicGF0aE1vdmVtZW50cyIsInNoYXBlIiwiYXJyb3dTaGFwZSIsIngwIiwieDEiLCJ5MSIsIngyIiwieTIiLCJ4MyIsIm9uY2xpY2siLCJlbmFibGUiLCJkaXNhYmxlZCIsImJvdW5kSW5kZXgiLCJwcmV2TmV4dEJ1dHRvbnMiLCJfY3JlYXRlUHJldk5leHRCdXR0b25zIiwibmV4dEJ1dHRvbiIsImFjdGl2YXRlUHJldk5leHRCdXR0b25zIiwiZGVhY3RpdmF0ZVByZXZOZXh0QnV0dG9ucyIsImJhY2tncm91bmQiLCJpc09yaWdpbkxlZnQiLCJsYXN0Q2VsbCIsImxhc3RNYXJnaW4iLCIyMCIsImdldFN0eWxlU2l6ZSIsInBhcnNlRmxvYXQiLCJpc05hTiIsImxvZ0Vycm9yIiwibWVzc2FnZSIsIm1lYXN1cmVtZW50cyIsIm1lYXN1cmVtZW50c0xlbmd0aCIsImdldFN0eWxlIiwiaXNCb3hTaXplT3V0ZXIiLCJpc1NldHVwIiwicGFkZGluZyIsImJvcmRlclN0eWxlIiwiYm9yZGVyV2lkdGgiLCJib3hTaXppbmciLCJub2RlVHlwZSIsImRpc3BsYXkiLCJpbm5lckhlaWdodCIsImlzQm9yZGVyQm94Iiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJtZWFzdXJlbWVudCIsInBhZGRpbmdXaWR0aCIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwicGFkZGluZ0hlaWdodCIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwibWFyZ2luV2lkdGgiLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJtYXJnaW5IZWlnaHQiLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJib3JkZXJMZWZ0V2lkdGgiLCJib3JkZXJSaWdodFdpZHRoIiwiYm9yZGVySGVpZ2h0IiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsImlzQm9yZGVyQm94U2l6ZU91dGVyIiwic3R5bGVXaWR0aCIsInN0eWxlSGVpZ2h0IiwiMjEiLCIkIiwiSW1hZ2VzTG9hZGVkIiwib25BbHdheXMiLCJxdWVyeUVsZW0iLCJlbGVtZW50cyIsImdldEltYWdlcyIsImpxRGVmZXJyZWQiLCJEZWZlcnJlZCIsImNoZWNrIiwiaW1hZ2VzIiwiYWRkRWxlbWVudEltYWdlcyIsImFkZEltYWdlIiwiYWRkRWxlbWVudEJhY2tncm91bmRJbWFnZXMiLCJlbGVtZW50Tm9kZVR5cGVzIiwiY2hpbGRJbWdzIiwiY2hpbGQiLCI5IiwiTG9hZGluZ0ltYWdlIiwiQmFja2dyb3VuZCIsInVybCIsIkltYWdlIiwicmVVUkwiLCJleGVjIiwiYmFja2dyb3VuZEltYWdlIiwiYWRkQmFja2dyb3VuZCIsImxvYWRpbmdJbWFnZSIsIm9uUHJvZ3Jlc3MiLCJwcm9ncmVzc2VkQ291bnQiLCJoYXNBbnlCcm9rZW4iLCJpc0xvYWRlZCIsIm5vdGlmeSIsImRlYnVnIiwibG9nIiwiaXNDb21wbGV0ZSIsImpxTWV0aG9kIiwiZ2V0SXNJbWFnZUNvbXBsZXRlIiwiY29uZmlybSIsIm5hdHVyYWxXaWR0aCIsInByb3h5SW1hZ2UiLCJ1bmJpbmRFdmVudHMiLCJtYWtlSlF1ZXJ5UGx1Z2luIiwiZm4iLCJwcm9taXNlIiwiY3Vyc29yTm9kZXMiLCJfYmluZEhhbmRsZXMiLCJpc0FkZCIsImJpbmRNZXRob2QiLCJ0b3VjaEFjdGlvbiIsImhhbmRsZSIsIl9iaW5kU3RhcnRFdmVudCIsIlBvaW50ZXJFdmVudCIsIk9QVElPTiIsImNsaWNrVHlwZXMiLCJyYWRpbyIsImNoZWNrYm94IiwiYnV0dG9uIiwic3VibWl0IiwiZmlsZSIsImlzQ3Vyc29yTm9kZSIsImlzQ2xpY2tUeXBlIiwiaXNPa2F5IiwiX3BvaW50ZXJSZXNldCIsImZvY3VzZWQiLCJibHVyIiwiX2RyYWdTdGFydCIsIl9kcmFnRW5kIiwiX3N0YXRpY0NsaWNrIiwiaXNQcmV2ZW50aW5nQ2xpY2tzIiwiaXNJZ25vcmluZ01vdXNlVXAiLCJnZXRQb2ludGVyUG9pbnQiLCJ1bmlwb2ludGVyIiwiMjMiLCJfdGhpczUiLCJfdXBkYXRlV3JhcFNoaWZ0Q2VsbHMiLCIuL2NvcmUiLCIyNCIsIl90aGlzNiIsImlzV3JhcHBpbmciLCJfdGhpczciLCJjZWxsU2hpZnQiLCJfd3JhcFNoaWZ0Q2VsbCIsIl90aGlzOCIsIl9yZW5kZXJDZWxsUG9zaXRpb24iLCIyNSIsImNlbGxDbGFzc05hbWUiLCIyNiIsIl9vYmplY3RTcHJlYWQiLCJfdGhpcyRvcHRpb25zIiwiZm9jdXNhYmxlRWxlbXMiLCJfdGhpcyRzbGlkZXIiLCJfdGhpczkiLCJyZW5kZXJYIiwicG9zaXRpb25WYWx1ZSIsIl90aGlzMTAiLCJncm91cFdpZHRoIiwidW5pZHJhZ2dlckV2ZW50cyIsIl90aGlzJG9wdGlvbnMyIiwiYWZ0ZXJHYXBYIiwiZ2V0SXNXcmFwcGluZyIsImJlZm9yZUdhcFgiLCJnYXBXaWR0aCIsIl9zdGVwMiIsIl9pdGVyYXRvcjIiLCJfdGhpczExIiwiX2VtaXRFdmVudCIsImpRdWVyeUJyaWRnZXQiLCJjZWxsU2xpZGUiLCJmaW5kIiwiX3N0ZXAzIiwiX2l0ZXJhdG9yMyIsIl90aGlzMTIiLCJCb29sZWFuIiwiY2xvc2VzdCIsImtleSIsInNvbWUiLCJBcnJvd0xlZnQiLCJBcnJvd1JpZ2h0IiwiX3RoaXMkZWxlbWVudCIsIjI3IiwidG91Y2hBY3Rpb25WYWx1ZSIsImRyYWciLCJoYW5kbGVQb2ludGVyRG93biIsImhhbmRsZVBvaW50ZXJVcCIsImhhbmRsZVBvaW50ZXJEb25lIiwiaGFuZGxlRHJhZ1N0YXJ0IiwiaGFuZGxlRHJhZ01vdmUiLCJoYW5kbGVEcmFnRW5kIiwiaGFuZGxlU3RhdGljQ2xpY2siLCJ0b2dnbGUiLCJiaW5kQWN0aXZlUG9pbnRlckV2ZW50cyIsIl90aGlzMTMiLCIuL2ltYWdlc2xvYWRlZCIsIjMwIiwibGF6eUF0dHIiLCJsYXp5U3JjQXR0ciIsImxhenlTcmNzZXRBdHRyIiwiaW1nU2VsZWN0b3IiLCJoYW5kbGVMYXp5TG9hZENvbXBsZXRlIiwib25MYXp5TG9hZENvbXBsZXRlIiwiZ2V0Q2VsbExhenlJbWFnZXMiLCJjZWxsQXR0ciIsImNlbGxTcmNBdHRyIiwiY2VsbFNyY3NldEF0dHIiLCJvbkNvbXBsZXRlIiwiX3RoaXMxNCIsImZsYXQiLCIzMSIsInNsaWRlc0xlbmd0aCIsIl90aGlzJGhvbGRlciIsIl90aGlzMTUiLCJmaWxsIiwiaXRlbSIsInRleHRDb250ZW50IiwiaGFuZGxlUGFnZURvdHNDbGljayIsIm9uUGFnZURvdHNDbGljayIsIl90aGlzJGZvY3VzYWJsZUVsZW1zIiwiX3RoaXMkZm9jdXNhYmxlRWxlbXMyIiwiX3RoaXMxNiIsIjMyIiwib25UaWNrIiwiX3RoaXMxNyIsIl90aGlzMTgiLCIzMyIsIm5leHREaXJlY3Rpb24iLCJfdGhpczE5IiwiX3RoaXMkb3B0aW9uczMiLCJoYW5kbGVQcmV2QnV0dG9uQ2xpY2siLCJoYW5kbGVOZXh0QnV0dG9uQ2xpY2siLCJ1cGRhdGVQcmV2TmV4dEJ1dHRvbnMiLCJ1cGRhdGVQcmV2TmV4dEJ1dHRvbiIsImRpc2FibGVkSW5kZXgiLCIzNCIsIjM1IiwiMzYiLCJiZWZvcmVFeHBhbmRWYWwiLCJlbGVtRXhwYW5kIiwiX3N0ZXA0IiwiX2l0ZXJhdG9yNCIsIl9zdGVwNSIsIl9pdGVyYXRvcjUiLCJfdGhpczIwIiwiY3Jvc3NPcmlnaW4iLCJjdXJyZW50U3JjIiwibGF6eXNpemVzIiwibGF6eVNpemVzQ2ZnIiwiZG9jRWxlbSIsInN1cHBvcnRQaWN0dXJlIiwiX2FkZEV2ZW50TGlzdGVuZXIiLCJfZ2V0QXR0cmlidXRlIiwicmVxdWVzdElkbGVDYWxsYmFjayIsInJlZ1BpY3R1cmUiLCJsb2FkRXZlbnRzIiwicmVnQ2xhc3NDYWNoZSIsImhhc0NsYXNzIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsImFkZFJlbW92ZUxvYWRFdmVudHMiLCJ0cmlnZ2VyRXZlbnQiLCJ1cGRhdGVQb2x5ZmlsbCIsImdldENTUyIsImdldFdpZHRoIiwickFGIiwicnVubmluZyIsIndhaXRpbmciLCJmaXJzdEZucyIsInNlY29uZEZucyIsImZucyIsInJBRkl0IiwiZGVib3VuY2UiLCJsb2FkZXIiLCJwcmVsb2FkRWxlbXMiLCJpc0NvbXBsZXRlZCIsInJlc2V0UHJlbG9hZGluZ1RpbWVyIiwibG9hZE1vZGUiLCJzdGFydGVkIiwiZUx2VyIsImVsdkgiLCJlTHRvcCIsImVMbGVmdCIsImVMcmlnaHQiLCJlTGJvdHRvbSIsImlzQm9keUhpZGRlbiIsImxhc3RUaW1lIiwiZ0RlbGF5IiwicklDVGltZW91dCIsImlkbGVDYWxsYmFjayIsInJlZ0ltZyIsInJlZ0lmcmFtZSIsInN1cHBvcnRTY3JvbGwiLCJjdXJyZW50RXhwYW5kIiwiaXNMb2FkaW5nIiwibG93UnVucyIsImlzVmlzaWJsZSIsInRocm90dGxlZENoZWNrRWxlbWVudHMiLCJyYWZlZFN3aXRjaExvYWRpbmdDbGFzcyIsInJhZlN3aXRjaExvYWRpbmdDbGFzcyIsImxhenlVbnZlaWwiLCJ1bnZlaWxFbGVtZW50IiwiYWZ0ZXJTY3JvbGwiLCJhdXRvU2l6ZXIiLCJhdXRvc2l6ZXNFbGVtcyIsInNpemVFbGVtZW50IiwiZGVib3VuY2VkVXBkYXRlRWxlbWVudHNTaXplcyIsImluaXQiLCJsYXp5U2l6ZXNEZWZhdWx0cyIsImxhenlDbGFzcyIsImxvYWRlZENsYXNzIiwibG9hZGluZ0NsYXNzIiwicHJlbG9hZENsYXNzIiwiZXJyb3JDbGFzcyIsImF1dG9zaXplc0NsYXNzIiwiZmFzdExvYWRlZENsYXNzIiwiaWZyYW1lTG9hZE1vZGUiLCJzaXplc0F0dHIiLCJtaW5TaXplIiwiY3VzdG9tTWVkaWEiLCJleHBGYWN0b3IiLCJoRmFjIiwibG9hZEhpZGRlbiIsInJpY1RpbWVvdXQiLCJ0aHJvdHRsZURlbGF5IiwibGF6eVNpemVzQ29uZmlnIiwibGF6eXNpemVzQ29uZmlnIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsIkhUTUxQaWN0dXJlRWxlbWVudCIsImVsZSIsImNscyIsIlJlZ0V4cCIsInRlc3QiLCJ0cmltIiwicmVnIiwiZG9tIiwiYWN0aW9uIiwiZXZ0IiwiZGV0YWlsIiwibm9CdWJibGVzIiwibm9DYW5jZWxhYmxlIiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJlbCIsImZ1bGwiLCJwb2x5ZmlsbCIsInBpY3R1cmVmaWxsIiwicGYiLCJyZWV2YWx1YXRlIiwiX2xhenlzaXplc1dpZHRoIiwicmFmQmF0Y2giLCJfbHNGbHVzaCIsInJ1biIsInNpbXBsZSIsInRoYXQiLCJmdW5jIiwibGF0ZXIiLCJsYXN0Iiwibm93IiwidGltZXN0YW1wIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiY2hlY2tFbGVtZW50cyIsInN3aXRjaExvYWRpbmdDbGFzcyIsImlzQXV0byIsInNpemVzIiwiaXNJbWciLCJpc1BpY3R1cmUiLCJmaXJlc0xvYWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmVzZXRQcmVsb2FkaW5nIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJoYW5kbGVTb3VyY2VzIiwiY29udGVudFdpbmRvdyIsImxvY2F0aW9uIiwiX2xhenlSYWNlIiwiX2xhenlDYWNoZSIsImxvYWRpbmciLCJfIiwibG9hZGluZ0VsZW1lbnRzIiwicGVyc2lzdGVkIiwiTXV0YXRpb25PYnNlcnZlciIsIm9ic2VydmUiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwiYXR0cmlidXRlcyIsInNldEludGVydmFsIiwiY2hlY2tFbGVtcyIsImlzUHJpb3JpdHkiLCJkZWxheSIsInVudmVpbCIsInVwZGF0ZUVsZW0iLCJfYUxTTCIsImFsdExvYWRtb2RlU2Nyb2xsTGlzdG5lciIsInNvdXJjZXMiLCJnZXRTaXplRWxlbWVudCIsImNmZyIsInVQIiwiYUMiLCJyQyIsImhDIiwiZmlyZSIsImdXIiwibm9TdXBwb3J0IiwicnVuRm5zIiwicXVldWUiLCJlTGxlbiIsImF1dG9Mb2FkRWxlbSIsImxvYWRlZFNvbWV0aGluZyIsImVsZW1OZWdhdGl2ZUV4cGFuZCIsImVsZW1FeHBhbmRWYWwiLCJkZWZhdWx0RXhwYW5kIiwicHJlbG9hZEV4cGFuZCIsImxhenlsb2FkRWxlbXMiLCJwcmVtYXR1cmVVbnZlaWwiLCJleHBhbmQiLCJjbGllbnRIZWlnaHQiLCJjbGllbnRXaWR0aCIsIl9kZWZFeCIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJib3R0b20iLCJ0b3AiLCJvdXRlclJlY3QiLCJ2aXNpYmxlIiwib2Zmc2V0UGFyZW50IiwicHJlbG9hZEFmdGVyTG9hZCIsInNvdXJjZSIsInNvdXJjZVNyY3NldCIsImxhenlTaXplcyIsIjM4Iiwic3RhcnRFdmVudCIsImFjdGl2ZUV2ZW50cyIsIl90aGlzMjEiLCJfdGhpczIyIiwidW5iaW5kQWN0aXZlUG9pbnRlckV2ZW50cyIsIl90aGlzMjMiLCJ3aXRoUG9pbnRlciIsInBvaW50ZXJJZCIsInBvaW50ZXJJZGVudGlmaWVyIiwid2l0aFRvdWNoIiwidG91Y2giLCJfc3RlcDYiLCJfaXRlcmF0b3I2IiwiY2hhbmdlZFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2giLCJpZGVudGlmaWVyIiwib25tb3VzZWRvd24iLCJvbnRvdWNoc3RhcnQiLCJvbnBvaW50ZXJkb3duIiwib25tb3VzZW1vdmUiLCJvbnBvaW50ZXJtb3ZlIiwib250b3VjaG1vdmUiLCJvbm1vdXNldXAiLCJvbnBvaW50ZXJ1cCIsIm9udG91Y2hlbmQiLCJfdGhpczI0Iiwib25wb2ludGVyY2FuY2VsIiwib250b3VjaGNhbmNlbCIsInBvaW50ZXJDYW5jZWwiLCJfdGhpczI1IiwiaXNNb3VzZXVwIiwiZHVwIiwiNDAiLCJwb3N0U3RhcnRFdmVudHMiLCJnZXRUb3VjaCIsInRvdWNoZXMiLCJfcG9pbnRlckRvd24iLCJtb3VzZWRvd24iLCJ0b3VjaHN0YXJ0IiwicG9pbnRlcmRvd24iLCJfYm91bmRQb2ludGVyRXZlbnRzIiwiX3VuYmluZFBvc3RTdGFydEV2ZW50cyIsIl9wb2ludGVyTW92ZSIsIl9wb2ludGVyVXAiLCJfcG9pbnRlckNhbmNlbCIsIjQxIiwiUHViU3ViIiwiLi9zY3JpcHRzL3B1YnN1YiIsImZsaWNraXR5LWFzLW5hdi1mb3IiLCJmbGlja2l0eS1mdWxsc2NyZWVuIiwiZmxpY2tpdHktaW1hZ2VzbG9hZGVkIiwiNDIiLCJFVkVOVFMiLCJjYXJ0VXBkYXRlZCIsInN1YnNjcmliZXJzIiwic3Vic2NyaWJlIiwiX3RoaXMyNyIsImNiIiwicHVibGlzaCJdLCJtYXBwaW5ncyI6Im8vRkFBQSxDQUFBLFNBQUFBLEVBQUFDLEVBQUFDLEVBQUFDLEdBQUEsU0FBQUMsRUFBQUMsRUFBQUMsR0FBQSxHQUFBLENBQUFKLEVBQUFHLEdBQUEsQ0FBQSxHQUFBLENBQUFKLEVBQUFJLEdBQUEsQ0FBQSxJQUFBRSxFQUFBLFlBQUEsT0FBQUMsU0FBQUEsUUFBQSxHQUFBLENBQUFGLEdBQUFDLEVBQUEsT0FBQUEsRUFBQUYsRUFBQSxDQUFBLENBQUEsRUFBQSxHQUFBSSxFQUFBLE9BQUFBLEVBQUFKLEVBQUEsQ0FBQSxDQUFBLEVBQUEsTUFBQUssRUFBQSxJQUFBQyxNQUFBLHVCQUFBTixFQUFBLEdBQUEsR0FBQU8sS0FBQSxtQkFBQUYsQ0FBQSxDQUFBRyxFQUFBWCxFQUFBRyxHQUFBLENBQUFTLFFBQUEsRUFBQSxFQUFBYixFQUFBSSxHQUFBLEdBQUFVLEtBQUFG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QixFQUFFQyx3QkFBd0IsRUFBRTFPLFVBQVksRUFBRSxHQUFHMk8sR0FBRyxDQUFDLFNBQVNobUMsRUFBUVUsRUFBT0osR3dDemtSOUpJLEVBQUFKLFFBQUEsQ0FDQTJsQyxPQUFBLENBQ0FDLFlBQUEsY0FDQSxFQUNBQyxZQUFBLEdBQ0FDLFVBQUEsU0FBQXBrQyxFQUFBNk0sR0FBQSxJQUFBdzNCLEVBQUF6a0MsS0FPQSxPQU5BNk4sS0FBQUEsSUFBQTdOLEtBQUF1a0MsWUFBQW5rQyxLQUNBSixLQUFBdWtDLFlBQUFua0MsR0FBQSxJQUdBSixLQUFBdWtDLFlBQUFua0MsR0FBQSxHQUFBcUQsT0FBQWhCLG1CQUFBekMsS0FBQXVrQyxZQUFBbmtDLEVBQUEsRUFBQSxDQUFBNk0sRUFBQSxFQUVBLFdBQ0F3M0IsRUFBQUYsWUFBQW5rQyxHQUFBcWtDLEVBQUFGLFlBQUFua0MsR0FBQStDLE9BQUEsU0FBQXVoQyxHQUNBLE9BQUFBLElBQUF6M0IsQ0FDQSxDQUFBLENBQ0EsQ0FDQSxFQUNBMDNCLFFBQUEsU0FBQXZrQyxFQUFBeUYsR0FDQTdGLEtBQUF1a0MsWUFBQW5rQyxJQUNBSixLQUFBdWtDLFlBQUFua0MsR0FBQWdGLFFBQUEsU0FBQTZILEdBQ0FBLEVBQUFwSCxDQUFBLENBQ0EsQ0FBQSxDQUVBLENBQ0EsQ3hDNGtSQSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyIsImZpbGUiOiJnbG9iYWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiLyoqXG4gKiBtYXRjaGVzU2VsZWN0b3IgdjIuMC4yXG4gKiBtYXRjaGVzU2VsZWN0b3IoIGVsZW1lbnQsICcuc2VsZWN0b3InIClcbiAqIE1JVCBsaWNlbnNlXG4gKi9cblxuLypqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgc3RyaWN0OiB0cnVlLCB1bmRlZjogdHJ1ZSwgdW51c2VkOiB0cnVlICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLypnbG9iYWwgZGVmaW5lOiBmYWxzZSwgbW9kdWxlOiBmYWxzZSAqL1xuICAndXNlIHN0cmljdCc7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggZmFjdG9yeSApO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cubWF0Y2hlc1NlbGVjdG9yID0gZmFjdG9yeSgpO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBtYXRjaGVzTWV0aG9kID0gKCBmdW5jdGlvbigpIHtcbiAgICB2YXIgRWxlbVByb3RvID0gd2luZG93LkVsZW1lbnQucHJvdG90eXBlO1xuICAgIC8vIGNoZWNrIGZvciB0aGUgc3RhbmRhcmQgbWV0aG9kIG5hbWUgZmlyc3RcbiAgICBpZiAoIEVsZW1Qcm90by5tYXRjaGVzICkge1xuICAgICAgcmV0dXJuICdtYXRjaGVzJztcbiAgICB9XG4gICAgLy8gY2hlY2sgdW4tcHJlZml4ZWRcbiAgICBpZiAoIEVsZW1Qcm90by5tYXRjaGVzU2VsZWN0b3IgKSB7XG4gICAgICByZXR1cm4gJ21hdGNoZXNTZWxlY3Rvcic7XG4gICAgfVxuICAgIC8vIGNoZWNrIHZlbmRvciBwcmVmaXhlc1xuICAgIHZhciBwcmVmaXhlcyA9IFsgJ3dlYmtpdCcsICdtb3onLCAnbXMnLCAnbycgXTtcblxuICAgIGZvciAoIHZhciBpPTA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKyApIHtcbiAgICAgIHZhciBwcmVmaXggPSBwcmVmaXhlc1tpXTtcbiAgICAgIHZhciBtZXRob2QgPSBwcmVmaXggKyAnTWF0Y2hlc1NlbGVjdG9yJztcbiAgICAgIGlmICggRWxlbVByb3RvWyBtZXRob2QgXSApIHtcbiAgICAgICAgcmV0dXJuIG1ldGhvZDtcbiAgICAgIH1cbiAgICB9XG4gIH0pKCk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIG1hdGNoZXNTZWxlY3RvciggZWxlbSwgc2VsZWN0b3IgKSB7XG4gICAgcmV0dXJuIGVsZW1bIG1hdGNoZXNNZXRob2QgXSggc2VsZWN0b3IgKTtcbiAgfTtcblxufSkpO1xuIiwiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSh7MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIG1hdGNoZXNTZWxlY3RvciB2Mi4wLjJcbiAqIG1hdGNoZXNTZWxlY3RvciggZWxlbWVudCwgJy5zZWxlY3RvcicgKVxuICogTUlUIGxpY2Vuc2VcbiAqL1xuXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCBzdHJpY3Q6IHRydWUsIHVuZGVmOiB0cnVlLCB1bnVzZWQ6IHRydWUgKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvKmdsb2JhbCBkZWZpbmU6IGZhbHNlLCBtb2R1bGU6IGZhbHNlICovXG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCBmYWN0b3J5ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5tYXRjaGVzU2VsZWN0b3IgPSBmYWN0b3J5KCk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIG1hdGNoZXNNZXRob2QgPSAoIGZ1bmN0aW9uKCkge1xuICAgIHZhciBFbGVtUHJvdG8gPSB3aW5kb3cuRWxlbWVudC5wcm90b3R5cGU7XG4gICAgLy8gY2hlY2sgZm9yIHRoZSBzdGFuZGFyZCBtZXRob2QgbmFtZSBmaXJzdFxuICAgIGlmICggRWxlbVByb3RvLm1hdGNoZXMgKSB7XG4gICAgICByZXR1cm4gJ21hdGNoZXMnO1xuICAgIH1cbiAgICAvLyBjaGVjayB1bi1wcmVmaXhlZFxuICAgIGlmICggRWxlbVByb3RvLm1hdGNoZXNTZWxlY3RvciApIHtcbiAgICAgIHJldHVybiAnbWF0Y2hlc1NlbGVjdG9yJztcbiAgICB9XG4gICAgLy8gY2hlY2sgdmVuZG9yIHByZWZpeGVzXG4gICAgdmFyIHByZWZpeGVzID0gWyAnd2Via2l0JywgJ21veicsICdtcycsICdvJyBdO1xuXG4gICAgZm9yICggdmFyIGk9MDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrICkge1xuICAgICAgdmFyIHByZWZpeCA9IHByZWZpeGVzW2ldO1xuICAgICAgdmFyIG1ldGhvZCA9IHByZWZpeCArICdNYXRjaGVzU2VsZWN0b3InO1xuICAgICAgaWYgKCBFbGVtUHJvdG9bIG1ldGhvZCBdICkge1xuICAgICAgICByZXR1cm4gbWV0aG9kO1xuICAgICAgfVxuICAgIH1cbiAgfSkoKTtcblxuICByZXR1cm4gZnVuY3Rpb24gbWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBzZWxlY3RvciApIHtcbiAgICByZXR1cm4gZWxlbVsgbWF0Y2hlc01ldGhvZCBdKCBzZWxlY3RvciApO1xuICB9O1xuXG59KSk7XG5cbn0se31dLDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBFdkVtaXR0ZXIgdjIuMS4xXG4gKiBMaWwnIGV2ZW50IGVtaXR0ZXJcbiAqIE1JVCBMaWNlbnNlXG4gKi9cblxuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTIC0gQnJvd3NlcmlmeSwgV2VicGFja1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICB9IGVsc2Uge1xuICAgIC8vIEJyb3dzZXIgZ2xvYmFsc1xuICAgIGdsb2JhbC5FdkVtaXR0ZXIgPSBmYWN0b3J5KCk7XG4gIH1cblxufSggdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCkge1xuXG5mdW5jdGlvbiBFdkVtaXR0ZXIoKSB7fVxuXG5sZXQgcHJvdG8gPSBFdkVtaXR0ZXIucHJvdG90eXBlO1xuXG5wcm90by5vbiA9IGZ1bmN0aW9uKCBldmVudE5hbWUsIGxpc3RlbmVyICkge1xuICBpZiAoICFldmVudE5hbWUgfHwgIWxpc3RlbmVyICkgcmV0dXJuIHRoaXM7XG5cbiAgLy8gc2V0IGV2ZW50cyBoYXNoXG4gIGxldCBldmVudHMgPSB0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMgfHwge307XG4gIC8vIHNldCBsaXN0ZW5lcnMgYXJyYXlcbiAgbGV0IGxpc3RlbmVycyA9IGV2ZW50c1sgZXZlbnROYW1lIF0gPSBldmVudHNbIGV2ZW50TmFtZSBdIHx8IFtdO1xuICAvLyBvbmx5IGFkZCBvbmNlXG4gIGlmICggIWxpc3RlbmVycy5pbmNsdWRlcyggbGlzdGVuZXIgKSApIHtcbiAgICBsaXN0ZW5lcnMucHVzaCggbGlzdGVuZXIgKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG8ub25jZSA9IGZ1bmN0aW9uKCBldmVudE5hbWUsIGxpc3RlbmVyICkge1xuICBpZiAoICFldmVudE5hbWUgfHwgIWxpc3RlbmVyICkgcmV0dXJuIHRoaXM7XG5cbiAgLy8gYWRkIGV2ZW50XG4gIHRoaXMub24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKTtcbiAgLy8gc2V0IG9uY2UgZmxhZ1xuICAvLyBzZXQgb25jZUV2ZW50cyBoYXNoXG4gIGxldCBvbmNlRXZlbnRzID0gdGhpcy5fb25jZUV2ZW50cyA9IHRoaXMuX29uY2VFdmVudHMgfHwge307XG4gIC8vIHNldCBvbmNlTGlzdGVuZXJzIG9iamVjdFxuICBsZXQgb25jZUxpc3RlbmVycyA9IG9uY2VFdmVudHNbIGV2ZW50TmFtZSBdID0gb25jZUV2ZW50c1sgZXZlbnROYW1lIF0gfHwge307XG4gIC8vIHNldCBmbGFnXG4gIG9uY2VMaXN0ZW5lcnNbIGxpc3RlbmVyIF0gPSB0cnVlO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG8ub2ZmID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKSB7XG4gIGxldCBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHMgJiYgdGhpcy5fZXZlbnRzWyBldmVudE5hbWUgXTtcbiAgaWYgKCAhbGlzdGVuZXJzIHx8ICFsaXN0ZW5lcnMubGVuZ3RoICkgcmV0dXJuIHRoaXM7XG5cbiAgbGV0IGluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YoIGxpc3RlbmVyICk7XG4gIGlmICggaW5kZXggIT0gLTEgKSB7XG4gICAgbGlzdGVuZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG8uZW1pdEV2ZW50ID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgYXJncyApIHtcbiAgbGV0IGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50cyAmJiB0aGlzLl9ldmVudHNbIGV2ZW50TmFtZSBdO1xuICBpZiAoICFsaXN0ZW5lcnMgfHwgIWxpc3RlbmVycy5sZW5ndGggKSByZXR1cm4gdGhpcztcblxuICAvLyBjb3B5IG92ZXIgdG8gYXZvaWQgaW50ZXJmZXJlbmNlIGlmIC5vZmYoKSBpbiBsaXN0ZW5lclxuICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuc2xpY2UoIDAgKTtcbiAgYXJncyA9IGFyZ3MgfHwgW107XG4gIC8vIG9uY2Ugc3R1ZmZcbiAgbGV0IG9uY2VMaXN0ZW5lcnMgPSB0aGlzLl9vbmNlRXZlbnRzICYmIHRoaXMuX29uY2VFdmVudHNbIGV2ZW50TmFtZSBdO1xuXG4gIGZvciAoIGxldCBsaXN0ZW5lciBvZiBsaXN0ZW5lcnMgKSB7XG4gICAgbGV0IGlzT25jZSA9IG9uY2VMaXN0ZW5lcnMgJiYgb25jZUxpc3RlbmVyc1sgbGlzdGVuZXIgXTtcbiAgICBpZiAoIGlzT25jZSApIHtcbiAgICAgIC8vIHJlbW92ZSBsaXN0ZW5lclxuICAgICAgLy8gcmVtb3ZlIGJlZm9yZSB0cmlnZ2VyIHRvIHByZXZlbnQgcmVjdXJzaW9uXG4gICAgICB0aGlzLm9mZiggZXZlbnROYW1lLCBsaXN0ZW5lciApO1xuICAgICAgLy8gdW5zZXQgb25jZSBmbGFnXG4gICAgICBkZWxldGUgb25jZUxpc3RlbmVyc1sgbGlzdGVuZXIgXTtcbiAgICB9XG4gICAgLy8gdHJpZ2dlciBsaXN0ZW5lclxuICAgIGxpc3RlbmVyLmFwcGx5KCB0aGlzLCBhcmdzICk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvLmFsbE9mZiA9IGZ1bmN0aW9uKCkge1xuICBkZWxldGUgdGhpcy5fZXZlbnRzO1xuICBkZWxldGUgdGhpcy5fb25jZUV2ZW50cztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5yZXR1cm4gRXZFbWl0dGVyO1xuXG59ICkgKTtcblxufSx7fV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIEZpenp5IFVJIHV0aWxzIHYzLjAuMFxuICogTUlUIGxpY2Vuc2VcbiAqL1xuXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoIGdsb2JhbCApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgZ2xvYmFsLmZpenp5VUlVdGlscyA9IGZhY3RvcnkoIGdsb2JhbCApO1xuICB9XG5cbn0oIHRoaXMsIGZ1bmN0aW9uIGZhY3RvcnkoIGdsb2JhbCApIHtcblxubGV0IHV0aWxzID0ge307XG5cbi8vIC0tLS0tIGV4dGVuZCAtLS0tLSAvL1xuXG4vLyBleHRlbmRzIG9iamVjdHNcbnV0aWxzLmV4dGVuZCA9IGZ1bmN0aW9uKCBhLCBiICkge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbiggYSwgYiApO1xufTtcblxuLy8gLS0tLS0gbW9kdWxvIC0tLS0tIC8vXG5cbnV0aWxzLm1vZHVsbyA9IGZ1bmN0aW9uKCBudW0sIGRpdiApIHtcbiAgcmV0dXJuICggKCBudW0gJSBkaXYgKSArIGRpdiApICUgZGl2O1xufTtcblxuLy8gLS0tLS0gbWFrZUFycmF5IC0tLS0tIC8vXG5cbi8vIHR1cm4gZWxlbWVudCBvciBub2RlTGlzdCBpbnRvIGFuIGFycmF5XG51dGlscy5tYWtlQXJyYXkgPSBmdW5jdGlvbiggb2JqICkge1xuICAvLyB1c2Ugb2JqZWN0IGlmIGFscmVhZHkgYW4gYXJyYXlcbiAgaWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHJldHVybiBvYmo7XG5cbiAgLy8gcmV0dXJuIGVtcHR5IGFycmF5IGlmIHVuZGVmaW5lZCBvciBudWxsLiAjNlxuICBpZiAoIG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHVuZGVmaW5lZCApIHJldHVybiBbXTtcblxuICBsZXQgaXNBcnJheUxpa2UgPSB0eXBlb2Ygb2JqID09ICdvYmplY3QnICYmIHR5cGVvZiBvYmoubGVuZ3RoID09ICdudW1iZXInO1xuICAvLyBjb252ZXJ0IG5vZGVMaXN0IHRvIGFycmF5XG4gIGlmICggaXNBcnJheUxpa2UgKSByZXR1cm4gWyAuLi5vYmogXTtcblxuICAvLyBhcnJheSBvZiBzaW5nbGUgaW5kZXhcbiAgcmV0dXJuIFsgb2JqIF07XG59O1xuXG4vLyAtLS0tLSByZW1vdmVGcm9tIC0tLS0tIC8vXG5cbnV0aWxzLnJlbW92ZUZyb20gPSBmdW5jdGlvbiggYXJ5LCBvYmogKSB7XG4gIGxldCBpbmRleCA9IGFyeS5pbmRleE9mKCBvYmogKTtcbiAgaWYgKCBpbmRleCAhPSAtMSApIHtcbiAgICBhcnkuc3BsaWNlKCBpbmRleCwgMSApO1xuICB9XG59O1xuXG4vLyAtLS0tLSBnZXRQYXJlbnQgLS0tLS0gLy9cblxudXRpbHMuZ2V0UGFyZW50ID0gZnVuY3Rpb24oIGVsZW0sIHNlbGVjdG9yICkge1xuICB3aGlsZSAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtICE9IGRvY3VtZW50LmJvZHkgKSB7XG4gICAgZWxlbSA9IGVsZW0ucGFyZW50Tm9kZTtcbiAgICBpZiAoIGVsZW0ubWF0Y2hlcyggc2VsZWN0b3IgKSApIHJldHVybiBlbGVtO1xuICB9XG59O1xuXG4vLyAtLS0tLSBnZXRRdWVyeUVsZW1lbnQgLS0tLS0gLy9cblxuLy8gdXNlIGVsZW1lbnQgYXMgc2VsZWN0b3Igc3RyaW5nXG51dGlscy5nZXRRdWVyeUVsZW1lbnQgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgaWYgKCB0eXBlb2YgZWxlbSA9PSAnc3RyaW5nJyApIHtcbiAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvciggZWxlbSApO1xuICB9XG4gIHJldHVybiBlbGVtO1xufTtcblxuLy8gLS0tLS0gaGFuZGxlRXZlbnQgLS0tLS0gLy9cblxuLy8gZW5hYmxlIC5vbnR5cGUgdG8gdHJpZ2dlciBmcm9tIC5hZGRFdmVudExpc3RlbmVyKCBlbGVtLCAndHlwZScgKVxudXRpbHMuaGFuZGxlRXZlbnQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIGxldCBtZXRob2QgPSAnb24nICsgZXZlbnQudHlwZTtcbiAgaWYgKCB0aGlzWyBtZXRob2QgXSApIHtcbiAgICB0aGlzWyBtZXRob2QgXSggZXZlbnQgKTtcbiAgfVxufTtcblxuLy8gLS0tLS0gZmlsdGVyRmluZEVsZW1lbnRzIC0tLS0tIC8vXG5cbnV0aWxzLmZpbHRlckZpbmRFbGVtZW50cyA9IGZ1bmN0aW9uKCBlbGVtcywgc2VsZWN0b3IgKSB7XG4gIC8vIG1ha2UgYXJyYXkgb2YgZWxlbXNcbiAgZWxlbXMgPSB1dGlscy5tYWtlQXJyYXkoIGVsZW1zICk7XG5cbiAgcmV0dXJuIGVsZW1zXG4gICAgLy8gY2hlY2sgdGhhdCBlbGVtIGlzIGFuIGFjdHVhbCBlbGVtZW50XG4gICAgLmZpbHRlciggKCBlbGVtICkgPT4gZWxlbSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50IClcbiAgICAucmVkdWNlKCAoIGZmRWxlbXMsIGVsZW0gKSA9PiB7XG4gICAgICAvLyBhZGQgZWxlbSBpZiBubyBzZWxlY3RvclxuICAgICAgaWYgKCAhc2VsZWN0b3IgKSB7XG4gICAgICAgIGZmRWxlbXMucHVzaCggZWxlbSApO1xuICAgICAgICByZXR1cm4gZmZFbGVtcztcbiAgICAgIH1cbiAgICAgIC8vIGZpbHRlciAmIGZpbmQgaXRlbXMgaWYgd2UgaGF2ZSBhIHNlbGVjdG9yXG4gICAgICAvLyBmaWx0ZXJcbiAgICAgIGlmICggZWxlbS5tYXRjaGVzKCBzZWxlY3RvciApICkge1xuICAgICAgICBmZkVsZW1zLnB1c2goIGVsZW0gKTtcbiAgICAgIH1cbiAgICAgIC8vIGZpbmQgY2hpbGRyZW5cbiAgICAgIGxldCBjaGlsZEVsZW1zID0gZWxlbS5xdWVyeVNlbGVjdG9yQWxsKCBzZWxlY3RvciApO1xuICAgICAgLy8gY29uY2F0IGNoaWxkRWxlbXMgdG8gZmlsdGVyRm91bmQgYXJyYXlcbiAgICAgIGZmRWxlbXMgPSBmZkVsZW1zLmNvbmNhdCggLi4uY2hpbGRFbGVtcyApO1xuICAgICAgcmV0dXJuIGZmRWxlbXM7XG4gICAgfSwgW10gKTtcbn07XG5cbi8vIC0tLS0tIGRlYm91bmNlTWV0aG9kIC0tLS0tIC8vXG5cbnV0aWxzLmRlYm91bmNlTWV0aG9kID0gZnVuY3Rpb24oIF9jbGFzcywgbWV0aG9kTmFtZSwgdGhyZXNob2xkICkge1xuICB0aHJlc2hvbGQgPSB0aHJlc2hvbGQgfHwgMTAwO1xuICAvLyBvcmlnaW5hbCBtZXRob2RcbiAgbGV0IG1ldGhvZCA9IF9jbGFzcy5wcm90b3R5cGVbIG1ldGhvZE5hbWUgXTtcbiAgbGV0IHRpbWVvdXROYW1lID0gbWV0aG9kTmFtZSArICdUaW1lb3V0JztcblxuICBfY2xhc3MucHJvdG90eXBlWyBtZXRob2ROYW1lIF0gPSBmdW5jdGlvbigpIHtcbiAgICBjbGVhclRpbWVvdXQoIHRoaXNbIHRpbWVvdXROYW1lIF0gKTtcblxuICAgIGxldCBhcmdzID0gYXJndW1lbnRzO1xuICAgIHRoaXNbIHRpbWVvdXROYW1lIF0gPSBzZXRUaW1lb3V0KCAoKSA9PiB7XG4gICAgICBtZXRob2QuYXBwbHkoIHRoaXMsIGFyZ3MgKTtcbiAgICAgIGRlbGV0ZSB0aGlzWyB0aW1lb3V0TmFtZSBdO1xuICAgIH0sIHRocmVzaG9sZCApO1xuICB9O1xufTtcblxuLy8gLS0tLS0gZG9jUmVhZHkgLS0tLS0gLy9cblxudXRpbHMuZG9jUmVhZHkgPSBmdW5jdGlvbiggb25Eb2NSZWFkeSApIHtcbiAgbGV0IHJlYWR5U3RhdGUgPSBkb2N1bWVudC5yZWFkeVN0YXRlO1xuICBpZiAoIHJlYWR5U3RhdGUgPT0gJ2NvbXBsZXRlJyB8fCByZWFkeVN0YXRlID09ICdpbnRlcmFjdGl2ZScgKSB7XG4gICAgLy8gZG8gYXN5bmMgdG8gYWxsb3cgZm9yIG90aGVyIHNjcmlwdHMgdG8gcnVuLiBtZXRhZml6enkvZmxpY2tpdHkjNDQxXG4gICAgc2V0VGltZW91dCggb25Eb2NSZWFkeSApO1xuICB9IGVsc2Uge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdET01Db250ZW50TG9hZGVkJywgb25Eb2NSZWFkeSApO1xuICB9XG59O1xuXG4vLyAtLS0tLSBodG1sSW5pdCAtLS0tLSAvL1xuXG4vLyBodHRwOi8vYml0Lmx5LzNvWUx1c2NcbnV0aWxzLnRvRGFzaGVkID0gZnVuY3Rpb24oIHN0ciApIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKCAvKC4pKFtBLVpdKS9nLCBmdW5jdGlvbiggbWF0Y2gsICQxLCAkMiApIHtcbiAgICByZXR1cm4gJDEgKyAnLScgKyAkMjtcbiAgfSApLnRvTG93ZXJDYXNlKCk7XG59O1xuXG5sZXQgY29uc29sZSA9IGdsb2JhbC5jb25zb2xlO1xuXG4vLyBhbGxvdyB1c2VyIHRvIGluaXRpYWxpemUgY2xhc3NlcyB2aWEgW2RhdGEtbmFtZXNwYWNlXSBvciAuanMtbmFtZXNwYWNlIGNsYXNzXG4vLyBodG1sSW5pdCggV2lkZ2V0LCAnd2lkZ2V0TmFtZScgKVxuLy8gb3B0aW9ucyBhcmUgcGFyc2VkIGZyb20gZGF0YS1uYW1lc3BhY2Utb3B0aW9uc1xudXRpbHMuaHRtbEluaXQgPSBmdW5jdGlvbiggV2lkZ2V0Q2xhc3MsIG5hbWVzcGFjZSApIHtcbiAgdXRpbHMuZG9jUmVhZHkoIGZ1bmN0aW9uKCkge1xuICAgIGxldCBkYXNoZWROYW1lc3BhY2UgPSB1dGlscy50b0Rhc2hlZCggbmFtZXNwYWNlICk7XG4gICAgbGV0IGRhdGFBdHRyID0gJ2RhdGEtJyArIGRhc2hlZE5hbWVzcGFjZTtcbiAgICBsZXQgZGF0YUF0dHJFbGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIGBbJHtkYXRhQXR0cn1dYCApO1xuICAgIGxldCBqUXVlcnkgPSBnbG9iYWwualF1ZXJ5O1xuXG4gICAgWyAuLi5kYXRhQXR0ckVsZW1zIF0uZm9yRWFjaCggKCBlbGVtICkgPT4ge1xuICAgICAgbGV0IGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZSggZGF0YUF0dHIgKTtcbiAgICAgIGxldCBvcHRpb25zO1xuICAgICAgdHJ5IHtcbiAgICAgICAgb3B0aW9ucyA9IGF0dHIgJiYgSlNPTi5wYXJzZSggYXR0ciApO1xuICAgICAgfSBjYXRjaCAoIGVycm9yICkge1xuICAgICAgICAvLyBsb2cgZXJyb3IsIGRvIG5vdCBpbml0aWFsaXplXG4gICAgICAgIGlmICggY29uc29sZSApIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCBgRXJyb3IgcGFyc2luZyAke2RhdGFBdHRyfSBvbiAke2VsZW0uY2xhc3NOYW1lfTogJHtlcnJvcn1gICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gaW5pdGlhbGl6ZVxuICAgICAgbGV0IGluc3RhbmNlID0gbmV3IFdpZGdldENsYXNzKCBlbGVtLCBvcHRpb25zICk7XG4gICAgICAvLyBtYWtlIGF2YWlsYWJsZSB2aWEgJCgpLmRhdGEoJ25hbWVzcGFjZScpXG4gICAgICBpZiAoIGpRdWVyeSApIHtcbiAgICAgICAgalF1ZXJ5LmRhdGEoIGVsZW0sIG5hbWVzcGFjZSwgaW5zdGFuY2UgKTtcbiAgICAgIH1cbiAgICB9ICk7XG5cbiAgfSApO1xufTtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbnJldHVybiB1dGlscztcblxufSApICk7XG5cbn0se31dLDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyohXG4gKiBGbGlja2l0eSBhc05hdkZvciB2My4wLjBcbiAqIGVuYWJsZSBhc05hdkZvciBmb3IgRmxpY2tpdHlcbiAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICAgIHJlcXVpcmUoJ2ZsaWNraXR5JyksXG4gICAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJyksXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5GbGlja2l0eSA9IGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdy5GbGlja2l0eSxcbiAgICAgICAgd2luZG93LmZpenp5VUlVdGlscyxcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggRmxpY2tpdHksIHV0aWxzICkge1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBhc05hdkZvciBwcm90b3R5cGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLy8gRmxpY2tpdHkuZGVmYXVsdHMuYXNOYXZGb3IgPSBudWxsO1xuXG5GbGlja2l0eS5jcmVhdGUuYXNOYXZGb3IgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5vbiggJ2FjdGl2YXRlJywgdGhpcy5hY3RpdmF0ZUFzTmF2Rm9yICk7XG4gIHRoaXMub24oICdkZWFjdGl2YXRlJywgdGhpcy5kZWFjdGl2YXRlQXNOYXZGb3IgKTtcbiAgdGhpcy5vbiggJ2Rlc3Ryb3knLCB0aGlzLmRlc3Ryb3lBc05hdkZvciApO1xuXG4gIGxldCBhc05hdkZvck9wdGlvbiA9IHRoaXMub3B0aW9ucy5hc05hdkZvcjtcbiAgaWYgKCAhYXNOYXZGb3JPcHRpb24gKSByZXR1cm47XG5cbiAgLy8gSEFDSyBkbyBhc3luYywgZ2l2ZSB0aW1lIGZvciBvdGhlciBmbGlja2l0eSB0byBiZSBpbml0YWxpemVkXG4gIHNldFRpbWVvdXQoICgpID0+IHtcbiAgICB0aGlzLnNldE5hdkNvbXBhbmlvbiggYXNOYXZGb3JPcHRpb24gKTtcbiAgfSApO1xufTtcblxubGV0IHByb3RvID0gRmxpY2tpdHkucHJvdG90eXBlO1xuXG5wcm90by5zZXROYXZDb21wYW5pb24gPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgZWxlbSA9IHV0aWxzLmdldFF1ZXJ5RWxlbWVudCggZWxlbSApO1xuICBsZXQgY29tcGFuaW9uID0gRmxpY2tpdHkuZGF0YSggZWxlbSApO1xuICAvLyBzdG9wIGlmIG5vIGNvbXBhbmlvbiBvciBjb21wYW5pb24gaXMgc2VsZlxuICBpZiAoICFjb21wYW5pb24gfHwgY29tcGFuaW9uID09PSB0aGlzICkgcmV0dXJuO1xuXG4gIHRoaXMubmF2Q29tcGFuaW9uID0gY29tcGFuaW9uO1xuICAvLyBjb21wYW5pb24gc2VsZWN0XG4gIHRoaXMub25OYXZDb21wYW5pb25TZWxlY3QgPSAoKSA9PiB7XG4gICAgdGhpcy5uYXZDb21wYW5pb25TZWxlY3QoKTtcbiAgfTtcbiAgY29tcGFuaW9uLm9uKCAnc2VsZWN0JywgdGhpcy5vbk5hdkNvbXBhbmlvblNlbGVjdCApO1xuICAvLyBjbGlja1xuICB0aGlzLm9uKCAnc3RhdGljQ2xpY2snLCB0aGlzLm9uTmF2U3RhdGljQ2xpY2sgKTtcblxuICB0aGlzLm5hdkNvbXBhbmlvblNlbGVjdCggdHJ1ZSApO1xufTtcblxucHJvdG8ubmF2Q29tcGFuaW9uU2VsZWN0ID0gZnVuY3Rpb24oIGlzSW5zdGFudCApIHtcbiAgLy8gd2FpdCBmb3IgY29tcGFuaW9uICYgc2VsZWN0ZWRDZWxscyBmaXJzdC4gIzhcbiAgbGV0IGNvbXBhbmlvbkNlbGxzID0gdGhpcy5uYXZDb21wYW5pb24gJiYgdGhpcy5uYXZDb21wYW5pb24uc2VsZWN0ZWRDZWxscztcbiAgaWYgKCAhY29tcGFuaW9uQ2VsbHMgKSByZXR1cm47XG5cbiAgLy8gc2VsZWN0IHNsaWRlIHRoYXQgbWF0Y2hlcyBmaXJzdCBjZWxsIG9mIHNsaWRlXG4gIGxldCBzZWxlY3RlZENlbGwgPSBjb21wYW5pb25DZWxsc1swXTtcbiAgbGV0IGZpcnN0SW5kZXggPSB0aGlzLm5hdkNvbXBhbmlvbi5jZWxscy5pbmRleE9mKCBzZWxlY3RlZENlbGwgKTtcbiAgbGV0IGxhc3RJbmRleCA9IGZpcnN0SW5kZXggKyBjb21wYW5pb25DZWxscy5sZW5ndGggLSAxO1xuICBsZXQgc2VsZWN0SW5kZXggPSBNYXRoLmZsb29yKCBsZXJwKCBmaXJzdEluZGV4LCBsYXN0SW5kZXgsXG4gICAgICB0aGlzLm5hdkNvbXBhbmlvbi5jZWxsQWxpZ24gKSApO1xuICB0aGlzLnNlbGVjdENlbGwoIHNlbGVjdEluZGV4LCBmYWxzZSwgaXNJbnN0YW50ICk7XG4gIC8vIHNldCBuYXYgc2VsZWN0ZWQgY2xhc3NcbiAgdGhpcy5yZW1vdmVOYXZTZWxlY3RlZEVsZW1lbnRzKCk7XG4gIC8vIHN0b3AgaWYgY29tcGFuaW9uIGhhcyBtb3JlIGNlbGxzIHRoYW4gdGhpcyBvbmVcbiAgaWYgKCBzZWxlY3RJbmRleCA+PSB0aGlzLmNlbGxzLmxlbmd0aCApIHJldHVybjtcblxuICBsZXQgc2VsZWN0ZWRDZWxscyA9IHRoaXMuY2VsbHMuc2xpY2UoIGZpcnN0SW5kZXgsIGxhc3RJbmRleCArIDEgKTtcbiAgdGhpcy5uYXZTZWxlY3RlZEVsZW1lbnRzID0gc2VsZWN0ZWRDZWxscy5tYXAoICggY2VsbCApID0+IGNlbGwuZWxlbWVudCApO1xuICB0aGlzLmNoYW5nZU5hdlNlbGVjdGVkQ2xhc3MoJ2FkZCcpO1xufTtcblxuZnVuY3Rpb24gbGVycCggYSwgYiwgdCApIHtcbiAgcmV0dXJuICggYiAtIGEgKSAqIHQgKyBhO1xufVxuXG5wcm90by5jaGFuZ2VOYXZTZWxlY3RlZENsYXNzID0gZnVuY3Rpb24oIG1ldGhvZCApIHtcbiAgdGhpcy5uYXZTZWxlY3RlZEVsZW1lbnRzLmZvckVhY2goIGZ1bmN0aW9uKCBuYXZFbGVtICkge1xuICAgIG5hdkVsZW0uY2xhc3NMaXN0WyBtZXRob2QgXSgnaXMtbmF2LXNlbGVjdGVkJyk7XG4gIH0gKTtcbn07XG5cbnByb3RvLmFjdGl2YXRlQXNOYXZGb3IgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5uYXZDb21wYW5pb25TZWxlY3QoIHRydWUgKTtcbn07XG5cbnByb3RvLnJlbW92ZU5hdlNlbGVjdGVkRWxlbWVudHMgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5uYXZTZWxlY3RlZEVsZW1lbnRzICkgcmV0dXJuO1xuXG4gIHRoaXMuY2hhbmdlTmF2U2VsZWN0ZWRDbGFzcygncmVtb3ZlJyk7XG4gIGRlbGV0ZSB0aGlzLm5hdlNlbGVjdGVkRWxlbWVudHM7XG59O1xuXG5wcm90by5vbk5hdlN0YXRpY0NsaWNrID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyLCBjZWxsRWxlbWVudCwgY2VsbEluZGV4ICkge1xuICBpZiAoIHR5cGVvZiBjZWxsSW5kZXggPT0gJ251bWJlcicgKSB7XG4gICAgdGhpcy5uYXZDb21wYW5pb24uc2VsZWN0Q2VsbCggY2VsbEluZGV4ICk7XG4gIH1cbn07XG5cbnByb3RvLmRlYWN0aXZhdGVBc05hdkZvciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnJlbW92ZU5hdlNlbGVjdGVkRWxlbWVudHMoKTtcbn07XG5cbnByb3RvLmRlc3Ryb3lBc05hdkZvciA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLm5hdkNvbXBhbmlvbiApIHJldHVybjtcblxuICB0aGlzLm5hdkNvbXBhbmlvbi5vZmYoICdzZWxlY3QnLCB0aGlzLm9uTmF2Q29tcGFuaW9uU2VsZWN0ICk7XG4gIHRoaXMub2ZmKCAnc3RhdGljQ2xpY2snLCB0aGlzLm9uTmF2U3RhdGljQ2xpY2sgKTtcbiAgZGVsZXRlIHRoaXMubmF2Q29tcGFuaW9uO1xufTtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbnJldHVybiBGbGlja2l0eTtcblxufSApICk7XG5cbn0se1wiZml6enktdWktdXRpbHNcIjozLFwiZmxpY2tpdHlcIjoyOX1dLDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyohXG4gKiBGbGlja2l0eSBmdWxsc2NyZWVuIHYyLjAuMFxuICogRW5hYmxlIGZ1bGxzY3JlZW4gdmlldyBmb3IgRmxpY2tpdHlcbiAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoIHJlcXVpcmUoJ2ZsaWNraXR5JykgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIGZhY3RvcnkoIHdpbmRvdy5GbGlja2l0eSApO1xuICB9XG5cbn0oIHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiBmYWN0b3J5KCBGbGlja2l0eSApIHtcblxuRmxpY2tpdHkuY3JlYXRlLmZ1bGxzY3JlZW4gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5pc0Z1bGxzY3JlZW4gPSBmYWxzZTtcblxuICBpZiAoICF0aGlzLm9wdGlvbnMuZnVsbHNjcmVlbiApIHJldHVybjtcbiAgLy8gYnV0dG9uc1xuICB0aGlzLnZpZXdGdWxsc2NyZWVuQnV0dG9uID0gbmV3IEZ1bGxzY3JlZW5CdXR0b24oICd2aWV3JywgdGhpcyApO1xuICB0aGlzLmV4aXRGdWxsc2NyZWVuQnV0dG9uID0gbmV3IEZ1bGxzY3JlZW5CdXR0b24oICdleGl0JywgdGhpcyApO1xuXG4gIHRoaXMub24oICdhY3RpdmF0ZScsIHRoaXMuX2NoYW5nZUZ1bGxzY3JlZW5BY3RpdmUgKTtcbiAgdGhpcy5vbiggJ2RlYWN0aXZhdGUnLCB0aGlzLl9jaGFuZ2VGdWxsc2NyZWVuQWN0aXZlICk7XG59O1xuXG5sZXQgcHJvdG8gPSBGbGlja2l0eS5wcm90b3R5cGU7XG5cbi8vIC0tLS0tIGFjdGl2YXRpb24gLS0tLS0gLy9cblxucHJvdG8uX2NoYW5nZUZ1bGxzY3JlZW5BY3RpdmUgPSBmdW5jdGlvbigpIHtcbiAgbGV0IGNoaWxkTWV0aG9kID0gdGhpcy5pc0FjdGl2ZSA/ICdhcHBlbmRDaGlsZCcgOiAncmVtb3ZlQ2hpbGQnO1xuICB0aGlzLmVsZW1lbnRbIGNoaWxkTWV0aG9kIF0oIHRoaXMudmlld0Z1bGxzY3JlZW5CdXR0b24uZWxlbWVudCApO1xuICB0aGlzLmVsZW1lbnRbIGNoaWxkTWV0aG9kIF0oIHRoaXMuZXhpdEZ1bGxzY3JlZW5CdXR0b24uZWxlbWVudCApO1xuICAvLyBhY3RpdmF0ZSBvciBkZWFjdGl2YXRlIGJ1dHRvbnNcbiAgbGV0IGFjdGl2ZU1ldGhvZCA9IHRoaXMuaXNBY3RpdmUgPyAnYWN0aXZhdGUnIDogJ2RlYWN0aXZhdGUnO1xuICB0aGlzLnZpZXdGdWxsc2NyZWVuQnV0dG9uWyBhY3RpdmVNZXRob2QgXSgpO1xuICB0aGlzLmV4aXRGdWxsc2NyZWVuQnV0dG9uWyBhY3RpdmVNZXRob2QgXSgpO1xufTtcblxuLy8gLS0tLS0gdmlldywgZXhpdCwgdG9nZ2xlIC0tLS0tIC8vXG5cbnByb3RvLnZpZXdGdWxsc2NyZWVuID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NoYW5nZUZ1bGxzY3JlZW4oIHRydWUgKTtcbiAgdGhpcy5mb2N1cygpO1xufTtcblxucHJvdG8uZXhpdEZ1bGxzY3JlZW4gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2hhbmdlRnVsbHNjcmVlbiggZmFsc2UgKTtcbn07XG5cbnByb3RvLl9jaGFuZ2VGdWxsc2NyZWVuID0gZnVuY3Rpb24oIGlzVmlldyApIHtcbiAgaWYgKCB0aGlzLmlzRnVsbHNjcmVlbiA9PT0gaXNWaWV3ICkgcmV0dXJuO1xuXG4gIHRoaXMuaXNGdWxsc2NyZWVuID0gaXNWaWV3O1xuICBsZXQgY2xhc3NNZXRob2QgPSBpc1ZpZXcgPyAnYWRkJyA6ICdyZW1vdmUnO1xuICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0WyBjbGFzc01ldGhvZCBdKCdpcy1mbGlja2l0eS1mdWxsc2NyZWVuJyk7XG4gIHRoaXMuZWxlbWVudC5jbGFzc0xpc3RbIGNsYXNzTWV0aG9kIF0oJ2lzLWZ1bGxzY3JlZW4nKTtcbiAgdGhpcy5yZXNpemUoKTtcbiAgLy8gSEFDSyBleHRyYSByZXBvc2l0aW9uIG9uIGZ1bGxzY3JlZW4gZm9yIGltYWdlc1xuICBpZiAoIHRoaXMuaXNGdWxsc2NyZWVuICkgdGhpcy5yZXBvc2l0aW9uKCk7XG4gIHRoaXMuZGlzcGF0Y2hFdmVudCggJ2Z1bGxzY3JlZW5DaGFuZ2UnLCBudWxsLCBbIGlzVmlldyBdICk7XG59O1xuXG5wcm90by50b2dnbGVGdWxsc2NyZWVuID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NoYW5nZUZ1bGxzY3JlZW4oICF0aGlzLmlzRnVsbHNjcmVlbiApO1xufTtcblxuLy8gLS0tLS0gc2V0R2FsbGVyeVNpemUgLS0tLS0gLy9cblxuLy8gb3ZlcndyaXRlIHNvIGZ1bGxzY3JlZW4gY2VsbHMgYXJlIGZ1bGwgaGVpZ2h0XG5sZXQgc2V0R2FsbGVyeVNpemUgPSBwcm90by5zZXRHYWxsZXJ5U2l6ZTtcbnByb3RvLnNldEdhbGxlcnlTaXplID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMub3B0aW9ucy5zZXRHYWxsZXJ5U2l6ZSApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCB0aGlzLmlzRnVsbHNjcmVlbiApIHtcbiAgICAvLyByZW1vdmUgaGVpZ2h0IHN0eWxlIG9uIGZ1bGxzY3JlZW5cbiAgICB0aGlzLnZpZXdwb3J0LnN0eWxlLmhlaWdodCA9ICcnO1xuICB9IGVsc2Uge1xuICAgIC8vIG90aGVyd2lzZSwgZG8gbm9ybWFsXG4gICAgc2V0R2FsbGVyeVNpemUuY2FsbCggdGhpcyApO1xuICB9XG59O1xuXG4vLyAtLS0tLSBrZXlib2FyZCAtLS0tLSAvL1xuXG4vLyBFU0Mga2V5IGNsb3NlcyBmdWxsIHNjcmVlblxuRmxpY2tpdHkua2V5Ym9hcmRIYW5kbGVyc1syN10gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5leGl0RnVsbHNjcmVlbigpO1xufTtcblxuLy8gLS0tLS0gRnVsbHNjcmVlbkJ1dHRvbiAtLS0tLSAvL1xuXG5mdW5jdGlvbiBGdWxsc2NyZWVuQnV0dG9uKCBuYW1lLCBmbGlja2l0eSApIHtcbiAgdGhpcy5uYW1lID0gbmFtZTtcbiAgdGhpcy5jcmVhdGVCdXR0b24oKTtcbiAgdGhpcy5jcmVhdGVJY29uKCk7XG4gIC8vIGV2ZW50c1xuICAvLyB0cmlnZ2VyIHZpZXdGdWxsc2NyZWVuIG9yIGV4aXRGdWxsc2NyZWVuIG9uIGNsaWNrXG4gIHRoaXMub25DbGljayA9IGZ1bmN0aW9uKCkge1xuICAgIGZsaWNraXR5WyBuYW1lICsgJ0Z1bGxzY3JlZW4nIF0oKTtcbiAgfTtcbiAgdGhpcy5jbGlja0hhbmRsZXIgPSB0aGlzLm9uQ2xpY2suYmluZCggdGhpcyApO1xufVxuXG5GdWxsc2NyZWVuQnV0dG9uLnByb3RvdHlwZS5jcmVhdGVCdXR0b24gPSBmdW5jdGlvbigpIHtcbiAgbGV0IGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgZWxlbWVudC5jbGFzc05hbWUgPSAnZmxpY2tpdHktYnV0dG9uIGZsaWNraXR5LWZ1bGxzY3JlZW4tYnV0dG9uICcgK1xuICAgICdmbGlja2l0eS1mdWxsc2NyZWVuLWJ1dHRvbi0nICsgdGhpcy5uYW1lO1xuICAvLyBwcmV2ZW50IGJ1dHRvbiBmcm9tIHN1Ym1pdHRpbmcgZm9ybVxuICBlbGVtZW50LnNldEF0dHJpYnV0ZSggJ3R5cGUnLCAnYnV0dG9uJyApO1xuICAvLyBzZXQgbGFiZWxcbiAgbGV0IGxhYmVsID0gY2FwaXRhbGl6ZSggdGhpcy5uYW1lICsgJyBmdWxsLXNjcmVlbicgKTtcbiAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoICdhcmlhLWxhYmVsJywgbGFiZWwgKTtcbiAgZWxlbWVudC50aXRsZSA9IGxhYmVsO1xufTtcblxuZnVuY3Rpb24gY2FwaXRhbGl6ZSggdGV4dCApIHtcbiAgcmV0dXJuIHRleHRbMF0udG9VcHBlckNhc2UoKSArIHRleHQuc2xpY2UoIDEgKTtcbn1cblxuY29uc3Qgc3ZnVVJJID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJztcblxuY29uc3QgcGF0aERpcmVjdGlvbnMgPSB7XG4gIHZpZXc6ICdNMTUsMjAsNywyOGg1djRIMFYyMEg0djVsOC04Wm01LTUsOC04djVoNFYwSDIwVjRoNWwtOCw4WicsXG4gIGV4aXQ6ICdNMzIsM2wtNyw3aDV2NEgxOFYyaDRWN2w3LTdaTTMsMzJsNy03djVoNFYxOEgydjRIN0wwLDI5WicsXG59O1xuXG5GdWxsc2NyZWVuQnV0dG9uLnByb3RvdHlwZS5jcmVhdGVJY29uID0gZnVuY3Rpb24oKSB7XG4gIGxldCBzdmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoIHN2Z1VSSSwgJ3N2ZycgKTtcbiAgc3ZnLnNldEF0dHJpYnV0ZSggJ2NsYXNzJywgJ2ZsaWNraXR5LWJ1dHRvbi1pY29uJyApO1xuICBzdmcuc2V0QXR0cmlidXRlKCAndmlld0JveCcsICcwIDAgMzIgMzInICk7XG4gIC8vIHBhdGggJiBkaXJlY3Rpb25cbiAgbGV0IHBhdGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoIHN2Z1VSSSwgJ3BhdGgnICk7XG4gIGxldCBkaXJlY3Rpb24gPSBwYXRoRGlyZWN0aW9uc1sgdGhpcy5uYW1lIF07XG4gIHBhdGguc2V0QXR0cmlidXRlKCAnZCcsIGRpcmVjdGlvbiApO1xuICAvLyBwdXQgaXQgdG9nZXRoZXJcbiAgc3ZnLmFwcGVuZENoaWxkKCBwYXRoICk7XG4gIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCggc3ZnICk7XG59O1xuXG5GdWxsc2NyZWVuQnV0dG9uLnByb3RvdHlwZS5hY3RpdmF0ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgdGhpcy5jbGlja0hhbmRsZXIgKTtcbn07XG5cbkZ1bGxzY3JlZW5CdXR0b24ucHJvdG90eXBlLmRlYWN0aXZhdGUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdjbGljaycsIHRoaXMuY2xpY2tIYW5kbGVyICk7XG59O1xuXG5GbGlja2l0eS5GdWxsc2NyZWVuQnV0dG9uID0gRnVsbHNjcmVlbkJ1dHRvbjtcblxuLy8gLS0tLS0gZmluIC0tLS0tIC8vXG5cbnJldHVybiBGbGlja2l0eTtcblxufSApICk7XG5cbn0se1wiZmxpY2tpdHlcIjoyOX1dLDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyohXG4gKiBGbGlja2l0eSBpbWFnZXNMb2FkZWQgdjIuMC4wXG4gKiBlbmFibGVzIGltYWdlc0xvYWRlZCBvcHRpb24gZm9yIEZsaWNraXR5XG4gKi9cblxuLypqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgc3RyaWN0OiB0cnVlLCB1bmRlZjogdHJ1ZSwgdW51c2VkOiB0cnVlICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIC8qanNoaW50IHN0cmljdDogZmFsc2UgKi8gLypnbG9iYWxzIGRlZmluZSwgbW9kdWxlLCByZXF1aXJlICovXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCBbXG4gICAgICAnZmxpY2tpdHkvanMvaW5kZXgnLFxuICAgICAgJ2ltYWdlc2xvYWRlZC9pbWFnZXNsb2FkZWQnXG4gICAgXSwgZnVuY3Rpb24oIEZsaWNraXR5LCBpbWFnZXNMb2FkZWQgKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBGbGlja2l0eSwgaW1hZ2VzTG9hZGVkICk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3csXG4gICAgICByZXF1aXJlKCdmbGlja2l0eScpLFxuICAgICAgcmVxdWlyZSgnaW1hZ2VzbG9hZGVkJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LkZsaWNraXR5ID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHdpbmRvdy5GbGlja2l0eSxcbiAgICAgIHdpbmRvdy5pbWFnZXNMb2FkZWRcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBGbGlja2l0eSwgaW1hZ2VzTG9hZGVkICkge1xuJ3VzZSBzdHJpY3QnO1xuXG5GbGlja2l0eS5jcmVhdGVNZXRob2RzLnB1c2goJ19jcmVhdGVJbWFnZXNMb2FkZWQnKTtcblxudmFyIHByb3RvID0gRmxpY2tpdHkucHJvdG90eXBlO1xuXG5wcm90by5fY3JlYXRlSW1hZ2VzTG9hZGVkID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMub24oICdhY3RpdmF0ZScsIHRoaXMuaW1hZ2VzTG9hZGVkICk7XG59O1xuXG5wcm90by5pbWFnZXNMb2FkZWQgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5vcHRpb25zLmltYWdlc0xvYWRlZCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIF90aGlzID0gdGhpcztcbiAgZnVuY3Rpb24gb25JbWFnZXNMb2FkZWRQcm9ncmVzcyggaW5zdGFuY2UsIGltYWdlICkge1xuICAgIHZhciBjZWxsID0gX3RoaXMuZ2V0UGFyZW50Q2VsbCggaW1hZ2UuaW1nICk7XG4gICAgX3RoaXMuY2VsbFNpemVDaGFuZ2UoIGNlbGwgJiYgY2VsbC5lbGVtZW50ICk7XG4gICAgaWYgKCAhX3RoaXMub3B0aW9ucy5mcmVlU2Nyb2xsICkge1xuICAgICAgX3RoaXMucG9zaXRpb25TbGlkZXJBdFNlbGVjdGVkKCk7XG4gICAgfVxuICB9XG4gIGltYWdlc0xvYWRlZCggdGhpcy5zbGlkZXIgKS5vbiggJ3Byb2dyZXNzJywgb25JbWFnZXNMb2FkZWRQcm9ncmVzcyApO1xufTtcblxucmV0dXJuIEZsaWNraXR5O1xuXG59KSk7XG5cbn0se1wiZmxpY2tpdHlcIjoxNCxcImltYWdlc2xvYWRlZFwiOjIxfV0sNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIEV2RW1pdHRlciB2MS4xLjBcbiAqIExpbCcgZXZlbnQgZW1pdHRlclxuICogTUlUIExpY2Vuc2VcbiAqL1xuXG4vKiBqc2hpbnQgdW51c2VkOiB0cnVlLCB1bmRlZjogdHJ1ZSwgc3RyaWN0OiB0cnVlICovXG5cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIC8qIGpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qIGdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHdpbmRvdyAqL1xuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRCAtIFJlcXVpcmVKU1xuICAgIGRlZmluZSggZmFjdG9yeSApO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTIC0gQnJvd3NlcmlmeSwgV2VicGFja1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICB9IGVsc2Uge1xuICAgIC8vIEJyb3dzZXIgZ2xvYmFsc1xuICAgIGdsb2JhbC5FdkVtaXR0ZXIgPSBmYWN0b3J5KCk7XG4gIH1cblxufSggdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCkge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gRXZFbWl0dGVyKCkge31cblxudmFyIHByb3RvID0gRXZFbWl0dGVyLnByb3RvdHlwZTtcblxucHJvdG8ub24gPSBmdW5jdGlvbiggZXZlbnROYW1lLCBsaXN0ZW5lciApIHtcbiAgaWYgKCAhZXZlbnROYW1lIHx8ICFsaXN0ZW5lciApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gc2V0IGV2ZW50cyBoYXNoXG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMgfHwge307XG4gIC8vIHNldCBsaXN0ZW5lcnMgYXJyYXlcbiAgdmFyIGxpc3RlbmVycyA9IGV2ZW50c1sgZXZlbnROYW1lIF0gPSBldmVudHNbIGV2ZW50TmFtZSBdIHx8IFtdO1xuICAvLyBvbmx5IGFkZCBvbmNlXG4gIGlmICggbGlzdGVuZXJzLmluZGV4T2YoIGxpc3RlbmVyICkgPT0gLTEgKSB7XG4gICAgbGlzdGVuZXJzLnB1c2goIGxpc3RlbmVyICk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvLm9uY2UgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBsaXN0ZW5lciApIHtcbiAgaWYgKCAhZXZlbnROYW1lIHx8ICFsaXN0ZW5lciApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gYWRkIGV2ZW50XG4gIHRoaXMub24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKTtcbiAgLy8gc2V0IG9uY2UgZmxhZ1xuICAvLyBzZXQgb25jZUV2ZW50cyBoYXNoXG4gIHZhciBvbmNlRXZlbnRzID0gdGhpcy5fb25jZUV2ZW50cyA9IHRoaXMuX29uY2VFdmVudHMgfHwge307XG4gIC8vIHNldCBvbmNlTGlzdGVuZXJzIG9iamVjdFxuICB2YXIgb25jZUxpc3RlbmVycyA9IG9uY2VFdmVudHNbIGV2ZW50TmFtZSBdID0gb25jZUV2ZW50c1sgZXZlbnROYW1lIF0gfHwge307XG4gIC8vIHNldCBmbGFnXG4gIG9uY2VMaXN0ZW5lcnNbIGxpc3RlbmVyIF0gPSB0cnVlO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG8ub2ZmID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKSB7XG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHMgJiYgdGhpcy5fZXZlbnRzWyBldmVudE5hbWUgXTtcbiAgaWYgKCAhbGlzdGVuZXJzIHx8ICFsaXN0ZW5lcnMubGVuZ3RoICkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZiggbGlzdGVuZXIgKTtcbiAgaWYgKCBpbmRleCAhPSAtMSApIHtcbiAgICBsaXN0ZW5lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5lbWl0RXZlbnQgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBhcmdzICkge1xuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzICYmIHRoaXMuX2V2ZW50c1sgZXZlbnROYW1lIF07XG4gIGlmICggIWxpc3RlbmVycyB8fCAhbGlzdGVuZXJzLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gY29weSBvdmVyIHRvIGF2b2lkIGludGVyZmVyZW5jZSBpZiAub2ZmKCkgaW4gbGlzdGVuZXJcbiAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLnNsaWNlKDApO1xuICBhcmdzID0gYXJncyB8fCBbXTtcbiAgLy8gb25jZSBzdHVmZlxuICB2YXIgb25jZUxpc3RlbmVycyA9IHRoaXMuX29uY2VFdmVudHMgJiYgdGhpcy5fb25jZUV2ZW50c1sgZXZlbnROYW1lIF07XG5cbiAgZm9yICggdmFyIGk9MDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKyApIHtcbiAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV1cbiAgICB2YXIgaXNPbmNlID0gb25jZUxpc3RlbmVycyAmJiBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdO1xuICAgIGlmICggaXNPbmNlICkge1xuICAgICAgLy8gcmVtb3ZlIGxpc3RlbmVyXG4gICAgICAvLyByZW1vdmUgYmVmb3JlIHRyaWdnZXIgdG8gcHJldmVudCByZWN1cnNpb25cbiAgICAgIHRoaXMub2ZmKCBldmVudE5hbWUsIGxpc3RlbmVyICk7XG4gICAgICAvLyB1bnNldCBvbmNlIGZsYWdcbiAgICAgIGRlbGV0ZSBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdO1xuICAgIH1cbiAgICAvLyB0cmlnZ2VyIGxpc3RlbmVyXG4gICAgbGlzdGVuZXIuYXBwbHkoIHRoaXMsIGFyZ3MgKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG8uYWxsT2ZmID0gZnVuY3Rpb24oKSB7XG4gIGRlbGV0ZSB0aGlzLl9ldmVudHM7XG4gIGRlbGV0ZSB0aGlzLl9vbmNlRXZlbnRzO1xufTtcblxucmV0dXJuIEV2RW1pdHRlcjtcblxufSkpO1xuXG59LHt9XSw4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogRml6enkgVUkgdXRpbHMgdjIuMC43XG4gKiBNSVQgbGljZW5zZVxuICovXG5cbi8qanNoaW50IGJyb3dzZXI6IHRydWUsIHVuZGVmOiB0cnVlLCB1bnVzZWQ6IHRydWUsIHN0cmljdDogdHJ1ZSAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKmpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qZ2xvYmFscyBkZWZpbmUsIG1vZHVsZSwgcmVxdWlyZSAqL1xuXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCBbXG4gICAgICAnZGVzYW5kcm8tbWF0Y2hlcy1zZWxlY3Rvci9tYXRjaGVzLXNlbGVjdG9yJ1xuICAgIF0sIGZ1bmN0aW9uKCBtYXRjaGVzU2VsZWN0b3IgKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBtYXRjaGVzU2VsZWN0b3IgKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHJlcXVpcmUoJ2Rlc2FuZHJvLW1hdGNoZXMtc2VsZWN0b3InKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuZml6enlVSVV0aWxzID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHdpbmRvdy5tYXRjaGVzU2VsZWN0b3JcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBtYXRjaGVzU2VsZWN0b3IgKSB7XG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0ge307XG5cbi8vIC0tLS0tIGV4dGVuZCAtLS0tLSAvL1xuXG4vLyBleHRlbmRzIG9iamVjdHNcbnV0aWxzLmV4dGVuZCA9IGZ1bmN0aW9uKCBhLCBiICkge1xuICBmb3IgKCB2YXIgcHJvcCBpbiBiICkge1xuICAgIGFbIHByb3AgXSA9IGJbIHByb3AgXTtcbiAgfVxuICByZXR1cm4gYTtcbn07XG5cbi8vIC0tLS0tIG1vZHVsbyAtLS0tLSAvL1xuXG51dGlscy5tb2R1bG8gPSBmdW5jdGlvbiggbnVtLCBkaXYgKSB7XG4gIHJldHVybiAoICggbnVtICUgZGl2ICkgKyBkaXYgKSAlIGRpdjtcbn07XG5cbi8vIC0tLS0tIG1ha2VBcnJheSAtLS0tLSAvL1xuXG52YXIgYXJyYXlTbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuLy8gdHVybiBlbGVtZW50IG9yIG5vZGVMaXN0IGludG8gYW4gYXJyYXlcbnV0aWxzLm1ha2VBcnJheSA9IGZ1bmN0aW9uKCBvYmogKSB7XG4gIGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG4gICAgLy8gdXNlIG9iamVjdCBpZiBhbHJlYWR5IGFuIGFycmF5XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuICAvLyByZXR1cm4gZW1wdHkgYXJyYXkgaWYgdW5kZWZpbmVkIG9yIG51bGwuICM2XG4gIGlmICggb2JqID09PSBudWxsIHx8IG9iaiA9PT0gdW5kZWZpbmVkICkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHZhciBpc0FycmF5TGlrZSA9IHR5cGVvZiBvYmogPT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iai5sZW5ndGggPT0gJ251bWJlcic7XG4gIGlmICggaXNBcnJheUxpa2UgKSB7XG4gICAgLy8gY29udmVydCBub2RlTGlzdCB0byBhcnJheVxuICAgIHJldHVybiBhcnJheVNsaWNlLmNhbGwoIG9iaiApO1xuICB9XG5cbiAgLy8gYXJyYXkgb2Ygc2luZ2xlIGluZGV4XG4gIHJldHVybiBbIG9iaiBdO1xufTtcblxuLy8gLS0tLS0gcmVtb3ZlRnJvbSAtLS0tLSAvL1xuXG51dGlscy5yZW1vdmVGcm9tID0gZnVuY3Rpb24oIGFyeSwgb2JqICkge1xuICB2YXIgaW5kZXggPSBhcnkuaW5kZXhPZiggb2JqICk7XG4gIGlmICggaW5kZXggIT0gLTEgKSB7XG4gICAgYXJ5LnNwbGljZSggaW5kZXgsIDEgKTtcbiAgfVxufTtcblxuLy8gLS0tLS0gZ2V0UGFyZW50IC0tLS0tIC8vXG5cbnV0aWxzLmdldFBhcmVudCA9IGZ1bmN0aW9uKCBlbGVtLCBzZWxlY3RvciApIHtcbiAgd2hpbGUgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbSAhPSBkb2N1bWVudC5ib2R5ICkge1xuICAgIGVsZW0gPSBlbGVtLnBhcmVudE5vZGU7XG4gICAgaWYgKCBtYXRjaGVzU2VsZWN0b3IoIGVsZW0sIHNlbGVjdG9yICkgKSB7XG4gICAgICByZXR1cm4gZWxlbTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIC0tLS0tIGdldFF1ZXJ5RWxlbWVudCAtLS0tLSAvL1xuXG4vLyB1c2UgZWxlbWVudCBhcyBzZWxlY3RvciBzdHJpbmdcbnV0aWxzLmdldFF1ZXJ5RWxlbWVudCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICBpZiAoIHR5cGVvZiBlbGVtID09ICdzdHJpbmcnICkge1xuICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBlbGVtICk7XG4gIH1cbiAgcmV0dXJuIGVsZW07XG59O1xuXG4vLyAtLS0tLSBoYW5kbGVFdmVudCAtLS0tLSAvL1xuXG4vLyBlbmFibGUgLm9udHlwZSB0byB0cmlnZ2VyIGZyb20gLmFkZEV2ZW50TGlzdGVuZXIoIGVsZW0sICd0eXBlJyApXG51dGlscy5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdmFyIG1ldGhvZCA9ICdvbicgKyBldmVudC50eXBlO1xuICBpZiAoIHRoaXNbIG1ldGhvZCBdICkge1xuICAgIHRoaXNbIG1ldGhvZCBdKCBldmVudCApO1xuICB9XG59O1xuXG4vLyAtLS0tLSBmaWx0ZXJGaW5kRWxlbWVudHMgLS0tLS0gLy9cblxudXRpbHMuZmlsdGVyRmluZEVsZW1lbnRzID0gZnVuY3Rpb24oIGVsZW1zLCBzZWxlY3RvciApIHtcbiAgLy8gbWFrZSBhcnJheSBvZiBlbGVtc1xuICBlbGVtcyA9IHV0aWxzLm1ha2VBcnJheSggZWxlbXMgKTtcbiAgdmFyIGZmRWxlbXMgPSBbXTtcblxuICBlbGVtcy5mb3JFYWNoKCBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAvLyBjaGVjayB0aGF0IGVsZW0gaXMgYW4gYWN0dWFsIGVsZW1lbnRcbiAgICBpZiAoICEoIGVsZW0gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCApICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBhZGQgZWxlbSBpZiBubyBzZWxlY3RvclxuICAgIGlmICggIXNlbGVjdG9yICkge1xuICAgICAgZmZFbGVtcy5wdXNoKCBlbGVtICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGZpbHRlciAmIGZpbmQgaXRlbXMgaWYgd2UgaGF2ZSBhIHNlbGVjdG9yXG4gICAgLy8gZmlsdGVyXG4gICAgaWYgKCBtYXRjaGVzU2VsZWN0b3IoIGVsZW0sIHNlbGVjdG9yICkgKSB7XG4gICAgICBmZkVsZW1zLnB1c2goIGVsZW0gKTtcbiAgICB9XG4gICAgLy8gZmluZCBjaGlsZHJlblxuICAgIHZhciBjaGlsZEVsZW1zID0gZWxlbS5xdWVyeVNlbGVjdG9yQWxsKCBzZWxlY3RvciApO1xuICAgIC8vIGNvbmNhdCBjaGlsZEVsZW1zIHRvIGZpbHRlckZvdW5kIGFycmF5XG4gICAgZm9yICggdmFyIGk9MDsgaSA8IGNoaWxkRWxlbXMubGVuZ3RoOyBpKysgKSB7XG4gICAgICBmZkVsZW1zLnB1c2goIGNoaWxkRWxlbXNbaV0gKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBmZkVsZW1zO1xufTtcblxuLy8gLS0tLS0gZGVib3VuY2VNZXRob2QgLS0tLS0gLy9cblxudXRpbHMuZGVib3VuY2VNZXRob2QgPSBmdW5jdGlvbiggX2NsYXNzLCBtZXRob2ROYW1lLCB0aHJlc2hvbGQgKSB7XG4gIHRocmVzaG9sZCA9IHRocmVzaG9sZCB8fCAxMDA7XG4gIC8vIG9yaWdpbmFsIG1ldGhvZFxuICB2YXIgbWV0aG9kID0gX2NsYXNzLnByb3RvdHlwZVsgbWV0aG9kTmFtZSBdO1xuICB2YXIgdGltZW91dE5hbWUgPSBtZXRob2ROYW1lICsgJ1RpbWVvdXQnO1xuXG4gIF9jbGFzcy5wcm90b3R5cGVbIG1ldGhvZE5hbWUgXSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0aW1lb3V0ID0gdGhpc1sgdGltZW91dE5hbWUgXTtcbiAgICBjbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblxuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdGhpc1sgdGltZW91dE5hbWUgXSA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuICAgICAgbWV0aG9kLmFwcGx5KCBfdGhpcywgYXJncyApO1xuICAgICAgZGVsZXRlIF90aGlzWyB0aW1lb3V0TmFtZSBdO1xuICAgIH0sIHRocmVzaG9sZCApO1xuICB9O1xufTtcblxuLy8gLS0tLS0gZG9jUmVhZHkgLS0tLS0gLy9cblxudXRpbHMuZG9jUmVhZHkgPSBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG4gIHZhciByZWFkeVN0YXRlID0gZG9jdW1lbnQucmVhZHlTdGF0ZTtcbiAgaWYgKCByZWFkeVN0YXRlID09ICdjb21wbGV0ZScgfHwgcmVhZHlTdGF0ZSA9PSAnaW50ZXJhY3RpdmUnICkge1xuICAgIC8vIGRvIGFzeW5jIHRvIGFsbG93IGZvciBvdGhlciBzY3JpcHRzIHRvIHJ1bi4gbWV0YWZpenp5L2ZsaWNraXR5IzQ0MVxuICAgIHNldFRpbWVvdXQoIGNhbGxiYWNrICk7XG4gIH0gZWxzZSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ0RPTUNvbnRlbnRMb2FkZWQnLCBjYWxsYmFjayApO1xuICB9XG59O1xuXG4vLyAtLS0tLSBodG1sSW5pdCAtLS0tLSAvL1xuXG4vLyBodHRwOi8vamFtZXNyb2JlcnRzLm5hbWUvYmxvZy8yMDEwLzAyLzIyL3N0cmluZy1mdW5jdGlvbnMtZm9yLWphdmFzY3JpcHQtdHJpbS10by1jYW1lbC1jYXNlLXRvLWRhc2hlZC1hbmQtdG8tdW5kZXJzY29yZS9cbnV0aWxzLnRvRGFzaGVkID0gZnVuY3Rpb24oIHN0ciApIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKCAvKC4pKFtBLVpdKS9nLCBmdW5jdGlvbiggbWF0Y2gsICQxLCAkMiApIHtcbiAgICByZXR1cm4gJDEgKyAnLScgKyAkMjtcbiAgfSkudG9Mb3dlckNhc2UoKTtcbn07XG5cbnZhciBjb25zb2xlID0gd2luZG93LmNvbnNvbGU7XG4vKipcbiAqIGFsbG93IHVzZXIgdG8gaW5pdGlhbGl6ZSBjbGFzc2VzIHZpYSBbZGF0YS1uYW1lc3BhY2VdIG9yIC5qcy1uYW1lc3BhY2UgY2xhc3NcbiAqIGh0bWxJbml0KCBXaWRnZXQsICd3aWRnZXROYW1lJyApXG4gKiBvcHRpb25zIGFyZSBwYXJzZWQgZnJvbSBkYXRhLW5hbWVzcGFjZS1vcHRpb25zXG4gKi9cbnV0aWxzLmh0bWxJbml0ID0gZnVuY3Rpb24oIFdpZGdldENsYXNzLCBuYW1lc3BhY2UgKSB7XG4gIHV0aWxzLmRvY1JlYWR5KCBmdW5jdGlvbigpIHtcbiAgICB2YXIgZGFzaGVkTmFtZXNwYWNlID0gdXRpbHMudG9EYXNoZWQoIG5hbWVzcGFjZSApO1xuICAgIHZhciBkYXRhQXR0ciA9ICdkYXRhLScgKyBkYXNoZWROYW1lc3BhY2U7XG4gICAgdmFyIGRhdGFBdHRyRWxlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCAnWycgKyBkYXRhQXR0ciArICddJyApO1xuICAgIHZhciBqc0Rhc2hFbGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoICcuanMtJyArIGRhc2hlZE5hbWVzcGFjZSApO1xuICAgIHZhciBlbGVtcyA9IHV0aWxzLm1ha2VBcnJheSggZGF0YUF0dHJFbGVtcyApXG4gICAgICAuY29uY2F0KCB1dGlscy5tYWtlQXJyYXkoIGpzRGFzaEVsZW1zICkgKTtcbiAgICB2YXIgZGF0YU9wdGlvbnNBdHRyID0gZGF0YUF0dHIgKyAnLW9wdGlvbnMnO1xuICAgIHZhciBqUXVlcnkgPSB3aW5kb3cualF1ZXJ5O1xuXG4gICAgZWxlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICB2YXIgYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKCBkYXRhQXR0ciApIHx8XG4gICAgICAgIGVsZW0uZ2V0QXR0cmlidXRlKCBkYXRhT3B0aW9uc0F0dHIgKTtcbiAgICAgIHZhciBvcHRpb25zO1xuICAgICAgdHJ5IHtcbiAgICAgICAgb3B0aW9ucyA9IGF0dHIgJiYgSlNPTi5wYXJzZSggYXR0ciApO1xuICAgICAgfSBjYXRjaCAoIGVycm9yICkge1xuICAgICAgICAvLyBsb2cgZXJyb3IsIGRvIG5vdCBpbml0aWFsaXplXG4gICAgICAgIGlmICggY29uc29sZSApIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCAnRXJyb3IgcGFyc2luZyAnICsgZGF0YUF0dHIgKyAnIG9uICcgKyBlbGVtLmNsYXNzTmFtZSArXG4gICAgICAgICAgJzogJyArIGVycm9yICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gaW5pdGlhbGl6ZVxuICAgICAgdmFyIGluc3RhbmNlID0gbmV3IFdpZGdldENsYXNzKCBlbGVtLCBvcHRpb25zICk7XG4gICAgICAvLyBtYWtlIGF2YWlsYWJsZSB2aWEgJCgpLmRhdGEoJ25hbWVzcGFjZScpXG4gICAgICBpZiAoIGpRdWVyeSApIHtcbiAgICAgICAgalF1ZXJ5LmRhdGEoIGVsZW0sIG5hbWVzcGFjZSwgaW5zdGFuY2UgKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICB9KTtcbn07XG5cbi8vIC0tLS0tICAtLS0tLSAvL1xuXG5yZXR1cm4gdXRpbHM7XG5cbn0pKTtcblxufSx7XCJkZXNhbmRyby1tYXRjaGVzLXNlbGVjdG9yXCI6MX1dLDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLy8gYWRkLCByZW1vdmUgY2VsbFxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIFtcbiAgICAgICcuL2ZsaWNraXR5JyxcbiAgICAgICdmaXp6eS11aS11dGlscy91dGlscycsXG4gICAgXSwgZnVuY3Rpb24oIEZsaWNraXR5LCB1dGlscyApIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIEZsaWNraXR5LCB1dGlscyApO1xuICAgIH0gKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgICAgd2luZG93LFxuICAgICAgICByZXF1aXJlKCcuL2ZsaWNraXR5JyksXG4gICAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgZmFjdG9yeShcbiAgICAgICAgd2luZG93LFxuICAgICAgICB3aW5kb3cuRmxpY2tpdHksXG4gICAgICAgIHdpbmRvdy5maXp6eVVJVXRpbHNcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBGbGlja2l0eSwgdXRpbHMgKSB7XG5cbid1c2Ugc3RyaWN0JztcblxuLy8gYXBwZW5kIGNlbGxzIHRvIGEgZG9jdW1lbnQgZnJhZ21lbnRcbmZ1bmN0aW9uIGdldENlbGxzRnJhZ21lbnQoIGNlbGxzICkge1xuICB2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gIGNlbGxzLmZvckVhY2goIGZ1bmN0aW9uKCBjZWxsICkge1xuICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKCBjZWxsLmVsZW1lbnQgKTtcbiAgfSApO1xuICByZXR1cm4gZnJhZ21lbnQ7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGFkZC9yZW1vdmUgY2VsbCBwcm90b3R5cGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxudmFyIHByb3RvID0gRmxpY2tpdHkucHJvdG90eXBlO1xuXG4vKipcbiAqIEluc2VydCwgcHJlcGVuZCwgb3IgYXBwZW5kIGNlbGxzXG4gKiBAcGFyYW0ge1tFbGVtZW50LCBBcnJheSwgTm9kZUxpc3RdfSBlbGVtcyAtIEVsZW1lbnRzIHRvIGluc2VydFxuICogQHBhcmFtIHtJbnRlZ2VyfSBpbmRleCAtIFplcm8tYmFzZWQgbnVtYmVyIHRvIGluc2VydFxuICovXG5wcm90by5pbnNlcnQgPSBmdW5jdGlvbiggZWxlbXMsIGluZGV4ICkge1xuICB2YXIgY2VsbHMgPSB0aGlzLl9tYWtlQ2VsbHMoIGVsZW1zICk7XG4gIGlmICggIWNlbGxzIHx8ICFjZWxscy5sZW5ndGggKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBsZW4gPSB0aGlzLmNlbGxzLmxlbmd0aDtcbiAgLy8gZGVmYXVsdCB0byBhcHBlbmRcbiAgaW5kZXggPSBpbmRleCA9PT0gdW5kZWZpbmVkID8gbGVuIDogaW5kZXg7XG4gIC8vIGFkZCBjZWxscyB3aXRoIGRvY3VtZW50IGZyYWdtZW50XG4gIHZhciBmcmFnbWVudCA9IGdldENlbGxzRnJhZ21lbnQoIGNlbGxzICk7XG4gIC8vIGFwcGVuZCB0byBzbGlkZXJcbiAgdmFyIGlzQXBwZW5kID0gaW5kZXggPT0gbGVuO1xuICBpZiAoIGlzQXBwZW5kICkge1xuICAgIHRoaXMuc2xpZGVyLmFwcGVuZENoaWxkKCBmcmFnbWVudCApO1xuICB9IGVsc2Uge1xuICAgIHZhciBpbnNlcnRDZWxsRWxlbWVudCA9IHRoaXMuY2VsbHNbIGluZGV4IF0uZWxlbWVudDtcbiAgICB0aGlzLnNsaWRlci5pbnNlcnRCZWZvcmUoIGZyYWdtZW50LCBpbnNlcnRDZWxsRWxlbWVudCApO1xuICB9XG4gIC8vIGFkZCB0byB0aGlzLmNlbGxzXG4gIGlmICggaW5kZXggPT09IDAgKSB7XG4gICAgLy8gcHJlcGVuZCwgYWRkIHRvIHN0YXJ0XG4gICAgdGhpcy5jZWxscyA9IGNlbGxzLmNvbmNhdCggdGhpcy5jZWxscyApO1xuICB9IGVsc2UgaWYgKCBpc0FwcGVuZCApIHtcbiAgICAvLyBhcHBlbmQsIGFkZCB0byBlbmRcbiAgICB0aGlzLmNlbGxzID0gdGhpcy5jZWxscy5jb25jYXQoIGNlbGxzICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gaW5zZXJ0IGluIHRoaXMuY2VsbHNcbiAgICB2YXIgZW5kQ2VsbHMgPSB0aGlzLmNlbGxzLnNwbGljZSggaW5kZXgsIGxlbiAtIGluZGV4ICk7XG4gICAgdGhpcy5jZWxscyA9IHRoaXMuY2VsbHMuY29uY2F0KCBjZWxscyApLmNvbmNhdCggZW5kQ2VsbHMgKTtcbiAgfVxuXG4gIHRoaXMuX3NpemVDZWxscyggY2VsbHMgKTtcbiAgdGhpcy5jZWxsQ2hhbmdlKCBpbmRleCwgdHJ1ZSApO1xufTtcblxucHJvdG8uYXBwZW5kID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICB0aGlzLmluc2VydCggZWxlbXMsIHRoaXMuY2VsbHMubGVuZ3RoICk7XG59O1xuXG5wcm90by5wcmVwZW5kID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICB0aGlzLmluc2VydCggZWxlbXMsIDAgKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGNlbGxzXG4gKiBAcGFyYW0ge1tFbGVtZW50LCBBcnJheSwgTm9kZUxpc3RdfSBlbGVtcyAtIEVMZW1lbnRzIHRvIHJlbW92ZVxuICovXG5wcm90by5yZW1vdmUgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIHZhciBjZWxscyA9IHRoaXMuZ2V0Q2VsbHMoIGVsZW1zICk7XG4gIGlmICggIWNlbGxzIHx8ICFjZWxscy5sZW5ndGggKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG1pbkNlbGxJbmRleCA9IHRoaXMuY2VsbHMubGVuZ3RoIC0gMTtcbiAgLy8gcmVtb3ZlIGNlbGxzIGZyb20gY29sbGVjdGlvbiAmIERPTVxuICBjZWxscy5mb3JFYWNoKCBmdW5jdGlvbiggY2VsbCApIHtcbiAgICBjZWxsLnJlbW92ZSgpO1xuICAgIHZhciBpbmRleCA9IHRoaXMuY2VsbHMuaW5kZXhPZiggY2VsbCApO1xuICAgIG1pbkNlbGxJbmRleCA9IE1hdGgubWluKCBpbmRleCwgbWluQ2VsbEluZGV4ICk7XG4gICAgdXRpbHMucmVtb3ZlRnJvbSggdGhpcy5jZWxscywgY2VsbCApO1xuICB9LCB0aGlzICk7XG5cbiAgdGhpcy5jZWxsQ2hhbmdlKCBtaW5DZWxsSW5kZXgsIHRydWUgKTtcbn07XG5cbi8qKlxuICogbG9naWMgdG8gYmUgcnVuIGFmdGVyIGEgY2VsbCdzIHNpemUgY2hhbmdlc1xuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtIC0gY2VsbCdzIGVsZW1lbnRcbiAqL1xucHJvdG8uY2VsbFNpemVDaGFuZ2UgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgdmFyIGNlbGwgPSB0aGlzLmdldENlbGwoIGVsZW0gKTtcbiAgaWYgKCAhY2VsbCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY2VsbC5nZXRTaXplKCk7XG5cbiAgdmFyIGluZGV4ID0gdGhpcy5jZWxscy5pbmRleE9mKCBjZWxsICk7XG4gIHRoaXMuY2VsbENoYW5nZSggaW5kZXggKTtcbn07XG5cbi8qKlxuICogbG9naWMgYW55IHRpbWUgYSBjZWxsIGlzIGNoYW5nZWQ6IGFkZGVkLCByZW1vdmVkLCBvciBzaXplIGNoYW5nZWRcbiAqIEBwYXJhbSB7SW50ZWdlcn0gY2hhbmdlZENlbGxJbmRleCAtIGluZGV4IG9mIHRoZSBjaGFuZ2VkIGNlbGwsIG9wdGlvbmFsXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzUG9zaXRpb25pbmdTbGlkZXIgLSBQb3NpdGlvbnMgc2xpZGVyIGFmdGVyIHNlbGVjdGlvblxuICovXG5wcm90by5jZWxsQ2hhbmdlID0gZnVuY3Rpb24oIGNoYW5nZWRDZWxsSW5kZXgsIGlzUG9zaXRpb25pbmdTbGlkZXIgKSB7XG4gIHZhciBwcmV2U2VsZWN0ZWRFbGVtID0gdGhpcy5zZWxlY3RlZEVsZW1lbnQ7XG4gIHRoaXMuX3Bvc2l0aW9uQ2VsbHMoIGNoYW5nZWRDZWxsSW5kZXggKTtcbiAgdGhpcy5fZ2V0V3JhcFNoaWZ0Q2VsbHMoKTtcbiAgdGhpcy5zZXRHYWxsZXJ5U2l6ZSgpO1xuICAvLyB1cGRhdGUgc2VsZWN0ZWRJbmRleFxuICAvLyB0cnkgdG8gbWFpbnRhaW4gcG9zaXRpb24gJiBzZWxlY3QgcHJldmlvdXMgc2VsZWN0ZWQgZWxlbWVudFxuICB2YXIgY2VsbCA9IHRoaXMuZ2V0Q2VsbCggcHJldlNlbGVjdGVkRWxlbSApO1xuICBpZiAoIGNlbGwgKSB7XG4gICAgdGhpcy5zZWxlY3RlZEluZGV4ID0gdGhpcy5nZXRDZWxsU2xpZGVJbmRleCggY2VsbCApO1xuICB9XG4gIHRoaXMuc2VsZWN0ZWRJbmRleCA9IE1hdGgubWluKCB0aGlzLnNsaWRlcy5sZW5ndGggLSAxLCB0aGlzLnNlbGVjdGVkSW5kZXggKTtcblxuICB0aGlzLmVtaXRFdmVudCggJ2NlbGxDaGFuZ2UnLCBbIGNoYW5nZWRDZWxsSW5kZXggXSApO1xuICAvLyBwb3NpdGlvbiBzbGlkZXJcbiAgdGhpcy5zZWxlY3QoIHRoaXMuc2VsZWN0ZWRJbmRleCApO1xuICAvLyBkbyBub3QgcG9zaXRpb24gc2xpZGVyIGFmdGVyIGxhenkgbG9hZFxuICBpZiAoIGlzUG9zaXRpb25pbmdTbGlkZXIgKSB7XG4gICAgdGhpcy5wb3NpdGlvblNsaWRlckF0U2VsZWN0ZWQoKTtcbiAgfVxufTtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbnJldHVybiBGbGlja2l0eTtcblxufSApICk7XG5cbn0se1wiLi9mbGlja2l0eVwiOjEzLFwiZml6enktdWktdXRpbHNcIjo4fV0sMTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLy8gYW5pbWF0ZVxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIFtcbiAgICAgICdmaXp6eS11aS11dGlscy91dGlscycsXG4gICAgXSwgZnVuY3Rpb24oIHV0aWxzICkge1xuICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgdXRpbHMgKTtcbiAgICB9ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdyxcbiAgICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuRmxpY2tpdHkgPSB3aW5kb3cuRmxpY2tpdHkgfHwge307XG4gICAgd2luZG93LkZsaWNraXR5LmFuaW1hdGVQcm90b3R5cGUgPSBmYWN0b3J5KFxuICAgICAgICB3aW5kb3csXG4gICAgICAgIHdpbmRvdy5maXp6eVVJVXRpbHNcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCB1dGlscyApIHtcblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBhbmltYXRlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnZhciBwcm90byA9IHt9O1xuXG5wcm90by5zdGFydEFuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIHRoaXMuaXNBbmltYXRpbmcgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5pc0FuaW1hdGluZyA9IHRydWU7XG4gIHRoaXMucmVzdGluZ0ZyYW1lcyA9IDA7XG4gIHRoaXMuYW5pbWF0ZSgpO1xufTtcblxucHJvdG8uYW5pbWF0ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmFwcGx5RHJhZ0ZvcmNlKCk7XG4gIHRoaXMuYXBwbHlTZWxlY3RlZEF0dHJhY3Rpb24oKTtcblxuICB2YXIgcHJldmlvdXNYID0gdGhpcy54O1xuXG4gIHRoaXMuaW50ZWdyYXRlUGh5c2ljcygpO1xuICB0aGlzLnBvc2l0aW9uU2xpZGVyKCk7XG4gIHRoaXMuc2V0dGxlKCBwcmV2aW91c1ggKTtcbiAgLy8gYW5pbWF0ZSBuZXh0IGZyYW1lXG4gIGlmICggdGhpcy5pc0FuaW1hdGluZyApIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSggZnVuY3Rpb24gYW5pbWF0ZUZyYW1lKCkge1xuICAgICAgX3RoaXMuYW5pbWF0ZSgpO1xuICAgIH0gKTtcbiAgfVxufTtcblxucHJvdG8ucG9zaXRpb25TbGlkZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHggPSB0aGlzLng7XG4gIC8vIHdyYXAgcG9zaXRpb24gYXJvdW5kXG4gIGlmICggdGhpcy5vcHRpb25zLndyYXBBcm91bmQgJiYgdGhpcy5jZWxscy5sZW5ndGggPiAxICkge1xuICAgIHggPSB1dGlscy5tb2R1bG8oIHgsIHRoaXMuc2xpZGVhYmxlV2lkdGggKTtcbiAgICB4IC09IHRoaXMuc2xpZGVhYmxlV2lkdGg7XG4gICAgdGhpcy5zaGlmdFdyYXBDZWxscyggeCApO1xuICB9XG5cbiAgdGhpcy5zZXRUcmFuc2xhdGVYKCB4LCB0aGlzLmlzQW5pbWF0aW5nICk7XG4gIHRoaXMuZGlzcGF0Y2hTY3JvbGxFdmVudCgpO1xufTtcblxucHJvdG8uc2V0VHJhbnNsYXRlWCA9IGZ1bmN0aW9uKCB4LCBpczNkICkge1xuICB4ICs9IHRoaXMuY3Vyc29yUG9zaXRpb247XG4gIC8vIHJldmVyc2UgaWYgcmlnaHQtdG8tbGVmdCBhbmQgdXNpbmcgdHJhbnNmb3JtXG4gIHggPSB0aGlzLm9wdGlvbnMucmlnaHRUb0xlZnQgPyAteCA6IHg7XG4gIHZhciB0cmFuc2xhdGVYID0gdGhpcy5nZXRQb3NpdGlvblZhbHVlKCB4ICk7XG4gIC8vIHVzZSAzRCB0cmFuc2Zvcm1zIGZvciBoYXJkd2FyZSBhY2NlbGVyYXRpb24gb24gaU9TXG4gIC8vIGJ1dCB1c2UgMkQgd2hlbiBzZXR0bGVkLCBmb3IgYmV0dGVyIGZvbnQtcmVuZGVyaW5nXG4gIHRoaXMuc2xpZGVyLnN0eWxlLnRyYW5zZm9ybSA9IGlzM2QgP1xuICAgICd0cmFuc2xhdGUzZCgnICsgdHJhbnNsYXRlWCArICcsMCwwKScgOiAndHJhbnNsYXRlWCgnICsgdHJhbnNsYXRlWCArICcpJztcbn07XG5cbnByb3RvLmRpc3BhdGNoU2Nyb2xsRXZlbnQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGZpcnN0U2xpZGUgPSB0aGlzLnNsaWRlc1swXTtcbiAgaWYgKCAhZmlyc3RTbGlkZSApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIHBvc2l0aW9uWCA9IC10aGlzLnggLSBmaXJzdFNsaWRlLnRhcmdldDtcbiAgdmFyIHByb2dyZXNzID0gcG9zaXRpb25YIC8gdGhpcy5zbGlkZXNXaWR0aDtcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KCAnc2Nyb2xsJywgbnVsbCwgWyBwcm9ncmVzcywgcG9zaXRpb25YIF0gKTtcbn07XG5cbnByb3RvLnBvc2l0aW9uU2xpZGVyQXRTZWxlY3RlZCA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLmNlbGxzLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy54ID0gLXRoaXMuc2VsZWN0ZWRTbGlkZS50YXJnZXQ7XG4gIHRoaXMudmVsb2NpdHkgPSAwOyAvLyBzdG9wIHdvYmJsZVxuICB0aGlzLnBvc2l0aW9uU2xpZGVyKCk7XG59O1xuXG5wcm90by5nZXRQb3NpdGlvblZhbHVlID0gZnVuY3Rpb24oIHBvc2l0aW9uICkge1xuICBpZiAoIHRoaXMub3B0aW9ucy5wZXJjZW50UG9zaXRpb24gKSB7XG4gICAgLy8gcGVyY2VudCBwb3NpdGlvbiwgcm91bmQgdG8gMiBkaWdpdHMsIGxpa2UgMTIuMzQlXG4gICAgcmV0dXJuICggTWF0aC5yb3VuZCggKCBwb3NpdGlvbiAvIHRoaXMuc2l6ZS5pbm5lcldpZHRoICkgKiAxMDAwMCApICogMC4wMSApICsgJyUnO1xuICB9IGVsc2Uge1xuICAgIC8vIHBpeGVsIHBvc2l0aW9uaW5nXG4gICAgcmV0dXJuIE1hdGgucm91bmQoIHBvc2l0aW9uICkgKyAncHgnO1xuICB9XG59O1xuXG5wcm90by5zZXR0bGUgPSBmdW5jdGlvbiggcHJldmlvdXNYICkge1xuICAvLyBrZWVwIHRyYWNrIG9mIGZyYW1lcyB3aGVyZSB4IGhhc24ndCBtb3ZlZFxuICB2YXIgaXNSZXN0aW5nID0gIXRoaXMuaXNQb2ludGVyRG93biAmJlxuICAgICAgTWF0aC5yb3VuZCggdGhpcy54ICogMTAwICkgPT0gTWF0aC5yb3VuZCggcHJldmlvdXNYICogMTAwICk7XG4gIGlmICggaXNSZXN0aW5nICkge1xuICAgIHRoaXMucmVzdGluZ0ZyYW1lcysrO1xuICB9XG4gIC8vIHN0b3AgYW5pbWF0aW5nIGlmIHJlc3RpbmcgZm9yIDMgb3IgbW9yZSBmcmFtZXNcbiAgaWYgKCB0aGlzLnJlc3RpbmdGcmFtZXMgPiAyICkge1xuICAgIHRoaXMuaXNBbmltYXRpbmcgPSBmYWxzZTtcbiAgICBkZWxldGUgdGhpcy5pc0ZyZWVTY3JvbGxpbmc7XG4gICAgLy8gcmVuZGVyIHBvc2l0aW9uIHdpdGggdHJhbnNsYXRlWCB3aGVuIHNldHRsZWRcbiAgICB0aGlzLnBvc2l0aW9uU2xpZGVyKCk7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KCAnc2V0dGxlJywgbnVsbCwgWyB0aGlzLnNlbGVjdGVkSW5kZXggXSApO1xuICB9XG59O1xuXG5wcm90by5zaGlmdFdyYXBDZWxscyA9IGZ1bmN0aW9uKCB4ICkge1xuICAvLyBzaGlmdCBiZWZvcmUgY2VsbHNcbiAgdmFyIGJlZm9yZUdhcCA9IHRoaXMuY3Vyc29yUG9zaXRpb24gKyB4O1xuICB0aGlzLl9zaGlmdENlbGxzKCB0aGlzLmJlZm9yZVNoaWZ0Q2VsbHMsIGJlZm9yZUdhcCwgLTEgKTtcbiAgLy8gc2hpZnQgYWZ0ZXIgY2VsbHNcbiAgdmFyIGFmdGVyR2FwID0gdGhpcy5zaXplLmlubmVyV2lkdGggLSAoIHggKyB0aGlzLnNsaWRlYWJsZVdpZHRoICsgdGhpcy5jdXJzb3JQb3NpdGlvbiApO1xuICB0aGlzLl9zaGlmdENlbGxzKCB0aGlzLmFmdGVyU2hpZnRDZWxscywgYWZ0ZXJHYXAsIDEgKTtcbn07XG5cbnByb3RvLl9zaGlmdENlbGxzID0gZnVuY3Rpb24oIGNlbGxzLCBnYXAsIHNoaWZ0ICkge1xuICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBjZWxscy5sZW5ndGg7IGkrKyApIHtcbiAgICB2YXIgY2VsbCA9IGNlbGxzW2ldO1xuICAgIHZhciBjZWxsU2hpZnQgPSBnYXAgPiAwID8gc2hpZnQgOiAwO1xuICAgIGNlbGwud3JhcFNoaWZ0KCBjZWxsU2hpZnQgKTtcbiAgICBnYXAgLT0gY2VsbC5zaXplLm91dGVyV2lkdGg7XG4gIH1cbn07XG5cbnByb3RvLl91bnNoaWZ0Q2VsbHMgPSBmdW5jdGlvbiggY2VsbHMgKSB7XG4gIGlmICggIWNlbGxzIHx8ICFjZWxscy5sZW5ndGggKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGZvciAoIHZhciBpID0gMDsgaSA8IGNlbGxzLmxlbmd0aDsgaSsrICkge1xuICAgIGNlbGxzW2ldLndyYXBTaGlmdCggMCApO1xuICB9XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBwaHlzaWNzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnByb3RvLmludGVncmF0ZVBoeXNpY3MgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy54ICs9IHRoaXMudmVsb2NpdHk7XG4gIHRoaXMudmVsb2NpdHkgKj0gdGhpcy5nZXRGcmljdGlvbkZhY3RvcigpO1xufTtcblxucHJvdG8uYXBwbHlGb3JjZSA9IGZ1bmN0aW9uKCBmb3JjZSApIHtcbiAgdGhpcy52ZWxvY2l0eSArPSBmb3JjZTtcbn07XG5cbnByb3RvLmdldEZyaWN0aW9uRmFjdG9yID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAxIC0gdGhpcy5vcHRpb25zWyB0aGlzLmlzRnJlZVNjcm9sbGluZyA/ICdmcmVlU2Nyb2xsRnJpY3Rpb24nIDogJ2ZyaWN0aW9uJyBdO1xufTtcblxucHJvdG8uZ2V0UmVzdGluZ1Bvc2l0aW9uID0gZnVuY3Rpb24oKSB7XG4gIC8vIG15IHRoYW5rcyB0byBTdGV2ZW4gV2l0dGVucywgd2hvIHNpbXBsaWZpZWQgdGhpcyBtYXRoIGdyZWF0bHlcbiAgcmV0dXJuIHRoaXMueCArIHRoaXMudmVsb2NpdHkgLyAoIDEgLSB0aGlzLmdldEZyaWN0aW9uRmFjdG9yKCkgKTtcbn07XG5cbnByb3RvLmFwcGx5RHJhZ0ZvcmNlID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMuaXNEcmFnZ2FibGUgfHwgIXRoaXMuaXNQb2ludGVyRG93biApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gY2hhbmdlIHRoZSBwb3NpdGlvbiB0byBkcmFnIHBvc2l0aW9uIGJ5IGFwcGx5aW5nIGZvcmNlXG4gIHZhciBkcmFnVmVsb2NpdHkgPSB0aGlzLmRyYWdYIC0gdGhpcy54O1xuICB2YXIgZHJhZ0ZvcmNlID0gZHJhZ1ZlbG9jaXR5IC0gdGhpcy52ZWxvY2l0eTtcbiAgdGhpcy5hcHBseUZvcmNlKCBkcmFnRm9yY2UgKTtcbn07XG5cbnByb3RvLmFwcGx5U2VsZWN0ZWRBdHRyYWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gIC8vIGRvIG5vdCBhdHRyYWN0IGlmIHBvaW50ZXIgZG93biBvciBubyBzbGlkZXNcbiAgdmFyIGRyYWdEb3duID0gdGhpcy5pc0RyYWdnYWJsZSAmJiB0aGlzLmlzUG9pbnRlckRvd247XG4gIGlmICggZHJhZ0Rvd24gfHwgdGhpcy5pc0ZyZWVTY3JvbGxpbmcgfHwgIXRoaXMuc2xpZGVzLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGRpc3RhbmNlID0gdGhpcy5zZWxlY3RlZFNsaWRlLnRhcmdldCAqIC0xIC0gdGhpcy54O1xuICB2YXIgZm9yY2UgPSBkaXN0YW5jZSAqIHRoaXMub3B0aW9ucy5zZWxlY3RlZEF0dHJhY3Rpb247XG4gIHRoaXMuYXBwbHlGb3JjZSggZm9yY2UgKTtcbn07XG5cbnJldHVybiBwcm90bztcblxufSApICk7XG5cbn0se1wiZml6enktdWktdXRpbHNcIjo4fV0sMTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLy8gRmxpY2tpdHkuQ2VsbFxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIFtcbiAgICAgICdnZXQtc2l6ZS9nZXQtc2l6ZScsXG4gICAgXSwgZnVuY3Rpb24oIGdldFNpemUgKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBnZXRTaXplICk7XG4gICAgfSApO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgICB3aW5kb3csXG4gICAgICAgIHJlcXVpcmUoJ2dldC1zaXplJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LkZsaWNraXR5ID0gd2luZG93LkZsaWNraXR5IHx8IHt9O1xuICAgIHdpbmRvdy5GbGlja2l0eS5DZWxsID0gZmFjdG9yeShcbiAgICAgICAgd2luZG93LFxuICAgICAgICB3aW5kb3cuZ2V0U2l6ZVxuICAgICk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIGdldFNpemUgKSB7XG5cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gQ2VsbCggZWxlbSwgcGFyZW50ICkge1xuICB0aGlzLmVsZW1lbnQgPSBlbGVtO1xuICB0aGlzLnBhcmVudCA9IHBhcmVudDtcblxuICB0aGlzLmNyZWF0ZSgpO1xufVxuXG52YXIgcHJvdG8gPSBDZWxsLnByb3RvdHlwZTtcblxucHJvdG8uY3JlYXRlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoICdhcmlhLWhpZGRlbicsICd0cnVlJyApO1xuICB0aGlzLnggPSAwO1xuICB0aGlzLnNoaWZ0ID0gMDtcbiAgdGhpcy5lbGVtZW50LnN0eWxlWyB0aGlzLnBhcmVudC5vcmlnaW5TaWRlIF0gPSAwO1xufTtcblxucHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICAvLyByZXNldCBzdHlsZVxuICB0aGlzLnVuc2VsZWN0KCk7XG4gIHRoaXMuZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICcnO1xuICB2YXIgc2lkZSA9IHRoaXMucGFyZW50Lm9yaWdpblNpZGU7XG4gIHRoaXMuZWxlbWVudC5zdHlsZVsgc2lkZSBdID0gJyc7XG4gIHRoaXMuZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSAnJztcbiAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcbn07XG5cbnByb3RvLmdldFNpemUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zaXplID0gZ2V0U2l6ZSggdGhpcy5lbGVtZW50ICk7XG59O1xuXG5wcm90by5zZXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCB4ICkge1xuICB0aGlzLnggPSB4O1xuICB0aGlzLnVwZGF0ZVRhcmdldCgpO1xuICB0aGlzLnJlbmRlclBvc2l0aW9uKCB4ICk7XG59O1xuXG4vLyBzZXREZWZhdWx0VGFyZ2V0IHYxIG1ldGhvZCwgYmFja3dhcmRzIGNvbXBhdGliaWxpdHksIHJlbW92ZSBpbiB2M1xucHJvdG8udXBkYXRlVGFyZ2V0ID0gcHJvdG8uc2V0RGVmYXVsdFRhcmdldCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgbWFyZ2luUHJvcGVydHkgPSB0aGlzLnBhcmVudC5vcmlnaW5TaWRlID09ICdsZWZ0JyA/ICdtYXJnaW5MZWZ0JyA6ICdtYXJnaW5SaWdodCc7XG4gIHRoaXMudGFyZ2V0ID0gdGhpcy54ICsgdGhpcy5zaXplWyBtYXJnaW5Qcm9wZXJ0eSBdICtcbiAgICB0aGlzLnNpemUud2lkdGggKiB0aGlzLnBhcmVudC5jZWxsQWxpZ247XG59O1xuXG5wcm90by5yZW5kZXJQb3NpdGlvbiA9IGZ1bmN0aW9uKCB4ICkge1xuICAvLyByZW5kZXIgcG9zaXRpb24gb2YgY2VsbCB3aXRoIGluIHNsaWRlclxuICB2YXIgc2lkZU9mZnNldCA9IHRoaXMucGFyZW50Lm9yaWdpblNpZGUgPT09ICdsZWZ0JyA/IDEgOiAtMTtcblxuICB2YXIgYWRqdXN0ZWRYID0gdGhpcy5wYXJlbnQub3B0aW9ucy5wZXJjZW50UG9zaXRpb24gP1xuICAgIHggKiBzaWRlT2Zmc2V0ICogKCB0aGlzLnBhcmVudC5zaXplLmlubmVyV2lkdGggLyB0aGlzLnNpemUud2lkdGggKSA6XG4gICAgeCAqIHNpZGVPZmZzZXQ7XG5cbiAgdGhpcy5lbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVYKCcgK1xuICAgIHRoaXMucGFyZW50LmdldFBvc2l0aW9uVmFsdWUoIGFkanVzdGVkWCApICsgJyknO1xufTtcblxucHJvdG8uc2VsZWN0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1zZWxlY3RlZCcpO1xuICB0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpO1xufTtcblxucHJvdG8udW5zZWxlY3QgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXNlbGVjdGVkJyk7XG4gIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoICdhcmlhLWhpZGRlbicsICd0cnVlJyApO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0ludGVnZXJ9IHNoaWZ0IC0gMCwgMSwgb3IgLTFcbiAqL1xucHJvdG8ud3JhcFNoaWZ0ID0gZnVuY3Rpb24oIHNoaWZ0ICkge1xuICB0aGlzLnNoaWZ0ID0gc2hpZnQ7XG4gIHRoaXMucmVuZGVyUG9zaXRpb24oIHRoaXMueCArIHRoaXMucGFyZW50LnNsaWRlYWJsZVdpZHRoICogc2hpZnQgKTtcbn07XG5cbnByb3RvLnJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGhpcy5lbGVtZW50ICk7XG59O1xuXG5yZXR1cm4gQ2VsbDtcblxufSApICk7XG5cbn0se1wiZ2V0LXNpemVcIjoyMH1dLDEyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8vIGRyYWdcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCBbXG4gICAgICAnLi9mbGlja2l0eScsXG4gICAgICAndW5pZHJhZ2dlci91bmlkcmFnZ2VyJyxcbiAgICAgICdmaXp6eS11aS11dGlscy91dGlscycsXG4gICAgXSwgZnVuY3Rpb24oIEZsaWNraXR5LCBVbmlkcmFnZ2VyLCB1dGlscyApIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIEZsaWNraXR5LCBVbmlkcmFnZ2VyLCB1dGlscyApO1xuICAgIH0gKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgICAgd2luZG93LFxuICAgICAgICByZXF1aXJlKCcuL2ZsaWNraXR5JyksXG4gICAgICAgIHJlcXVpcmUoJ3VuaWRyYWdnZXInKSxcbiAgICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuRmxpY2tpdHkgPSBmYWN0b3J5KFxuICAgICAgICB3aW5kb3csXG4gICAgICAgIHdpbmRvdy5GbGlja2l0eSxcbiAgICAgICAgd2luZG93LlVuaWRyYWdnZXIsXG4gICAgICAgIHdpbmRvdy5maXp6eVVJVXRpbHNcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBGbGlja2l0eSwgVW5pZHJhZ2dlciwgdXRpbHMgKSB7XG5cbid1c2Ugc3RyaWN0JztcblxuLy8gLS0tLS0gZGVmYXVsdHMgLS0tLS0gLy9cblxudXRpbHMuZXh0ZW5kKCBGbGlja2l0eS5kZWZhdWx0cywge1xuICBkcmFnZ2FibGU6ICc+MScsXG4gIGRyYWdUaHJlc2hvbGQ6IDMsXG59ICk7XG5cbi8vIC0tLS0tIGNyZWF0ZSAtLS0tLSAvL1xuXG5GbGlja2l0eS5jcmVhdGVNZXRob2RzLnB1c2goJ19jcmVhdGVEcmFnJyk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGRyYWcgcHJvdG90eXBlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnZhciBwcm90byA9IEZsaWNraXR5LnByb3RvdHlwZTtcbnV0aWxzLmV4dGVuZCggcHJvdG8sIFVuaWRyYWdnZXIucHJvdG90eXBlICk7XG5wcm90by5fdG91Y2hBY3Rpb25WYWx1ZSA9ICdwYW4teSc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5wcm90by5fY3JlYXRlRHJhZyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLm9uKCAnYWN0aXZhdGUnLCB0aGlzLm9uQWN0aXZhdGVEcmFnICk7XG4gIHRoaXMub24oICd1aUNoYW5nZScsIHRoaXMuX3VpQ2hhbmdlRHJhZyApO1xuICB0aGlzLm9uKCAnZGVhY3RpdmF0ZScsIHRoaXMub25EZWFjdGl2YXRlRHJhZyApO1xuICB0aGlzLm9uKCAnY2VsbENoYW5nZScsIHRoaXMudXBkYXRlRHJhZ2dhYmxlICk7XG4gIC8vIFRPRE8gdXBkYXRlRHJhZ2dhYmxlIG9uIHJlc2l6ZT8gaWYgZ3JvdXBDZWxscyAmIHNsaWRlcyBjaGFuZ2Vcbn07XG5cbnByb3RvLm9uQWN0aXZhdGVEcmFnID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaGFuZGxlcyA9IFsgdGhpcy52aWV3cG9ydCBdO1xuICB0aGlzLmJpbmRIYW5kbGVzKCk7XG4gIHRoaXMudXBkYXRlRHJhZ2dhYmxlKCk7XG59O1xuXG5wcm90by5vbkRlYWN0aXZhdGVEcmFnID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMudW5iaW5kSGFuZGxlcygpO1xuICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZHJhZ2dhYmxlJyk7XG59O1xuXG5wcm90by51cGRhdGVEcmFnZ2FibGUgPSBmdW5jdGlvbigpIHtcbiAgLy8gZGlzYWJsZSBkcmFnZ2luZyBpZiBsZXNzIHRoYW4gMiBzbGlkZXMuICMyNzhcbiAgaWYgKCB0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlID09ICc+MScgKSB7XG4gICAgdGhpcy5pc0RyYWdnYWJsZSA9IHRoaXMuc2xpZGVzLmxlbmd0aCA+IDE7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5pc0RyYWdnYWJsZSA9IHRoaXMub3B0aW9ucy5kcmFnZ2FibGU7XG4gIH1cbiAgaWYgKCB0aGlzLmlzRHJhZ2dhYmxlICkge1xuICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1kcmFnZ2FibGUnKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZHJhZ2dhYmxlJyk7XG4gIH1cbn07XG5cbi8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5wcm90by5iaW5kRHJhZyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlID0gdHJ1ZTtcbiAgdGhpcy51cGRhdGVEcmFnZ2FibGUoKTtcbn07XG5cbnByb3RvLnVuYmluZERyYWcgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5vcHRpb25zLmRyYWdnYWJsZSA9IGZhbHNlO1xuICB0aGlzLnVwZGF0ZURyYWdnYWJsZSgpO1xufTtcblxucHJvdG8uX3VpQ2hhbmdlRHJhZyA9IGZ1bmN0aW9uKCkge1xuICBkZWxldGUgdGhpcy5pc0ZyZWVTY3JvbGxpbmc7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBwb2ludGVyIGV2ZW50cyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5wcm90by5wb2ludGVyRG93biA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgaWYgKCAhdGhpcy5pc0RyYWdnYWJsZSApIHtcbiAgICB0aGlzLl9wb2ludGVyRG93bkRlZmF1bHQoIGV2ZW50LCBwb2ludGVyICk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBpc09rYXkgPSB0aGlzLm9rYXlQb2ludGVyRG93biggZXZlbnQgKTtcbiAgaWYgKCAhaXNPa2F5ICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuX3BvaW50ZXJEb3duUHJldmVudERlZmF1bHQoIGV2ZW50ICk7XG4gIHRoaXMucG9pbnRlckRvd25Gb2N1cyggZXZlbnQgKTtcbiAgLy8gYmx1clxuICBpZiAoIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT0gdGhpcy5lbGVtZW50ICkge1xuICAgIC8vIGRvIG5vdCBibHVyIGlmIGFscmVhZHkgZm9jdXNlZFxuICAgIHRoaXMucG9pbnRlckRvd25CbHVyKCk7XG4gIH1cblxuICAvLyBzdG9wIGlmIGl0IHdhcyBtb3ZpbmdcbiAgdGhpcy5kcmFnWCA9IHRoaXMueDtcbiAgdGhpcy52aWV3cG9ydC5jbGFzc0xpc3QuYWRkKCdpcy1wb2ludGVyLWRvd24nKTtcbiAgLy8gdHJhY2sgc2Nyb2xsaW5nXG4gIHRoaXMucG9pbnRlckRvd25TY3JvbGwgPSBnZXRTY3JvbGxQb3NpdGlvbigpO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggJ3Njcm9sbCcsIHRoaXMgKTtcblxuICB0aGlzLl9wb2ludGVyRG93bkRlZmF1bHQoIGV2ZW50LCBwb2ludGVyICk7XG59O1xuXG4vLyBkZWZhdWx0IHBvaW50ZXJEb3duIGxvZ2ljLCB1c2VkIGZvciBzdGF0aWNDbGlja1xucHJvdG8uX3BvaW50ZXJEb3duRGVmYXVsdCA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgLy8gdHJhY2sgc3RhcnQgZXZlbnQgcG9zaXRpb25cbiAgLy8gU2FmYXJpIDkgb3ZlcnJpZGVzIHBhZ2VYIGFuZCBwYWdlWS4gVGhlc2UgdmFsdWVzIG5lZWRzIHRvIGJlIGNvcGllZC4gIzc3OVxuICB0aGlzLnBvaW50ZXJEb3duUG9pbnRlciA9IHtcbiAgICBwYWdlWDogcG9pbnRlci5wYWdlWCxcbiAgICBwYWdlWTogcG9pbnRlci5wYWdlWSxcbiAgfTtcbiAgLy8gYmluZCBtb3ZlIGFuZCBlbmQgZXZlbnRzXG4gIHRoaXMuX2JpbmRQb3N0U3RhcnRFdmVudHMoIGV2ZW50ICk7XG4gIHRoaXMuZGlzcGF0Y2hFdmVudCggJ3BvaW50ZXJEb3duJywgZXZlbnQsIFsgcG9pbnRlciBdICk7XG59O1xuXG52YXIgZm9jdXNOb2RlcyA9IHtcbiAgSU5QVVQ6IHRydWUsXG4gIFRFWFRBUkVBOiB0cnVlLFxuICBTRUxFQ1Q6IHRydWUsXG59O1xuXG5wcm90by5wb2ludGVyRG93bkZvY3VzID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB2YXIgaXNGb2N1c05vZGUgPSBmb2N1c05vZGVzWyBldmVudC50YXJnZXQubm9kZU5hbWUgXTtcbiAgaWYgKCAhaXNGb2N1c05vZGUgKSB7XG4gICAgdGhpcy5mb2N1cygpO1xuICB9XG59O1xuXG5wcm90by5fcG9pbnRlckRvd25QcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdmFyIGlzVG91Y2hTdGFydCA9IGV2ZW50LnR5cGUgPT0gJ3RvdWNoc3RhcnQnO1xuICB2YXIgaXNUb3VjaFBvaW50ZXIgPSBldmVudC5wb2ludGVyVHlwZSA9PSAndG91Y2gnO1xuICB2YXIgaXNGb2N1c05vZGUgPSBmb2N1c05vZGVzWyBldmVudC50YXJnZXQubm9kZU5hbWUgXTtcbiAgaWYgKCAhaXNUb3VjaFN0YXJ0ICYmICFpc1RvdWNoUG9pbnRlciAmJiAhaXNGb2N1c05vZGUgKSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfVxufTtcblxuLy8gLS0tLS0gbW92ZSAtLS0tLSAvL1xuXG5wcm90by5oYXNEcmFnU3RhcnRlZCA9IGZ1bmN0aW9uKCBtb3ZlVmVjdG9yICkge1xuICByZXR1cm4gTWF0aC5hYnMoIG1vdmVWZWN0b3IueCApID4gdGhpcy5vcHRpb25zLmRyYWdUaHJlc2hvbGQ7XG59O1xuXG4vLyAtLS0tLSB1cCAtLS0tLSAvL1xuXG5wcm90by5wb2ludGVyVXAgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIGRlbGV0ZSB0aGlzLmlzVG91Y2hTY3JvbGxpbmc7XG4gIHRoaXMudmlld3BvcnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtcG9pbnRlci1kb3duJyk7XG4gIHRoaXMuZGlzcGF0Y2hFdmVudCggJ3BvaW50ZXJVcCcsIGV2ZW50LCBbIHBvaW50ZXIgXSApO1xuICB0aGlzLl9kcmFnUG9pbnRlclVwKCBldmVudCwgcG9pbnRlciApO1xufTtcblxucHJvdG8ucG9pbnRlckRvbmUgPSBmdW5jdGlvbigpIHtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdzY3JvbGwnLCB0aGlzICk7XG4gIGRlbGV0ZSB0aGlzLnBvaW50ZXJEb3duU2Nyb2xsO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZHJhZ2dpbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxucHJvdG8uZHJhZ1N0YXJ0ID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICBpZiAoICF0aGlzLmlzRHJhZ2dhYmxlICkge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLmRyYWdTdGFydFBvc2l0aW9uID0gdGhpcy54O1xuICB0aGlzLnN0YXJ0QW5pbWF0aW9uKCk7XG4gIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCAnc2Nyb2xsJywgdGhpcyApO1xuICB0aGlzLmRpc3BhdGNoRXZlbnQoICdkcmFnU3RhcnQnLCBldmVudCwgWyBwb2ludGVyIF0gKTtcbn07XG5cbnByb3RvLnBvaW50ZXJNb3ZlID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB2YXIgbW92ZVZlY3RvciA9IHRoaXMuX2RyYWdQb2ludGVyTW92ZSggZXZlbnQsIHBvaW50ZXIgKTtcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KCAncG9pbnRlck1vdmUnLCBldmVudCwgWyBwb2ludGVyLCBtb3ZlVmVjdG9yIF0gKTtcbiAgdGhpcy5fZHJhZ01vdmUoIGV2ZW50LCBwb2ludGVyLCBtb3ZlVmVjdG9yICk7XG59O1xuXG5wcm90by5kcmFnTW92ZSA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciApIHtcbiAgaWYgKCAhdGhpcy5pc0RyYWdnYWJsZSApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICB0aGlzLnByZXZpb3VzRHJhZ1ggPSB0aGlzLmRyYWdYO1xuICAvLyByZXZlcnNlIGlmIHJpZ2h0LXRvLWxlZnRcbiAgdmFyIGRpcmVjdGlvbiA9IHRoaXMub3B0aW9ucy5yaWdodFRvTGVmdCA/IC0xIDogMTtcbiAgaWYgKCB0aGlzLm9wdGlvbnMud3JhcEFyb3VuZCApIHtcbiAgICAvLyB3cmFwIGFyb3VuZCBtb3ZlLiAjNTg5XG4gICAgbW92ZVZlY3Rvci54ICU9IHRoaXMuc2xpZGVhYmxlV2lkdGg7XG4gIH1cbiAgdmFyIGRyYWdYID0gdGhpcy5kcmFnU3RhcnRQb3NpdGlvbiArIG1vdmVWZWN0b3IueCAqIGRpcmVjdGlvbjtcblxuICBpZiAoICF0aGlzLm9wdGlvbnMud3JhcEFyb3VuZCAmJiB0aGlzLnNsaWRlcy5sZW5ndGggKSB7XG4gICAgLy8gc2xvdyBkcmFnXG4gICAgdmFyIG9yaWdpbkJvdW5kID0gTWF0aC5tYXgoIC10aGlzLnNsaWRlc1swXS50YXJnZXQsIHRoaXMuZHJhZ1N0YXJ0UG9zaXRpb24gKTtcbiAgICBkcmFnWCA9IGRyYWdYID4gb3JpZ2luQm91bmQgPyAoIGRyYWdYICsgb3JpZ2luQm91bmQgKSAqIDAuNSA6IGRyYWdYO1xuICAgIHZhciBlbmRCb3VuZCA9IE1hdGgubWluKCAtdGhpcy5nZXRMYXN0U2xpZGUoKS50YXJnZXQsIHRoaXMuZHJhZ1N0YXJ0UG9zaXRpb24gKTtcbiAgICBkcmFnWCA9IGRyYWdYIDwgZW5kQm91bmQgPyAoIGRyYWdYICsgZW5kQm91bmQgKSAqIDAuNSA6IGRyYWdYO1xuICB9XG5cbiAgdGhpcy5kcmFnWCA9IGRyYWdYO1xuXG4gIHRoaXMuZHJhZ01vdmVUaW1lID0gbmV3IERhdGUoKTtcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KCAnZHJhZ01vdmUnLCBldmVudCwgWyBwb2ludGVyLCBtb3ZlVmVjdG9yIF0gKTtcbn07XG5cbnByb3RvLmRyYWdFbmQgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIGlmICggIXRoaXMuaXNEcmFnZ2FibGUgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICggdGhpcy5vcHRpb25zLmZyZWVTY3JvbGwgKSB7XG4gICAgdGhpcy5pc0ZyZWVTY3JvbGxpbmcgPSB0cnVlO1xuICB9XG4gIC8vIHNldCBzZWxlY3RlZEluZGV4IGJhc2VkIG9uIHdoZXJlIGZsaWNrIHdpbGwgZW5kIHVwXG4gIHZhciBpbmRleCA9IHRoaXMuZHJhZ0VuZFJlc3RpbmdTZWxlY3QoKTtcblxuICBpZiAoIHRoaXMub3B0aW9ucy5mcmVlU2Nyb2xsICYmICF0aGlzLm9wdGlvbnMud3JhcEFyb3VuZCApIHtcbiAgICAvLyBpZiBmcmVlLXNjcm9sbCAmIG5vdCB3cmFwIGFyb3VuZFxuICAgIC8vIGRvIG5vdCBmcmVlLXNjcm9sbCBpZiBnb2luZyBvdXRzaWRlIG9mIGJvdW5kaW5nIHNsaWRlc1xuICAgIC8vIHNvIGJvdW5kaW5nIHNsaWRlcyBjYW4gYXR0cmFjdCBzbGlkZXIsIGFuZCBrZWVwIGl0IGluIGJvdW5kc1xuICAgIHZhciByZXN0aW5nWCA9IHRoaXMuZ2V0UmVzdGluZ1Bvc2l0aW9uKCk7XG4gICAgdGhpcy5pc0ZyZWVTY3JvbGxpbmcgPSAtcmVzdGluZ1ggPiB0aGlzLnNsaWRlc1swXS50YXJnZXQgJiZcbiAgICAgIC1yZXN0aW5nWCA8IHRoaXMuZ2V0TGFzdFNsaWRlKCkudGFyZ2V0O1xuICB9IGVsc2UgaWYgKCAhdGhpcy5vcHRpb25zLmZyZWVTY3JvbGwgJiYgaW5kZXggPT0gdGhpcy5zZWxlY3RlZEluZGV4ICkge1xuICAgIC8vIGJvb3N0IHNlbGVjdGlvbiBpZiBzZWxlY3RlZCBpbmRleCBoYXMgbm90IGNoYW5nZWRcbiAgICBpbmRleCArPSB0aGlzLmRyYWdFbmRCb29zdFNlbGVjdCgpO1xuICB9XG4gIGRlbGV0ZSB0aGlzLnByZXZpb3VzRHJhZ1g7XG4gIC8vIGFwcGx5IHNlbGVjdGlvblxuICAvLyBUT0RPIHJlZmFjdG9yIHRoaXMsIHNlbGVjdGluZyBoZXJlIGZlZWxzIHdlaXJkXG4gIC8vIEhBQ0ssIHNldCBmbGFnIHNvIGRyYWdnaW5nIHN0YXlzIGluIGNvcnJlY3QgZGlyZWN0aW9uXG4gIHRoaXMuaXNEcmFnU2VsZWN0ID0gdGhpcy5vcHRpb25zLndyYXBBcm91bmQ7XG4gIHRoaXMuc2VsZWN0KCBpbmRleCApO1xuICBkZWxldGUgdGhpcy5pc0RyYWdTZWxlY3Q7XG4gIHRoaXMuZGlzcGF0Y2hFdmVudCggJ2RyYWdFbmQnLCBldmVudCwgWyBwb2ludGVyIF0gKTtcbn07XG5cbnByb3RvLmRyYWdFbmRSZXN0aW5nU2VsZWN0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciByZXN0aW5nWCA9IHRoaXMuZ2V0UmVzdGluZ1Bvc2l0aW9uKCk7XG4gIC8vIGhvdyBmYXIgYXdheSBmcm9tIHNlbGVjdGVkIHNsaWRlXG4gIHZhciBkaXN0YW5jZSA9IE1hdGguYWJzKCB0aGlzLmdldFNsaWRlRGlzdGFuY2UoIC1yZXN0aW5nWCwgdGhpcy5zZWxlY3RlZEluZGV4ICkgKTtcbiAgLy8gZ2V0IGNsb3NldCByZXN0aW5nIGdvaW5nIHVwIGFuZCBnb2luZyBkb3duXG4gIHZhciBwb3NpdGl2ZVJlc3RpbmcgPSB0aGlzLl9nZXRDbG9zZXN0UmVzdGluZyggcmVzdGluZ1gsIGRpc3RhbmNlLCAxICk7XG4gIHZhciBuZWdhdGl2ZVJlc3RpbmcgPSB0aGlzLl9nZXRDbG9zZXN0UmVzdGluZyggcmVzdGluZ1gsIGRpc3RhbmNlLCAtMSApO1xuICAvLyB1c2UgY2xvc2VyIHJlc3RpbmcgZm9yIHdyYXAtYXJvdW5kXG4gIHZhciBpbmRleCA9IHBvc2l0aXZlUmVzdGluZy5kaXN0YW5jZSA8IG5lZ2F0aXZlUmVzdGluZy5kaXN0YW5jZSA/XG4gICAgcG9zaXRpdmVSZXN0aW5nLmluZGV4IDogbmVnYXRpdmVSZXN0aW5nLmluZGV4O1xuICByZXR1cm4gaW5kZXg7XG59O1xuXG4vKipcbiAqIGdpdmVuIHJlc3RpbmcgWCBhbmQgZGlzdGFuY2UgdG8gc2VsZWN0ZWQgY2VsbFxuICogZ2V0IHRoZSBkaXN0YW5jZSBhbmQgaW5kZXggb2YgdGhlIGNsb3Nlc3QgY2VsbFxuICogQHBhcmFtIHtOdW1iZXJ9IHJlc3RpbmdYIC0gZXN0aW1hdGVkIHBvc3QtZmxpY2sgcmVzdGluZyBwb3NpdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IGRpc3RhbmNlIC0gZGlzdGFuY2UgdG8gc2VsZWN0ZWQgY2VsbFxuICogQHBhcmFtIHtJbnRlZ2VyfSBpbmNyZW1lbnQgLSArMSBvciAtMSwgZ29pbmcgdXAgb3IgZG93blxuICogQHJldHVybnMge09iamVjdH0gLSB7IGRpc3RhbmNlOiB7TnVtYmVyfSwgaW5kZXg6IHtJbnRlZ2VyfSB9XG4gKi9cbnByb3RvLl9nZXRDbG9zZXN0UmVzdGluZyA9IGZ1bmN0aW9uKCByZXN0aW5nWCwgZGlzdGFuY2UsIGluY3JlbWVudCApIHtcbiAgdmFyIGluZGV4ID0gdGhpcy5zZWxlY3RlZEluZGV4O1xuICB2YXIgbWluRGlzdGFuY2UgPSBJbmZpbml0eTtcbiAgdmFyIGNvbmRpdGlvbiA9IHRoaXMub3B0aW9ucy5jb250YWluICYmICF0aGlzLm9wdGlvbnMud3JhcEFyb3VuZCA/XG4gICAgLy8gaWYgY29udGFpbiwga2VlcCBnb2luZyBpZiBkaXN0YW5jZSBpcyBlcXVhbCB0byBtaW5EaXN0YW5jZVxuICAgIGZ1bmN0aW9uKCBkaXN0LCBtaW5EaXN0ICkge1xuICAgICAgcmV0dXJuIGRpc3QgPD0gbWluRGlzdDtcbiAgICB9IDogZnVuY3Rpb24oIGRpc3QsIG1pbkRpc3QgKSB7XG4gICAgICByZXR1cm4gZGlzdCA8IG1pbkRpc3Q7XG4gICAgfTtcbiAgd2hpbGUgKCBjb25kaXRpb24oIGRpc3RhbmNlLCBtaW5EaXN0YW5jZSApICkge1xuICAgIC8vIG1lYXN1cmUgZGlzdGFuY2UgdG8gbmV4dCBjZWxsXG4gICAgaW5kZXggKz0gaW5jcmVtZW50O1xuICAgIG1pbkRpc3RhbmNlID0gZGlzdGFuY2U7XG4gICAgZGlzdGFuY2UgPSB0aGlzLmdldFNsaWRlRGlzdGFuY2UoIC1yZXN0aW5nWCwgaW5kZXggKTtcbiAgICBpZiAoIGRpc3RhbmNlID09PSBudWxsICkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGRpc3RhbmNlID0gTWF0aC5hYnMoIGRpc3RhbmNlICk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBkaXN0YW5jZTogbWluRGlzdGFuY2UsXG4gICAgLy8gc2VsZWN0ZWQgd2FzIHByZXZpb3VzIGluZGV4XG4gICAgaW5kZXg6IGluZGV4IC0gaW5jcmVtZW50LFxuICB9O1xufTtcblxuLyoqXG4gKiBtZWFzdXJlIGRpc3RhbmNlIGJldHdlZW4geCBhbmQgYSBzbGlkZSB0YXJnZXRcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IC0gaG9yaXpvbnRhbCBwb3NpdGlvblxuICogQHBhcmFtIHtJbnRlZ2VyfSBpbmRleCAtIHNsaWRlIGluZGV4XG4gKiBAcmV0dXJucyB7TnVtYmVyfSAtIHNsaWRlIGRpc3RhbmNlXG4gKi9cbnByb3RvLmdldFNsaWRlRGlzdGFuY2UgPSBmdW5jdGlvbiggeCwgaW5kZXggKSB7XG4gIHZhciBsZW4gPSB0aGlzLnNsaWRlcy5sZW5ndGg7XG4gIC8vIHdyYXAgYXJvdW5kIGlmIGF0IGxlYXN0IDIgc2xpZGVzXG4gIHZhciBpc1dyYXBBcm91bmQgPSB0aGlzLm9wdGlvbnMud3JhcEFyb3VuZCAmJiBsZW4gPiAxO1xuICB2YXIgc2xpZGVJbmRleCA9IGlzV3JhcEFyb3VuZCA/IHV0aWxzLm1vZHVsbyggaW5kZXgsIGxlbiApIDogaW5kZXg7XG4gIHZhciBzbGlkZSA9IHRoaXMuc2xpZGVzWyBzbGlkZUluZGV4IF07XG4gIGlmICggIXNsaWRlICkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIC8vIGFkZCBkaXN0YW5jZSBmb3Igd3JhcC1hcm91bmQgc2xpZGVzXG4gIHZhciB3cmFwID0gaXNXcmFwQXJvdW5kID8gdGhpcy5zbGlkZWFibGVXaWR0aCAqIE1hdGguZmxvb3IoIGluZGV4L2xlbiApIDogMDtcbiAgcmV0dXJuIHggLSAoIHNsaWRlLnRhcmdldCArIHdyYXAgKTtcbn07XG5cbnByb3RvLmRyYWdFbmRCb29zdFNlbGVjdCA9IGZ1bmN0aW9uKCkge1xuICAvLyBkbyBub3QgYm9vc3QgaWYgbm8gcHJldmlvdXNEcmFnWCBvciBkcmFnTW92ZVRpbWVcbiAgaWYgKCB0aGlzLnByZXZpb3VzRHJhZ1ggPT09IHVuZGVmaW5lZCB8fCAhdGhpcy5kcmFnTW92ZVRpbWUgfHxcbiAgICAvLyBvciBpZiBkcmFnIHdhcyBoZWxkIGZvciAxMDAgbXNcbiAgICBuZXcgRGF0ZSgpIC0gdGhpcy5kcmFnTW92ZVRpbWUgPiAxMDAgKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICB2YXIgZGlzdGFuY2UgPSB0aGlzLmdldFNsaWRlRGlzdGFuY2UoIC10aGlzLmRyYWdYLCB0aGlzLnNlbGVjdGVkSW5kZXggKTtcbiAgdmFyIGRlbHRhID0gdGhpcy5wcmV2aW91c0RyYWdYIC0gdGhpcy5kcmFnWDtcbiAgaWYgKCBkaXN0YW5jZSA+IDAgJiYgZGVsdGEgPiAwICkge1xuICAgIC8vIGJvb3N0IHRvIG5leHQgaWYgbW92aW5nIHRvd2FyZHMgdGhlIHJpZ2h0LCBhbmQgcG9zaXRpdmUgdmVsb2NpdHlcbiAgICByZXR1cm4gMTtcbiAgfSBlbHNlIGlmICggZGlzdGFuY2UgPCAwICYmIGRlbHRhIDwgMCApIHtcbiAgICAvLyBib29zdCB0byBwcmV2aW91cyBpZiBtb3ZpbmcgdG93YXJkcyB0aGUgbGVmdCwgYW5kIG5lZ2F0aXZlIHZlbG9jaXR5XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIHJldHVybiAwO1xufTtcblxuLy8gLS0tLS0gc3RhdGljQ2xpY2sgLS0tLS0gLy9cblxucHJvdG8uc3RhdGljQ2xpY2sgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIC8vIGdldCBjbGlja2VkQ2VsbCwgaWYgY2VsbCB3YXMgY2xpY2tlZFxuICB2YXIgY2xpY2tlZENlbGwgPSB0aGlzLmdldFBhcmVudENlbGwoIGV2ZW50LnRhcmdldCApO1xuICB2YXIgY2VsbEVsZW0gPSBjbGlja2VkQ2VsbCAmJiBjbGlja2VkQ2VsbC5lbGVtZW50O1xuICB2YXIgY2VsbEluZGV4ID0gY2xpY2tlZENlbGwgJiYgdGhpcy5jZWxscy5pbmRleE9mKCBjbGlja2VkQ2VsbCApO1xuICB0aGlzLmRpc3BhdGNoRXZlbnQoICdzdGF0aWNDbGljaycsIGV2ZW50LCBbIHBvaW50ZXIsIGNlbGxFbGVtLCBjZWxsSW5kZXggXSApO1xufTtcblxuLy8gLS0tLS0gc2Nyb2xsIC0tLS0tIC8vXG5cbnByb3RvLm9uc2Nyb2xsID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzY3JvbGwgPSBnZXRTY3JvbGxQb3NpdGlvbigpO1xuICB2YXIgc2Nyb2xsTW92ZVggPSB0aGlzLnBvaW50ZXJEb3duU2Nyb2xsLnggLSBzY3JvbGwueDtcbiAgdmFyIHNjcm9sbE1vdmVZID0gdGhpcy5wb2ludGVyRG93blNjcm9sbC55IC0gc2Nyb2xsLnk7XG4gIC8vIGNhbmNlbCBjbGljay90YXAgaWYgc2Nyb2xsIGlzIHRvbyBtdWNoXG4gIGlmICggTWF0aC5hYnMoIHNjcm9sbE1vdmVYICkgPiAzIHx8IE1hdGguYWJzKCBzY3JvbGxNb3ZlWSApID4gMyApIHtcbiAgICB0aGlzLl9wb2ludGVyRG9uZSgpO1xuICB9XG59O1xuXG4vLyAtLS0tLSB1dGlscyAtLS0tLSAvL1xuXG5mdW5jdGlvbiBnZXRTY3JvbGxQb3NpdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiB3aW5kb3cucGFnZVhPZmZzZXQsXG4gICAgeTogd2luZG93LnBhZ2VZT2Zmc2V0LFxuICB9O1xufVxuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxucmV0dXJuIEZsaWNraXR5O1xuXG59ICkgKTtcblxufSx7XCIuL2ZsaWNraXR5XCI6MTMsXCJmaXp6eS11aS11dGlsc1wiOjgsXCJ1bmlkcmFnZ2VyXCI6MjJ9XSwxMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vLyBGbGlja2l0eSBtYWluXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtcGFyYW1zICovXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggW1xuICAgICAgJ2V2LWVtaXR0ZXIvZXYtZW1pdHRlcicsXG4gICAgICAnZ2V0LXNpemUvZ2V0LXNpemUnLFxuICAgICAgJ2Zpenp5LXVpLXV0aWxzL3V0aWxzJyxcbiAgICAgICcuL2NlbGwnLFxuICAgICAgJy4vc2xpZGUnLFxuICAgICAgJy4vYW5pbWF0ZScsXG4gICAgXSwgZnVuY3Rpb24oIEV2RW1pdHRlciwgZ2V0U2l6ZSwgdXRpbHMsIENlbGwsIFNsaWRlLCBhbmltYXRlUHJvdG90eXBlICkge1xuICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgRXZFbWl0dGVyLCBnZXRTaXplLCB1dGlscywgQ2VsbCwgU2xpZGUsIGFuaW1hdGVQcm90b3R5cGUgKTtcbiAgICB9ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdyxcbiAgICAgICAgcmVxdWlyZSgnZXYtZW1pdHRlcicpLFxuICAgICAgICByZXF1aXJlKCdnZXQtc2l6ZScpLFxuICAgICAgICByZXF1aXJlKCdmaXp6eS11aS11dGlscycpLFxuICAgICAgICByZXF1aXJlKCcuL2NlbGwnKSxcbiAgICAgICAgcmVxdWlyZSgnLi9zbGlkZScpLFxuICAgICAgICByZXF1aXJlKCcuL2FuaW1hdGUnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB2YXIgX0ZsaWNraXR5ID0gd2luZG93LkZsaWNraXR5O1xuXG4gICAgd2luZG93LkZsaWNraXR5ID0gZmFjdG9yeShcbiAgICAgICAgd2luZG93LFxuICAgICAgICB3aW5kb3cuRXZFbWl0dGVyLFxuICAgICAgICB3aW5kb3cuZ2V0U2l6ZSxcbiAgICAgICAgd2luZG93LmZpenp5VUlVdGlscyxcbiAgICAgICAgX0ZsaWNraXR5LkNlbGwsXG4gICAgICAgIF9GbGlja2l0eS5TbGlkZSxcbiAgICAgICAgX0ZsaWNraXR5LmFuaW1hdGVQcm90b3R5cGVcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBFdkVtaXR0ZXIsIGdldFNpemUsXG4gICAgdXRpbHMsIENlbGwsIFNsaWRlLCBhbmltYXRlUHJvdG90eXBlICkge1xuXG4vKiBlc2xpbnQtZW5hYmxlIG1heC1wYXJhbXMgKi9cbid1c2Ugc3RyaWN0JztcblxuLy8gdmFyc1xudmFyIGpRdWVyeSA9IHdpbmRvdy5qUXVlcnk7XG52YXIgZ2V0Q29tcHV0ZWRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlO1xudmFyIGNvbnNvbGUgPSB3aW5kb3cuY29uc29sZTtcblxuZnVuY3Rpb24gbW92ZUVsZW1lbnRzKCBlbGVtcywgdG9FbGVtICkge1xuICBlbGVtcyA9IHV0aWxzLm1ha2VBcnJheSggZWxlbXMgKTtcbiAgd2hpbGUgKCBlbGVtcy5sZW5ndGggKSB7XG4gICAgdG9FbGVtLmFwcGVuZENoaWxkKCBlbGVtcy5zaGlmdCgpICk7XG4gIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRmxpY2tpdHkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLy8gZ2xvYmFsbHkgdW5pcXVlIGlkZW50aWZpZXJzXG52YXIgR1VJRCA9IDA7XG4vLyBpbnRlcm5hbCBzdG9yZSBvZiBhbGwgRmxpY2tpdHkgaW50YW5jZXNcbnZhciBpbnN0YW5jZXMgPSB7fTtcblxuZnVuY3Rpb24gRmxpY2tpdHkoIGVsZW1lbnQsIG9wdGlvbnMgKSB7XG4gIHZhciBxdWVyeUVsZW1lbnQgPSB1dGlscy5nZXRRdWVyeUVsZW1lbnQoIGVsZW1lbnQgKTtcbiAgaWYgKCAhcXVlcnlFbGVtZW50ICkge1xuICAgIGlmICggY29uc29sZSApIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoICdCYWQgZWxlbWVudCBmb3IgRmxpY2tpdHk6ICcgKyAoIHF1ZXJ5RWxlbWVudCB8fCBlbGVtZW50ICkgKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMuZWxlbWVudCA9IHF1ZXJ5RWxlbWVudDtcbiAgLy8gZG8gbm90IGluaXRpYWxpemUgdHdpY2Ugb24gc2FtZSBlbGVtZW50XG4gIGlmICggdGhpcy5lbGVtZW50LmZsaWNraXR5R1VJRCApIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBpbnN0YW5jZXNbIHRoaXMuZWxlbWVudC5mbGlja2l0eUdVSUQgXTtcbiAgICBpZiAoIGluc3RhbmNlICkgaW5zdGFuY2Uub3B0aW9uKCBvcHRpb25zICk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9XG5cbiAgLy8gYWRkIGpRdWVyeVxuICBpZiAoIGpRdWVyeSApIHtcbiAgICB0aGlzLiRlbGVtZW50ID0galF1ZXJ5KCB0aGlzLmVsZW1lbnQgKTtcbiAgfVxuICAvLyBvcHRpb25zXG4gIHRoaXMub3B0aW9ucyA9IHV0aWxzLmV4dGVuZCgge30sIHRoaXMuY29uc3RydWN0b3IuZGVmYXVsdHMgKTtcbiAgdGhpcy5vcHRpb24oIG9wdGlvbnMgKTtcblxuICAvLyBraWNrIHRoaW5ncyBvZmZcbiAgdGhpcy5fY3JlYXRlKCk7XG59XG5cbkZsaWNraXR5LmRlZmF1bHRzID0ge1xuICBhY2Nlc3NpYmlsaXR5OiB0cnVlLFxuICAvLyBhZGFwdGl2ZUhlaWdodDogZmFsc2UsXG4gIGNlbGxBbGlnbjogJ2NlbnRlcicsXG4gIC8vIGNlbGxTZWxlY3RvcjogdW5kZWZpbmVkLFxuICAvLyBjb250YWluOiBmYWxzZSxcbiAgZnJlZVNjcm9sbEZyaWN0aW9uOiAwLjA3NSwgLy8gZnJpY3Rpb24gd2hlbiBmcmVlLXNjcm9sbGluZ1xuICBmcmljdGlvbjogMC4yOCwgLy8gZnJpY3Rpb24gd2hlbiBzZWxlY3RpbmdcbiAgbmFtZXNwYWNlSlF1ZXJ5RXZlbnRzOiB0cnVlLFxuICAvLyBpbml0aWFsSW5kZXg6IDAsXG4gIHBlcmNlbnRQb3NpdGlvbjogdHJ1ZSxcbiAgcmVzaXplOiB0cnVlLFxuICBzZWxlY3RlZEF0dHJhY3Rpb246IDAuMDI1LFxuICBzZXRHYWxsZXJ5U2l6ZTogdHJ1ZSxcbiAgLy8gd2F0Y2hDU1M6IGZhbHNlLFxuICAvLyB3cmFwQXJvdW5kOiBmYWxzZVxufTtcblxuLy8gaGFzaCBvZiBtZXRob2RzIHRyaWdnZXJlZCBvbiBfY3JlYXRlKClcbkZsaWNraXR5LmNyZWF0ZU1ldGhvZHMgPSBbXTtcblxudmFyIHByb3RvID0gRmxpY2tpdHkucHJvdG90eXBlO1xuLy8gaW5oZXJpdCBFdmVudEVtaXR0ZXJcbnV0aWxzLmV4dGVuZCggcHJvdG8sIEV2RW1pdHRlci5wcm90b3R5cGUgKTtcblxucHJvdG8uX2NyZWF0ZSA9IGZ1bmN0aW9uKCkge1xuICAvLyBhZGQgaWQgZm9yIEZsaWNraXR5LmRhdGFcbiAgdmFyIGlkID0gdGhpcy5ndWlkID0gKytHVUlEO1xuICB0aGlzLmVsZW1lbnQuZmxpY2tpdHlHVUlEID0gaWQ7IC8vIGV4cGFuZG9cbiAgaW5zdGFuY2VzWyBpZCBdID0gdGhpczsgLy8gYXNzb2NpYXRlIHZpYSBpZFxuICAvLyBpbml0aWFsIHByb3BlcnRpZXNcbiAgdGhpcy5zZWxlY3RlZEluZGV4ID0gMDtcbiAgLy8gaG93IG1hbnkgZnJhbWVzIHNsaWRlciBoYXMgYmVlbiBpbiBzYW1lIHBvc2l0aW9uXG4gIHRoaXMucmVzdGluZ0ZyYW1lcyA9IDA7XG4gIC8vIGluaXRpYWwgcGh5c2ljcyBwcm9wZXJ0aWVzXG4gIHRoaXMueCA9IDA7XG4gIHRoaXMudmVsb2NpdHkgPSAwO1xuICB0aGlzLm9yaWdpblNpZGUgPSB0aGlzLm9wdGlvbnMucmlnaHRUb0xlZnQgPyAncmlnaHQnIDogJ2xlZnQnO1xuICAvLyBjcmVhdGUgdmlld3BvcnQgJiBzbGlkZXJcbiAgdGhpcy52aWV3cG9ydCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB0aGlzLnZpZXdwb3J0LmNsYXNzTmFtZSA9ICdmbGlja2l0eS12aWV3cG9ydCc7XG4gIHRoaXMuX2NyZWF0ZVNsaWRlcigpO1xuXG4gIGlmICggdGhpcy5vcHRpb25zLnJlc2l6ZSB8fCB0aGlzLm9wdGlvbnMud2F0Y2hDU1MgKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdyZXNpemUnLCB0aGlzICk7XG4gIH1cblxuICAvLyBhZGQgbGlzdGVuZXJzIGZyb20gb24gb3B0aW9uXG4gIGZvciAoIHZhciBldmVudE5hbWUgaW4gdGhpcy5vcHRpb25zLm9uICkge1xuICAgIHZhciBsaXN0ZW5lciA9IHRoaXMub3B0aW9ucy5vblsgZXZlbnROYW1lIF07XG4gICAgdGhpcy5vbiggZXZlbnROYW1lLCBsaXN0ZW5lciApO1xuICB9XG5cbiAgRmxpY2tpdHkuY3JlYXRlTWV0aG9kcy5mb3JFYWNoKCBmdW5jdGlvbiggbWV0aG9kICkge1xuICAgIHRoaXNbIG1ldGhvZCBdKCk7XG4gIH0sIHRoaXMgKTtcblxuICBpZiAoIHRoaXMub3B0aW9ucy53YXRjaENTUyApIHtcbiAgICB0aGlzLndhdGNoQ1NTKCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5hY3RpdmF0ZSgpO1xuICB9XG5cbn07XG5cbi8qKlxuICogc2V0IG9wdGlvbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyB0byBleHRlbmRcbiAqL1xucHJvdG8ub3B0aW9uID0gZnVuY3Rpb24oIG9wdHMgKSB7XG4gIHV0aWxzLmV4dGVuZCggdGhpcy5vcHRpb25zLCBvcHRzICk7XG59O1xuXG5wcm90by5hY3RpdmF0ZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIHRoaXMuaXNBY3RpdmUgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMuaXNBY3RpdmUgPSB0cnVlO1xuICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZmxpY2tpdHktZW5hYmxlZCcpO1xuICBpZiAoIHRoaXMub3B0aW9ucy5yaWdodFRvTGVmdCApIHtcbiAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZmxpY2tpdHktcnRsJyk7XG4gIH1cblxuICB0aGlzLmdldFNpemUoKTtcbiAgLy8gbW92ZSBpbml0aWFsIGNlbGwgZWxlbWVudHMgc28gdGhleSBjYW4gYmUgbG9hZGVkIGFzIGNlbGxzXG4gIHZhciBjZWxsRWxlbXMgPSB0aGlzLl9maWx0ZXJGaW5kQ2VsbEVsZW1lbnRzKCB0aGlzLmVsZW1lbnQuY2hpbGRyZW4gKTtcbiAgbW92ZUVsZW1lbnRzKCBjZWxsRWxlbXMsIHRoaXMuc2xpZGVyICk7XG4gIHRoaXMudmlld3BvcnQuYXBwZW5kQ2hpbGQoIHRoaXMuc2xpZGVyICk7XG4gIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCggdGhpcy52aWV3cG9ydCApO1xuICAvLyBnZXQgY2VsbHMgZnJvbSBjaGlsZHJlblxuICB0aGlzLnJlbG9hZENlbGxzKCk7XG5cbiAgaWYgKCB0aGlzLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSApIHtcbiAgICAvLyBhbGxvdyBlbGVtZW50IHRvIGZvY3VzYWJsZVxuICAgIHRoaXMuZWxlbWVudC50YWJJbmRleCA9IDA7XG4gICAgLy8gbGlzdGVuIGZvciBrZXkgcHJlc3Nlc1xuICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAna2V5ZG93bicsIHRoaXMgKTtcbiAgfVxuXG4gIHRoaXMuZW1pdEV2ZW50KCdhY3RpdmF0ZScpO1xuICB0aGlzLnNlbGVjdEluaXRpYWxJbmRleCgpO1xuICAvLyBmbGFnIGZvciBpbml0aWFsIGFjdGl2YXRpb24sIGZvciB1c2luZyBpbml0aWFsSW5kZXhcbiAgdGhpcy5pc0luaXRBY3RpdmF0ZWQgPSB0cnVlO1xuICAvLyByZWFkeSBldmVudC4gIzQ5M1xuICB0aGlzLmRpc3BhdGNoRXZlbnQoJ3JlYWR5Jyk7XG59O1xuXG4vLyBzbGlkZXIgcG9zaXRpb25zIHRoZSBjZWxsc1xucHJvdG8uX2NyZWF0ZVNsaWRlciA9IGZ1bmN0aW9uKCkge1xuICAvLyBzbGlkZXIgZWxlbWVudCBkb2VzIGFsbCB0aGUgcG9zaXRpb25pbmdcbiAgdmFyIHNsaWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBzbGlkZXIuY2xhc3NOYW1lID0gJ2ZsaWNraXR5LXNsaWRlcic7XG4gIHNsaWRlci5zdHlsZVsgdGhpcy5vcmlnaW5TaWRlIF0gPSAwO1xuICB0aGlzLnNsaWRlciA9IHNsaWRlcjtcbn07XG5cbnByb3RvLl9maWx0ZXJGaW5kQ2VsbEVsZW1lbnRzID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICByZXR1cm4gdXRpbHMuZmlsdGVyRmluZEVsZW1lbnRzKCBlbGVtcywgdGhpcy5vcHRpb25zLmNlbGxTZWxlY3RvciApO1xufTtcblxuLy8gZ29lcyB0aHJvdWdoIGFsbCBjaGlsZHJlblxucHJvdG8ucmVsb2FkQ2VsbHMgPSBmdW5jdGlvbigpIHtcbiAgLy8gY29sbGVjdGlvbiBvZiBpdGVtIGVsZW1lbnRzXG4gIHRoaXMuY2VsbHMgPSB0aGlzLl9tYWtlQ2VsbHMoIHRoaXMuc2xpZGVyLmNoaWxkcmVuICk7XG4gIHRoaXMucG9zaXRpb25DZWxscygpO1xuICB0aGlzLl9nZXRXcmFwU2hpZnRDZWxscygpO1xuICB0aGlzLnNldEdhbGxlcnlTaXplKCk7XG59O1xuXG4vKipcbiAqIHR1cm4gZWxlbWVudHMgaW50byBGbGlja2l0eS5DZWxsc1xuICogQHBhcmFtIHtbQXJyYXksIE5vZGVMaXN0LCBIVE1MRWxlbWVudF19IGVsZW1zIC0gZWxlbWVudHMgdG8gbWFrZSBpbnRvIGNlbGxzXG4gKiBAcmV0dXJucyB7QXJyYXl9IGl0ZW1zIC0gY29sbGVjdGlvbiBvZiBuZXcgRmxpY2tpdHkgQ2VsbHNcbiAqL1xucHJvdG8uX21ha2VDZWxscyA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgdmFyIGNlbGxFbGVtcyA9IHRoaXMuX2ZpbHRlckZpbmRDZWxsRWxlbWVudHMoIGVsZW1zICk7XG5cbiAgLy8gY3JlYXRlIG5ldyBGbGlja2l0eSBmb3IgY29sbGVjdGlvblxuICB2YXIgY2VsbHMgPSBjZWxsRWxlbXMubWFwKCBmdW5jdGlvbiggY2VsbEVsZW0gKSB7XG4gICAgcmV0dXJuIG5ldyBDZWxsKCBjZWxsRWxlbSwgdGhpcyApO1xuICB9LCB0aGlzICk7XG5cbiAgcmV0dXJuIGNlbGxzO1xufTtcblxucHJvdG8uZ2V0TGFzdENlbGwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuY2VsbHNbIHRoaXMuY2VsbHMubGVuZ3RoIC0gMSBdO1xufTtcblxucHJvdG8uZ2V0TGFzdFNsaWRlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNsaWRlc1sgdGhpcy5zbGlkZXMubGVuZ3RoIC0gMSBdO1xufTtcblxuLy8gcG9zaXRpb25zIGFsbCBjZWxsc1xucHJvdG8ucG9zaXRpb25DZWxscyA9IGZ1bmN0aW9uKCkge1xuICAvLyBzaXplIGFsbCBjZWxsc1xuICB0aGlzLl9zaXplQ2VsbHMoIHRoaXMuY2VsbHMgKTtcbiAgLy8gcG9zaXRpb24gYWxsIGNlbGxzXG4gIHRoaXMuX3Bvc2l0aW9uQ2VsbHMoIDAgKTtcbn07XG5cbi8qKlxuICogcG9zaXRpb24gY2VydGFpbiBjZWxsc1xuICogQHBhcmFtIHtJbnRlZ2VyfSBpbmRleCAtIHdoaWNoIGNlbGwgdG8gc3RhcnQgd2l0aFxuICovXG5wcm90by5fcG9zaXRpb25DZWxscyA9IGZ1bmN0aW9uKCBpbmRleCApIHtcbiAgaW5kZXggPSBpbmRleCB8fCAwO1xuICAvLyBhbHNvIG1lYXN1cmUgbWF4Q2VsbEhlaWdodFxuICAvLyBzdGFydCAwIGlmIHBvc2l0aW9uaW5nIGFsbCBjZWxsc1xuICB0aGlzLm1heENlbGxIZWlnaHQgPSBpbmRleCA/IHRoaXMubWF4Q2VsbEhlaWdodCB8fCAwIDogMDtcbiAgdmFyIGNlbGxYID0gMDtcbiAgLy8gZ2V0IGNlbGxYXG4gIGlmICggaW5kZXggPiAwICkge1xuICAgIHZhciBzdGFydENlbGwgPSB0aGlzLmNlbGxzWyBpbmRleCAtIDEgXTtcbiAgICBjZWxsWCA9IHN0YXJ0Q2VsbC54ICsgc3RhcnRDZWxsLnNpemUub3V0ZXJXaWR0aDtcbiAgfVxuICB2YXIgbGVuID0gdGhpcy5jZWxscy5sZW5ndGg7XG4gIGZvciAoIHZhciBpID0gaW5kZXg7IGkgPCBsZW47IGkrKyApIHtcbiAgICB2YXIgY2VsbCA9IHRoaXMuY2VsbHNbaV07XG4gICAgY2VsbC5zZXRQb3NpdGlvbiggY2VsbFggKTtcbiAgICBjZWxsWCArPSBjZWxsLnNpemUub3V0ZXJXaWR0aDtcbiAgICB0aGlzLm1heENlbGxIZWlnaHQgPSBNYXRoLm1heCggY2VsbC5zaXplLm91dGVySGVpZ2h0LCB0aGlzLm1heENlbGxIZWlnaHQgKTtcbiAgfVxuICAvLyBrZWVwIHRyYWNrIG9mIGNlbGxYIGZvciB3cmFwLWFyb3VuZFxuICB0aGlzLnNsaWRlYWJsZVdpZHRoID0gY2VsbFg7XG4gIC8vIHNsaWRlc1xuICB0aGlzLnVwZGF0ZVNsaWRlcygpO1xuICAvLyBjb250YWluIHNsaWRlcyB0YXJnZXRcbiAgdGhpcy5fY29udGFpblNsaWRlcygpO1xuICAvLyB1cGRhdGUgc2xpZGVzV2lkdGhcbiAgdGhpcy5zbGlkZXNXaWR0aCA9IGxlbiA/IHRoaXMuZ2V0TGFzdFNsaWRlKCkudGFyZ2V0IC0gdGhpcy5zbGlkZXNbMF0udGFyZ2V0IDogMDtcbn07XG5cbi8qKlxuICogY2VsbC5nZXRTaXplKCkgb24gbXVsdGlwbGUgY2VsbHNcbiAqIEBwYXJhbSB7QXJyYXl9IGNlbGxzIC0gY2VsbHMgdG8gc2l6ZVxuICovXG5wcm90by5fc2l6ZUNlbGxzID0gZnVuY3Rpb24oIGNlbGxzICkge1xuICBjZWxscy5mb3JFYWNoKCBmdW5jdGlvbiggY2VsbCApIHtcbiAgICBjZWxsLmdldFNpemUoKTtcbiAgfSApO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnByb3RvLnVwZGF0ZVNsaWRlcyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnNsaWRlcyA9IFtdO1xuICBpZiAoICF0aGlzLmNlbGxzLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc2xpZGUgPSBuZXcgU2xpZGUoIHRoaXMgKTtcbiAgdGhpcy5zbGlkZXMucHVzaCggc2xpZGUgKTtcbiAgdmFyIGlzT3JpZ2luTGVmdCA9IHRoaXMub3JpZ2luU2lkZSA9PSAnbGVmdCc7XG4gIHZhciBuZXh0TWFyZ2luID0gaXNPcmlnaW5MZWZ0ID8gJ21hcmdpblJpZ2h0JyA6ICdtYXJnaW5MZWZ0JztcblxuICB2YXIgY2FuQ2VsbEZpdCA9IHRoaXMuX2dldENhbkNlbGxGaXQoKTtcblxuICB0aGlzLmNlbGxzLmZvckVhY2goIGZ1bmN0aW9uKCBjZWxsLCBpICkge1xuICAgIC8vIGp1c3QgYWRkIGNlbGwgaWYgZmlyc3QgY2VsbCBpbiBzbGlkZVxuICAgIGlmICggIXNsaWRlLmNlbGxzLmxlbmd0aCApIHtcbiAgICAgIHNsaWRlLmFkZENlbGwoIGNlbGwgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc2xpZGVXaWR0aCA9ICggc2xpZGUub3V0ZXJXaWR0aCAtIHNsaWRlLmZpcnN0TWFyZ2luICkgK1xuICAgICAgKCBjZWxsLnNpemUub3V0ZXJXaWR0aCAtIGNlbGwuc2l6ZVsgbmV4dE1hcmdpbiBdICk7XG5cbiAgICBpZiAoIGNhbkNlbGxGaXQuY2FsbCggdGhpcywgaSwgc2xpZGVXaWR0aCApICkge1xuICAgICAgc2xpZGUuYWRkQ2VsbCggY2VsbCApO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBkb2Vzbid0IGZpdCwgbmV3IHNsaWRlXG4gICAgICBzbGlkZS51cGRhdGVUYXJnZXQoKTtcblxuICAgICAgc2xpZGUgPSBuZXcgU2xpZGUoIHRoaXMgKTtcbiAgICAgIHRoaXMuc2xpZGVzLnB1c2goIHNsaWRlICk7XG4gICAgICBzbGlkZS5hZGRDZWxsKCBjZWxsICk7XG4gICAgfVxuICB9LCB0aGlzICk7XG4gIC8vIGxhc3Qgc2xpZGVcbiAgc2xpZGUudXBkYXRlVGFyZ2V0KCk7XG4gIC8vIHVwZGF0ZSAuc2VsZWN0ZWRTbGlkZVxuICB0aGlzLnVwZGF0ZVNlbGVjdGVkU2xpZGUoKTtcbn07XG5cbnByb3RvLl9nZXRDYW5DZWxsRml0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBncm91cENlbGxzID0gdGhpcy5vcHRpb25zLmdyb3VwQ2VsbHM7XG4gIGlmICggIWdyb3VwQ2VsbHMgKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBncm91cENlbGxzID09ICdudW1iZXInICkge1xuICAgIC8vIGdyb3VwIGJ5IG51bWJlci4gMyAtPiBbMCwxLDJdLCBbMyw0LDVdLCAuLi5cbiAgICB2YXIgbnVtYmVyID0gcGFyc2VJbnQoIGdyb3VwQ2VsbHMsIDEwICk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCBpICkge1xuICAgICAgcmV0dXJuICggaSAlIG51bWJlciApICE9PSAwO1xuICAgIH07XG4gIH1cbiAgLy8gZGVmYXVsdCwgZ3JvdXAgYnkgd2lkdGggb2Ygc2xpZGVcbiAgLy8gcGFyc2UgJzc1JVxuICB2YXIgcGVyY2VudE1hdGNoID0gdHlwZW9mIGdyb3VwQ2VsbHMgPT0gJ3N0cmluZycgJiZcbiAgICBncm91cENlbGxzLm1hdGNoKCAvXihcXGQrKSUkLyApO1xuICB2YXIgcGVyY2VudCA9IHBlcmNlbnRNYXRjaCA/IHBhcnNlSW50KCBwZXJjZW50TWF0Y2hbMV0sIDEwICkgLyAxMDAgOiAxO1xuICByZXR1cm4gZnVuY3Rpb24oIGksIHNsaWRlV2lkdGggKSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWludmFsaWQtdGhpcyAqL1xuICAgIHJldHVybiBzbGlkZVdpZHRoIDw9ICggdGhpcy5zaXplLmlubmVyV2lkdGggKyAxICkgKiBwZXJjZW50O1xuICB9O1xufTtcblxuLy8gYWxpYXMgX2luaXQgZm9yIGpRdWVyeSBwbHVnaW4gLmZsaWNraXR5KClcbnByb3RvLl9pbml0ID1cbnByb3RvLnJlcG9zaXRpb24gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wb3NpdGlvbkNlbGxzKCk7XG4gIHRoaXMucG9zaXRpb25TbGlkZXJBdFNlbGVjdGVkKCk7XG59O1xuXG5wcm90by5nZXRTaXplID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc2l6ZSA9IGdldFNpemUoIHRoaXMuZWxlbWVudCApO1xuICB0aGlzLnNldENlbGxBbGlnbigpO1xuICB0aGlzLmN1cnNvclBvc2l0aW9uID0gdGhpcy5zaXplLmlubmVyV2lkdGggKiB0aGlzLmNlbGxBbGlnbjtcbn07XG5cbnZhciBjZWxsQWxpZ25TaG9ydGhhbmRzID0ge1xuICAvLyBjZWxsIGFsaWduLCB0aGVuIGJhc2VkIG9uIG9yaWdpbiBzaWRlXG4gIGNlbnRlcjoge1xuICAgIGxlZnQ6IDAuNSxcbiAgICByaWdodDogMC41LFxuICB9LFxuICBsZWZ0OiB7XG4gICAgbGVmdDogMCxcbiAgICByaWdodDogMSxcbiAgfSxcbiAgcmlnaHQ6IHtcbiAgICByaWdodDogMCxcbiAgICBsZWZ0OiAxLFxuICB9LFxufTtcblxucHJvdG8uc2V0Q2VsbEFsaWduID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzaG9ydGhhbmQgPSBjZWxsQWxpZ25TaG9ydGhhbmRzWyB0aGlzLm9wdGlvbnMuY2VsbEFsaWduIF07XG4gIHRoaXMuY2VsbEFsaWduID0gc2hvcnRoYW5kID8gc2hvcnRoYW5kWyB0aGlzLm9yaWdpblNpZGUgXSA6IHRoaXMub3B0aW9ucy5jZWxsQWxpZ247XG59O1xuXG5wcm90by5zZXRHYWxsZXJ5U2l6ZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIHRoaXMub3B0aW9ucy5zZXRHYWxsZXJ5U2l6ZSApIHtcbiAgICB2YXIgaGVpZ2h0ID0gdGhpcy5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0ICYmIHRoaXMuc2VsZWN0ZWRTbGlkZSA/XG4gICAgICB0aGlzLnNlbGVjdGVkU2xpZGUuaGVpZ2h0IDogdGhpcy5tYXhDZWxsSGVpZ2h0O1xuICAgIHRoaXMudmlld3BvcnQuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgJ3B4JztcbiAgfVxufTtcblxucHJvdG8uX2dldFdyYXBTaGlmdENlbGxzID0gZnVuY3Rpb24oKSB7XG4gIC8vIG9ubHkgZm9yIHdyYXAtYXJvdW5kXG4gIGlmICggIXRoaXMub3B0aW9ucy53cmFwQXJvdW5kICkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyB1bnNoaWZ0IHByZXZpb3VzIGNlbGxzXG4gIHRoaXMuX3Vuc2hpZnRDZWxscyggdGhpcy5iZWZvcmVTaGlmdENlbGxzICk7XG4gIHRoaXMuX3Vuc2hpZnRDZWxscyggdGhpcy5hZnRlclNoaWZ0Q2VsbHMgKTtcbiAgLy8gZ2V0IGJlZm9yZSBjZWxsc1xuICAvLyBpbml0aWFsIGdhcFxuICB2YXIgZ2FwWCA9IHRoaXMuY3Vyc29yUG9zaXRpb247XG4gIHZhciBjZWxsSW5kZXggPSB0aGlzLmNlbGxzLmxlbmd0aCAtIDE7XG4gIHRoaXMuYmVmb3JlU2hpZnRDZWxscyA9IHRoaXMuX2dldEdhcENlbGxzKCBnYXBYLCBjZWxsSW5kZXgsIC0xICk7XG4gIC8vIGdldCBhZnRlciBjZWxsc1xuICAvLyBlbmRpbmcgZ2FwIGJldHdlZW4gbGFzdCBjZWxsIGFuZCBlbmQgb2YgZ2FsbGVyeSB2aWV3cG9ydFxuICBnYXBYID0gdGhpcy5zaXplLmlubmVyV2lkdGggLSB0aGlzLmN1cnNvclBvc2l0aW9uO1xuICAvLyBzdGFydCBjbG9uaW5nIGF0IGZpcnN0IGNlbGwsIHdvcmtpbmcgZm9yd2FyZHNcbiAgdGhpcy5hZnRlclNoaWZ0Q2VsbHMgPSB0aGlzLl9nZXRHYXBDZWxscyggZ2FwWCwgMCwgMSApO1xufTtcblxucHJvdG8uX2dldEdhcENlbGxzID0gZnVuY3Rpb24oIGdhcFgsIGNlbGxJbmRleCwgaW5jcmVtZW50ICkge1xuICAvLyBrZWVwIGFkZGluZyBjZWxscyB1bnRpbCB0aGUgY292ZXIgdGhlIGluaXRpYWwgZ2FwXG4gIHZhciBjZWxscyA9IFtdO1xuICB3aGlsZSAoIGdhcFggPiAwICkge1xuICAgIHZhciBjZWxsID0gdGhpcy5jZWxsc1sgY2VsbEluZGV4IF07XG4gICAgaWYgKCAhY2VsbCApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjZWxscy5wdXNoKCBjZWxsICk7XG4gICAgY2VsbEluZGV4ICs9IGluY3JlbWVudDtcbiAgICBnYXBYIC09IGNlbGwuc2l6ZS5vdXRlcldpZHRoO1xuICB9XG4gIHJldHVybiBjZWxscztcbn07XG5cbi8vIC0tLS0tIGNvbnRhaW4gLS0tLS0gLy9cblxuLy8gY29udGFpbiBjZWxsIHRhcmdldHMgc28gbm8gZXhjZXNzIHNsaWRpbmdcbnByb3RvLl9jb250YWluU2xpZGVzID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMub3B0aW9ucy5jb250YWluIHx8IHRoaXMub3B0aW9ucy53cmFwQXJvdW5kIHx8ICF0aGlzLmNlbGxzLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGlzUmlnaHRUb0xlZnQgPSB0aGlzLm9wdGlvbnMucmlnaHRUb0xlZnQ7XG4gIHZhciBiZWdpbk1hcmdpbiA9IGlzUmlnaHRUb0xlZnQgPyAnbWFyZ2luUmlnaHQnIDogJ21hcmdpbkxlZnQnO1xuICB2YXIgZW5kTWFyZ2luID0gaXNSaWdodFRvTGVmdCA/ICdtYXJnaW5MZWZ0JyA6ICdtYXJnaW5SaWdodCc7XG4gIHZhciBjb250ZW50V2lkdGggPSB0aGlzLnNsaWRlYWJsZVdpZHRoIC0gdGhpcy5nZXRMYXN0Q2VsbCgpLnNpemVbIGVuZE1hcmdpbiBdO1xuICAvLyBjb250ZW50IGlzIGxlc3MgdGhhbiBnYWxsZXJ5IHNpemVcbiAgdmFyIGlzQ29udGVudFNtYWxsZXIgPSBjb250ZW50V2lkdGggPCB0aGlzLnNpemUuaW5uZXJXaWR0aDtcbiAgLy8gYm91bmRzXG4gIHZhciBiZWdpbkJvdW5kID0gdGhpcy5jdXJzb3JQb3NpdGlvbiArIHRoaXMuY2VsbHNbMF0uc2l6ZVsgYmVnaW5NYXJnaW4gXTtcbiAgdmFyIGVuZEJvdW5kID0gY29udGVudFdpZHRoIC0gdGhpcy5zaXplLmlubmVyV2lkdGggKiAoIDEgLSB0aGlzLmNlbGxBbGlnbiApO1xuICAvLyBjb250YWluIGVhY2ggY2VsbCB0YXJnZXRcbiAgdGhpcy5zbGlkZXMuZm9yRWFjaCggZnVuY3Rpb24oIHNsaWRlICkge1xuICAgIGlmICggaXNDb250ZW50U21hbGxlciApIHtcbiAgICAgIC8vIGFsbCBjZWxscyBmaXQgaW5zaWRlIGdhbGxlcnlcbiAgICAgIHNsaWRlLnRhcmdldCA9IGNvbnRlbnRXaWR0aCAqIHRoaXMuY2VsbEFsaWduO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBjb250YWluIHRvIGJvdW5kc1xuICAgICAgc2xpZGUudGFyZ2V0ID0gTWF0aC5tYXgoIHNsaWRlLnRhcmdldCwgYmVnaW5Cb3VuZCApO1xuICAgICAgc2xpZGUudGFyZ2V0ID0gTWF0aC5taW4oIHNsaWRlLnRhcmdldCwgZW5kQm91bmQgKTtcbiAgICB9XG4gIH0sIHRoaXMgKTtcbn07XG5cbi8vIC0tLS0tICAtLS0tLSAvL1xuXG4vKipcbiAqIGVtaXRzIGV2ZW50cyB2aWEgZXZlbnRFbWl0dGVyIGFuZCBqUXVlcnkgZXZlbnRzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZSAtIG5hbWUgb2YgZXZlbnRcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gb3JpZ2luYWwgZXZlbnRcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgLSBleHRyYSBhcmd1bWVudHNcbiAqL1xucHJvdG8uZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uKCB0eXBlLCBldmVudCwgYXJncyApIHtcbiAgdmFyIGVtaXRBcmdzID0gZXZlbnQgPyBbIGV2ZW50IF0uY29uY2F0KCBhcmdzICkgOiBhcmdzO1xuICB0aGlzLmVtaXRFdmVudCggdHlwZSwgZW1pdEFyZ3MgKTtcblxuICBpZiAoIGpRdWVyeSAmJiB0aGlzLiRlbGVtZW50ICkge1xuICAgIC8vIGRlZmF1bHQgdHJpZ2dlciB3aXRoIHR5cGUgaWYgbm8gZXZlbnRcbiAgICB0eXBlICs9IHRoaXMub3B0aW9ucy5uYW1lc3BhY2VKUXVlcnlFdmVudHMgPyAnLmZsaWNraXR5JyA6ICcnO1xuICAgIHZhciAkZXZlbnQgPSB0eXBlO1xuICAgIGlmICggZXZlbnQgKSB7XG4gICAgICAvLyBjcmVhdGUgalF1ZXJ5IGV2ZW50XG4gICAgICB2YXIgalFFdmVudCA9IG5ldyBqUXVlcnkuRXZlbnQoIGV2ZW50ICk7XG4gICAgICBqUUV2ZW50LnR5cGUgPSB0eXBlO1xuICAgICAgJGV2ZW50ID0galFFdmVudDtcbiAgICB9XG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCAkZXZlbnQsIGFyZ3MgKTtcbiAgfVxufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gc2VsZWN0IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8qKlxuICogQHBhcmFtIHtJbnRlZ2VyfSBpbmRleCAtIGluZGV4IG9mIHRoZSBzbGlkZVxuICogQHBhcmFtIHtCb29sZWFufSBpc1dyYXAgLSB3aWxsIHdyYXAtYXJvdW5kIHRvIGxhc3QvZmlyc3QgaWYgYXQgdGhlIGVuZFxuICogQHBhcmFtIHtCb29sZWFufSBpc0luc3RhbnQgLSB3aWxsIGltbWVkaWF0ZWx5IHNldCBwb3NpdGlvbiBhdCBzZWxlY3RlZCBjZWxsXG4gKi9cbnByb3RvLnNlbGVjdCA9IGZ1bmN0aW9uKCBpbmRleCwgaXNXcmFwLCBpc0luc3RhbnQgKSB7XG4gIGlmICggIXRoaXMuaXNBY3RpdmUgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGluZGV4ID0gcGFyc2VJbnQoIGluZGV4LCAxMCApO1xuICB0aGlzLl93cmFwU2VsZWN0KCBpbmRleCApO1xuXG4gIGlmICggdGhpcy5vcHRpb25zLndyYXBBcm91bmQgfHwgaXNXcmFwICkge1xuICAgIGluZGV4ID0gdXRpbHMubW9kdWxvKCBpbmRleCwgdGhpcy5zbGlkZXMubGVuZ3RoICk7XG4gIH1cbiAgLy8gYmFpbCBpZiBpbnZhbGlkIGluZGV4XG4gIGlmICggIXRoaXMuc2xpZGVzWyBpbmRleCBdICkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgcHJldkluZGV4ID0gdGhpcy5zZWxlY3RlZEluZGV4O1xuICB0aGlzLnNlbGVjdGVkSW5kZXggPSBpbmRleDtcbiAgdGhpcy51cGRhdGVTZWxlY3RlZFNsaWRlKCk7XG4gIGlmICggaXNJbnN0YW50ICkge1xuICAgIHRoaXMucG9zaXRpb25TbGlkZXJBdFNlbGVjdGVkKCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zdGFydEFuaW1hdGlvbigpO1xuICB9XG4gIGlmICggdGhpcy5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0ICkge1xuICAgIHRoaXMuc2V0R2FsbGVyeVNpemUoKTtcbiAgfVxuICAvLyBldmVudHNcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KCAnc2VsZWN0JywgbnVsbCwgWyBpbmRleCBdICk7XG4gIC8vIGNoYW5nZSBldmVudCBpZiBuZXcgaW5kZXhcbiAgaWYgKCBpbmRleCAhPSBwcmV2SW5kZXggKSB7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KCAnY2hhbmdlJywgbnVsbCwgWyBpbmRleCBdICk7XG4gIH1cbiAgLy8gb2xkIHYxIGV2ZW50IG5hbWUsIHJlbW92ZSBpbiB2M1xuICB0aGlzLmRpc3BhdGNoRXZlbnQoJ2NlbGxTZWxlY3QnKTtcbn07XG5cbi8vIHdyYXBzIHBvc2l0aW9uIGZvciB3cmFwQXJvdW5kLCB0byBtb3ZlIHRvIGNsb3Nlc3Qgc2xpZGUuICMxMTNcbnByb3RvLl93cmFwU2VsZWN0ID0gZnVuY3Rpb24oIGluZGV4ICkge1xuICB2YXIgbGVuID0gdGhpcy5zbGlkZXMubGVuZ3RoO1xuICB2YXIgaXNXcmFwcGluZyA9IHRoaXMub3B0aW9ucy53cmFwQXJvdW5kICYmIGxlbiA+IDE7XG4gIGlmICggIWlzV3JhcHBpbmcgKSB7XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG4gIHZhciB3cmFwSW5kZXggPSB1dGlscy5tb2R1bG8oIGluZGV4LCBsZW4gKTtcbiAgLy8gZ28gdG8gc2hvcnRlc3RcbiAgdmFyIGRlbHRhID0gTWF0aC5hYnMoIHdyYXBJbmRleCAtIHRoaXMuc2VsZWN0ZWRJbmRleCApO1xuICB2YXIgYmFja1dyYXBEZWx0YSA9IE1hdGguYWJzKCAoIHdyYXBJbmRleCArIGxlbiApIC0gdGhpcy5zZWxlY3RlZEluZGV4ICk7XG4gIHZhciBmb3Jld2FyZFdyYXBEZWx0YSA9IE1hdGguYWJzKCAoIHdyYXBJbmRleCAtIGxlbiApIC0gdGhpcy5zZWxlY3RlZEluZGV4ICk7XG4gIGlmICggIXRoaXMuaXNEcmFnU2VsZWN0ICYmIGJhY2tXcmFwRGVsdGEgPCBkZWx0YSApIHtcbiAgICBpbmRleCArPSBsZW47XG4gIH0gZWxzZSBpZiAoICF0aGlzLmlzRHJhZ1NlbGVjdCAmJiBmb3Jld2FyZFdyYXBEZWx0YSA8IGRlbHRhICkge1xuICAgIGluZGV4IC09IGxlbjtcbiAgfVxuICAvLyB3cmFwIHBvc2l0aW9uIHNvIHNsaWRlciBpcyB3aXRoaW4gbm9ybWFsIGFyZWFcbiAgaWYgKCBpbmRleCA8IDAgKSB7XG4gICAgdGhpcy54IC09IHRoaXMuc2xpZGVhYmxlV2lkdGg7XG4gIH0gZWxzZSBpZiAoIGluZGV4ID49IGxlbiApIHtcbiAgICB0aGlzLnggKz0gdGhpcy5zbGlkZWFibGVXaWR0aDtcbiAgfVxufTtcblxucHJvdG8ucHJldmlvdXMgPSBmdW5jdGlvbiggaXNXcmFwLCBpc0luc3RhbnQgKSB7XG4gIHRoaXMuc2VsZWN0KCB0aGlzLnNlbGVjdGVkSW5kZXggLSAxLCBpc1dyYXAsIGlzSW5zdGFudCApO1xufTtcblxucHJvdG8ubmV4dCA9IGZ1bmN0aW9uKCBpc1dyYXAsIGlzSW5zdGFudCApIHtcbiAgdGhpcy5zZWxlY3QoIHRoaXMuc2VsZWN0ZWRJbmRleCArIDEsIGlzV3JhcCwgaXNJbnN0YW50ICk7XG59O1xuXG5wcm90by51cGRhdGVTZWxlY3RlZFNsaWRlID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzbGlkZSA9IHRoaXMuc2xpZGVzWyB0aGlzLnNlbGVjdGVkSW5kZXggXTtcbiAgLy8gc2VsZWN0ZWRJbmRleCBjb3VsZCBiZSBvdXRzaWRlIG9mIHNsaWRlcywgaWYgdHJpZ2dlcmVkIGJlZm9yZSByZXNpemUoKVxuICBpZiAoICFzbGlkZSApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gdW5zZWxlY3QgcHJldmlvdXMgc2VsZWN0ZWQgc2xpZGVcbiAgdGhpcy51bnNlbGVjdFNlbGVjdGVkU2xpZGUoKTtcbiAgLy8gdXBkYXRlIG5ldyBzZWxlY3RlZCBzbGlkZVxuICB0aGlzLnNlbGVjdGVkU2xpZGUgPSBzbGlkZTtcbiAgc2xpZGUuc2VsZWN0KCk7XG4gIHRoaXMuc2VsZWN0ZWRDZWxscyA9IHNsaWRlLmNlbGxzO1xuICB0aGlzLnNlbGVjdGVkRWxlbWVudHMgPSBzbGlkZS5nZXRDZWxsRWxlbWVudHMoKTtcbiAgLy8gSEFDSzogc2VsZWN0ZWRDZWxsICYgc2VsZWN0ZWRFbGVtZW50IGlzIGZpcnN0IGNlbGwgaW4gc2xpZGUsIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gIC8vIFJlbW92ZSBpbiB2Mz9cbiAgdGhpcy5zZWxlY3RlZENlbGwgPSBzbGlkZS5jZWxsc1swXTtcbiAgdGhpcy5zZWxlY3RlZEVsZW1lbnQgPSB0aGlzLnNlbGVjdGVkRWxlbWVudHNbMF07XG59O1xuXG5wcm90by51bnNlbGVjdFNlbGVjdGVkU2xpZGUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCB0aGlzLnNlbGVjdGVkU2xpZGUgKSB7XG4gICAgdGhpcy5zZWxlY3RlZFNsaWRlLnVuc2VsZWN0KCk7XG4gIH1cbn07XG5cbnByb3RvLnNlbGVjdEluaXRpYWxJbmRleCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaW5pdGlhbEluZGV4ID0gdGhpcy5vcHRpb25zLmluaXRpYWxJbmRleDtcbiAgLy8gYWxyZWFkeSBhY3RpdmF0ZWQsIHNlbGVjdCBwcmV2aW91cyBzZWxlY3RlZEluZGV4XG4gIGlmICggdGhpcy5pc0luaXRBY3RpdmF0ZWQgKSB7XG4gICAgdGhpcy5zZWxlY3QoIHRoaXMuc2VsZWN0ZWRJbmRleCwgZmFsc2UsIHRydWUgKTtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gc2VsZWN0IHdpdGggc2VsZWN0b3Igc3RyaW5nXG4gIGlmICggaW5pdGlhbEluZGV4ICYmIHR5cGVvZiBpbml0aWFsSW5kZXggPT0gJ3N0cmluZycgKSB7XG4gICAgdmFyIGNlbGwgPSB0aGlzLnF1ZXJ5Q2VsbCggaW5pdGlhbEluZGV4ICk7XG4gICAgaWYgKCBjZWxsICkge1xuICAgICAgdGhpcy5zZWxlY3RDZWxsKCBpbml0aWFsSW5kZXgsIGZhbHNlLCB0cnVlICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgdmFyIGluZGV4ID0gMDtcbiAgLy8gc2VsZWN0IHdpdGggbnVtYmVyXG4gIGlmICggaW5pdGlhbEluZGV4ICYmIHRoaXMuc2xpZGVzWyBpbml0aWFsSW5kZXggXSApIHtcbiAgICBpbmRleCA9IGluaXRpYWxJbmRleDtcbiAgfVxuICAvLyBzZWxlY3QgaW5zdGFudGx5XG4gIHRoaXMuc2VsZWN0KCBpbmRleCwgZmFsc2UsIHRydWUgKTtcbn07XG5cbi8qKlxuICogc2VsZWN0IHNsaWRlIGZyb20gbnVtYmVyIG9yIGNlbGwgZWxlbWVudFxuICogQHBhcmFtIHtbRWxlbWVudCwgTnVtYmVyXX0gdmFsdWUgLSB6ZXJvLWJhc2VkIGluZGV4IG9yIGVsZW1lbnQgdG8gc2VsZWN0XG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzV3JhcCAtIGVuYWJsZXMgd3JhcHBpbmcgYXJvdW5kIGZvciBleHRyYSBpbmRleFxuICogQHBhcmFtIHtCb29sZWFufSBpc0luc3RhbnQgLSBkaXNhYmxlcyBzbGlkZSBhbmltYXRpb25cbiAqL1xucHJvdG8uc2VsZWN0Q2VsbCA9IGZ1bmN0aW9uKCB2YWx1ZSwgaXNXcmFwLCBpc0luc3RhbnQgKSB7XG4gIC8vIGdldCBjZWxsXG4gIHZhciBjZWxsID0gdGhpcy5xdWVyeUNlbGwoIHZhbHVlICk7XG4gIGlmICggIWNlbGwgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gdGhpcy5nZXRDZWxsU2xpZGVJbmRleCggY2VsbCApO1xuICB0aGlzLnNlbGVjdCggaW5kZXgsIGlzV3JhcCwgaXNJbnN0YW50ICk7XG59O1xuXG5wcm90by5nZXRDZWxsU2xpZGVJbmRleCA9IGZ1bmN0aW9uKCBjZWxsICkge1xuICAvLyBnZXQgaW5kZXggb2Ygc2xpZGVzIHRoYXQgaGFzIGNlbGxcbiAgZm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy5zbGlkZXMubGVuZ3RoOyBpKysgKSB7XG4gICAgdmFyIHNsaWRlID0gdGhpcy5zbGlkZXNbaV07XG4gICAgdmFyIGluZGV4ID0gc2xpZGUuY2VsbHMuaW5kZXhPZiggY2VsbCApO1xuICAgIGlmICggaW5kZXggIT0gLTEgKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGdldCBjZWxscyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vKipcbiAqIGdldCBGbGlja2l0eS5DZWxsLCBnaXZlbiBhbiBFbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW0gLSBtYXRjaGluZyBjZWxsIGVsZW1lbnRcbiAqIEByZXR1cm5zIHtGbGlja2l0eS5DZWxsfSBjZWxsIC0gbWF0Y2hpbmcgY2VsbFxuICovXG5wcm90by5nZXRDZWxsID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIC8vIGxvb3AgdGhyb3VnaCBjZWxscyB0byBnZXQgdGhlIG9uZSB0aGF0IG1hdGNoZXNcbiAgZm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy5jZWxscy5sZW5ndGg7IGkrKyApIHtcbiAgICB2YXIgY2VsbCA9IHRoaXMuY2VsbHNbaV07XG4gICAgaWYgKCBjZWxsLmVsZW1lbnQgPT0gZWxlbSApIHtcbiAgICAgIHJldHVybiBjZWxsO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBnZXQgY29sbGVjdGlvbiBvZiBGbGlja2l0eS5DZWxscywgZ2l2ZW4gRWxlbWVudHNcbiAqIEBwYXJhbSB7W0VsZW1lbnQsIEFycmF5LCBOb2RlTGlzdF19IGVsZW1zIC0gbXVsdGlwbGUgZWxlbWVudHNcbiAqIEByZXR1cm5zIHtBcnJheX0gY2VsbHMgLSBGbGlja2l0eS5DZWxsc1xuICovXG5wcm90by5nZXRDZWxscyA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgZWxlbXMgPSB1dGlscy5tYWtlQXJyYXkoIGVsZW1zICk7XG4gIHZhciBjZWxscyA9IFtdO1xuICBlbGVtcy5mb3JFYWNoKCBmdW5jdGlvbiggZWxlbSApIHtcbiAgICB2YXIgY2VsbCA9IHRoaXMuZ2V0Q2VsbCggZWxlbSApO1xuICAgIGlmICggY2VsbCApIHtcbiAgICAgIGNlbGxzLnB1c2goIGNlbGwgKTtcbiAgICB9XG4gIH0sIHRoaXMgKTtcbiAgcmV0dXJuIGNlbGxzO1xufTtcblxuLyoqXG4gKiBnZXQgY2VsbCBlbGVtZW50c1xuICogQHJldHVybnMge0FycmF5fSBjZWxsRWxlbXNcbiAqL1xucHJvdG8uZ2V0Q2VsbEVsZW1lbnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmNlbGxzLm1hcCggZnVuY3Rpb24oIGNlbGwgKSB7XG4gICAgcmV0dXJuIGNlbGwuZWxlbWVudDtcbiAgfSApO1xufTtcblxuLyoqXG4gKiBnZXQgcGFyZW50IGNlbGwgZnJvbSBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW0gLSBjaGlsZCBlbGVtZW50XG4gKiBAcmV0dXJucyB7RmxpY2tpdC5DZWxsfSBjZWxsIC0gcGFyZW50IGNlbGxcbiAqL1xucHJvdG8uZ2V0UGFyZW50Q2VsbCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICAvLyBmaXJzdCBjaGVjayBpZiBlbGVtIGlzIGNlbGxcbiAgdmFyIGNlbGwgPSB0aGlzLmdldENlbGwoIGVsZW0gKTtcbiAgaWYgKCBjZWxsICkge1xuICAgIHJldHVybiBjZWxsO1xuICB9XG4gIC8vIHRyeSB0byBnZXQgcGFyZW50IGNlbGwgZWxlbVxuICBlbGVtID0gdXRpbHMuZ2V0UGFyZW50KCBlbGVtLCAnLmZsaWNraXR5LXNsaWRlciA+IConICk7XG4gIHJldHVybiB0aGlzLmdldENlbGwoIGVsZW0gKTtcbn07XG5cbi8qKlxuICogZ2V0IGNlbGxzIGFkamFjZW50IHRvIGEgc2xpZGVcbiAqIEBwYXJhbSB7SW50ZWdlcn0gYWRqQ291bnQgLSBudW1iZXIgb2YgYWRqYWNlbnQgc2xpZGVzXG4gKiBAcGFyYW0ge0ludGVnZXJ9IGluZGV4IC0gaW5kZXggb2Ygc2xpZGUgdG8gc3RhcnRcbiAqIEByZXR1cm5zIHtBcnJheX0gY2VsbHMgLSBhcnJheSBvZiBGbGlja2l0eS5DZWxsc1xuICovXG5wcm90by5nZXRBZGphY2VudENlbGxFbGVtZW50cyA9IGZ1bmN0aW9uKCBhZGpDb3VudCwgaW5kZXggKSB7XG4gIGlmICggIWFkakNvdW50ICkge1xuICAgIHJldHVybiB0aGlzLnNlbGVjdGVkU2xpZGUuZ2V0Q2VsbEVsZW1lbnRzKCk7XG4gIH1cbiAgaW5kZXggPSBpbmRleCA9PT0gdW5kZWZpbmVkID8gdGhpcy5zZWxlY3RlZEluZGV4IDogaW5kZXg7XG5cbiAgdmFyIGxlbiA9IHRoaXMuc2xpZGVzLmxlbmd0aDtcbiAgaWYgKCAxICsgKCBhZGpDb3VudCAqIDIgKSA+PSBsZW4gKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Q2VsbEVsZW1lbnRzKCk7XG4gIH1cblxuICB2YXIgY2VsbEVsZW1zID0gW107XG4gIGZvciAoIHZhciBpID0gaW5kZXggLSBhZGpDb3VudDsgaSA8PSBpbmRleCArIGFkakNvdW50OyBpKysgKSB7XG4gICAgdmFyIHNsaWRlSW5kZXggPSB0aGlzLm9wdGlvbnMud3JhcEFyb3VuZCA/IHV0aWxzLm1vZHVsbyggaSwgbGVuICkgOiBpO1xuICAgIHZhciBzbGlkZSA9IHRoaXMuc2xpZGVzWyBzbGlkZUluZGV4IF07XG4gICAgaWYgKCBzbGlkZSApIHtcbiAgICAgIGNlbGxFbGVtcyA9IGNlbGxFbGVtcy5jb25jYXQoIHNsaWRlLmdldENlbGxFbGVtZW50cygpICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBjZWxsRWxlbXM7XG59O1xuXG4vKipcbiAqIHNlbGVjdCBzbGlkZSBmcm9tIG51bWJlciBvciBjZWxsIGVsZW1lbnRcbiAqIEBwYXJhbSB7W0VsZW1lbnQsIFN0cmluZywgTnVtYmVyXX0gc2VsZWN0b3IgLSBlbGVtZW50LCBzZWxlY3RvciBzdHJpbmcsIG9yIGluZGV4XG4gKiBAcmV0dXJucyB7RmxpY2tpdHkuQ2VsbH0gLSBtYXRjaGluZyBjZWxsXG4gKi9cbnByb3RvLnF1ZXJ5Q2VsbCA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcbiAgaWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT0gJ251bWJlcicgKSB7XG4gICAgLy8gdXNlIG51bWJlciBhcyBpbmRleFxuICAgIHJldHVybiB0aGlzLmNlbGxzWyBzZWxlY3RvciBdO1xuICB9XG4gIGlmICggdHlwZW9mIHNlbGVjdG9yID09ICdzdHJpbmcnICkge1xuICAgIC8vIGRvIG5vdCBzZWxlY3QgaW52YWxpZCBzZWxlY3RvcnMgZnJvbSBoYXNoOiAjMTIzLCAjLy4gIzc5MVxuICAgIGlmICggc2VsZWN0b3IubWF0Y2goIC9eWyMuXT9bXFxkL10vICkgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHVzZSBzdHJpbmcgYXMgc2VsZWN0b3IsIGdldCBlbGVtZW50XG4gICAgc2VsZWN0b3IgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3Rvciggc2VsZWN0b3IgKTtcbiAgfVxuICAvLyBnZXQgY2VsbCBmcm9tIGVsZW1lbnRcbiAgcmV0dXJuIHRoaXMuZ2V0Q2VsbCggc2VsZWN0b3IgKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGV2ZW50cyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5wcm90by51aUNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVtaXRFdmVudCgndWlDaGFuZ2UnKTtcbn07XG5cbi8vIGtlZXAgZm9jdXMgb24gZWxlbWVudCB3aGVuIGNoaWxkIFVJIGVsZW1lbnRzIGFyZSBjbGlja2VkXG5wcm90by5jaGlsZFVJUG9pbnRlckRvd24gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIC8vIEhBQ0sgaU9TIGRvZXMgbm90IGFsbG93IHRvdWNoIGV2ZW50cyB0byBidWJibGUgdXA/IVxuICBpZiAoIGV2ZW50LnR5cGUgIT0gJ3RvdWNoc3RhcnQnICkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbiAgdGhpcy5mb2N1cygpO1xufTtcblxuLy8gLS0tLS0gcmVzaXplIC0tLS0tIC8vXG5cbnByb3RvLm9ucmVzaXplID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMud2F0Y2hDU1MoKTtcbiAgdGhpcy5yZXNpemUoKTtcbn07XG5cbnV0aWxzLmRlYm91bmNlTWV0aG9kKCBGbGlja2l0eSwgJ29ucmVzaXplJywgMTUwICk7XG5cbnByb3RvLnJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuICAvLyAjMTE3NyBkaXNhYmxlIHJlc2l6ZSBiZWhhdmlvciB3aGVuIGFuaW1hdGluZyBvciBkcmFnZ2luZyBmb3IgaU9TIDE1XG4gIGlmICggIXRoaXMuaXNBY3RpdmUgfHwgdGhpcy5pc0FuaW1hdGluZyB8fCB0aGlzLmlzRHJhZ2dpbmcgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMuZ2V0U2l6ZSgpO1xuICAvLyB3cmFwIHZhbHVlc1xuICBpZiAoIHRoaXMub3B0aW9ucy53cmFwQXJvdW5kICkge1xuICAgIHRoaXMueCA9IHV0aWxzLm1vZHVsbyggdGhpcy54LCB0aGlzLnNsaWRlYWJsZVdpZHRoICk7XG4gIH1cbiAgdGhpcy5wb3NpdGlvbkNlbGxzKCk7XG4gIHRoaXMuX2dldFdyYXBTaGlmdENlbGxzKCk7XG4gIHRoaXMuc2V0R2FsbGVyeVNpemUoKTtcbiAgdGhpcy5lbWl0RXZlbnQoJ3Jlc2l6ZScpO1xuICAvLyB1cGRhdGUgc2VsZWN0ZWQgaW5kZXggZm9yIGdyb3VwIHNsaWRlcywgaW5zdGFudFxuICAvLyBUT0RPOiBwb3NpdGlvbiBjYW4gYmUgbG9zdCBiZXR3ZWVuIGdyb3VwcyBvZiB2YXJpb3VzIG51bWJlcnNcbiAgdmFyIHNlbGVjdGVkRWxlbWVudCA9IHRoaXMuc2VsZWN0ZWRFbGVtZW50cyAmJiB0aGlzLnNlbGVjdGVkRWxlbWVudHNbMF07XG4gIHRoaXMuc2VsZWN0Q2VsbCggc2VsZWN0ZWRFbGVtZW50LCBmYWxzZSwgdHJ1ZSApO1xufTtcblxuLy8gd2F0Y2hlcyB0aGUgOmFmdGVyIHByb3BlcnR5LCBhY3RpdmF0ZXMvZGVhY3RpdmF0ZXNcbnByb3RvLndhdGNoQ1NTID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3YXRjaE9wdGlvbiA9IHRoaXMub3B0aW9ucy53YXRjaENTUztcbiAgaWYgKCAhd2F0Y2hPcHRpb24gKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGFmdGVyQ29udGVudCA9IGdldENvbXB1dGVkU3R5bGUoIHRoaXMuZWxlbWVudCwgJzphZnRlcicgKS5jb250ZW50O1xuICAvLyBhY3RpdmF0ZSBpZiA6YWZ0ZXIgeyBjb250ZW50OiAnZmxpY2tpdHknIH1cbiAgaWYgKCBhZnRlckNvbnRlbnQuaW5kZXhPZignZmxpY2tpdHknKSAhPSAtMSApIHtcbiAgICB0aGlzLmFjdGl2YXRlKCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5kZWFjdGl2YXRlKCk7XG4gIH1cbn07XG5cbi8vIC0tLS0tIGtleWRvd24gLS0tLS0gLy9cblxuLy8gZ28gcHJldmlvdXMvbmV4dCBpZiBsZWZ0L3JpZ2h0IGtleXMgcHJlc3NlZFxucHJvdG8ub25rZXlkb3duID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICAvLyBvbmx5IHdvcmsgaWYgZWxlbWVudCBpcyBpbiBmb2N1c1xuICB2YXIgaXNOb3RGb2N1c2VkID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9IHRoaXMuZWxlbWVudDtcbiAgaWYgKCAhdGhpcy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgfHwgaXNOb3RGb2N1c2VkICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBoYW5kbGVyID0gRmxpY2tpdHkua2V5Ym9hcmRIYW5kbGVyc1sgZXZlbnQua2V5Q29kZSBdO1xuICBpZiAoIGhhbmRsZXIgKSB7XG4gICAgaGFuZGxlci5jYWxsKCB0aGlzICk7XG4gIH1cbn07XG5cbkZsaWNraXR5LmtleWJvYXJkSGFuZGxlcnMgPSB7XG4gIC8vIGxlZnQgYXJyb3dcbiAgMzc6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZWZ0TWV0aG9kID0gdGhpcy5vcHRpb25zLnJpZ2h0VG9MZWZ0ID8gJ25leHQnIDogJ3ByZXZpb3VzJztcbiAgICB0aGlzLnVpQ2hhbmdlKCk7XG4gICAgdGhpc1sgbGVmdE1ldGhvZCBdKCk7XG4gIH0sXG4gIC8vIHJpZ2h0IGFycm93XG4gIDM5OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmlnaHRNZXRob2QgPSB0aGlzLm9wdGlvbnMucmlnaHRUb0xlZnQgPyAncHJldmlvdXMnIDogJ25leHQnO1xuICAgIHRoaXMudWlDaGFuZ2UoKTtcbiAgICB0aGlzWyByaWdodE1ldGhvZCBdKCk7XG4gIH0sXG59O1xuXG4vLyAtLS0tLSBmb2N1cyAtLS0tLSAvL1xuXG5wcm90by5mb2N1cyA9IGZ1bmN0aW9uKCkge1xuICAvLyBUT0RPIHJlbW92ZSBzY3JvbGxUbyBvbmNlIGZvY3VzIG9wdGlvbnMgZ2V0cyBtb3JlIHN1cHBvcnRcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxFbGVtZW50L2ZvY3VzIC4uLlxuICAvLyAgICAjQnJvd3Nlcl9jb21wYXRpYmlsaXR5XG4gIHZhciBwcmV2U2Nyb2xsWSA9IHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgdGhpcy5lbGVtZW50LmZvY3VzKHsgcHJldmVudFNjcm9sbDogdHJ1ZSB9KTtcbiAgLy8gaGFjayB0byBmaXggc2Nyb2xsIGp1bXAgYWZ0ZXIgZm9jdXMsICM3NlxuICBpZiAoIHdpbmRvdy5wYWdlWU9mZnNldCAhPSBwcmV2U2Nyb2xsWSApIHtcbiAgICB3aW5kb3cuc2Nyb2xsVG8oIHdpbmRvdy5wYWdlWE9mZnNldCwgcHJldlNjcm9sbFkgKTtcbiAgfVxufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZGVzdHJveSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vLyBkZWFjdGl2YXRlIGFsbCBGbGlja2l0eSBmdW5jdGlvbmFsaXR5LCBidXQga2VlcCBzdHVmZiBhdmFpbGFibGVcbnByb3RvLmRlYWN0aXZhdGUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5pc0FjdGl2ZSApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2ZsaWNraXR5LWVuYWJsZWQnKTtcbiAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2ZsaWNraXR5LXJ0bCcpO1xuICB0aGlzLnVuc2VsZWN0U2VsZWN0ZWRTbGlkZSgpO1xuICAvLyBkZXN0cm95IGNlbGxzXG4gIHRoaXMuY2VsbHMuZm9yRWFjaCggZnVuY3Rpb24oIGNlbGwgKSB7XG4gICAgY2VsbC5kZXN0cm95KCk7XG4gIH0gKTtcbiAgdGhpcy5lbGVtZW50LnJlbW92ZUNoaWxkKCB0aGlzLnZpZXdwb3J0ICk7XG4gIC8vIG1vdmUgY2hpbGQgZWxlbWVudHMgYmFjayBpbnRvIGVsZW1lbnRcbiAgbW92ZUVsZW1lbnRzKCB0aGlzLnNsaWRlci5jaGlsZHJlbiwgdGhpcy5lbGVtZW50ICk7XG4gIGlmICggdGhpcy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgKSB7XG4gICAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgndGFiSW5kZXgnKTtcbiAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2tleWRvd24nLCB0aGlzICk7XG4gIH1cbiAgLy8gc2V0IGZsYWdzXG4gIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgdGhpcy5lbWl0RXZlbnQoJ2RlYWN0aXZhdGUnKTtcbn07XG5cbnByb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5kZWFjdGl2YXRlKCk7XG4gIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCAncmVzaXplJywgdGhpcyApO1xuICB0aGlzLmFsbE9mZigpO1xuICB0aGlzLmVtaXRFdmVudCgnZGVzdHJveScpO1xuICBpZiAoIGpRdWVyeSAmJiB0aGlzLiRlbGVtZW50ICkge1xuICAgIGpRdWVyeS5yZW1vdmVEYXRhKCB0aGlzLmVsZW1lbnQsICdmbGlja2l0eScgKTtcbiAgfVxuICBkZWxldGUgdGhpcy5lbGVtZW50LmZsaWNraXR5R1VJRDtcbiAgZGVsZXRlIGluc3RhbmNlc1sgdGhpcy5ndWlkIF07XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBwcm90b3R5cGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxudXRpbHMuZXh0ZW5kKCBwcm90bywgYW5pbWF0ZVByb3RvdHlwZSApO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBleHRyYXMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLyoqXG4gKiBnZXQgRmxpY2tpdHkgaW5zdGFuY2UgZnJvbSBlbGVtZW50XG4gKiBAcGFyYW0ge1tFbGVtZW50LCBTdHJpbmddfSBlbGVtIC0gZWxlbWVudCBvciBzZWxlY3RvciBzdHJpbmdcbiAqIEByZXR1cm5zIHtGbGlja2l0eX0gLSBGbGlja2l0eSBpbnN0YW5jZVxuICovXG5GbGlja2l0eS5kYXRhID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIGVsZW0gPSB1dGlscy5nZXRRdWVyeUVsZW1lbnQoIGVsZW0gKTtcbiAgdmFyIGlkID0gZWxlbSAmJiBlbGVtLmZsaWNraXR5R1VJRDtcbiAgcmV0dXJuIGlkICYmIGluc3RhbmNlc1sgaWQgXTtcbn07XG5cbnV0aWxzLmh0bWxJbml0KCBGbGlja2l0eSwgJ2ZsaWNraXR5JyApO1xuXG5pZiAoIGpRdWVyeSAmJiBqUXVlcnkuYnJpZGdldCApIHtcbiAgalF1ZXJ5LmJyaWRnZXQoICdmbGlja2l0eScsIEZsaWNraXR5ICk7XG59XG5cbi8vIHNldCBpbnRlcm5hbCBqUXVlcnksIGZvciBXZWJwYWNrICsgalF1ZXJ5IHYzLCAjNDc4XG5GbGlja2l0eS5zZXRKUXVlcnkgPSBmdW5jdGlvbigganEgKSB7XG4gIGpRdWVyeSA9IGpxO1xufTtcblxuRmxpY2tpdHkuQ2VsbCA9IENlbGw7XG5GbGlja2l0eS5TbGlkZSA9IFNsaWRlO1xuXG5yZXR1cm4gRmxpY2tpdHk7XG5cbn0gKSApO1xuXG59LHtcIi4vYW5pbWF0ZVwiOjEwLFwiLi9jZWxsXCI6MTEsXCIuL3NsaWRlXCI6MTksXCJldi1lbWl0dGVyXCI6NyxcImZpenp5LXVpLXV0aWxzXCI6OCxcImdldC1zaXplXCI6MjB9XSwxNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKiFcbiAqIEZsaWNraXR5IHYyLjMuMFxuICogVG91Y2gsIHJlc3BvbnNpdmUsIGZsaWNrYWJsZSBjYXJvdXNlbHNcbiAqXG4gKiBMaWNlbnNlZCBHUEx2MyBmb3Igb3BlbiBzb3VyY2UgdXNlXG4gKiBvciBGbGlja2l0eSBDb21tZXJjaWFsIExpY2Vuc2UgZm9yIGNvbW1lcmNpYWwgdXNlXG4gKlxuICogaHR0cHM6Ly9mbGlja2l0eS5tZXRhZml6enkuY29cbiAqIENvcHlyaWdodCAyMDE1LTIwMjEgTWV0YWZpenp5XG4gKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIFtcbiAgICAgICcuL2ZsaWNraXR5JyxcbiAgICAgICcuL2RyYWcnLFxuICAgICAgJy4vcHJldi1uZXh0LWJ1dHRvbicsXG4gICAgICAnLi9wYWdlLWRvdHMnLFxuICAgICAgJy4vcGxheWVyJyxcbiAgICAgICcuL2FkZC1yZW1vdmUtY2VsbCcsXG4gICAgICAnLi9sYXp5bG9hZCcsXG4gICAgXSwgZmFjdG9yeSApO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgICByZXF1aXJlKCcuL2ZsaWNraXR5JyksXG4gICAgICAgIHJlcXVpcmUoJy4vZHJhZycpLFxuICAgICAgICByZXF1aXJlKCcuL3ByZXYtbmV4dC1idXR0b24nKSxcbiAgICAgICAgcmVxdWlyZSgnLi9wYWdlLWRvdHMnKSxcbiAgICAgICAgcmVxdWlyZSgnLi9wbGF5ZXInKSxcbiAgICAgICAgcmVxdWlyZSgnLi9hZGQtcmVtb3ZlLWNlbGwnKSxcbiAgICAgICAgcmVxdWlyZSgnLi9sYXp5bG9hZCcpXG4gICAgKTtcbiAgfVxuXG59ICkoIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggRmxpY2tpdHkgKSB7XG4gIHJldHVybiBGbGlja2l0eTtcbn0gKTtcblxufSx7XCIuL2FkZC1yZW1vdmUtY2VsbFwiOjksXCIuL2RyYWdcIjoxMixcIi4vZmxpY2tpdHlcIjoxMyxcIi4vbGF6eWxvYWRcIjoxNSxcIi4vcGFnZS1kb3RzXCI6MTYsXCIuL3BsYXllclwiOjE3LFwiLi9wcmV2LW5leHQtYnV0dG9uXCI6MTh9XSwxNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vLyBsYXp5bG9hZFxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIFtcbiAgICAgICcuL2ZsaWNraXR5JyxcbiAgICAgICdmaXp6eS11aS11dGlscy91dGlscycsXG4gICAgXSwgZnVuY3Rpb24oIEZsaWNraXR5LCB1dGlscyApIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIEZsaWNraXR5LCB1dGlscyApO1xuICAgIH0gKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgICAgd2luZG93LFxuICAgICAgICByZXF1aXJlKCcuL2ZsaWNraXR5JyksXG4gICAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgZmFjdG9yeShcbiAgICAgICAgd2luZG93LFxuICAgICAgICB3aW5kb3cuRmxpY2tpdHksXG4gICAgICAgIHdpbmRvdy5maXp6eVVJVXRpbHNcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBGbGlja2l0eSwgdXRpbHMgKSB7XG4ndXNlIHN0cmljdCc7XG5cbkZsaWNraXR5LmNyZWF0ZU1ldGhvZHMucHVzaCgnX2NyZWF0ZUxhenlsb2FkJyk7XG52YXIgcHJvdG8gPSBGbGlja2l0eS5wcm90b3R5cGU7XG5cbnByb3RvLl9jcmVhdGVMYXp5bG9hZCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLm9uKCAnc2VsZWN0JywgdGhpcy5sYXp5TG9hZCApO1xufTtcblxucHJvdG8ubGF6eUxvYWQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGxhenlMb2FkID0gdGhpcy5vcHRpb25zLmxhenlMb2FkO1xuICBpZiAoICFsYXp5TG9hZCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gZ2V0IGFkamFjZW50IGNlbGxzLCB1c2UgbGF6eUxvYWQgb3B0aW9uIGZvciBhZGphY2VudCBjb3VudFxuICB2YXIgYWRqQ291bnQgPSB0eXBlb2YgbGF6eUxvYWQgPT0gJ251bWJlcicgPyBsYXp5TG9hZCA6IDA7XG4gIHZhciBjZWxsRWxlbXMgPSB0aGlzLmdldEFkamFjZW50Q2VsbEVsZW1lbnRzKCBhZGpDb3VudCApO1xuICAvLyBnZXQgbGF6eSBpbWFnZXMgaW4gdGhvc2UgY2VsbHNcbiAgdmFyIGxhenlJbWFnZXMgPSBbXTtcbiAgY2VsbEVsZW1zLmZvckVhY2goIGZ1bmN0aW9uKCBjZWxsRWxlbSApIHtcbiAgICB2YXIgbGF6eUNlbGxJbWFnZXMgPSBnZXRDZWxsTGF6eUltYWdlcyggY2VsbEVsZW0gKTtcbiAgICBsYXp5SW1hZ2VzID0gbGF6eUltYWdlcy5jb25jYXQoIGxhenlDZWxsSW1hZ2VzICk7XG4gIH0gKTtcbiAgLy8gbG9hZCBsYXp5IGltYWdlc1xuICBsYXp5SW1hZ2VzLmZvckVhY2goIGZ1bmN0aW9uKCBpbWcgKSB7XG4gICAgbmV3IExhenlMb2FkZXIoIGltZywgdGhpcyApO1xuICB9LCB0aGlzICk7XG59O1xuXG5mdW5jdGlvbiBnZXRDZWxsTGF6eUltYWdlcyggY2VsbEVsZW0gKSB7XG4gIC8vIGNoZWNrIGlmIGNlbGwgZWxlbWVudCBpcyBsYXp5IGltYWdlXG4gIGlmICggY2VsbEVsZW0ubm9kZU5hbWUgPT0gJ0lNRycgKSB7XG4gICAgdmFyIGxhenlsb2FkQXR0ciA9IGNlbGxFbGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1mbGlja2l0eS1sYXp5bG9hZCcpO1xuICAgIHZhciBzcmNBdHRyID0gY2VsbEVsZW0uZ2V0QXR0cmlidXRlKCdkYXRhLWZsaWNraXR5LWxhenlsb2FkLXNyYycpO1xuICAgIHZhciBzcmNzZXRBdHRyID0gY2VsbEVsZW0uZ2V0QXR0cmlidXRlKCdkYXRhLWZsaWNraXR5LWxhenlsb2FkLXNyY3NldCcpO1xuICAgIGlmICggbGF6eWxvYWRBdHRyIHx8IHNyY0F0dHIgfHwgc3Jjc2V0QXR0ciApIHtcbiAgICAgIHJldHVybiBbIGNlbGxFbGVtIF07XG4gICAgfVxuICB9XG4gIC8vIHNlbGVjdCBsYXp5IGltYWdlcyBpbiBjZWxsXG4gIHZhciBsYXp5U2VsZWN0b3IgPSAnaW1nW2RhdGEtZmxpY2tpdHktbGF6eWxvYWRdLCAnICtcbiAgICAnaW1nW2RhdGEtZmxpY2tpdHktbGF6eWxvYWQtc3JjXSwgaW1nW2RhdGEtZmxpY2tpdHktbGF6eWxvYWQtc3Jjc2V0XSc7XG4gIHZhciBpbWdzID0gY2VsbEVsZW0ucXVlcnlTZWxlY3RvckFsbCggbGF6eVNlbGVjdG9yICk7XG4gIHJldHVybiB1dGlscy5tYWtlQXJyYXkoIGltZ3MgKTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gTGF6eUxvYWRlciAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vKipcbiAqIGNsYXNzIHRvIGhhbmRsZSBsb2FkaW5nIGltYWdlc1xuICogQHBhcmFtIHtJbWFnZX0gaW1nIC0gSW1hZ2UgZWxlbWVudFxuICogQHBhcmFtIHtGbGlja2l0eX0gZmxpY2tpdHkgLSBGbGlja2l0eSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBMYXp5TG9hZGVyKCBpbWcsIGZsaWNraXR5ICkge1xuICB0aGlzLmltZyA9IGltZztcbiAgdGhpcy5mbGlja2l0eSA9IGZsaWNraXR5O1xuICB0aGlzLmxvYWQoKTtcbn1cblxuTGF6eUxvYWRlci5wcm90b3R5cGUuaGFuZGxlRXZlbnQgPSB1dGlscy5oYW5kbGVFdmVudDtcblxuTGF6eUxvYWRlci5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5pbWcuYWRkRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xuICAvLyBnZXQgc3JjICYgc3Jjc2V0XG4gIHZhciBzcmMgPSB0aGlzLmltZy5nZXRBdHRyaWJ1dGUoJ2RhdGEtZmxpY2tpdHktbGF6eWxvYWQnKSB8fFxuICAgIHRoaXMuaW1nLmdldEF0dHJpYnV0ZSgnZGF0YS1mbGlja2l0eS1sYXp5bG9hZC1zcmMnKTtcbiAgdmFyIHNyY3NldCA9IHRoaXMuaW1nLmdldEF0dHJpYnV0ZSgnZGF0YS1mbGlja2l0eS1sYXp5bG9hZC1zcmNzZXQnKTtcbiAgLy8gc2V0IHNyYyAmIHNlcnNldFxuICB0aGlzLmltZy5zcmMgPSBzcmM7XG4gIGlmICggc3Jjc2V0ICkge1xuICAgIHRoaXMuaW1nLnNldEF0dHJpYnV0ZSggJ3NyY3NldCcsIHNyY3NldCApO1xuICB9XG4gIC8vIHJlbW92ZSBhdHRyXG4gIHRoaXMuaW1nLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1mbGlja2l0eS1sYXp5bG9hZCcpO1xuICB0aGlzLmltZy5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtZmxpY2tpdHktbGF6eWxvYWQtc3JjJyk7XG4gIHRoaXMuaW1nLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1mbGlja2l0eS1sYXp5bG9hZC1zcmNzZXQnKTtcbn07XG5cbkxhenlMb2FkZXIucHJvdG90eXBlLm9ubG9hZCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy5jb21wbGV0ZSggZXZlbnQsICdmbGlja2l0eS1sYXp5bG9hZGVkJyApO1xufTtcblxuTGF6eUxvYWRlci5wcm90b3R5cGUub25lcnJvciA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy5jb21wbGV0ZSggZXZlbnQsICdmbGlja2l0eS1sYXp5ZXJyb3InICk7XG59O1xuXG5MYXp5TG9hZGVyLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uKCBldmVudCwgY2xhc3NOYW1lICkge1xuICAvLyB1bmJpbmQgZXZlbnRzXG4gIHRoaXMuaW1nLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLmltZy5yZW1vdmVFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG5cbiAgdmFyIGNlbGwgPSB0aGlzLmZsaWNraXR5LmdldFBhcmVudENlbGwoIHRoaXMuaW1nICk7XG4gIHZhciBjZWxsRWxlbSA9IGNlbGwgJiYgY2VsbC5lbGVtZW50O1xuICB0aGlzLmZsaWNraXR5LmNlbGxTaXplQ2hhbmdlKCBjZWxsRWxlbSApO1xuXG4gIHRoaXMuaW1nLmNsYXNzTGlzdC5hZGQoIGNsYXNzTmFtZSApO1xuICB0aGlzLmZsaWNraXR5LmRpc3BhdGNoRXZlbnQoICdsYXp5TG9hZCcsIGV2ZW50LCBjZWxsRWxlbSApO1xufTtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbkZsaWNraXR5LkxhenlMb2FkZXIgPSBMYXp5TG9hZGVyO1xuXG5yZXR1cm4gRmxpY2tpdHk7XG5cbn0gKSApO1xuXG59LHtcIi4vZmxpY2tpdHlcIjoxMyxcImZpenp5LXVpLXV0aWxzXCI6OH1dLDE2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8vIHBhZ2UgZG90c1xuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIFtcbiAgICAgICcuL2ZsaWNraXR5JyxcbiAgICAgICd1bmlwb2ludGVyL3VuaXBvaW50ZXInLFxuICAgICAgJ2Zpenp5LXVpLXV0aWxzL3V0aWxzJyxcbiAgICBdLCBmdW5jdGlvbiggRmxpY2tpdHksIFVuaXBvaW50ZXIsIHV0aWxzICkge1xuICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgRmxpY2tpdHksIFVuaXBvaW50ZXIsIHV0aWxzICk7XG4gICAgfSApO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgICB3aW5kb3csXG4gICAgICAgIHJlcXVpcmUoJy4vZmxpY2tpdHknKSxcbiAgICAgICAgcmVxdWlyZSgndW5pcG9pbnRlcicpLFxuICAgICAgICByZXF1aXJlKCdmaXp6eS11aS11dGlscycpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdyxcbiAgICAgICAgd2luZG93LkZsaWNraXR5LFxuICAgICAgICB3aW5kb3cuVW5pcG9pbnRlcixcbiAgICAgICAgd2luZG93LmZpenp5VUlVdGlsc1xuICAgICk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIEZsaWNraXR5LCBVbmlwb2ludGVyLCB1dGlscyApIHtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUGFnZURvdHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBQYWdlRG90cyggcGFyZW50ICkge1xuICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5fY3JlYXRlKCk7XG59XG5cblBhZ2VEb3RzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFVuaXBvaW50ZXIucHJvdG90eXBlICk7XG5cblBhZ2VEb3RzLnByb3RvdHlwZS5fY3JlYXRlID0gZnVuY3Rpb24oKSB7XG4gIC8vIGNyZWF0ZSBob2xkZXIgZWxlbWVudFxuICB0aGlzLmhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29sJyk7XG4gIHRoaXMuaG9sZGVyLmNsYXNzTmFtZSA9ICdmbGlja2l0eS1wYWdlLWRvdHMnO1xuICAvLyBjcmVhdGUgZG90cywgYXJyYXkgb2YgZWxlbWVudHNcbiAgdGhpcy5kb3RzID0gW107XG4gIC8vIGV2ZW50c1xuICB0aGlzLmhhbmRsZUNsaWNrID0gdGhpcy5vbkNsaWNrLmJpbmQoIHRoaXMgKTtcbiAgdGhpcy5vbiggJ3BvaW50ZXJEb3duJywgdGhpcy5wYXJlbnQuY2hpbGRVSVBvaW50ZXJEb3duLmJpbmQoIHRoaXMucGFyZW50ICkgKTtcbn07XG5cblBhZ2VEb3RzLnByb3RvdHlwZS5hY3RpdmF0ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnNldERvdHMoKTtcbiAgdGhpcy5ob2xkZXIuYWRkRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGljayApO1xuICB0aGlzLmJpbmRTdGFydEV2ZW50KCB0aGlzLmhvbGRlciApO1xuICAvLyBhZGQgdG8gRE9NXG4gIHRoaXMucGFyZW50LmVsZW1lbnQuYXBwZW5kQ2hpbGQoIHRoaXMuaG9sZGVyICk7XG59O1xuXG5QYWdlRG90cy5wcm90b3R5cGUuZGVhY3RpdmF0ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmhvbGRlci5yZW1vdmVFdmVudExpc3RlbmVyKCAnY2xpY2snLCB0aGlzLmhhbmRsZUNsaWNrICk7XG4gIHRoaXMudW5iaW5kU3RhcnRFdmVudCggdGhpcy5ob2xkZXIgKTtcbiAgLy8gcmVtb3ZlIGZyb20gRE9NXG4gIHRoaXMucGFyZW50LmVsZW1lbnQucmVtb3ZlQ2hpbGQoIHRoaXMuaG9sZGVyICk7XG59O1xuXG5QYWdlRG90cy5wcm90b3R5cGUuc2V0RG90cyA9IGZ1bmN0aW9uKCkge1xuICAvLyBnZXQgZGlmZmVyZW5jZSBiZXR3ZWVuIG51bWJlciBvZiBzbGlkZXMgYW5kIG51bWJlciBvZiBkb3RzXG4gIHZhciBkZWx0YSA9IHRoaXMucGFyZW50LnNsaWRlcy5sZW5ndGggLSB0aGlzLmRvdHMubGVuZ3RoO1xuICBpZiAoIGRlbHRhID4gMCApIHtcbiAgICB0aGlzLmFkZERvdHMoIGRlbHRhICk7XG4gIH0gZWxzZSBpZiAoIGRlbHRhIDwgMCApIHtcbiAgICB0aGlzLnJlbW92ZURvdHMoIC1kZWx0YSApO1xuICB9XG59O1xuXG5QYWdlRG90cy5wcm90b3R5cGUuYWRkRG90cyA9IGZ1bmN0aW9uKCBjb3VudCApIHtcbiAgdmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICB2YXIgbmV3RG90cyA9IFtdO1xuICB2YXIgbGVuZ3RoID0gdGhpcy5kb3RzLmxlbmd0aDtcbiAgdmFyIG1heCA9IGxlbmd0aCArIGNvdW50O1xuXG4gIGZvciAoIHZhciBpID0gbGVuZ3RoOyBpIDwgbWF4OyBpKysgKSB7XG4gICAgdmFyIGRvdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgZG90LmNsYXNzTmFtZSA9ICdkb3QnO1xuICAgIGRvdC5zZXRBdHRyaWJ1dGUoICdhcmlhLWxhYmVsJywgJ1BhZ2UgZG90ICcgKyAoIGkgKyAxICkgKTtcbiAgICBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG90ICk7XG4gICAgbmV3RG90cy5wdXNoKCBkb3QgKTtcbiAgfVxuXG4gIHRoaXMuaG9sZGVyLmFwcGVuZENoaWxkKCBmcmFnbWVudCApO1xuICB0aGlzLmRvdHMgPSB0aGlzLmRvdHMuY29uY2F0KCBuZXdEb3RzICk7XG59O1xuXG5QYWdlRG90cy5wcm90b3R5cGUucmVtb3ZlRG90cyA9IGZ1bmN0aW9uKCBjb3VudCApIHtcbiAgLy8gcmVtb3ZlIGZyb20gdGhpcy5kb3RzIGNvbGxlY3Rpb25cbiAgdmFyIHJlbW92ZURvdHMgPSB0aGlzLmRvdHMuc3BsaWNlKCB0aGlzLmRvdHMubGVuZ3RoIC0gY291bnQsIGNvdW50ICk7XG4gIC8vIHJlbW92ZSBmcm9tIERPTVxuICByZW1vdmVEb3RzLmZvckVhY2goIGZ1bmN0aW9uKCBkb3QgKSB7XG4gICAgdGhpcy5ob2xkZXIucmVtb3ZlQ2hpbGQoIGRvdCApO1xuICB9LCB0aGlzICk7XG59O1xuXG5QYWdlRG90cy5wcm90b3R5cGUudXBkYXRlU2VsZWN0ZWQgPSBmdW5jdGlvbigpIHtcbiAgLy8gcmVtb3ZlIHNlbGVjdGVkIGNsYXNzIG9uIHByZXZpb3VzXG4gIGlmICggdGhpcy5zZWxlY3RlZERvdCApIHtcbiAgICB0aGlzLnNlbGVjdGVkRG90LmNsYXNzTmFtZSA9ICdkb3QnO1xuICAgIHRoaXMuc2VsZWN0ZWREb3QucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWN1cnJlbnQnKTtcbiAgfVxuICAvLyBkb24ndCBwcm9jZWVkIGlmIG5vIGRvdHNcbiAgaWYgKCAhdGhpcy5kb3RzLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5zZWxlY3RlZERvdCA9IHRoaXMuZG90c1sgdGhpcy5wYXJlbnQuc2VsZWN0ZWRJbmRleCBdO1xuICB0aGlzLnNlbGVjdGVkRG90LmNsYXNzTmFtZSA9ICdkb3QgaXMtc2VsZWN0ZWQnO1xuICB0aGlzLnNlbGVjdGVkRG90LnNldEF0dHJpYnV0ZSggJ2FyaWEtY3VycmVudCcsICdzdGVwJyApO1xufTtcblxuUGFnZURvdHMucHJvdG90eXBlLm9uVGFwID0gLy8gb2xkIG1ldGhvZCBuYW1lLCBiYWNrd2FyZHMtY29tcGF0aWJsZVxuUGFnZURvdHMucHJvdG90eXBlLm9uQ2xpY2sgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gIC8vIG9ubHkgY2FyZSBhYm91dCBkb3QgY2xpY2tzXG4gIGlmICggdGFyZ2V0Lm5vZGVOYW1lICE9ICdMSScgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5wYXJlbnQudWlDaGFuZ2UoKTtcbiAgdmFyIGluZGV4ID0gdGhpcy5kb3RzLmluZGV4T2YoIHRhcmdldCApO1xuICB0aGlzLnBhcmVudC5zZWxlY3QoIGluZGV4ICk7XG59O1xuXG5QYWdlRG90cy5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmRlYWN0aXZhdGUoKTtcbiAgdGhpcy5hbGxPZmYoKTtcbn07XG5cbkZsaWNraXR5LlBhZ2VEb3RzID0gUGFnZURvdHM7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEZsaWNraXR5IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnV0aWxzLmV4dGVuZCggRmxpY2tpdHkuZGVmYXVsdHMsIHtcbiAgcGFnZURvdHM6IHRydWUsXG59ICk7XG5cbkZsaWNraXR5LmNyZWF0ZU1ldGhvZHMucHVzaCgnX2NyZWF0ZVBhZ2VEb3RzJyk7XG5cbnZhciBwcm90byA9IEZsaWNraXR5LnByb3RvdHlwZTtcblxucHJvdG8uX2NyZWF0ZVBhZ2VEb3RzID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMub3B0aW9ucy5wYWdlRG90cyApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5wYWdlRG90cyA9IG5ldyBQYWdlRG90cyggdGhpcyApO1xuICAvLyBldmVudHNcbiAgdGhpcy5vbiggJ2FjdGl2YXRlJywgdGhpcy5hY3RpdmF0ZVBhZ2VEb3RzICk7XG4gIHRoaXMub24oICdzZWxlY3QnLCB0aGlzLnVwZGF0ZVNlbGVjdGVkUGFnZURvdHMgKTtcbiAgdGhpcy5vbiggJ2NlbGxDaGFuZ2UnLCB0aGlzLnVwZGF0ZVBhZ2VEb3RzICk7XG4gIHRoaXMub24oICdyZXNpemUnLCB0aGlzLnVwZGF0ZVBhZ2VEb3RzICk7XG4gIHRoaXMub24oICdkZWFjdGl2YXRlJywgdGhpcy5kZWFjdGl2YXRlUGFnZURvdHMgKTtcbn07XG5cbnByb3RvLmFjdGl2YXRlUGFnZURvdHMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wYWdlRG90cy5hY3RpdmF0ZSgpO1xufTtcblxucHJvdG8udXBkYXRlU2VsZWN0ZWRQYWdlRG90cyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBhZ2VEb3RzLnVwZGF0ZVNlbGVjdGVkKCk7XG59O1xuXG5wcm90by51cGRhdGVQYWdlRG90cyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBhZ2VEb3RzLnNldERvdHMoKTtcbn07XG5cbnByb3RvLmRlYWN0aXZhdGVQYWdlRG90cyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBhZ2VEb3RzLmRlYWN0aXZhdGUoKTtcbn07XG5cbi8vIC0tLS0tICAtLS0tLSAvL1xuXG5GbGlja2l0eS5QYWdlRG90cyA9IFBhZ2VEb3RzO1xuXG5yZXR1cm4gRmxpY2tpdHk7XG5cbn0gKSApO1xuXG59LHtcIi4vZmxpY2tpdHlcIjoxMyxcImZpenp5LXVpLXV0aWxzXCI6OCxcInVuaXBvaW50ZXJcIjo0MH1dLDE3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8vIHBsYXllciAmIGF1dG9QbGF5XG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggW1xuICAgICAgJ2V2LWVtaXR0ZXIvZXYtZW1pdHRlcicsXG4gICAgICAnZml6enktdWktdXRpbHMvdXRpbHMnLFxuICAgICAgJy4vZmxpY2tpdHknLFxuICAgIF0sIGZ1bmN0aW9uKCBFdkVtaXR0ZXIsIHV0aWxzLCBGbGlja2l0eSApIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KCBFdkVtaXR0ZXIsIHV0aWxzLCBGbGlja2l0eSApO1xuICAgIH0gKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgICAgcmVxdWlyZSgnZXYtZW1pdHRlcicpLFxuICAgICAgICByZXF1aXJlKCdmaXp6eS11aS11dGlscycpLFxuICAgICAgICByZXF1aXJlKCcuL2ZsaWNraXR5JylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgZmFjdG9yeShcbiAgICAgICAgd2luZG93LkV2RW1pdHRlcixcbiAgICAgICAgd2luZG93LmZpenp5VUlVdGlscyxcbiAgICAgICAgd2luZG93LkZsaWNraXR5XG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIEV2RW1pdHRlciwgdXRpbHMsIEZsaWNraXR5ICkge1xuXG4ndXNlIHN0cmljdCc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFBsYXllciAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5mdW5jdGlvbiBQbGF5ZXIoIHBhcmVudCApIHtcbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMuc3RhdGUgPSAnc3RvcHBlZCc7XG4gIC8vIHZpc2liaWxpdHkgY2hhbmdlIGV2ZW50IGhhbmRsZXJcbiAgdGhpcy5vblZpc2liaWxpdHlDaGFuZ2UgPSB0aGlzLnZpc2liaWxpdHlDaGFuZ2UuYmluZCggdGhpcyApO1xuICB0aGlzLm9uVmlzaWJpbGl0eVBsYXkgPSB0aGlzLnZpc2liaWxpdHlQbGF5LmJpbmQoIHRoaXMgKTtcbn1cblxuUGxheWVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEV2RW1pdHRlci5wcm90b3R5cGUgKTtcblxuLy8gc3RhcnQgcGxheVxuUGxheWVyLnByb3RvdHlwZS5wbGF5ID0gZnVuY3Rpb24oKSB7XG4gIGlmICggdGhpcy5zdGF0ZSA9PSAncGxheWluZycgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGRvIG5vdCBwbGF5IGlmIHBhZ2UgaXMgaGlkZGVuLCBzdGFydCBwbGF5aW5nIHdoZW4gcGFnZSBpcyB2aXNpYmxlXG4gIHZhciBpc1BhZ2VIaWRkZW4gPSBkb2N1bWVudC5oaWRkZW47XG4gIGlmICggaXNQYWdlSGlkZGVuICkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoICd2aXNpYmlsaXR5Y2hhbmdlJywgdGhpcy5vblZpc2liaWxpdHlQbGF5ICk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5zdGF0ZSA9ICdwbGF5aW5nJztcbiAgLy8gbGlzdGVuIHRvIHZpc2liaWxpdHkgY2hhbmdlXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoICd2aXNpYmlsaXR5Y2hhbmdlJywgdGhpcy5vblZpc2liaWxpdHlDaGFuZ2UgKTtcbiAgLy8gc3RhcnQgdGlja2luZ1xuICB0aGlzLnRpY2soKTtcbn07XG5cblBsYXllci5wcm90b3R5cGUudGljayA9IGZ1bmN0aW9uKCkge1xuICAvLyBkbyBub3QgdGljayBpZiBub3QgcGxheWluZ1xuICBpZiAoIHRoaXMuc3RhdGUgIT0gJ3BsYXlpbmcnICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB0aW1lID0gdGhpcy5wYXJlbnQub3B0aW9ucy5hdXRvUGxheTtcbiAgLy8gZGVmYXVsdCB0byAzIHNlY29uZHNcbiAgdGltZSA9IHR5cGVvZiB0aW1lID09ICdudW1iZXInID8gdGltZSA6IDMwMDA7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG4gIC8vIEhBQ0s6IHJlc2V0IHRpY2tzIGlmIHN0b3BwZWQgYW5kIHN0YXJ0ZWQgd2l0aGluIGludGVydmFsXG4gIHRoaXMuY2xlYXIoKTtcbiAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgX3RoaXMucGFyZW50Lm5leHQoIHRydWUgKTtcbiAgICBfdGhpcy50aWNrKCk7XG4gIH0sIHRpbWUgKTtcbn07XG5cblBsYXllci5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnN0YXRlID0gJ3N0b3BwZWQnO1xuICB0aGlzLmNsZWFyKCk7XG4gIC8vIHJlbW92ZSB2aXNpYmlsaXR5IGNoYW5nZSBldmVudFxuICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAndmlzaWJpbGl0eWNoYW5nZScsIHRoaXMub25WaXNpYmlsaXR5Q2hhbmdlICk7XG59O1xuXG5QbGF5ZXIucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gIGNsZWFyVGltZW91dCggdGhpcy50aW1lb3V0ICk7XG59O1xuXG5QbGF5ZXIucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gIGlmICggdGhpcy5zdGF0ZSA9PSAncGxheWluZycgKSB7XG4gICAgdGhpcy5zdGF0ZSA9ICdwYXVzZWQnO1xuICAgIHRoaXMuY2xlYXIoKTtcbiAgfVxufTtcblxuUGxheWVyLnByb3RvdHlwZS51bnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gIC8vIHJlLXN0YXJ0IHBsYXkgaWYgcGF1c2VkXG4gIGlmICggdGhpcy5zdGF0ZSA9PSAncGF1c2VkJyApIHtcbiAgICB0aGlzLnBsYXkoKTtcbiAgfVxufTtcblxuLy8gcGF1c2UgaWYgcGFnZSB2aXNpYmlsaXR5IGlzIGhpZGRlbiwgdW5wYXVzZSBpZiB2aXNpYmxlXG5QbGF5ZXIucHJvdG90eXBlLnZpc2liaWxpdHlDaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGlzUGFnZUhpZGRlbiA9IGRvY3VtZW50LmhpZGRlbjtcbiAgdGhpc1sgaXNQYWdlSGlkZGVuID8gJ3BhdXNlJyA6ICd1bnBhdXNlJyBdKCk7XG59O1xuXG5QbGF5ZXIucHJvdG90eXBlLnZpc2liaWxpdHlQbGF5ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGxheSgpO1xuICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAndmlzaWJpbGl0eWNoYW5nZScsIHRoaXMub25WaXNpYmlsaXR5UGxheSApO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRmxpY2tpdHkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxudXRpbHMuZXh0ZW5kKCBGbGlja2l0eS5kZWZhdWx0cywge1xuICBwYXVzZUF1dG9QbGF5T25Ib3ZlcjogdHJ1ZSxcbn0gKTtcblxuRmxpY2tpdHkuY3JlYXRlTWV0aG9kcy5wdXNoKCdfY3JlYXRlUGxheWVyJyk7XG52YXIgcHJvdG8gPSBGbGlja2l0eS5wcm90b3R5cGU7XG5cbnByb3RvLl9jcmVhdGVQbGF5ZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wbGF5ZXIgPSBuZXcgUGxheWVyKCB0aGlzICk7XG5cbiAgdGhpcy5vbiggJ2FjdGl2YXRlJywgdGhpcy5hY3RpdmF0ZVBsYXllciApO1xuICB0aGlzLm9uKCAndWlDaGFuZ2UnLCB0aGlzLnN0b3BQbGF5ZXIgKTtcbiAgdGhpcy5vbiggJ3BvaW50ZXJEb3duJywgdGhpcy5zdG9wUGxheWVyICk7XG4gIHRoaXMub24oICdkZWFjdGl2YXRlJywgdGhpcy5kZWFjdGl2YXRlUGxheWVyICk7XG59O1xuXG5wcm90by5hY3RpdmF0ZVBsYXllciA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLm9wdGlvbnMuYXV0b1BsYXkgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMucGxheWVyLnBsYXkoKTtcbiAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdtb3VzZWVudGVyJywgdGhpcyApO1xufTtcblxuLy8gUGxheWVyIEFQSSwgZG9uJ3QgaGF0ZSB0aGUgLi4uIHRoYW5rcyBJIGtub3cgd2hlcmUgdGhlIGRvb3IgaXNcblxucHJvdG8ucGxheVBsYXllciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBsYXllci5wbGF5KCk7XG59O1xuXG5wcm90by5zdG9wUGxheWVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGxheWVyLnN0b3AoKTtcbn07XG5cbnByb3RvLnBhdXNlUGxheWVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGxheWVyLnBhdXNlKCk7XG59O1xuXG5wcm90by51bnBhdXNlUGxheWVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGxheWVyLnVucGF1c2UoKTtcbn07XG5cbnByb3RvLmRlYWN0aXZhdGVQbGF5ZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wbGF5ZXIuc3RvcCgpO1xuICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ21vdXNlZW50ZXInLCB0aGlzICk7XG59O1xuXG4vLyAtLS0tLSBtb3VzZWVudGVyL2xlYXZlIC0tLS0tIC8vXG5cbi8vIHBhdXNlIGF1dG8tcGxheSBvbiBob3ZlclxucHJvdG8ub25tb3VzZWVudGVyID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMub3B0aW9ucy5wYXVzZUF1dG9QbGF5T25Ib3ZlciApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5wbGF5ZXIucGF1c2UoKTtcbiAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdtb3VzZWxlYXZlJywgdGhpcyApO1xufTtcblxuLy8gcmVzdW1lIGF1dG8tcGxheSBvbiBob3ZlciBvZmZcbnByb3RvLm9ubW91c2VsZWF2ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBsYXllci51bnBhdXNlKCk7XG4gIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAnbW91c2VsZWF2ZScsIHRoaXMgKTtcbn07XG5cbi8vIC0tLS0tICAtLS0tLSAvL1xuXG5GbGlja2l0eS5QbGF5ZXIgPSBQbGF5ZXI7XG5cbnJldHVybiBGbGlja2l0eTtcblxufSApICk7XG5cbn0se1wiLi9mbGlja2l0eVwiOjEzLFwiZXYtZW1pdHRlclwiOjcsXCJmaXp6eS11aS11dGlsc1wiOjh9XSwxODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vLyBwcmV2L25leHQgYnV0dG9uc1xuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIFtcbiAgICAgICcuL2ZsaWNraXR5JyxcbiAgICAgICd1bmlwb2ludGVyL3VuaXBvaW50ZXInLFxuICAgICAgJ2Zpenp5LXVpLXV0aWxzL3V0aWxzJyxcbiAgICBdLCBmdW5jdGlvbiggRmxpY2tpdHksIFVuaXBvaW50ZXIsIHV0aWxzICkge1xuICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgRmxpY2tpdHksIFVuaXBvaW50ZXIsIHV0aWxzICk7XG4gICAgfSApO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgICB3aW5kb3csXG4gICAgICAgIHJlcXVpcmUoJy4vZmxpY2tpdHknKSxcbiAgICAgICAgcmVxdWlyZSgndW5pcG9pbnRlcicpLFxuICAgICAgICByZXF1aXJlKCdmaXp6eS11aS11dGlscycpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdyxcbiAgICAgICAgd2luZG93LkZsaWNraXR5LFxuICAgICAgICB3aW5kb3cuVW5pcG9pbnRlcixcbiAgICAgICAgd2luZG93LmZpenp5VUlVdGlsc1xuICAgICk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIEZsaWNraXR5LCBVbmlwb2ludGVyLCB1dGlscyApIHtcbid1c2Ugc3RyaWN0JztcblxudmFyIHN2Z1VSSSA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFByZXZOZXh0QnV0dG9uIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmZ1bmN0aW9uIFByZXZOZXh0QnV0dG9uKCBkaXJlY3Rpb24sIHBhcmVudCApIHtcbiAgdGhpcy5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICB0aGlzLl9jcmVhdGUoKTtcbn1cblxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggVW5pcG9pbnRlci5wcm90b3R5cGUgKTtcblxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlLl9jcmVhdGUgPSBmdW5jdGlvbigpIHtcbiAgLy8gcHJvcGVydGllc1xuICB0aGlzLmlzRW5hYmxlZCA9IHRydWU7XG4gIHRoaXMuaXNQcmV2aW91cyA9IHRoaXMuZGlyZWN0aW9uID09IC0xO1xuICB2YXIgbGVmdERpcmVjdGlvbiA9IHRoaXMucGFyZW50Lm9wdGlvbnMucmlnaHRUb0xlZnQgPyAxIDogLTE7XG4gIHRoaXMuaXNMZWZ0ID0gdGhpcy5kaXJlY3Rpb24gPT0gbGVmdERpcmVjdGlvbjtcblxuICB2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICBlbGVtZW50LmNsYXNzTmFtZSA9ICdmbGlja2l0eS1idXR0b24gZmxpY2tpdHktcHJldi1uZXh0LWJ1dHRvbic7XG4gIGVsZW1lbnQuY2xhc3NOYW1lICs9IHRoaXMuaXNQcmV2aW91cyA/ICcgcHJldmlvdXMnIDogJyBuZXh0JztcbiAgLy8gcHJldmVudCBidXR0b24gZnJvbSBzdWJtaXR0aW5nIGZvcm0gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTA4MzYwNzYvMTgyMTgzXG4gIGVsZW1lbnQuc2V0QXR0cmlidXRlKCAndHlwZScsICdidXR0b24nICk7XG4gIC8vIGluaXQgYXMgZGlzYWJsZWRcbiAgdGhpcy5kaXNhYmxlKCk7XG5cbiAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoICdhcmlhLWxhYmVsJywgdGhpcy5pc1ByZXZpb3VzID8gJ1ByZXZpb3VzJyA6ICdOZXh0JyApO1xuXG4gIC8vIGNyZWF0ZSBhcnJvd1xuICB2YXIgc3ZnID0gdGhpcy5jcmVhdGVTVkcoKTtcbiAgZWxlbWVudC5hcHBlbmRDaGlsZCggc3ZnICk7XG4gIC8vIGV2ZW50c1xuICB0aGlzLnBhcmVudC5vbiggJ3NlbGVjdCcsIHRoaXMudXBkYXRlLmJpbmQoIHRoaXMgKSApO1xuICB0aGlzLm9uKCAncG9pbnRlckRvd24nLCB0aGlzLnBhcmVudC5jaGlsZFVJUG9pbnRlckRvd24uYmluZCggdGhpcy5wYXJlbnQgKSApO1xufTtcblxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuYmluZFN0YXJ0RXZlbnQoIHRoaXMuZWxlbWVudCApO1xuICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgdGhpcyApO1xuICAvLyBhZGQgdG8gRE9NXG4gIHRoaXMucGFyZW50LmVsZW1lbnQuYXBwZW5kQ2hpbGQoIHRoaXMuZWxlbWVudCApO1xufTtcblxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlLmRlYWN0aXZhdGUgPSBmdW5jdGlvbigpIHtcbiAgLy8gcmVtb3ZlIGZyb20gRE9NXG4gIHRoaXMucGFyZW50LmVsZW1lbnQucmVtb3ZlQ2hpbGQoIHRoaXMuZWxlbWVudCApO1xuICAvLyBjbGljayBldmVudHNcbiAgdGhpcy51bmJpbmRTdGFydEV2ZW50KCB0aGlzLmVsZW1lbnQgKTtcbiAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdjbGljaycsIHRoaXMgKTtcbn07XG5cblByZXZOZXh0QnV0dG9uLnByb3RvdHlwZS5jcmVhdGVTVkcgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyggc3ZnVVJJLCAnc3ZnJyApO1xuICBzdmcuc2V0QXR0cmlidXRlKCAnY2xhc3MnLCAnZmxpY2tpdHktYnV0dG9uLWljb24nICk7XG4gIHN2Zy5zZXRBdHRyaWJ1dGUoICd2aWV3Qm94JywgJzAgMCAxMDAgMTAwJyApO1xuICB2YXIgcGF0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyggc3ZnVVJJLCAncGF0aCcgKTtcbiAgdmFyIHBhdGhNb3ZlbWVudHMgPSBnZXRBcnJvd01vdmVtZW50cyggdGhpcy5wYXJlbnQub3B0aW9ucy5hcnJvd1NoYXBlICk7XG4gIHBhdGguc2V0QXR0cmlidXRlKCAnZCcsIHBhdGhNb3ZlbWVudHMgKTtcbiAgcGF0aC5zZXRBdHRyaWJ1dGUoICdjbGFzcycsICdhcnJvdycgKTtcbiAgLy8gcm90YXRlIGFycm93XG4gIGlmICggIXRoaXMuaXNMZWZ0ICkge1xuICAgIHBhdGguc2V0QXR0cmlidXRlKCAndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgxMDAsIDEwMCkgcm90YXRlKDE4MCkgJyApO1xuICB9XG4gIHN2Zy5hcHBlbmRDaGlsZCggcGF0aCApO1xuICByZXR1cm4gc3ZnO1xufTtcblxuLy8gZ2V0IFNWRyBwYXRoIG1vdm1lbWVudFxuZnVuY3Rpb24gZ2V0QXJyb3dNb3ZlbWVudHMoIHNoYXBlICkge1xuICAvLyB1c2Ugc2hhcGUgYXMgbW92ZW1lbnQgaWYgc3RyaW5nXG4gIGlmICggdHlwZW9mIHNoYXBlID09ICdzdHJpbmcnICkge1xuICAgIHJldHVybiBzaGFwZTtcbiAgfVxuICAvLyBjcmVhdGUgbW92ZW1lbnQgc3RyaW5nXG4gIHJldHVybiAnTSAnICsgc2hhcGUueDAgKyAnLDUwJyArXG4gICAgJyBMICcgKyBzaGFwZS54MSArICcsJyArICggc2hhcGUueTEgKyA1MCApICtcbiAgICAnIEwgJyArIHNoYXBlLngyICsgJywnICsgKCBzaGFwZS55MiArIDUwICkgK1xuICAgICcgTCAnICsgc2hhcGUueDMgKyAnLDUwICcgK1xuICAgICcgTCAnICsgc2hhcGUueDIgKyAnLCcgKyAoIDUwIC0gc2hhcGUueTIgKSArXG4gICAgJyBMICcgKyBzaGFwZS54MSArICcsJyArICggNTAgLSBzaGFwZS55MSApICtcbiAgICAnIFonO1xufVxuXG5QcmV2TmV4dEJ1dHRvbi5wcm90b3R5cGUuaGFuZGxlRXZlbnQgPSB1dGlscy5oYW5kbGVFdmVudDtcblxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlLm9uY2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5pc0VuYWJsZWQgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMucGFyZW50LnVpQ2hhbmdlKCk7XG4gIHZhciBtZXRob2QgPSB0aGlzLmlzUHJldmlvdXMgPyAncHJldmlvdXMnIDogJ25leHQnO1xuICB0aGlzLnBhcmVudFsgbWV0aG9kIF0oKTtcbn07XG5cbi8vIC0tLS0tICAtLS0tLSAvL1xuXG5QcmV2TmV4dEJ1dHRvbi5wcm90b3R5cGUuZW5hYmxlID0gZnVuY3Rpb24oKSB7XG4gIGlmICggdGhpcy5pc0VuYWJsZWQgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMuZWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlO1xuICB0aGlzLmlzRW5hYmxlZCA9IHRydWU7XG59O1xuXG5QcmV2TmV4dEJ1dHRvbi5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLmlzRW5hYmxlZCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5lbGVtZW50LmRpc2FibGVkID0gdHJ1ZTtcbiAgdGhpcy5pc0VuYWJsZWQgPSBmYWxzZTtcbn07XG5cblByZXZOZXh0QnV0dG9uLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcbiAgLy8gaW5kZXggb2YgZmlyc3Qgb3IgbGFzdCBzbGlkZSwgaWYgcHJldmlvdXMgb3IgbmV4dFxuICB2YXIgc2xpZGVzID0gdGhpcy5wYXJlbnQuc2xpZGVzO1xuICAvLyBlbmFibGUgaXMgd3JhcEFyb3VuZCBhbmQgYXQgbGVhc3QgMiBzbGlkZXNcbiAgaWYgKCB0aGlzLnBhcmVudC5vcHRpb25zLndyYXBBcm91bmQgJiYgc2xpZGVzLmxlbmd0aCA+IDEgKSB7XG4gICAgdGhpcy5lbmFibGUoKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IHNsaWRlcy5sZW5ndGggPyBzbGlkZXMubGVuZ3RoIC0gMSA6IDA7XG4gIHZhciBib3VuZEluZGV4ID0gdGhpcy5pc1ByZXZpb3VzID8gMCA6IGxhc3RJbmRleDtcbiAgdmFyIG1ldGhvZCA9IHRoaXMucGFyZW50LnNlbGVjdGVkSW5kZXggPT0gYm91bmRJbmRleCA/ICdkaXNhYmxlJyA6ICdlbmFibGUnO1xuICB0aGlzWyBtZXRob2QgXSgpO1xufTtcblxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5kZWFjdGl2YXRlKCk7XG4gIHRoaXMuYWxsT2ZmKCk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBGbGlja2l0eSBwcm90b3R5cGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxudXRpbHMuZXh0ZW5kKCBGbGlja2l0eS5kZWZhdWx0cywge1xuICBwcmV2TmV4dEJ1dHRvbnM6IHRydWUsXG4gIGFycm93U2hhcGU6IHtcbiAgICB4MDogMTAsXG4gICAgeDE6IDYwLCB5MTogNTAsXG4gICAgeDI6IDcwLCB5MjogNDAsXG4gICAgeDM6IDMwLFxuICB9LFxufSApO1xuXG5GbGlja2l0eS5jcmVhdGVNZXRob2RzLnB1c2goJ19jcmVhdGVQcmV2TmV4dEJ1dHRvbnMnKTtcbnZhciBwcm90byA9IEZsaWNraXR5LnByb3RvdHlwZTtcblxucHJvdG8uX2NyZWF0ZVByZXZOZXh0QnV0dG9ucyA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLm9wdGlvbnMucHJldk5leHRCdXR0b25zICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMucHJldkJ1dHRvbiA9IG5ldyBQcmV2TmV4dEJ1dHRvbiggLTEsIHRoaXMgKTtcbiAgdGhpcy5uZXh0QnV0dG9uID0gbmV3IFByZXZOZXh0QnV0dG9uKCAxLCB0aGlzICk7XG5cbiAgdGhpcy5vbiggJ2FjdGl2YXRlJywgdGhpcy5hY3RpdmF0ZVByZXZOZXh0QnV0dG9ucyApO1xufTtcblxucHJvdG8uYWN0aXZhdGVQcmV2TmV4dEJ1dHRvbnMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wcmV2QnV0dG9uLmFjdGl2YXRlKCk7XG4gIHRoaXMubmV4dEJ1dHRvbi5hY3RpdmF0ZSgpO1xuICB0aGlzLm9uKCAnZGVhY3RpdmF0ZScsIHRoaXMuZGVhY3RpdmF0ZVByZXZOZXh0QnV0dG9ucyApO1xufTtcblxucHJvdG8uZGVhY3RpdmF0ZVByZXZOZXh0QnV0dG9ucyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnByZXZCdXR0b24uZGVhY3RpdmF0ZSgpO1xuICB0aGlzLm5leHRCdXR0b24uZGVhY3RpdmF0ZSgpO1xuICB0aGlzLm9mZiggJ2RlYWN0aXZhdGUnLCB0aGlzLmRlYWN0aXZhdGVQcmV2TmV4dEJ1dHRvbnMgKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5GbGlja2l0eS5QcmV2TmV4dEJ1dHRvbiA9IFByZXZOZXh0QnV0dG9uO1xuXG5yZXR1cm4gRmxpY2tpdHk7XG5cbn0gKSApO1xuXG59LHtcIi4vZmxpY2tpdHlcIjoxMyxcImZpenp5LXVpLXV0aWxzXCI6OCxcInVuaXBvaW50ZXJcIjo0MH1dLDE5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8vIHNsaWRlXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggZmFjdG9yeSApO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuRmxpY2tpdHkgPSB3aW5kb3cuRmxpY2tpdHkgfHwge307XG4gICAgd2luZG93LkZsaWNraXR5LlNsaWRlID0gZmFjdG9yeSgpO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSgpIHtcbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gU2xpZGUoIHBhcmVudCApIHtcbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMuaXNPcmlnaW5MZWZ0ID0gcGFyZW50Lm9yaWdpblNpZGUgPT0gJ2xlZnQnO1xuICB0aGlzLmNlbGxzID0gW107XG4gIHRoaXMub3V0ZXJXaWR0aCA9IDA7XG4gIHRoaXMuaGVpZ2h0ID0gMDtcbn1cblxudmFyIHByb3RvID0gU2xpZGUucHJvdG90eXBlO1xuXG5wcm90by5hZGRDZWxsID0gZnVuY3Rpb24oIGNlbGwgKSB7XG4gIHRoaXMuY2VsbHMucHVzaCggY2VsbCApO1xuICB0aGlzLm91dGVyV2lkdGggKz0gY2VsbC5zaXplLm91dGVyV2lkdGg7XG4gIHRoaXMuaGVpZ2h0ID0gTWF0aC5tYXgoIGNlbGwuc2l6ZS5vdXRlckhlaWdodCwgdGhpcy5oZWlnaHQgKTtcbiAgLy8gZmlyc3QgY2VsbCBzdHVmZlxuICBpZiAoIHRoaXMuY2VsbHMubGVuZ3RoID09IDEgKSB7XG4gICAgdGhpcy54ID0gY2VsbC54OyAvLyB4IGNvbWVzIGZyb20gZmlyc3QgY2VsbFxuICAgIHZhciBiZWdpbk1hcmdpbiA9IHRoaXMuaXNPcmlnaW5MZWZ0ID8gJ21hcmdpbkxlZnQnIDogJ21hcmdpblJpZ2h0JztcbiAgICB0aGlzLmZpcnN0TWFyZ2luID0gY2VsbC5zaXplWyBiZWdpbk1hcmdpbiBdO1xuICB9XG59O1xuXG5wcm90by51cGRhdGVUYXJnZXQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGVuZE1hcmdpbiA9IHRoaXMuaXNPcmlnaW5MZWZ0ID8gJ21hcmdpblJpZ2h0JyA6ICdtYXJnaW5MZWZ0JztcbiAgdmFyIGxhc3RDZWxsID0gdGhpcy5nZXRMYXN0Q2VsbCgpO1xuICB2YXIgbGFzdE1hcmdpbiA9IGxhc3RDZWxsID8gbGFzdENlbGwuc2l6ZVsgZW5kTWFyZ2luIF0gOiAwO1xuICB2YXIgc2xpZGVXaWR0aCA9IHRoaXMub3V0ZXJXaWR0aCAtICggdGhpcy5maXJzdE1hcmdpbiArIGxhc3RNYXJnaW4gKTtcbiAgdGhpcy50YXJnZXQgPSB0aGlzLnggKyB0aGlzLmZpcnN0TWFyZ2luICsgc2xpZGVXaWR0aCAqIHRoaXMucGFyZW50LmNlbGxBbGlnbjtcbn07XG5cbnByb3RvLmdldExhc3RDZWxsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmNlbGxzWyB0aGlzLmNlbGxzLmxlbmd0aCAtIDEgXTtcbn07XG5cbnByb3RvLnNlbGVjdCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmNlbGxzLmZvckVhY2goIGZ1bmN0aW9uKCBjZWxsICkge1xuICAgIGNlbGwuc2VsZWN0KCk7XG4gIH0gKTtcbn07XG5cbnByb3RvLnVuc2VsZWN0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY2VsbHMuZm9yRWFjaCggZnVuY3Rpb24oIGNlbGwgKSB7XG4gICAgY2VsbC51bnNlbGVjdCgpO1xuICB9ICk7XG59O1xuXG5wcm90by5nZXRDZWxsRWxlbWVudHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuY2VsbHMubWFwKCBmdW5jdGlvbiggY2VsbCApIHtcbiAgICByZXR1cm4gY2VsbC5lbGVtZW50O1xuICB9ICk7XG59O1xuXG5yZXR1cm4gU2xpZGU7XG5cbn0gKSApO1xuXG59LHt9XSwyMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKiFcbiAqIGdldFNpemUgdjIuMC4zXG4gKiBtZWFzdXJlIHNpemUgb2YgZWxlbWVudHNcbiAqIE1JVCBsaWNlbnNlXG4gKi9cblxuLyoganNoaW50IGJyb3dzZXI6IHRydWUsIHN0cmljdDogdHJ1ZSwgdW5kZWY6IHRydWUsIHVudXNlZDogdHJ1ZSAqL1xuLyogZ2xvYmFscyBjb25zb2xlOiBmYWxzZSAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8qIGpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qIGdsb2JhbHMgZGVmaW5lLCBtb2R1bGUgKi9cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIGZhY3RvcnkgKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LmdldFNpemUgPSBmYWN0b3J5KCk7XG4gIH1cblxufSkoIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSgpIHtcbid1c2Ugc3RyaWN0JztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaGVscGVycyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vLyBnZXQgYSBudW1iZXIgZnJvbSBhIHN0cmluZywgbm90IGEgcGVyY2VudGFnZVxuZnVuY3Rpb24gZ2V0U3R5bGVTaXplKCB2YWx1ZSApIHtcbiAgdmFyIG51bSA9IHBhcnNlRmxvYXQoIHZhbHVlICk7XG4gIC8vIG5vdCBhIHBlcmNlbnQgbGlrZSAnMTAwJScsIGFuZCBhIG51bWJlclxuICB2YXIgaXNWYWxpZCA9IHZhbHVlLmluZGV4T2YoJyUnKSA9PSAtMSAmJiAhaXNOYU4oIG51bSApO1xuICByZXR1cm4gaXNWYWxpZCAmJiBudW07XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG52YXIgbG9nRXJyb3IgPSB0eXBlb2YgY29uc29sZSA9PSAndW5kZWZpbmVkJyA/IG5vb3AgOlxuICBmdW5jdGlvbiggbWVzc2FnZSApIHtcbiAgICBjb25zb2xlLmVycm9yKCBtZXNzYWdlICk7XG4gIH07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIG1lYXN1cmVtZW50cyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG52YXIgbWVhc3VyZW1lbnRzID0gW1xuICAncGFkZGluZ0xlZnQnLFxuICAncGFkZGluZ1JpZ2h0JyxcbiAgJ3BhZGRpbmdUb3AnLFxuICAncGFkZGluZ0JvdHRvbScsXG4gICdtYXJnaW5MZWZ0JyxcbiAgJ21hcmdpblJpZ2h0JyxcbiAgJ21hcmdpblRvcCcsXG4gICdtYXJnaW5Cb3R0b20nLFxuICAnYm9yZGVyTGVmdFdpZHRoJyxcbiAgJ2JvcmRlclJpZ2h0V2lkdGgnLFxuICAnYm9yZGVyVG9wV2lkdGgnLFxuICAnYm9yZGVyQm90dG9tV2lkdGgnXG5dO1xuXG52YXIgbWVhc3VyZW1lbnRzTGVuZ3RoID0gbWVhc3VyZW1lbnRzLmxlbmd0aDtcblxuZnVuY3Rpb24gZ2V0WmVyb1NpemUoKSB7XG4gIHZhciBzaXplID0ge1xuICAgIHdpZHRoOiAwLFxuICAgIGhlaWdodDogMCxcbiAgICBpbm5lcldpZHRoOiAwLFxuICAgIGlubmVySGVpZ2h0OiAwLFxuICAgIG91dGVyV2lkdGg6IDAsXG4gICAgb3V0ZXJIZWlnaHQ6IDBcbiAgfTtcbiAgZm9yICggdmFyIGk9MDsgaSA8IG1lYXN1cmVtZW50c0xlbmd0aDsgaSsrICkge1xuICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50c1tpXTtcbiAgICBzaXplWyBtZWFzdXJlbWVudCBdID0gMDtcbiAgfVxuICByZXR1cm4gc2l6ZTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZ2V0U3R5bGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLyoqXG4gKiBnZXRTdHlsZSwgZ2V0IHN0eWxlIG9mIGVsZW1lbnQsIGNoZWNrIGZvciBGaXJlZm94IGJ1Z1xuICogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NTQ4Mzk3XG4gKi9cbmZ1bmN0aW9uIGdldFN0eWxlKCBlbGVtICkge1xuICB2YXIgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG4gIGlmICggIXN0eWxlICkge1xuICAgIGxvZ0Vycm9yKCAnU3R5bGUgcmV0dXJuZWQgJyArIHN0eWxlICtcbiAgICAgICcuIEFyZSB5b3UgcnVubmluZyB0aGlzIGNvZGUgaW4gYSBoaWRkZW4gaWZyYW1lIG9uIEZpcmVmb3g/ICcgK1xuICAgICAgJ1NlZSBodHRwczovL2JpdC5seS9nZXRzaXplYnVnMScgKTtcbiAgfVxuICByZXR1cm4gc3R5bGU7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHNldHVwIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnZhciBpc1NldHVwID0gZmFsc2U7XG5cbnZhciBpc0JveFNpemVPdXRlcjtcblxuLyoqXG4gKiBzZXR1cFxuICogY2hlY2sgaXNCb3hTaXplck91dGVyXG4gKiBkbyBvbiBmaXJzdCBnZXRTaXplKCkgcmF0aGVyIHRoYW4gb24gcGFnZSBsb2FkIGZvciBGaXJlZm94IGJ1Z1xuICovXG5mdW5jdGlvbiBzZXR1cCgpIHtcbiAgLy8gc2V0dXAgb25jZVxuICBpZiAoIGlzU2V0dXAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlzU2V0dXAgPSB0cnVlO1xuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGJveCBzaXppbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuICAvKipcbiAgICogQ2hyb21lICYgU2FmYXJpIG1lYXN1cmUgdGhlIG91dGVyLXdpZHRoIG9uIHN0eWxlLndpZHRoIG9uIGJvcmRlci1ib3ggZWxlbXNcbiAgICogSUUxMSAmIEZpcmVmb3g8MjkgbWVhc3VyZXMgdGhlIGlubmVyLXdpZHRoXG4gICAqL1xuICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGRpdi5zdHlsZS53aWR0aCA9ICcyMDBweCc7XG4gIGRpdi5zdHlsZS5wYWRkaW5nID0gJzFweCAycHggM3B4IDRweCc7XG4gIGRpdi5zdHlsZS5ib3JkZXJTdHlsZSA9ICdzb2xpZCc7XG4gIGRpdi5zdHlsZS5ib3JkZXJXaWR0aCA9ICcxcHggMnB4IDNweCA0cHgnO1xuICBkaXYuc3R5bGUuYm94U2l6aW5nID0gJ2JvcmRlci1ib3gnO1xuXG4gIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIGJvZHkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuICB2YXIgc3R5bGUgPSBnZXRTdHlsZSggZGl2ICk7XG4gIC8vIHJvdW5kIHZhbHVlIGZvciBicm93c2VyIHpvb20uIGRlc2FuZHJvL21hc29ucnkjOTI4XG4gIGlzQm94U2l6ZU91dGVyID0gTWF0aC5yb3VuZCggZ2V0U3R5bGVTaXplKCBzdHlsZS53aWR0aCApICkgPT0gMjAwO1xuICBnZXRTaXplLmlzQm94U2l6ZU91dGVyID0gaXNCb3hTaXplT3V0ZXI7XG5cbiAgYm9keS5yZW1vdmVDaGlsZCggZGl2ICk7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGdldFNpemUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gZ2V0U2l6ZSggZWxlbSApIHtcbiAgc2V0dXAoKTtcblxuICAvLyB1c2UgcXVlcnlTZWxldG9yIGlmIGVsZW0gaXMgc3RyaW5nXG4gIGlmICggdHlwZW9mIGVsZW0gPT0gJ3N0cmluZycgKSB7XG4gICAgZWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIGVsZW0gKTtcbiAgfVxuXG4gIC8vIGRvIG5vdCBwcm9jZWVkIG9uIG5vbi1vYmplY3RzXG4gIGlmICggIWVsZW0gfHwgdHlwZW9mIGVsZW0gIT0gJ29iamVjdCcgfHwgIWVsZW0ubm9kZVR5cGUgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHN0eWxlID0gZ2V0U3R5bGUoIGVsZW0gKTtcblxuICAvLyBpZiBoaWRkZW4sIGV2ZXJ5dGhpbmcgaXMgMFxuICBpZiAoIHN0eWxlLmRpc3BsYXkgPT0gJ25vbmUnICkge1xuICAgIHJldHVybiBnZXRaZXJvU2l6ZSgpO1xuICB9XG5cbiAgdmFyIHNpemUgPSB7fTtcbiAgc2l6ZS53aWR0aCA9IGVsZW0ub2Zmc2V0V2lkdGg7XG4gIHNpemUuaGVpZ2h0ID0gZWxlbS5vZmZzZXRIZWlnaHQ7XG5cbiAgdmFyIGlzQm9yZGVyQm94ID0gc2l6ZS5pc0JvcmRlckJveCA9IHN0eWxlLmJveFNpemluZyA9PSAnYm9yZGVyLWJveCc7XG5cbiAgLy8gZ2V0IGFsbCBtZWFzdXJlbWVudHNcbiAgZm9yICggdmFyIGk9MDsgaSA8IG1lYXN1cmVtZW50c0xlbmd0aDsgaSsrICkge1xuICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50c1tpXTtcbiAgICB2YXIgdmFsdWUgPSBzdHlsZVsgbWVhc3VyZW1lbnQgXTtcbiAgICB2YXIgbnVtID0gcGFyc2VGbG9hdCggdmFsdWUgKTtcbiAgICAvLyBhbnkgJ2F1dG8nLCAnbWVkaXVtJyB2YWx1ZSB3aWxsIGJlIDBcbiAgICBzaXplWyBtZWFzdXJlbWVudCBdID0gIWlzTmFOKCBudW0gKSA/IG51bSA6IDA7XG4gIH1cblxuICB2YXIgcGFkZGluZ1dpZHRoID0gc2l6ZS5wYWRkaW5nTGVmdCArIHNpemUucGFkZGluZ1JpZ2h0O1xuICB2YXIgcGFkZGluZ0hlaWdodCA9IHNpemUucGFkZGluZ1RvcCArIHNpemUucGFkZGluZ0JvdHRvbTtcbiAgdmFyIG1hcmdpbldpZHRoID0gc2l6ZS5tYXJnaW5MZWZ0ICsgc2l6ZS5tYXJnaW5SaWdodDtcbiAgdmFyIG1hcmdpbkhlaWdodCA9IHNpemUubWFyZ2luVG9wICsgc2l6ZS5tYXJnaW5Cb3R0b207XG4gIHZhciBib3JkZXJXaWR0aCA9IHNpemUuYm9yZGVyTGVmdFdpZHRoICsgc2l6ZS5ib3JkZXJSaWdodFdpZHRoO1xuICB2YXIgYm9yZGVySGVpZ2h0ID0gc2l6ZS5ib3JkZXJUb3BXaWR0aCArIHNpemUuYm9yZGVyQm90dG9tV2lkdGg7XG5cbiAgdmFyIGlzQm9yZGVyQm94U2l6ZU91dGVyID0gaXNCb3JkZXJCb3ggJiYgaXNCb3hTaXplT3V0ZXI7XG5cbiAgLy8gb3ZlcndyaXRlIHdpZHRoIGFuZCBoZWlnaHQgaWYgd2UgY2FuIGdldCBpdCBmcm9tIHN0eWxlXG4gIHZhciBzdHlsZVdpZHRoID0gZ2V0U3R5bGVTaXplKCBzdHlsZS53aWR0aCApO1xuICBpZiAoIHN0eWxlV2lkdGggIT09IGZhbHNlICkge1xuICAgIHNpemUud2lkdGggPSBzdHlsZVdpZHRoICtcbiAgICAgIC8vIGFkZCBwYWRkaW5nIGFuZCBib3JkZXIgdW5sZXNzIGl0J3MgYWxyZWFkeSBpbmNsdWRpbmcgaXRcbiAgICAgICggaXNCb3JkZXJCb3hTaXplT3V0ZXIgPyAwIDogcGFkZGluZ1dpZHRoICsgYm9yZGVyV2lkdGggKTtcbiAgfVxuXG4gIHZhciBzdHlsZUhlaWdodCA9IGdldFN0eWxlU2l6ZSggc3R5bGUuaGVpZ2h0ICk7XG4gIGlmICggc3R5bGVIZWlnaHQgIT09IGZhbHNlICkge1xuICAgIHNpemUuaGVpZ2h0ID0gc3R5bGVIZWlnaHQgK1xuICAgICAgLy8gYWRkIHBhZGRpbmcgYW5kIGJvcmRlciB1bmxlc3MgaXQncyBhbHJlYWR5IGluY2x1ZGluZyBpdFxuICAgICAgKCBpc0JvcmRlckJveFNpemVPdXRlciA/IDAgOiBwYWRkaW5nSGVpZ2h0ICsgYm9yZGVySGVpZ2h0ICk7XG4gIH1cblxuICBzaXplLmlubmVyV2lkdGggPSBzaXplLndpZHRoIC0gKCBwYWRkaW5nV2lkdGggKyBib3JkZXJXaWR0aCApO1xuICBzaXplLmlubmVySGVpZ2h0ID0gc2l6ZS5oZWlnaHQgLSAoIHBhZGRpbmdIZWlnaHQgKyBib3JkZXJIZWlnaHQgKTtcblxuICBzaXplLm91dGVyV2lkdGggPSBzaXplLndpZHRoICsgbWFyZ2luV2lkdGg7XG4gIHNpemUub3V0ZXJIZWlnaHQgPSBzaXplLmhlaWdodCArIG1hcmdpbkhlaWdodDtcblxuICByZXR1cm4gc2l6ZTtcbn1cblxucmV0dXJuIGdldFNpemU7XG5cbn0pO1xuXG59LHt9XSwyMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKiFcbiAqIGltYWdlc0xvYWRlZCB2NC4xLjRcbiAqIEphdmFTY3JpcHQgaXMgYWxsIGxpa2UgXCJZb3UgaW1hZ2VzIGFyZSBkb25lIHlldCBvciB3aGF0P1wiXG4gKiBNSVQgTGljZW5zZVxuICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHsgJ3VzZSBzdHJpY3QnO1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cblxuICAvKmdsb2JhbCBkZWZpbmU6IGZhbHNlLCBtb2R1bGU6IGZhbHNlLCByZXF1aXJlOiBmYWxzZSAqL1xuXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCBbXG4gICAgICAnZXYtZW1pdHRlci9ldi1lbWl0dGVyJ1xuICAgIF0sIGZ1bmN0aW9uKCBFdkVtaXR0ZXIgKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBFdkVtaXR0ZXIgKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHJlcXVpcmUoJ2V2LWVtaXR0ZXInKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuaW1hZ2VzTG9hZGVkID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHdpbmRvdy5FdkVtaXR0ZXJcbiAgICApO1xuICB9XG5cbn0pKCB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICBmYWN0b3J5IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgRXZFbWl0dGVyICkge1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciAkID0gd2luZG93LmpRdWVyeTtcbnZhciBjb25zb2xlID0gd2luZG93LmNvbnNvbGU7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGhlbHBlcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLy8gZXh0ZW5kIG9iamVjdHNcbmZ1bmN0aW9uIGV4dGVuZCggYSwgYiApIHtcbiAgZm9yICggdmFyIHByb3AgaW4gYiApIHtcbiAgICBhWyBwcm9wIF0gPSBiWyBwcm9wIF07XG4gIH1cbiAgcmV0dXJuIGE7XG59XG5cbnZhciBhcnJheVNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG4vLyB0dXJuIGVsZW1lbnQgb3Igbm9kZUxpc3QgaW50byBhbiBhcnJheVxuZnVuY3Rpb24gbWFrZUFycmF5KCBvYmogKSB7XG4gIGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG4gICAgLy8gdXNlIG9iamVjdCBpZiBhbHJlYWR5IGFuIGFycmF5XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHZhciBpc0FycmF5TGlrZSA9IHR5cGVvZiBvYmogPT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iai5sZW5ndGggPT0gJ251bWJlcic7XG4gIGlmICggaXNBcnJheUxpa2UgKSB7XG4gICAgLy8gY29udmVydCBub2RlTGlzdCB0byBhcnJheVxuICAgIHJldHVybiBhcnJheVNsaWNlLmNhbGwoIG9iaiApO1xuICB9XG5cbiAgLy8gYXJyYXkgb2Ygc2luZ2xlIGluZGV4XG4gIHJldHVybiBbIG9iaiBdO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBpbWFnZXNMb2FkZWQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5LCBFbGVtZW50LCBOb2RlTGlzdCwgU3RyaW5nfSBlbGVtXG4gKiBAcGFyYW0ge09iamVjdCBvciBGdW5jdGlvbn0gb3B0aW9ucyAtIGlmIGZ1bmN0aW9uLCB1c2UgYXMgY2FsbGJhY2tcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9uQWx3YXlzIC0gY2FsbGJhY2sgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gSW1hZ2VzTG9hZGVkKCBlbGVtLCBvcHRpb25zLCBvbkFsd2F5cyApIHtcbiAgLy8gY29lcmNlIEltYWdlc0xvYWRlZCgpIHdpdGhvdXQgbmV3LCB0byBiZSBuZXcgSW1hZ2VzTG9hZGVkKClcbiAgaWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgSW1hZ2VzTG9hZGVkICkgKSB7XG4gICAgcmV0dXJuIG5ldyBJbWFnZXNMb2FkZWQoIGVsZW0sIG9wdGlvbnMsIG9uQWx3YXlzICk7XG4gIH1cbiAgLy8gdXNlIGVsZW0gYXMgc2VsZWN0b3Igc3RyaW5nXG4gIHZhciBxdWVyeUVsZW0gPSBlbGVtO1xuICBpZiAoIHR5cGVvZiBlbGVtID09ICdzdHJpbmcnICkge1xuICAgIHF1ZXJ5RWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIGVsZW0gKTtcbiAgfVxuICAvLyBiYWlsIGlmIGJhZCBlbGVtZW50XG4gIGlmICggIXF1ZXJ5RWxlbSApIHtcbiAgICBjb25zb2xlLmVycm9yKCAnQmFkIGVsZW1lbnQgZm9yIGltYWdlc0xvYWRlZCAnICsgKCBxdWVyeUVsZW0gfHwgZWxlbSApICk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5lbGVtZW50cyA9IG1ha2VBcnJheSggcXVlcnlFbGVtICk7XG4gIHRoaXMub3B0aW9ucyA9IGV4dGVuZCgge30sIHRoaXMub3B0aW9ucyApO1xuICAvLyBzaGlmdCBhcmd1bWVudHMgaWYgbm8gb3B0aW9ucyBzZXRcbiAgaWYgKCB0eXBlb2Ygb3B0aW9ucyA9PSAnZnVuY3Rpb24nICkge1xuICAgIG9uQWx3YXlzID0gb3B0aW9ucztcbiAgfSBlbHNlIHtcbiAgICBleHRlbmQoIHRoaXMub3B0aW9ucywgb3B0aW9ucyApO1xuICB9XG5cbiAgaWYgKCBvbkFsd2F5cyApIHtcbiAgICB0aGlzLm9uKCAnYWx3YXlzJywgb25BbHdheXMgKTtcbiAgfVxuXG4gIHRoaXMuZ2V0SW1hZ2VzKCk7XG5cbiAgaWYgKCAkICkge1xuICAgIC8vIGFkZCBqUXVlcnkgRGVmZXJyZWQgb2JqZWN0XG4gICAgdGhpcy5qcURlZmVycmVkID0gbmV3ICQuRGVmZXJyZWQoKTtcbiAgfVxuXG4gIC8vIEhBQ0sgY2hlY2sgYXN5bmMgdG8gYWxsb3cgdGltZSB0byBiaW5kIGxpc3RlbmVyc1xuICBzZXRUaW1lb3V0KCB0aGlzLmNoZWNrLmJpbmQoIHRoaXMgKSApO1xufVxuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggRXZFbWl0dGVyLnByb3RvdHlwZSApO1xuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLm9wdGlvbnMgPSB7fTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5nZXRJbWFnZXMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5pbWFnZXMgPSBbXTtcblxuICAvLyBmaWx0ZXIgJiBmaW5kIGl0ZW1zIGlmIHdlIGhhdmUgYW4gaXRlbSBzZWxlY3RvclxuICB0aGlzLmVsZW1lbnRzLmZvckVhY2goIHRoaXMuYWRkRWxlbWVudEltYWdlcywgdGhpcyApO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge05vZGV9IGVsZW1lbnRcbiAqL1xuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5hZGRFbGVtZW50SW1hZ2VzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIC8vIGZpbHRlciBzaWJsaW5nc1xuICBpZiAoIGVsZW0ubm9kZU5hbWUgPT0gJ0lNRycgKSB7XG4gICAgdGhpcy5hZGRJbWFnZSggZWxlbSApO1xuICB9XG4gIC8vIGdldCBiYWNrZ3JvdW5kIGltYWdlIG9uIGVsZW1lbnRcbiAgaWYgKCB0aGlzLm9wdGlvbnMuYmFja2dyb3VuZCA9PT0gdHJ1ZSApIHtcbiAgICB0aGlzLmFkZEVsZW1lbnRCYWNrZ3JvdW5kSW1hZ2VzKCBlbGVtICk7XG4gIH1cblxuICAvLyBmaW5kIGNoaWxkcmVuXG4gIC8vIG5vIG5vbi1lbGVtZW50IG5vZGVzLCAjMTQzXG4gIHZhciBub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG4gIGlmICggIW5vZGVUeXBlIHx8ICFlbGVtZW50Tm9kZVR5cGVzWyBub2RlVHlwZSBdICkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgY2hpbGRJbWdzID0gZWxlbS5xdWVyeVNlbGVjdG9yQWxsKCdpbWcnKTtcbiAgLy8gY29uY2F0IGNoaWxkRWxlbXMgdG8gZmlsdGVyRm91bmQgYXJyYXlcbiAgZm9yICggdmFyIGk9MDsgaSA8IGNoaWxkSW1ncy5sZW5ndGg7IGkrKyApIHtcbiAgICB2YXIgaW1nID0gY2hpbGRJbWdzW2ldO1xuICAgIHRoaXMuYWRkSW1hZ2UoIGltZyApO1xuICB9XG5cbiAgLy8gZ2V0IGNoaWxkIGJhY2tncm91bmQgaW1hZ2VzXG4gIGlmICggdHlwZW9mIHRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kID09ICdzdHJpbmcnICkge1xuICAgIHZhciBjaGlsZHJlbiA9IGVsZW0ucXVlcnlTZWxlY3RvckFsbCggdGhpcy5vcHRpb25zLmJhY2tncm91bmQgKTtcbiAgICBmb3IgKCBpPTA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKyApIHtcbiAgICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgdGhpcy5hZGRFbGVtZW50QmFja2dyb3VuZEltYWdlcyggY2hpbGQgKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBlbGVtZW50Tm9kZVR5cGVzID0ge1xuICAxOiB0cnVlLFxuICA5OiB0cnVlLFxuICAxMTogdHJ1ZVxufTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5hZGRFbGVtZW50QmFja2dyb3VuZEltYWdlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICB2YXIgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG4gIGlmICggIXN0eWxlICkge1xuICAgIC8vIEZpcmVmb3ggcmV0dXJucyBudWxsIGlmIGluIGEgaGlkZGVuIGlmcmFtZSBodHRwczovL2J1Z3ppbC5sYS81NDgzOTdcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gZ2V0IHVybCBpbnNpZGUgdXJsKFwiLi4uXCIpXG4gIHZhciByZVVSTCA9IC91cmxcXCgoWydcIl0pPyguKj8pXFwxXFwpL2dpO1xuICB2YXIgbWF0Y2hlcyA9IHJlVVJMLmV4ZWMoIHN0eWxlLmJhY2tncm91bmRJbWFnZSApO1xuICB3aGlsZSAoIG1hdGNoZXMgIT09IG51bGwgKSB7XG4gICAgdmFyIHVybCA9IG1hdGNoZXMgJiYgbWF0Y2hlc1syXTtcbiAgICBpZiAoIHVybCApIHtcbiAgICAgIHRoaXMuYWRkQmFja2dyb3VuZCggdXJsLCBlbGVtICk7XG4gICAgfVxuICAgIG1hdGNoZXMgPSByZVVSTC5leGVjKCBzdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge0ltYWdlfSBpbWdcbiAqL1xuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5hZGRJbWFnZSA9IGZ1bmN0aW9uKCBpbWcgKSB7XG4gIHZhciBsb2FkaW5nSW1hZ2UgPSBuZXcgTG9hZGluZ0ltYWdlKCBpbWcgKTtcbiAgdGhpcy5pbWFnZXMucHVzaCggbG9hZGluZ0ltYWdlICk7XG59O1xuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLmFkZEJhY2tncm91bmQgPSBmdW5jdGlvbiggdXJsLCBlbGVtICkge1xuICB2YXIgYmFja2dyb3VuZCA9IG5ldyBCYWNrZ3JvdW5kKCB1cmwsIGVsZW0gKTtcbiAgdGhpcy5pbWFnZXMucHVzaCggYmFja2dyb3VuZCApO1xufTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuICB0aGlzLnByb2dyZXNzZWRDb3VudCA9IDA7XG4gIHRoaXMuaGFzQW55QnJva2VuID0gZmFsc2U7XG4gIC8vIGNvbXBsZXRlIGlmIG5vIGltYWdlc1xuICBpZiAoICF0aGlzLmltYWdlcy5sZW5ndGggKSB7XG4gICAgdGhpcy5jb21wbGV0ZSgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUHJvZ3Jlc3MoIGltYWdlLCBlbGVtLCBtZXNzYWdlICkge1xuICAgIC8vIEhBQ0sgLSBDaHJvbWUgdHJpZ2dlcnMgZXZlbnQgYmVmb3JlIG9iamVjdCBwcm9wZXJ0aWVzIGhhdmUgY2hhbmdlZC4gIzgzXG4gICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgICBfdGhpcy5wcm9ncmVzcyggaW1hZ2UsIGVsZW0sIG1lc3NhZ2UgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHRoaXMuaW1hZ2VzLmZvckVhY2goIGZ1bmN0aW9uKCBsb2FkaW5nSW1hZ2UgKSB7XG4gICAgbG9hZGluZ0ltYWdlLm9uY2UoICdwcm9ncmVzcycsIG9uUHJvZ3Jlc3MgKTtcbiAgICBsb2FkaW5nSW1hZ2UuY2hlY2soKTtcbiAgfSk7XG59O1xuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLnByb2dyZXNzID0gZnVuY3Rpb24oIGltYWdlLCBlbGVtLCBtZXNzYWdlICkge1xuICB0aGlzLnByb2dyZXNzZWRDb3VudCsrO1xuICB0aGlzLmhhc0FueUJyb2tlbiA9IHRoaXMuaGFzQW55QnJva2VuIHx8ICFpbWFnZS5pc0xvYWRlZDtcbiAgLy8gcHJvZ3Jlc3MgZXZlbnRcbiAgdGhpcy5lbWl0RXZlbnQoICdwcm9ncmVzcycsIFsgdGhpcywgaW1hZ2UsIGVsZW0gXSApO1xuICBpZiAoIHRoaXMuanFEZWZlcnJlZCAmJiB0aGlzLmpxRGVmZXJyZWQubm90aWZ5ICkge1xuICAgIHRoaXMuanFEZWZlcnJlZC5ub3RpZnkoIHRoaXMsIGltYWdlICk7XG4gIH1cbiAgLy8gY2hlY2sgaWYgY29tcGxldGVkXG4gIGlmICggdGhpcy5wcm9ncmVzc2VkQ291bnQgPT0gdGhpcy5pbWFnZXMubGVuZ3RoICkge1xuICAgIHRoaXMuY29tcGxldGUoKTtcbiAgfVxuXG4gIGlmICggdGhpcy5vcHRpb25zLmRlYnVnICYmIGNvbnNvbGUgKSB7XG4gICAgY29uc29sZS5sb2coICdwcm9ncmVzczogJyArIG1lc3NhZ2UsIGltYWdlLCBlbGVtICk7XG4gIH1cbn07XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGV2ZW50TmFtZSA9IHRoaXMuaGFzQW55QnJva2VuID8gJ2ZhaWwnIDogJ2RvbmUnO1xuICB0aGlzLmlzQ29tcGxldGUgPSB0cnVlO1xuICB0aGlzLmVtaXRFdmVudCggZXZlbnROYW1lLCBbIHRoaXMgXSApO1xuICB0aGlzLmVtaXRFdmVudCggJ2Fsd2F5cycsIFsgdGhpcyBdICk7XG4gIGlmICggdGhpcy5qcURlZmVycmVkICkge1xuICAgIHZhciBqcU1ldGhvZCA9IHRoaXMuaGFzQW55QnJva2VuID8gJ3JlamVjdCcgOiAncmVzb2x2ZSc7XG4gICAgdGhpcy5qcURlZmVycmVkWyBqcU1ldGhvZCBdKCB0aGlzICk7XG4gIH1cbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5mdW5jdGlvbiBMb2FkaW5nSW1hZ2UoIGltZyApIHtcbiAgdGhpcy5pbWcgPSBpbWc7XG59XG5cbkxvYWRpbmdJbWFnZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBFdkVtaXR0ZXIucHJvdG90eXBlICk7XG5cbkxvYWRpbmdJbWFnZS5wcm90b3R5cGUuY2hlY2sgPSBmdW5jdGlvbigpIHtcbiAgLy8gSWYgY29tcGxldGUgaXMgdHJ1ZSBhbmQgYnJvd3NlciBzdXBwb3J0cyBuYXR1cmFsIHNpemVzLFxuICAvLyB0cnkgdG8gY2hlY2sgZm9yIGltYWdlIHN0YXR1cyBtYW51YWxseS5cbiAgdmFyIGlzQ29tcGxldGUgPSB0aGlzLmdldElzSW1hZ2VDb21wbGV0ZSgpO1xuICBpZiAoIGlzQ29tcGxldGUgKSB7XG4gICAgLy8gcmVwb3J0IGJhc2VkIG9uIG5hdHVyYWxXaWR0aFxuICAgIHRoaXMuY29uZmlybSggdGhpcy5pbWcubmF0dXJhbFdpZHRoICE9PSAwLCAnbmF0dXJhbFdpZHRoJyApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIElmIG5vbmUgb2YgdGhlIGNoZWNrcyBhYm92ZSBtYXRjaGVkLCBzaW11bGF0ZSBsb2FkaW5nIG9uIGRldGFjaGVkIGVsZW1lbnQuXG4gIHRoaXMucHJveHlJbWFnZSA9IG5ldyBJbWFnZSgpO1xuICB0aGlzLnByb3h5SW1hZ2UuYWRkRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCB0aGlzICk7XG4gIHRoaXMucHJveHlJbWFnZS5hZGRFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG4gIC8vIGJpbmQgdG8gaW1hZ2UgYXMgd2VsbCBmb3IgRmlyZWZveC4gIzE5MVxuICB0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5pbWcuYWRkRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xuICB0aGlzLnByb3h5SW1hZ2Uuc3JjID0gdGhpcy5pbWcuc3JjO1xufTtcblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5nZXRJc0ltYWdlQ29tcGxldGUgPSBmdW5jdGlvbigpIHtcbiAgLy8gY2hlY2sgZm9yIG5vbi16ZXJvLCBub24tdW5kZWZpbmVkIG5hdHVyYWxXaWR0aFxuICAvLyBmaXhlcyBTYWZhcmkrSW5maW5pdGVTY3JvbGwrTWFzb25yeSBidWcgaW5maW5pdGUtc2Nyb2xsIzY3MVxuICByZXR1cm4gdGhpcy5pbWcuY29tcGxldGUgJiYgdGhpcy5pbWcubmF0dXJhbFdpZHRoO1xufTtcblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5jb25maXJtID0gZnVuY3Rpb24oIGlzTG9hZGVkLCBtZXNzYWdlICkge1xuICB0aGlzLmlzTG9hZGVkID0gaXNMb2FkZWQ7XG4gIHRoaXMuZW1pdEV2ZW50KCAncHJvZ3Jlc3MnLCBbIHRoaXMsIHRoaXMuaW1nLCBtZXNzYWdlIF0gKTtcbn07XG5cbi8vIC0tLS0tIGV2ZW50cyAtLS0tLSAvL1xuXG4vLyB0cmlnZ2VyIHNwZWNpZmllZCBoYW5kbGVyIGZvciBldmVudCB0eXBlXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB2YXIgbWV0aG9kID0gJ29uJyArIGV2ZW50LnR5cGU7XG4gIGlmICggdGhpc1sgbWV0aG9kIF0gKSB7XG4gICAgdGhpc1sgbWV0aG9kIF0oIGV2ZW50ICk7XG4gIH1cbn07XG5cbkxvYWRpbmdJbWFnZS5wcm90b3R5cGUub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY29uZmlybSggdHJ1ZSwgJ29ubG9hZCcgKTtcbiAgdGhpcy51bmJpbmRFdmVudHMoKTtcbn07XG5cbkxvYWRpbmdJbWFnZS5wcm90b3R5cGUub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmNvbmZpcm0oIGZhbHNlLCAnb25lcnJvcicgKTtcbiAgdGhpcy51bmJpbmRFdmVudHMoKTtcbn07XG5cbkxvYWRpbmdJbWFnZS5wcm90b3R5cGUudW5iaW5kRXZlbnRzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucHJveHlJbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5wcm94eUltYWdlLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdlcnJvcicsIHRoaXMgKTtcbiAgdGhpcy5pbWcucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCB0aGlzICk7XG4gIHRoaXMuaW1nLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdlcnJvcicsIHRoaXMgKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEJhY2tncm91bmQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gQmFja2dyb3VuZCggdXJsLCBlbGVtZW50ICkge1xuICB0aGlzLnVybCA9IHVybDtcbiAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgdGhpcy5pbWcgPSBuZXcgSW1hZ2UoKTtcbn1cblxuLy8gaW5oZXJpdCBMb2FkaW5nSW1hZ2UgcHJvdG90eXBlXG5CYWNrZ3JvdW5kLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIExvYWRpbmdJbWFnZS5wcm90b3R5cGUgKTtcblxuQmFja2dyb3VuZC5wcm90b3R5cGUuY2hlY2sgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5pbWcuYWRkRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCB0aGlzICk7XG4gIHRoaXMuaW1nLmFkZEV2ZW50TGlzdGVuZXIoICdlcnJvcicsIHRoaXMgKTtcbiAgdGhpcy5pbWcuc3JjID0gdGhpcy51cmw7XG4gIC8vIGNoZWNrIGlmIGltYWdlIGlzIGFscmVhZHkgY29tcGxldGVcbiAgdmFyIGlzQ29tcGxldGUgPSB0aGlzLmdldElzSW1hZ2VDb21wbGV0ZSgpO1xuICBpZiAoIGlzQ29tcGxldGUgKSB7XG4gICAgdGhpcy5jb25maXJtKCB0aGlzLmltZy5uYXR1cmFsV2lkdGggIT09IDAsICduYXR1cmFsV2lkdGgnICk7XG4gICAgdGhpcy51bmJpbmRFdmVudHMoKTtcbiAgfVxufTtcblxuQmFja2dyb3VuZC5wcm90b3R5cGUudW5iaW5kRXZlbnRzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaW1nLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLmltZy5yZW1vdmVFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG59O1xuXG5CYWNrZ3JvdW5kLnByb3RvdHlwZS5jb25maXJtID0gZnVuY3Rpb24oIGlzTG9hZGVkLCBtZXNzYWdlICkge1xuICB0aGlzLmlzTG9hZGVkID0gaXNMb2FkZWQ7XG4gIHRoaXMuZW1pdEV2ZW50KCAncHJvZ3Jlc3MnLCBbIHRoaXMsIHRoaXMuZWxlbWVudCwgbWVzc2FnZSBdICk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBqUXVlcnkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuSW1hZ2VzTG9hZGVkLm1ha2VKUXVlcnlQbHVnaW4gPSBmdW5jdGlvbiggalF1ZXJ5ICkge1xuICBqUXVlcnkgPSBqUXVlcnkgfHwgd2luZG93LmpRdWVyeTtcbiAgaWYgKCAhalF1ZXJ5ICkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBzZXQgbG9jYWwgdmFyaWFibGVcbiAgJCA9IGpRdWVyeTtcbiAgLy8gJCgpLmltYWdlc0xvYWRlZCgpXG4gICQuZm4uaW1hZ2VzTG9hZGVkID0gZnVuY3Rpb24oIG9wdGlvbnMsIGNhbGxiYWNrICkge1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyBJbWFnZXNMb2FkZWQoIHRoaXMsIG9wdGlvbnMsIGNhbGxiYWNrICk7XG4gICAgcmV0dXJuIGluc3RhbmNlLmpxRGVmZXJyZWQucHJvbWlzZSggJCh0aGlzKSApO1xuICB9O1xufTtcbi8vIHRyeSBtYWtpbmcgcGx1Z2luXG5JbWFnZXNMb2FkZWQubWFrZUpRdWVyeVBsdWdpbigpO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxucmV0dXJuIEltYWdlc0xvYWRlZDtcblxufSk7XG5cbn0se1wiZXYtZW1pdHRlclwiOjd9XSwyMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKiFcbiAqIFVuaWRyYWdnZXIgdjIuNC4wXG4gKiBEcmFnZ2FibGUgYmFzZSBjbGFzc1xuICogTUlUIGxpY2Vuc2VcbiAqL1xuXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCB1bnVzZWQ6IHRydWUsIHVuZGVmOiB0cnVlLCBzdHJpY3Q6IHRydWUgKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgLypqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKmdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHJlcXVpcmUgKi9cblxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggW1xuICAgICAgJ3VuaXBvaW50ZXIvdW5pcG9pbnRlcidcbiAgICBdLCBmdW5jdGlvbiggVW5pcG9pbnRlciApIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIFVuaXBvaW50ZXIgKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHJlcXVpcmUoJ3VuaXBvaW50ZXInKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuVW5pZHJhZ2dlciA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3csXG4gICAgICB3aW5kb3cuVW5pcG9pbnRlclxuICAgICk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIFVuaXBvaW50ZXIgKSB7XG5cbid1c2Ugc3RyaWN0JztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gVW5pZHJhZ2dlciAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5mdW5jdGlvbiBVbmlkcmFnZ2VyKCkge31cblxuLy8gaW5oZXJpdCBVbmlwb2ludGVyICYgRXZFbWl0dGVyXG52YXIgcHJvdG8gPSBVbmlkcmFnZ2VyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFVuaXBvaW50ZXIucHJvdG90eXBlICk7XG5cbi8vIC0tLS0tIGJpbmQgc3RhcnQgLS0tLS0gLy9cblxucHJvdG8uYmluZEhhbmRsZXMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fYmluZEhhbmRsZXMoIHRydWUgKTtcbn07XG5cbnByb3RvLnVuYmluZEhhbmRsZXMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fYmluZEhhbmRsZXMoIGZhbHNlICk7XG59O1xuXG4vKipcbiAqIEFkZCBvciByZW1vdmUgc3RhcnQgZXZlbnRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNBZGRcbiAqL1xucHJvdG8uX2JpbmRIYW5kbGVzID0gZnVuY3Rpb24oIGlzQWRkICkge1xuICAvLyBtdW5nZSBpc0FkZCwgZGVmYXVsdCB0byB0cnVlXG4gIGlzQWRkID0gaXNBZGQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBpc0FkZDtcbiAgLy8gYmluZCBlYWNoIGhhbmRsZVxuICB2YXIgYmluZE1ldGhvZCA9IGlzQWRkID8gJ2FkZEV2ZW50TGlzdGVuZXInIDogJ3JlbW92ZUV2ZW50TGlzdGVuZXInO1xuICB2YXIgdG91Y2hBY3Rpb24gPSBpc0FkZCA/IHRoaXMuX3RvdWNoQWN0aW9uVmFsdWUgOiAnJztcbiAgZm9yICggdmFyIGk9MDsgaSA8IHRoaXMuaGFuZGxlcy5sZW5ndGg7IGkrKyApIHtcbiAgICB2YXIgaGFuZGxlID0gdGhpcy5oYW5kbGVzW2ldO1xuICAgIHRoaXMuX2JpbmRTdGFydEV2ZW50KCBoYW5kbGUsIGlzQWRkICk7XG4gICAgaGFuZGxlWyBiaW5kTWV0aG9kIF0oICdjbGljaycsIHRoaXMgKTtcbiAgICAvLyB0b3VjaC1hY3Rpb246IG5vbmUgdG8gb3ZlcnJpZGUgYnJvd3NlciB0b3VjaCBnZXN0dXJlcy4gbWV0YWZpenp5L2ZsaWNraXR5IzU0MFxuICAgIGlmICggd2luZG93LlBvaW50ZXJFdmVudCApIHtcbiAgICAgIGhhbmRsZS5zdHlsZS50b3VjaEFjdGlvbiA9IHRvdWNoQWN0aW9uO1xuICAgIH1cbiAgfVxufTtcblxuLy8gcHJvdG90eXBlIHNvIGl0IGNhbiBiZSBvdmVyd3JpdGVhYmxlIGJ5IEZsaWNraXR5XG5wcm90by5fdG91Y2hBY3Rpb25WYWx1ZSA9ICdub25lJztcblxuLy8gLS0tLS0gc3RhcnQgZXZlbnQgLS0tLS0gLy9cblxuLyoqXG4gKiBwb2ludGVyIHN0YXJ0XG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICogQHBhcmFtIHtFdmVudCBvciBUb3VjaH0gcG9pbnRlclxuICovXG5wcm90by5wb2ludGVyRG93biA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgdmFyIGlzT2theSA9IHRoaXMub2theVBvaW50ZXJEb3duKCBldmVudCApO1xuICBpZiAoICFpc09rYXkgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIHRyYWNrIHN0YXJ0IGV2ZW50IHBvc2l0aW9uXG4gIC8vIFNhZmFyaSA5IG92ZXJyaWRlcyBwYWdlWCBhbmQgcGFnZVkuIFRoZXNlIHZhbHVlcyBuZWVkcyB0byBiZSBjb3BpZWQuIGZsaWNraXR5Izg0MlxuICB0aGlzLnBvaW50ZXJEb3duUG9pbnRlciA9IHtcbiAgICBwYWdlWDogcG9pbnRlci5wYWdlWCxcbiAgICBwYWdlWTogcG9pbnRlci5wYWdlWSxcbiAgfTtcblxuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB0aGlzLnBvaW50ZXJEb3duQmx1cigpO1xuICAvLyBiaW5kIG1vdmUgYW5kIGVuZCBldmVudHNcbiAgdGhpcy5fYmluZFBvc3RTdGFydEV2ZW50cyggZXZlbnQgKTtcbiAgdGhpcy5lbWl0RXZlbnQoICdwb2ludGVyRG93bicsIFsgZXZlbnQsIHBvaW50ZXIgXSApO1xufTtcblxuLy8gbm9kZXMgdGhhdCBoYXZlIHRleHQgZmllbGRzXG52YXIgY3Vyc29yTm9kZXMgPSB7XG4gIFRFWFRBUkVBOiB0cnVlLFxuICBJTlBVVDogdHJ1ZSxcbiAgU0VMRUNUOiB0cnVlLFxuICBPUFRJT046IHRydWUsXG59O1xuXG4vLyBpbnB1dCB0eXBlcyB0aGF0IGRvIG5vdCBoYXZlIHRleHQgZmllbGRzXG52YXIgY2xpY2tUeXBlcyA9IHtcbiAgcmFkaW86IHRydWUsXG4gIGNoZWNrYm94OiB0cnVlLFxuICBidXR0b246IHRydWUsXG4gIHN1Ym1pdDogdHJ1ZSxcbiAgaW1hZ2U6IHRydWUsXG4gIGZpbGU6IHRydWUsXG59O1xuXG4vLyBkaXNtaXNzIGlucHV0cyB3aXRoIHRleHQgZmllbGRzLiBmbGlja2l0eSM0MDMsIGZsaWNraXR5IzQwNFxucHJvdG8ub2theVBvaW50ZXJEb3duID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB2YXIgaXNDdXJzb3JOb2RlID0gY3Vyc29yTm9kZXNbIGV2ZW50LnRhcmdldC5ub2RlTmFtZSBdO1xuICB2YXIgaXNDbGlja1R5cGUgPSBjbGlja1R5cGVzWyBldmVudC50YXJnZXQudHlwZSBdO1xuICB2YXIgaXNPa2F5ID0gIWlzQ3Vyc29yTm9kZSB8fCBpc0NsaWNrVHlwZTtcbiAgaWYgKCAhaXNPa2F5ICkge1xuICAgIHRoaXMuX3BvaW50ZXJSZXNldCgpO1xuICB9XG4gIHJldHVybiBpc09rYXk7XG59O1xuXG4vLyBrbHVkZ2UgdG8gYmx1ciBwcmV2aW91c2x5IGZvY3VzZWQgaW5wdXRcbnByb3RvLnBvaW50ZXJEb3duQmx1ciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZm9jdXNlZCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gIC8vIGRvIG5vdCBibHVyIGJvZHkgZm9yIElFMTAsIG1ldGFmaXp6eS9mbGlja2l0eSMxMTdcbiAgdmFyIGNhbkJsdXIgPSBmb2N1c2VkICYmIGZvY3VzZWQuYmx1ciAmJiBmb2N1c2VkICE9IGRvY3VtZW50LmJvZHk7XG4gIGlmICggY2FuQmx1ciApIHtcbiAgICBmb2N1c2VkLmJsdXIoKTtcbiAgfVxufTtcblxuLy8gLS0tLS0gbW92ZSBldmVudCAtLS0tLSAvL1xuXG4vKipcbiAqIGRyYWcgbW92ZVxuICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAqIEBwYXJhbSB7RXZlbnQgb3IgVG91Y2h9IHBvaW50ZXJcbiAqL1xucHJvdG8ucG9pbnRlck1vdmUgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHZhciBtb3ZlVmVjdG9yID0gdGhpcy5fZHJhZ1BvaW50ZXJNb3ZlKCBldmVudCwgcG9pbnRlciApO1xuICB0aGlzLmVtaXRFdmVudCggJ3BvaW50ZXJNb3ZlJywgWyBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciBdICk7XG4gIHRoaXMuX2RyYWdNb3ZlKCBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciApO1xufTtcblxuLy8gYmFzZSBwb2ludGVyIG1vdmUgbG9naWNcbnByb3RvLl9kcmFnUG9pbnRlck1vdmUgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHZhciBtb3ZlVmVjdG9yID0ge1xuICAgIHg6IHBvaW50ZXIucGFnZVggLSB0aGlzLnBvaW50ZXJEb3duUG9pbnRlci5wYWdlWCxcbiAgICB5OiBwb2ludGVyLnBhZ2VZIC0gdGhpcy5wb2ludGVyRG93blBvaW50ZXIucGFnZVlcbiAgfTtcbiAgLy8gc3RhcnQgZHJhZyBpZiBwb2ludGVyIGhhcyBtb3ZlZCBmYXIgZW5vdWdoIHRvIHN0YXJ0IGRyYWdcbiAgaWYgKCAhdGhpcy5pc0RyYWdnaW5nICYmIHRoaXMuaGFzRHJhZ1N0YXJ0ZWQoIG1vdmVWZWN0b3IgKSApIHtcbiAgICB0aGlzLl9kcmFnU3RhcnQoIGV2ZW50LCBwb2ludGVyICk7XG4gIH1cbiAgcmV0dXJuIG1vdmVWZWN0b3I7XG59O1xuXG4vLyBjb25kaXRpb24gaWYgcG9pbnRlciBoYXMgbW92ZWQgZmFyIGVub3VnaCB0byBzdGFydCBkcmFnXG5wcm90by5oYXNEcmFnU3RhcnRlZCA9IGZ1bmN0aW9uKCBtb3ZlVmVjdG9yICkge1xuICByZXR1cm4gTWF0aC5hYnMoIG1vdmVWZWN0b3IueCApID4gMyB8fCBNYXRoLmFicyggbW92ZVZlY3Rvci55ICkgPiAzO1xufTtcblxuLy8gLS0tLS0gZW5kIGV2ZW50IC0tLS0tIC8vXG5cbi8qKlxuICogcG9pbnRlciB1cFxuICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAqIEBwYXJhbSB7RXZlbnQgb3IgVG91Y2h9IHBvaW50ZXJcbiAqL1xucHJvdG8ucG9pbnRlclVwID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB0aGlzLmVtaXRFdmVudCggJ3BvaW50ZXJVcCcsIFsgZXZlbnQsIHBvaW50ZXIgXSApO1xuICB0aGlzLl9kcmFnUG9pbnRlclVwKCBldmVudCwgcG9pbnRlciApO1xufTtcblxucHJvdG8uX2RyYWdQb2ludGVyVXAgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIGlmICggdGhpcy5pc0RyYWdnaW5nICkge1xuICAgIHRoaXMuX2RyYWdFbmQoIGV2ZW50LCBwb2ludGVyICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gcG9pbnRlciBkaWRuJ3QgbW92ZSBlbm91Z2ggZm9yIGRyYWcgdG8gc3RhcnRcbiAgICB0aGlzLl9zdGF0aWNDbGljayggZXZlbnQsIHBvaW50ZXIgKTtcbiAgfVxufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZHJhZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vLyBkcmFnU3RhcnRcbnByb3RvLl9kcmFnU3RhcnQgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHRoaXMuaXNEcmFnZ2luZyA9IHRydWU7XG4gIC8vIHByZXZlbnQgY2xpY2tzXG4gIHRoaXMuaXNQcmV2ZW50aW5nQ2xpY2tzID0gdHJ1ZTtcbiAgdGhpcy5kcmFnU3RhcnQoIGV2ZW50LCBwb2ludGVyICk7XG59O1xuXG5wcm90by5kcmFnU3RhcnQgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHRoaXMuZW1pdEV2ZW50KCAnZHJhZ1N0YXJ0JywgWyBldmVudCwgcG9pbnRlciBdICk7XG59O1xuXG4vLyBkcmFnTW92ZVxucHJvdG8uX2RyYWdNb3ZlID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyLCBtb3ZlVmVjdG9yICkge1xuICAvLyBkbyBub3QgZHJhZyBpZiBub3QgZHJhZ2dpbmcgeWV0XG4gIGlmICggIXRoaXMuaXNEcmFnZ2luZyApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLmRyYWdNb3ZlKCBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciApO1xufTtcblxucHJvdG8uZHJhZ01vdmUgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIsIG1vdmVWZWN0b3IgKSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIHRoaXMuZW1pdEV2ZW50KCAnZHJhZ01vdmUnLCBbIGV2ZW50LCBwb2ludGVyLCBtb3ZlVmVjdG9yIF0gKTtcbn07XG5cbi8vIGRyYWdFbmRcbnByb3RvLl9kcmFnRW5kID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICAvLyBzZXQgZmxhZ3NcbiAgdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7XG4gIC8vIHJlLWVuYWJsZSBjbGlja2luZyBhc3luY1xuICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcbiAgICBkZWxldGUgdGhpcy5pc1ByZXZlbnRpbmdDbGlja3M7XG4gIH0uYmluZCggdGhpcyApICk7XG5cbiAgdGhpcy5kcmFnRW5kKCBldmVudCwgcG9pbnRlciApO1xufTtcblxucHJvdG8uZHJhZ0VuZCA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgdGhpcy5lbWl0RXZlbnQoICdkcmFnRW5kJywgWyBldmVudCwgcG9pbnRlciBdICk7XG59O1xuXG4vLyAtLS0tLSBvbmNsaWNrIC0tLS0tIC8vXG5cbi8vIGhhbmRsZSBhbGwgY2xpY2tzIGFuZCBwcmV2ZW50IGNsaWNrcyB3aGVuIGRyYWdnaW5nXG5wcm90by5vbmNsaWNrID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICBpZiAoIHRoaXMuaXNQcmV2ZW50aW5nQ2xpY2tzICkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbn07XG5cbi8vIC0tLS0tIHN0YXRpY0NsaWNrIC0tLS0tIC8vXG5cbi8vIHRyaWdnZXJlZCBhZnRlciBwb2ludGVyIGRvd24gJiB1cCB3aXRoIG5vL3RpbnkgbW92ZW1lbnRcbnByb3RvLl9zdGF0aWNDbGljayA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgLy8gaWdub3JlIGVtdWxhdGVkIG1vdXNlIHVwIGNsaWNrc1xuICBpZiAoIHRoaXMuaXNJZ25vcmluZ01vdXNlVXAgJiYgZXZlbnQudHlwZSA9PSAnbW91c2V1cCcgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5zdGF0aWNDbGljayggZXZlbnQsIHBvaW50ZXIgKTtcblxuICAvLyBzZXQgZmxhZyBmb3IgZW11bGF0ZWQgY2xpY2tzIDMwMG1zIGFmdGVyIHRvdWNoZW5kXG4gIGlmICggZXZlbnQudHlwZSAhPSAnbW91c2V1cCcgKSB7XG4gICAgdGhpcy5pc0lnbm9yaW5nTW91c2VVcCA9IHRydWU7XG4gICAgLy8gcmVzZXQgZmxhZyBhZnRlciAzMDBtc1xuICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuICAgICAgZGVsZXRlIHRoaXMuaXNJZ25vcmluZ01vdXNlVXA7XG4gICAgfS5iaW5kKCB0aGlzICksIDQwMCApO1xuICB9XG59O1xuXG5wcm90by5zdGF0aWNDbGljayA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgdGhpcy5lbWl0RXZlbnQoICdzdGF0aWNDbGljaycsIFsgZXZlbnQsIHBvaW50ZXIgXSApO1xufTtcblxuLy8gLS0tLS0gdXRpbHMgLS0tLS0gLy9cblxuVW5pZHJhZ2dlci5nZXRQb2ludGVyUG9pbnQgPSBVbmlwb2ludGVyLmdldFBvaW50ZXJQb2ludDtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbnJldHVybiBVbmlkcmFnZ2VyO1xuXG59KSk7XG5cbn0se1widW5pcG9pbnRlclwiOjQwfV0sMjM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLy8gYWRkLCByZW1vdmUgY2VsbFxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgICByZXF1aXJlKCcuL2NvcmUnKSxcbiAgICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKSxcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgZmFjdG9yeShcbiAgICAgICAgd2luZG93LkZsaWNraXR5LFxuICAgICAgICB3aW5kb3cuZml6enlVSVV0aWxzLFxuICAgICk7XG4gIH1cblxufSggdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uIGZhY3RvcnkoIEZsaWNraXR5LCB1dGlscyApIHtcblxuLy8gYXBwZW5kIGNlbGxzIHRvIGEgZG9jdW1lbnQgZnJhZ21lbnRcbmZ1bmN0aW9uIGdldENlbGxzRnJhZ21lbnQoIGNlbGxzICkge1xuICBsZXQgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gIGNlbGxzLmZvckVhY2goICggY2VsbCApID0+IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjZWxsLmVsZW1lbnQgKSApO1xuICByZXR1cm4gZnJhZ21lbnQ7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGFkZC9yZW1vdmUgY2VsbCBwcm90b3R5cGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxubGV0IHByb3RvID0gRmxpY2tpdHkucHJvdG90eXBlO1xuXG4vKipcbiAqIEluc2VydCwgcHJlcGVuZCwgb3IgYXBwZW5kIGNlbGxzXG4gKiBAcGFyYW0ge1tFbGVtZW50LCBBcnJheSwgTm9kZUxpc3RdfSBlbGVtcyAtIEVsZW1lbnRzIHRvIGluc2VydFxuICogQHBhcmFtIHtJbnRlZ2VyfSBpbmRleCAtIFplcm8tYmFzZWQgbnVtYmVyIHRvIGluc2VydFxuICovXG5wcm90by5pbnNlcnQgPSBmdW5jdGlvbiggZWxlbXMsIGluZGV4ICkge1xuICBsZXQgY2VsbHMgPSB0aGlzLl9tYWtlQ2VsbHMoIGVsZW1zICk7XG4gIGlmICggIWNlbGxzIHx8ICFjZWxscy5sZW5ndGggKSByZXR1cm47XG5cbiAgbGV0IGxlbiA9IHRoaXMuY2VsbHMubGVuZ3RoO1xuICAvLyBkZWZhdWx0IHRvIGFwcGVuZFxuICBpbmRleCA9IGluZGV4ID09PSB1bmRlZmluZWQgPyBsZW4gOiBpbmRleDtcbiAgLy8gYWRkIGNlbGxzIHdpdGggZG9jdW1lbnQgZnJhZ21lbnRcbiAgbGV0IGZyYWdtZW50ID0gZ2V0Q2VsbHNGcmFnbWVudCggY2VsbHMgKTtcbiAgLy8gYXBwZW5kIHRvIHNsaWRlclxuICBsZXQgaXNBcHBlbmQgPSBpbmRleCA9PT0gbGVuO1xuICBpZiAoIGlzQXBwZW5kICkge1xuICAgIHRoaXMuc2xpZGVyLmFwcGVuZENoaWxkKCBmcmFnbWVudCApO1xuICB9IGVsc2Uge1xuICAgIGxldCBpbnNlcnRDZWxsRWxlbWVudCA9IHRoaXMuY2VsbHNbIGluZGV4IF0uZWxlbWVudDtcbiAgICB0aGlzLnNsaWRlci5pbnNlcnRCZWZvcmUoIGZyYWdtZW50LCBpbnNlcnRDZWxsRWxlbWVudCApO1xuICB9XG4gIC8vIGFkZCB0byB0aGlzLmNlbGxzXG4gIGlmICggaW5kZXggPT09IDAgKSB7XG4gICAgLy8gcHJlcGVuZCwgYWRkIHRvIHN0YXJ0XG4gICAgdGhpcy5jZWxscyA9IGNlbGxzLmNvbmNhdCggdGhpcy5jZWxscyApO1xuICB9IGVsc2UgaWYgKCBpc0FwcGVuZCApIHtcbiAgICAvLyBhcHBlbmQsIGFkZCB0byBlbmRcbiAgICB0aGlzLmNlbGxzID0gdGhpcy5jZWxscy5jb25jYXQoIGNlbGxzICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gaW5zZXJ0IGluIHRoaXMuY2VsbHNcbiAgICBsZXQgZW5kQ2VsbHMgPSB0aGlzLmNlbGxzLnNwbGljZSggaW5kZXgsIGxlbiAtIGluZGV4ICk7XG4gICAgdGhpcy5jZWxscyA9IHRoaXMuY2VsbHMuY29uY2F0KCBjZWxscyApLmNvbmNhdCggZW5kQ2VsbHMgKTtcbiAgfVxuXG4gIHRoaXMuX3NpemVDZWxscyggY2VsbHMgKTtcbiAgdGhpcy5jZWxsQ2hhbmdlKCBpbmRleCApO1xuICB0aGlzLnBvc2l0aW9uU2xpZGVyQXRTZWxlY3RlZCgpO1xufTtcblxucHJvdG8uYXBwZW5kID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICB0aGlzLmluc2VydCggZWxlbXMsIHRoaXMuY2VsbHMubGVuZ3RoICk7XG59O1xuXG5wcm90by5wcmVwZW5kID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICB0aGlzLmluc2VydCggZWxlbXMsIDAgKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGNlbGxzXG4gKiBAcGFyYW0ge1tFbGVtZW50LCBBcnJheSwgTm9kZUxpc3RdfSBlbGVtcyAtIEVMZW1lbnRzIHRvIHJlbW92ZVxuICovXG5wcm90by5yZW1vdmUgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIGxldCBjZWxscyA9IHRoaXMuZ2V0Q2VsbHMoIGVsZW1zICk7XG4gIGlmICggIWNlbGxzIHx8ICFjZWxscy5sZW5ndGggKSByZXR1cm47XG5cbiAgbGV0IG1pbkNlbGxJbmRleCA9IHRoaXMuY2VsbHMubGVuZ3RoIC0gMTtcbiAgLy8gcmVtb3ZlIGNlbGxzIGZyb20gY29sbGVjdGlvbiAmIERPTVxuICBjZWxscy5mb3JFYWNoKCAoIGNlbGwgKSA9PiB7XG4gICAgY2VsbC5yZW1vdmUoKTtcbiAgICBsZXQgaW5kZXggPSB0aGlzLmNlbGxzLmluZGV4T2YoIGNlbGwgKTtcbiAgICBtaW5DZWxsSW5kZXggPSBNYXRoLm1pbiggaW5kZXgsIG1pbkNlbGxJbmRleCApO1xuICAgIHV0aWxzLnJlbW92ZUZyb20oIHRoaXMuY2VsbHMsIGNlbGwgKTtcbiAgfSApO1xuXG4gIHRoaXMuY2VsbENoYW5nZSggbWluQ2VsbEluZGV4ICk7XG4gIHRoaXMucG9zaXRpb25TbGlkZXJBdFNlbGVjdGVkKCk7XG59O1xuXG4vKipcbiAqIGxvZ2ljIHRvIGJlIHJ1biBhZnRlciBhIGNlbGwncyBzaXplIGNoYW5nZXNcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbSAtIGNlbGwncyBlbGVtZW50XG4gKi9cbnByb3RvLmNlbGxTaXplQ2hhbmdlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIGxldCBjZWxsID0gdGhpcy5nZXRDZWxsKCBlbGVtICk7XG4gIGlmICggIWNlbGwgKSByZXR1cm47XG5cbiAgY2VsbC5nZXRTaXplKCk7XG5cbiAgbGV0IGluZGV4ID0gdGhpcy5jZWxscy5pbmRleE9mKCBjZWxsICk7XG4gIHRoaXMuY2VsbENoYW5nZSggaW5kZXggKTtcbiAgLy8gZG8gbm90IHBvc2l0aW9uIHNsaWRlciBhZnRlciBsYXp5IGxvYWRcbn07XG5cbi8qKlxuICogbG9naWMgYW55IHRpbWUgYSBjZWxsIGlzIGNoYW5nZWQ6IGFkZGVkLCByZW1vdmVkLCBvciBzaXplIGNoYW5nZWRcbiAqIEBwYXJhbSB7SW50ZWdlcn0gY2hhbmdlZENlbGxJbmRleCAtIGluZGV4IG9mIHRoZSBjaGFuZ2VkIGNlbGwsIG9wdGlvbmFsXG4gKi9cbnByb3RvLmNlbGxDaGFuZ2UgPSBmdW5jdGlvbiggY2hhbmdlZENlbGxJbmRleCApIHtcbiAgbGV0IHByZXZTZWxlY3RlZEVsZW0gPSB0aGlzLnNlbGVjdGVkRWxlbWVudDtcbiAgdGhpcy5fcG9zaXRpb25DZWxscyggY2hhbmdlZENlbGxJbmRleCApO1xuICB0aGlzLl91cGRhdGVXcmFwU2hpZnRDZWxscygpO1xuICB0aGlzLnNldEdhbGxlcnlTaXplKCk7XG4gIC8vIHVwZGF0ZSBzZWxlY3RlZEluZGV4LCB0cnkgdG8gbWFpbnRhaW4gcG9zaXRpb24gJiBzZWxlY3QgcHJldmlvdXMgc2VsZWN0ZWQgZWxlbWVudFxuICBsZXQgY2VsbCA9IHRoaXMuZ2V0Q2VsbCggcHJldlNlbGVjdGVkRWxlbSApO1xuICBpZiAoIGNlbGwgKSB0aGlzLnNlbGVjdGVkSW5kZXggPSB0aGlzLmdldENlbGxTbGlkZUluZGV4KCBjZWxsICk7XG4gIHRoaXMuc2VsZWN0ZWRJbmRleCA9IE1hdGgubWluKCB0aGlzLnNsaWRlcy5sZW5ndGggLSAxLCB0aGlzLnNlbGVjdGVkSW5kZXggKTtcblxuICB0aGlzLmVtaXRFdmVudCggJ2NlbGxDaGFuZ2UnLCBbIGNoYW5nZWRDZWxsSW5kZXggXSApO1xuICAvLyBwb3NpdGlvbiBzbGlkZXJcbiAgdGhpcy5zZWxlY3QoIHRoaXMuc2VsZWN0ZWRJbmRleCApO1xufTtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbnJldHVybiBGbGlja2l0eTtcblxufSApICk7XG5cbn0se1wiLi9jb3JlXCI6MjYsXCJmaXp6eS11aS11dGlsc1wiOjN9XSwyNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vLyBhbmltYXRlXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJykgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5GbGlja2l0eSA9IHdpbmRvdy5GbGlja2l0eSB8fCB7fTtcbiAgICB3aW5kb3cuRmxpY2tpdHkuYW5pbWF0ZVByb3RvdHlwZSA9IGZhY3RvcnkoIHdpbmRvdy5maXp6eVVJVXRpbHMgKTtcbiAgfVxuXG59KCB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24gZmFjdG9yeSggdXRpbHMgKSB7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGFuaW1hdGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxubGV0IHByb3RvID0ge307XG5cbnByb3RvLnN0YXJ0QW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG4gIGlmICggdGhpcy5pc0FuaW1hdGluZyApIHJldHVybjtcblxuICB0aGlzLmlzQW5pbWF0aW5nID0gdHJ1ZTtcbiAgdGhpcy5yZXN0aW5nRnJhbWVzID0gMDtcbiAgdGhpcy5hbmltYXRlKCk7XG59O1xuXG5wcm90by5hbmltYXRlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuYXBwbHlEcmFnRm9yY2UoKTtcbiAgdGhpcy5hcHBseVNlbGVjdGVkQXR0cmFjdGlvbigpO1xuXG4gIGxldCBwcmV2aW91c1ggPSB0aGlzLng7XG5cbiAgdGhpcy5pbnRlZ3JhdGVQaHlzaWNzKCk7XG4gIHRoaXMucG9zaXRpb25TbGlkZXIoKTtcbiAgdGhpcy5zZXR0bGUoIHByZXZpb3VzWCApO1xuICAvLyBhbmltYXRlIG5leHQgZnJhbWVcbiAgaWYgKCB0aGlzLmlzQW5pbWF0aW5nICkgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCAoKSA9PiB0aGlzLmFuaW1hdGUoKSApO1xufTtcblxucHJvdG8ucG9zaXRpb25TbGlkZXIgPSBmdW5jdGlvbigpIHtcbiAgbGV0IHggPSB0aGlzLng7XG4gIC8vIHdyYXAgcG9zaXRpb24gYXJvdW5kXG4gIGlmICggdGhpcy5pc1dyYXBwaW5nICkge1xuICAgIHggPSB1dGlscy5tb2R1bG8oIHgsIHRoaXMuc2xpZGVhYmxlV2lkdGggKSAtIHRoaXMuc2xpZGVhYmxlV2lkdGg7XG4gICAgdGhpcy5zaGlmdFdyYXBDZWxscyggeCApO1xuICB9XG5cbiAgdGhpcy5zZXRUcmFuc2xhdGVYKCB4LCB0aGlzLmlzQW5pbWF0aW5nICk7XG4gIHRoaXMuZGlzcGF0Y2hTY3JvbGxFdmVudCgpO1xufTtcblxucHJvdG8uc2V0VHJhbnNsYXRlWCA9IGZ1bmN0aW9uKCB4LCBpczNkICkge1xuICB4ICs9IHRoaXMuY3Vyc29yUG9zaXRpb247XG4gIC8vIHJldmVyc2UgaWYgcmlnaHQtdG8tbGVmdCBhbmQgdXNpbmcgdHJhbnNmb3JtXG4gIGlmICggdGhpcy5vcHRpb25zLnJpZ2h0VG9MZWZ0ICkgeCA9IC14O1xuICBsZXQgdHJhbnNsYXRlWCA9IHRoaXMuZ2V0UG9zaXRpb25WYWx1ZSggeCApO1xuICAvLyB1c2UgM0QgdHJhbnNmb3JtcyBmb3IgaGFyZHdhcmUgYWNjZWxlcmF0aW9uIG9uIGlPU1xuICAvLyBidXQgdXNlIDJEIHdoZW4gc2V0dGxlZCwgZm9yIGJldHRlciBmb250LXJlbmRlcmluZ1xuICB0aGlzLnNsaWRlci5zdHlsZS50cmFuc2Zvcm0gPSBpczNkID9cbiAgICBgdHJhbnNsYXRlM2QoJHt0cmFuc2xhdGVYfSwwLDApYCA6IGB0cmFuc2xhdGVYKCR7dHJhbnNsYXRlWH0pYDtcbn07XG5cbnByb3RvLmRpc3BhdGNoU2Nyb2xsRXZlbnQgPSBmdW5jdGlvbigpIHtcbiAgbGV0IGZpcnN0U2xpZGUgPSB0aGlzLnNsaWRlc1swXTtcbiAgaWYgKCAhZmlyc3RTbGlkZSApIHJldHVybjtcblxuICBsZXQgcG9zaXRpb25YID0gLXRoaXMueCAtIGZpcnN0U2xpZGUudGFyZ2V0O1xuICBsZXQgcHJvZ3Jlc3MgPSBwb3NpdGlvblggLyB0aGlzLnNsaWRlc1dpZHRoO1xuICB0aGlzLmRpc3BhdGNoRXZlbnQoICdzY3JvbGwnLCBudWxsLCBbIHByb2dyZXNzLCBwb3NpdGlvblggXSApO1xufTtcblxucHJvdG8ucG9zaXRpb25TbGlkZXJBdFNlbGVjdGVkID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMuY2VsbHMubGVuZ3RoICkgcmV0dXJuO1xuXG4gIHRoaXMueCA9IC10aGlzLnNlbGVjdGVkU2xpZGUudGFyZ2V0O1xuICB0aGlzLnZlbG9jaXR5ID0gMDsgLy8gc3RvcCB3b2JibGVcbiAgdGhpcy5wb3NpdGlvblNsaWRlcigpO1xufTtcblxucHJvdG8uZ2V0UG9zaXRpb25WYWx1ZSA9IGZ1bmN0aW9uKCBwb3NpdGlvbiApIHtcbiAgaWYgKCB0aGlzLm9wdGlvbnMucGVyY2VudFBvc2l0aW9uICkge1xuICAgIC8vIHBlcmNlbnQgcG9zaXRpb24sIHJvdW5kIHRvIDIgZGlnaXRzLCBsaWtlIDEyLjM0JVxuICAgIHJldHVybiAoIE1hdGgucm91bmQoICggcG9zaXRpb24gLyB0aGlzLnNpemUuaW5uZXJXaWR0aCApICogMTAwMDAgKSAqIDAuMDEgKSArICclJztcbiAgfSBlbHNlIHtcbiAgICAvLyBwaXhlbCBwb3NpdGlvbmluZ1xuICAgIHJldHVybiBNYXRoLnJvdW5kKCBwb3NpdGlvbiApICsgJ3B4JztcbiAgfVxufTtcblxucHJvdG8uc2V0dGxlID0gZnVuY3Rpb24oIHByZXZpb3VzWCApIHtcbiAgLy8ga2VlcCB0cmFjayBvZiBmcmFtZXMgd2hlcmUgeCBoYXNuJ3QgbW92ZWRcbiAgbGV0IGlzUmVzdGluZyA9ICF0aGlzLmlzUG9pbnRlckRvd24gJiZcbiAgICAgIE1hdGgucm91bmQoIHRoaXMueCAqIDEwMCApID09PSBNYXRoLnJvdW5kKCBwcmV2aW91c1ggKiAxMDAgKTtcbiAgaWYgKCBpc1Jlc3RpbmcgKSB0aGlzLnJlc3RpbmdGcmFtZXMrKztcbiAgLy8gc3RvcCBhbmltYXRpbmcgaWYgcmVzdGluZyBmb3IgMyBvciBtb3JlIGZyYW1lc1xuICBpZiAoIHRoaXMucmVzdGluZ0ZyYW1lcyA+IDIgKSB7XG4gICAgdGhpcy5pc0FuaW1hdGluZyA9IGZhbHNlO1xuICAgIGRlbGV0ZSB0aGlzLmlzRnJlZVNjcm9sbGluZztcbiAgICAvLyByZW5kZXIgcG9zaXRpb24gd2l0aCB0cmFuc2xhdGVYIHdoZW4gc2V0dGxlZFxuICAgIHRoaXMucG9zaXRpb25TbGlkZXIoKTtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoICdzZXR0bGUnLCBudWxsLCBbIHRoaXMuc2VsZWN0ZWRJbmRleCBdICk7XG4gIH1cbn07XG5cbnByb3RvLnNoaWZ0V3JhcENlbGxzID0gZnVuY3Rpb24oIHggKSB7XG4gIC8vIHNoaWZ0IGJlZm9yZSBjZWxsc1xuICBsZXQgYmVmb3JlR2FwID0gdGhpcy5jdXJzb3JQb3NpdGlvbiArIHg7XG4gIHRoaXMuX3NoaWZ0Q2VsbHMoIHRoaXMuYmVmb3JlU2hpZnRDZWxscywgYmVmb3JlR2FwLCAtMSApO1xuICAvLyBzaGlmdCBhZnRlciBjZWxsc1xuICBsZXQgYWZ0ZXJHYXAgPSB0aGlzLnNpemUuaW5uZXJXaWR0aCAtICggeCArIHRoaXMuc2xpZGVhYmxlV2lkdGggKyB0aGlzLmN1cnNvclBvc2l0aW9uICk7XG4gIHRoaXMuX3NoaWZ0Q2VsbHMoIHRoaXMuYWZ0ZXJTaGlmdENlbGxzLCBhZnRlckdhcCwgMSApO1xufTtcblxucHJvdG8uX3NoaWZ0Q2VsbHMgPSBmdW5jdGlvbiggY2VsbHMsIGdhcCwgc2hpZnQgKSB7XG4gIGNlbGxzLmZvckVhY2goICggY2VsbCApID0+IHtcbiAgICBsZXQgY2VsbFNoaWZ0ID0gZ2FwID4gMCA/IHNoaWZ0IDogMDtcbiAgICB0aGlzLl93cmFwU2hpZnRDZWxsKCBjZWxsLCBjZWxsU2hpZnQgKTtcbiAgICBnYXAgLT0gY2VsbC5zaXplLm91dGVyV2lkdGg7XG4gIH0gKTtcbn07XG5cbnByb3RvLl91bnNoaWZ0Q2VsbHMgPSBmdW5jdGlvbiggY2VsbHMgKSB7XG4gIGlmICggIWNlbGxzIHx8ICFjZWxscy5sZW5ndGggKSByZXR1cm47XG5cbiAgY2VsbHMuZm9yRWFjaCggKCBjZWxsICkgPT4gdGhpcy5fd3JhcFNoaWZ0Q2VsbCggY2VsbCwgMCApICk7XG59O1xuXG4vLyBAcGFyYW0ge0ludGVnZXJ9IHNoaWZ0IC0gMCwgMSwgb3IgLTFcbnByb3RvLl93cmFwU2hpZnRDZWxsID0gZnVuY3Rpb24oIGNlbGwsIHNoaWZ0ICkge1xuICB0aGlzLl9yZW5kZXJDZWxsUG9zaXRpb24oIGNlbGwsIGNlbGwueCArIHRoaXMuc2xpZGVhYmxlV2lkdGggKiBzaGlmdCApO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gcGh5c2ljcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5wcm90by5pbnRlZ3JhdGVQaHlzaWNzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMueCArPSB0aGlzLnZlbG9jaXR5O1xuICB0aGlzLnZlbG9jaXR5ICo9IHRoaXMuZ2V0RnJpY3Rpb25GYWN0b3IoKTtcbn07XG5cbnByb3RvLmFwcGx5Rm9yY2UgPSBmdW5jdGlvbiggZm9yY2UgKSB7XG4gIHRoaXMudmVsb2NpdHkgKz0gZm9yY2U7XG59O1xuXG5wcm90by5nZXRGcmljdGlvbkZhY3RvciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gMSAtIHRoaXMub3B0aW9uc1sgdGhpcy5pc0ZyZWVTY3JvbGxpbmcgPyAnZnJlZVNjcm9sbEZyaWN0aW9uJyA6ICdmcmljdGlvbicgXTtcbn07XG5cbnByb3RvLmdldFJlc3RpbmdQb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAvLyBteSB0aGFua3MgdG8gU3RldmVuIFdpdHRlbnMsIHdobyBzaW1wbGlmaWVkIHRoaXMgbWF0aCBncmVhdGx5XG4gIHJldHVybiB0aGlzLnggKyB0aGlzLnZlbG9jaXR5IC8gKCAxIC0gdGhpcy5nZXRGcmljdGlvbkZhY3RvcigpICk7XG59O1xuXG5wcm90by5hcHBseURyYWdGb3JjZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLmlzRHJhZ2dhYmxlIHx8ICF0aGlzLmlzUG9pbnRlckRvd24gKSByZXR1cm47XG5cbiAgLy8gY2hhbmdlIHRoZSBwb3NpdGlvbiB0byBkcmFnIHBvc2l0aW9uIGJ5IGFwcGx5aW5nIGZvcmNlXG4gIGxldCBkcmFnVmVsb2NpdHkgPSB0aGlzLmRyYWdYIC0gdGhpcy54O1xuICBsZXQgZHJhZ0ZvcmNlID0gZHJhZ1ZlbG9jaXR5IC0gdGhpcy52ZWxvY2l0eTtcbiAgdGhpcy5hcHBseUZvcmNlKCBkcmFnRm9yY2UgKTtcbn07XG5cbnByb3RvLmFwcGx5U2VsZWN0ZWRBdHRyYWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gIC8vIGRvIG5vdCBhdHRyYWN0IGlmIHBvaW50ZXIgZG93biBvciBubyBzbGlkZXNcbiAgbGV0IGRyYWdEb3duID0gdGhpcy5pc0RyYWdnYWJsZSAmJiB0aGlzLmlzUG9pbnRlckRvd247XG4gIGlmICggZHJhZ0Rvd24gfHwgdGhpcy5pc0ZyZWVTY3JvbGxpbmcgfHwgIXRoaXMuc2xpZGVzLmxlbmd0aCApIHJldHVybjtcblxuICBsZXQgZGlzdGFuY2UgPSB0aGlzLnNlbGVjdGVkU2xpZGUudGFyZ2V0ICogLTEgLSB0aGlzLng7XG4gIGxldCBmb3JjZSA9IGRpc3RhbmNlICogdGhpcy5vcHRpb25zLnNlbGVjdGVkQXR0cmFjdGlvbjtcbiAgdGhpcy5hcHBseUZvcmNlKCBmb3JjZSApO1xufTtcblxucmV0dXJuIHByb3RvO1xuXG59ICkgKTtcblxufSx7XCJmaXp6eS11aS11dGlsc1wiOjN9XSwyNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vLyBGbGlja2l0eS5DZWxsXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoIHJlcXVpcmUoJ2dldC1zaXplJykgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5GbGlja2l0eSA9IHdpbmRvdy5GbGlja2l0eSB8fCB7fTtcbiAgICB3aW5kb3cuRmxpY2tpdHkuQ2VsbCA9IGZhY3RvcnkoIHdpbmRvdy5nZXRTaXplICk7XG4gIH1cblxufSggdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uIGZhY3RvcnkoIGdldFNpemUgKSB7XG5cbmNvbnN0IGNlbGxDbGFzc05hbWUgPSAnZmxpY2tpdHktY2VsbCc7XG5cbmZ1bmN0aW9uIENlbGwoIGVsZW0gKSB7XG4gIHRoaXMuZWxlbWVudCA9IGVsZW07XG4gIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCBjZWxsQ2xhc3NOYW1lICk7XG5cbiAgdGhpcy54ID0gMDtcbiAgdGhpcy51bnNlbGVjdCgpO1xufVxuXG5sZXQgcHJvdG8gPSBDZWxsLnByb3RvdHlwZTtcblxucHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICAvLyByZXNldCBzdHlsZVxuICB0aGlzLnVuc2VsZWN0KCk7XG4gIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCBjZWxsQ2xhc3NOYW1lICk7XG4gIHRoaXMuZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSAnJztcbiAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcbn07XG5cbnByb3RvLmdldFNpemUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zaXplID0gZ2V0U2l6ZSggdGhpcy5lbGVtZW50ICk7XG59O1xuXG5wcm90by5zZWxlY3QgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLXNlbGVjdGVkJyk7XG4gIHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7XG59O1xuXG5wcm90by51bnNlbGVjdCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtc2VsZWN0ZWQnKTtcbiAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSggJ2FyaWEtaGlkZGVuJywgJ3RydWUnICk7XG59O1xuXG5wcm90by5yZW1vdmUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5lbGVtZW50LnJlbW92ZSgpO1xufTtcblxucmV0dXJuIENlbGw7XG5cbn0gKSApO1xuXG59LHtcImdldC1zaXplXCI6MzV9XSwyNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vLyBGbGlja2l0eSBtYWluXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtcGFyYW1zICovXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdyxcbiAgICAgICAgcmVxdWlyZSgnZXYtZW1pdHRlcicpLFxuICAgICAgICByZXF1aXJlKCdnZXQtc2l6ZScpLFxuICAgICAgICByZXF1aXJlKCdmaXp6eS11aS11dGlscycpLFxuICAgICAgICByZXF1aXJlKCcuL2NlbGwnKSxcbiAgICAgICAgcmVxdWlyZSgnLi9zbGlkZScpLFxuICAgICAgICByZXF1aXJlKCcuL2FuaW1hdGUnKSxcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgbGV0IF9GbGlja2l0eSA9IHdpbmRvdy5GbGlja2l0eTtcblxuICAgIHdpbmRvdy5GbGlja2l0eSA9IGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdyxcbiAgICAgICAgd2luZG93LkV2RW1pdHRlcixcbiAgICAgICAgd2luZG93LmdldFNpemUsXG4gICAgICAgIHdpbmRvdy5maXp6eVVJVXRpbHMsXG4gICAgICAgIF9GbGlja2l0eS5DZWxsLFxuICAgICAgICBfRmxpY2tpdHkuU2xpZGUsXG4gICAgICAgIF9GbGlja2l0eS5hbmltYXRlUHJvdG90eXBlLFxuICAgICk7XG4gIH1cblxufSggdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsXG4gICAgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBFdkVtaXR0ZXIsIGdldFNpemUsIHV0aWxzLCBDZWxsLCBTbGlkZSwgYW5pbWF0ZVByb3RvdHlwZSApIHtcbi8qIGVzbGludC1lbmFibGUgbWF4LXBhcmFtcyAqL1xuXG4vLyB2YXJzXG5jb25zdCB7IGdldENvbXB1dGVkU3R5bGUsIGNvbnNvbGUgfSA9IHdpbmRvdztcbmxldCB7IGpRdWVyeSB9ID0gd2luZG93O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBGbGlja2l0eSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vLyBnbG9iYWxseSB1bmlxdWUgaWRlbnRpZmllcnNcbmxldCBHVUlEID0gMDtcbi8vIGludGVybmFsIHN0b3JlIG9mIGFsbCBGbGlja2l0eSBpbnRhbmNlc1xubGV0IGluc3RhbmNlcyA9IHt9O1xuXG5mdW5jdGlvbiBGbGlja2l0eSggZWxlbWVudCwgb3B0aW9ucyApIHtcbiAgbGV0IHF1ZXJ5RWxlbWVudCA9IHV0aWxzLmdldFF1ZXJ5RWxlbWVudCggZWxlbWVudCApO1xuICBpZiAoICFxdWVyeUVsZW1lbnQgKSB7XG4gICAgaWYgKCBjb25zb2xlICkgY29uc29sZS5lcnJvcihgQmFkIGVsZW1lbnQgZm9yIEZsaWNraXR5OiAke3F1ZXJ5RWxlbWVudCB8fCBlbGVtZW50fWApO1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLmVsZW1lbnQgPSBxdWVyeUVsZW1lbnQ7XG4gIC8vIGRvIG5vdCBpbml0aWFsaXplIHR3aWNlIG9uIHNhbWUgZWxlbWVudFxuICBpZiAoIHRoaXMuZWxlbWVudC5mbGlja2l0eUdVSUQgKSB7XG4gICAgbGV0IGluc3RhbmNlID0gaW5zdGFuY2VzWyB0aGlzLmVsZW1lbnQuZmxpY2tpdHlHVUlEIF07XG4gICAgaWYgKCBpbnN0YW5jZSApIGluc3RhbmNlLm9wdGlvbiggb3B0aW9ucyApO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfVxuXG4gIC8vIGFkZCBqUXVlcnlcbiAgaWYgKCBqUXVlcnkgKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGpRdWVyeSggdGhpcy5lbGVtZW50ICk7XG4gIH1cbiAgLy8gb3B0aW9uc1xuICB0aGlzLm9wdGlvbnMgPSB7IC4uLnRoaXMuY29uc3RydWN0b3IuZGVmYXVsdHMgfTtcbiAgdGhpcy5vcHRpb24oIG9wdGlvbnMgKTtcblxuICAvLyBraWNrIHRoaW5ncyBvZmZcbiAgdGhpcy5fY3JlYXRlKCk7XG59XG5cbkZsaWNraXR5LmRlZmF1bHRzID0ge1xuICBhY2Nlc3NpYmlsaXR5OiB0cnVlLFxuICAvLyBhZGFwdGl2ZUhlaWdodDogZmFsc2UsXG4gIGNlbGxBbGlnbjogJ2NlbnRlcicsXG4gIC8vIGNlbGxTZWxlY3RvcjogdW5kZWZpbmVkLFxuICAvLyBjb250YWluOiBmYWxzZSxcbiAgZnJlZVNjcm9sbEZyaWN0aW9uOiAwLjA3NSwgLy8gZnJpY3Rpb24gd2hlbiBmcmVlLXNjcm9sbGluZ1xuICBmcmljdGlvbjogMC4yOCwgLy8gZnJpY3Rpb24gd2hlbiBzZWxlY3RpbmdcbiAgbmFtZXNwYWNlSlF1ZXJ5RXZlbnRzOiB0cnVlLFxuICAvLyBpbml0aWFsSW5kZXg6IDAsXG4gIHBlcmNlbnRQb3NpdGlvbjogdHJ1ZSxcbiAgcmVzaXplOiB0cnVlLFxuICBzZWxlY3RlZEF0dHJhY3Rpb246IDAuMDI1LFxuICBzZXRHYWxsZXJ5U2l6ZTogdHJ1ZSxcbiAgLy8gd2F0Y2hDU1M6IGZhbHNlLFxuICAvLyB3cmFwQXJvdW5kOiBmYWxzZVxufTtcblxuLy8gaGFzaCBvZiBtZXRob2RzIHRyaWdnZXJlZCBvbiBfY3JlYXRlKClcbkZsaWNraXR5LmNyZWF0ZSA9IHt9O1xuXG5sZXQgcHJvdG8gPSBGbGlja2l0eS5wcm90b3R5cGU7XG4vLyBpbmhlcml0IEV2ZW50RW1pdHRlclxuT2JqZWN0LmFzc2lnbiggcHJvdG8sIEV2RW1pdHRlci5wcm90b3R5cGUgKTtcblxucHJvdG8uX2NyZWF0ZSA9IGZ1bmN0aW9uKCkge1xuICBsZXQgeyByZXNpemUsIHdhdGNoQ1NTLCByaWdodFRvTGVmdCB9ID0gdGhpcy5vcHRpb25zO1xuICAvLyBhZGQgaWQgZm9yIEZsaWNraXR5LmRhdGFcbiAgbGV0IGlkID0gdGhpcy5ndWlkID0gKytHVUlEO1xuICB0aGlzLmVsZW1lbnQuZmxpY2tpdHlHVUlEID0gaWQ7IC8vIGV4cGFuZG9cbiAgaW5zdGFuY2VzWyBpZCBdID0gdGhpczsgLy8gYXNzb2NpYXRlIHZpYSBpZFxuICAvLyBpbml0aWFsIHByb3BlcnRpZXNcbiAgdGhpcy5zZWxlY3RlZEluZGV4ID0gMDtcbiAgLy8gaG93IG1hbnkgZnJhbWVzIHNsaWRlciBoYXMgYmVlbiBpbiBzYW1lIHBvc2l0aW9uXG4gIHRoaXMucmVzdGluZ0ZyYW1lcyA9IDA7XG4gIC8vIGluaXRpYWwgcGh5c2ljcyBwcm9wZXJ0aWVzXG4gIHRoaXMueCA9IDA7XG4gIHRoaXMudmVsb2NpdHkgPSAwO1xuICB0aGlzLmJlZ2luTWFyZ2luID0gcmlnaHRUb0xlZnQgPyAnbWFyZ2luUmlnaHQnIDogJ21hcmdpbkxlZnQnO1xuICB0aGlzLmVuZE1hcmdpbiA9IHJpZ2h0VG9MZWZ0ID8gJ21hcmdpbkxlZnQnIDogJ21hcmdpblJpZ2h0JztcbiAgLy8gY3JlYXRlIHZpZXdwb3J0ICYgc2xpZGVyXG4gIHRoaXMudmlld3BvcnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgdGhpcy52aWV3cG9ydC5jbGFzc05hbWUgPSAnZmxpY2tpdHktdmlld3BvcnQnO1xuICB0aGlzLl9jcmVhdGVTbGlkZXIoKTtcbiAgLy8gdXNlZCBmb3Iga2V5Ym9hcmQgbmF2aWdhdGlvblxuICB0aGlzLmZvY3VzYWJsZUVsZW1zID0gWyB0aGlzLmVsZW1lbnQgXTtcblxuICBpZiAoIHJlc2l6ZSB8fCB3YXRjaENTUyApIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggJ3Jlc2l6ZScsIHRoaXMgKTtcbiAgfVxuXG4gIC8vIGFkZCBsaXN0ZW5lcnMgZnJvbSBvbiBvcHRpb25cbiAgZm9yICggbGV0IGV2ZW50TmFtZSBpbiB0aGlzLm9wdGlvbnMub24gKSB7XG4gICAgbGV0IGxpc3RlbmVyID0gdGhpcy5vcHRpb25zLm9uWyBldmVudE5hbWUgXTtcbiAgICB0aGlzLm9uKCBldmVudE5hbWUsIGxpc3RlbmVyICk7XG4gIH1cblxuICBmb3IgKCBsZXQgbWV0aG9kIGluIEZsaWNraXR5LmNyZWF0ZSApIHtcbiAgICBGbGlja2l0eS5jcmVhdGVbIG1ldGhvZCBdLmNhbGwoIHRoaXMgKTtcbiAgfVxuXG4gIGlmICggd2F0Y2hDU1MgKSB7XG4gICAgdGhpcy53YXRjaENTUygpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuYWN0aXZhdGUoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBzZXQgb3B0aW9uc1xuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIHRvIGV4dGVuZFxuICovXG5wcm90by5vcHRpb24gPSBmdW5jdGlvbiggb3B0cyApIHtcbiAgT2JqZWN0LmFzc2lnbiggdGhpcy5vcHRpb25zLCBvcHRzICk7XG59O1xuXG5wcm90by5hY3RpdmF0ZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIHRoaXMuaXNBY3RpdmUgKSByZXR1cm47XG5cbiAgdGhpcy5pc0FjdGl2ZSA9IHRydWU7XG4gIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdmbGlja2l0eS1lbmFibGVkJyk7XG4gIGlmICggdGhpcy5vcHRpb25zLnJpZ2h0VG9MZWZ0ICkge1xuICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdmbGlja2l0eS1ydGwnKTtcbiAgfVxuXG4gIHRoaXMuZ2V0U2l6ZSgpO1xuICAvLyBtb3ZlIGluaXRpYWwgY2VsbCBlbGVtZW50cyBzbyB0aGV5IGNhbiBiZSBsb2FkZWQgYXMgY2VsbHNcbiAgbGV0IGNlbGxFbGVtcyA9IHRoaXMuX2ZpbHRlckZpbmRDZWxsRWxlbWVudHMoIHRoaXMuZWxlbWVudC5jaGlsZHJlbiApO1xuICB0aGlzLnNsaWRlci5hcHBlbmQoIC4uLmNlbGxFbGVtcyApO1xuICB0aGlzLnZpZXdwb3J0LmFwcGVuZCggdGhpcy5zbGlkZXIgKTtcbiAgdGhpcy5lbGVtZW50LmFwcGVuZCggdGhpcy52aWV3cG9ydCApO1xuICAvLyBnZXQgY2VsbHMgZnJvbSBjaGlsZHJlblxuICB0aGlzLnJlbG9hZENlbGxzKCk7XG5cbiAgaWYgKCB0aGlzLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSApIHtcbiAgICAvLyBhbGxvdyBlbGVtZW50IHRvIGZvY3VzYWJsZVxuICAgIHRoaXMuZWxlbWVudC50YWJJbmRleCA9IDA7XG4gICAgLy8gbGlzdGVuIGZvciBrZXkgcHJlc3Nlc1xuICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAna2V5ZG93bicsIHRoaXMgKTtcbiAgfVxuXG4gIHRoaXMuZW1pdEV2ZW50KCdhY3RpdmF0ZScpO1xuICB0aGlzLnNlbGVjdEluaXRpYWxJbmRleCgpO1xuICAvLyBmbGFnIGZvciBpbml0aWFsIGFjdGl2YXRpb24sIGZvciB1c2luZyBpbml0aWFsSW5kZXhcbiAgdGhpcy5pc0luaXRBY3RpdmF0ZWQgPSB0cnVlO1xuICAvLyByZWFkeSBldmVudC4gIzQ5M1xuICB0aGlzLmRpc3BhdGNoRXZlbnQoJ3JlYWR5Jyk7XG59O1xuXG4vLyBzbGlkZXIgcG9zaXRpb25zIHRoZSBjZWxsc1xucHJvdG8uX2NyZWF0ZVNsaWRlciA9IGZ1bmN0aW9uKCkge1xuICAvLyBzbGlkZXIgZWxlbWVudCBkb2VzIGFsbCB0aGUgcG9zaXRpb25pbmdcbiAgbGV0IHNsaWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBzbGlkZXIuY2xhc3NOYW1lID0gJ2ZsaWNraXR5LXNsaWRlcic7XG4gIHRoaXMuc2xpZGVyID0gc2xpZGVyO1xufTtcblxucHJvdG8uX2ZpbHRlckZpbmRDZWxsRWxlbWVudHMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIHJldHVybiB1dGlscy5maWx0ZXJGaW5kRWxlbWVudHMoIGVsZW1zLCB0aGlzLm9wdGlvbnMuY2VsbFNlbGVjdG9yICk7XG59O1xuXG4vLyBnb2VzIHRocm91Z2ggYWxsIGNoaWxkcmVuXG5wcm90by5yZWxvYWRDZWxscyA9IGZ1bmN0aW9uKCkge1xuICAvLyBjb2xsZWN0aW9uIG9mIGl0ZW0gZWxlbWVudHNcbiAgdGhpcy5jZWxscyA9IHRoaXMuX21ha2VDZWxscyggdGhpcy5zbGlkZXIuY2hpbGRyZW4gKTtcbiAgdGhpcy5wb3NpdGlvbkNlbGxzKCk7XG4gIHRoaXMuX3VwZGF0ZVdyYXBTaGlmdENlbGxzKCk7XG4gIHRoaXMuc2V0R2FsbGVyeVNpemUoKTtcbn07XG5cbi8qKlxuICogdHVybiBlbGVtZW50cyBpbnRvIEZsaWNraXR5LkNlbGxzXG4gKiBAcGFyYW0ge1tBcnJheSwgTm9kZUxpc3QsIEhUTUxFbGVtZW50XX0gZWxlbXMgLSBlbGVtZW50cyB0byBtYWtlIGludG8gY2VsbHNcbiAqIEByZXR1cm5zIHtBcnJheX0gaXRlbXMgLSBjb2xsZWN0aW9uIG9mIG5ldyBGbGlja2l0eSBDZWxsc1xuICovXG5wcm90by5fbWFrZUNlbGxzID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICBsZXQgY2VsbEVsZW1zID0gdGhpcy5fZmlsdGVyRmluZENlbGxFbGVtZW50cyggZWxlbXMgKTtcblxuICAvLyBjcmVhdGUgbmV3IENlbGxzIGZvciBjb2xsZWN0aW9uXG4gIHJldHVybiBjZWxsRWxlbXMubWFwKCAoIGNlbGxFbGVtICkgPT4gbmV3IENlbGwoIGNlbGxFbGVtICkgKTtcbn07XG5cbnByb3RvLmdldExhc3RDZWxsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmNlbGxzWyB0aGlzLmNlbGxzLmxlbmd0aCAtIDEgXTtcbn07XG5cbnByb3RvLmdldExhc3RTbGlkZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zbGlkZXNbIHRoaXMuc2xpZGVzLmxlbmd0aCAtIDEgXTtcbn07XG5cbi8vIHBvc2l0aW9ucyBhbGwgY2VsbHNcbnByb3RvLnBvc2l0aW9uQ2VsbHMgPSBmdW5jdGlvbigpIHtcbiAgLy8gc2l6ZSBhbGwgY2VsbHNcbiAgdGhpcy5fc2l6ZUNlbGxzKCB0aGlzLmNlbGxzICk7XG4gIC8vIHBvc2l0aW9uIGFsbCBjZWxsc1xuICB0aGlzLl9wb3NpdGlvbkNlbGxzKCAwICk7XG59O1xuXG4vKipcbiAqIHBvc2l0aW9uIGNlcnRhaW4gY2VsbHNcbiAqIEBwYXJhbSB7SW50ZWdlcn0gaW5kZXggLSB3aGljaCBjZWxsIHRvIHN0YXJ0IHdpdGhcbiAqL1xucHJvdG8uX3Bvc2l0aW9uQ2VsbHMgPSBmdW5jdGlvbiggaW5kZXggKSB7XG4gIGluZGV4ID0gaW5kZXggfHwgMDtcbiAgLy8gYWxzbyBtZWFzdXJlIG1heENlbGxIZWlnaHRcbiAgLy8gc3RhcnQgMCBpZiBwb3NpdGlvbmluZyBhbGwgY2VsbHNcbiAgdGhpcy5tYXhDZWxsSGVpZ2h0ID0gaW5kZXggPyB0aGlzLm1heENlbGxIZWlnaHQgfHwgMCA6IDA7XG4gIGxldCBjZWxsWCA9IDA7XG4gIC8vIGdldCBjZWxsWFxuICBpZiAoIGluZGV4ID4gMCApIHtcbiAgICBsZXQgc3RhcnRDZWxsID0gdGhpcy5jZWxsc1sgaW5kZXggLSAxIF07XG4gICAgY2VsbFggPSBzdGFydENlbGwueCArIHN0YXJ0Q2VsbC5zaXplLm91dGVyV2lkdGg7XG4gIH1cblxuICB0aGlzLmNlbGxzLnNsaWNlKCBpbmRleCApLmZvckVhY2goICggY2VsbCApID0+IHtcbiAgICBjZWxsLnggPSBjZWxsWDtcbiAgICB0aGlzLl9yZW5kZXJDZWxsUG9zaXRpb24oIGNlbGwsIGNlbGxYICk7XG4gICAgY2VsbFggKz0gY2VsbC5zaXplLm91dGVyV2lkdGg7XG4gICAgdGhpcy5tYXhDZWxsSGVpZ2h0ID0gTWF0aC5tYXgoIGNlbGwuc2l6ZS5vdXRlckhlaWdodCwgdGhpcy5tYXhDZWxsSGVpZ2h0ICk7XG4gIH0gKTtcbiAgLy8ga2VlcCB0cmFjayBvZiBjZWxsWCBmb3Igd3JhcC1hcm91bmRcbiAgdGhpcy5zbGlkZWFibGVXaWR0aCA9IGNlbGxYO1xuICAvLyBzbGlkZXNcbiAgdGhpcy51cGRhdGVTbGlkZXMoKTtcbiAgLy8gY29udGFpbiBzbGlkZXMgdGFyZ2V0XG4gIHRoaXMuX2NvbnRhaW5TbGlkZXMoKTtcbiAgLy8gdXBkYXRlIHNsaWRlc1dpZHRoXG4gIHRoaXMuc2xpZGVzV2lkdGggPSB0aGlzLmNlbGxzLmxlbmd0aCA/XG4gICAgdGhpcy5nZXRMYXN0U2xpZGUoKS50YXJnZXQgLSB0aGlzLnNsaWRlc1swXS50YXJnZXQgOiAwO1xufTtcblxucHJvdG8uX3JlbmRlckNlbGxQb3NpdGlvbiA9IGZ1bmN0aW9uKCBjZWxsLCB4ICkge1xuICAvLyByZW5kZXIgcG9zaXRpb24gb2YgY2VsbCB3aXRoIGluIHNsaWRlclxuICBsZXQgc2lkZU9mZnNldCA9IHRoaXMub3B0aW9ucy5yaWdodFRvTGVmdCA/IC0xIDogMTtcbiAgbGV0IHJlbmRlclggPSB4ICogc2lkZU9mZnNldDtcbiAgaWYgKCB0aGlzLm9wdGlvbnMucGVyY2VudFBvc2l0aW9uICkgcmVuZGVyWCAqPSB0aGlzLnNpemUuaW5uZXJXaWR0aCAvIGNlbGwuc2l6ZS53aWR0aDtcbiAgbGV0IHBvc2l0aW9uVmFsdWUgPSB0aGlzLmdldFBvc2l0aW9uVmFsdWUoIHJlbmRlclggKTtcbiAgY2VsbC5lbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKCAke3Bvc2l0aW9uVmFsdWV9IClgO1xufTtcblxuLyoqXG4gKiBjZWxsLmdldFNpemUoKSBvbiBtdWx0aXBsZSBjZWxsc1xuICogQHBhcmFtIHtBcnJheX0gY2VsbHMgLSBjZWxscyB0byBzaXplXG4gKi9cbnByb3RvLl9zaXplQ2VsbHMgPSBmdW5jdGlvbiggY2VsbHMgKSB7XG4gIGNlbGxzLmZvckVhY2goICggY2VsbCApID0+IGNlbGwuZ2V0U2l6ZSgpICk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxucHJvdG8udXBkYXRlU2xpZGVzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc2xpZGVzID0gW107XG4gIGlmICggIXRoaXMuY2VsbHMubGVuZ3RoICkgcmV0dXJuO1xuXG4gIGxldCB7IGJlZ2luTWFyZ2luLCBlbmRNYXJnaW4gfSA9IHRoaXM7XG4gIGxldCBzbGlkZSA9IG5ldyBTbGlkZSggYmVnaW5NYXJnaW4sIGVuZE1hcmdpbiwgdGhpcy5jZWxsQWxpZ24gKTtcbiAgdGhpcy5zbGlkZXMucHVzaCggc2xpZGUgKTtcblxuICBsZXQgY2FuQ2VsbEZpdCA9IHRoaXMuX2dldENhbkNlbGxGaXQoKTtcblxuICB0aGlzLmNlbGxzLmZvckVhY2goICggY2VsbCwgaSApID0+IHtcbiAgICAvLyBqdXN0IGFkZCBjZWxsIGlmIGZpcnN0IGNlbGwgaW4gc2xpZGVcbiAgICBpZiAoICFzbGlkZS5jZWxscy5sZW5ndGggKSB7XG4gICAgICBzbGlkZS5hZGRDZWxsKCBjZWxsICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHNsaWRlV2lkdGggPSAoIHNsaWRlLm91dGVyV2lkdGggLSBzbGlkZS5maXJzdE1hcmdpbiApICtcbiAgICAgICggY2VsbC5zaXplLm91dGVyV2lkdGggLSBjZWxsLnNpemVbIGVuZE1hcmdpbiBdICk7XG5cbiAgICBpZiAoIGNhbkNlbGxGaXQoIGksIHNsaWRlV2lkdGggKSApIHtcbiAgICAgIHNsaWRlLmFkZENlbGwoIGNlbGwgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZG9lc24ndCBmaXQsIG5ldyBzbGlkZVxuICAgICAgc2xpZGUudXBkYXRlVGFyZ2V0KCk7XG5cbiAgICAgIHNsaWRlID0gbmV3IFNsaWRlKCBiZWdpbk1hcmdpbiwgZW5kTWFyZ2luLCB0aGlzLmNlbGxBbGlnbiApO1xuICAgICAgdGhpcy5zbGlkZXMucHVzaCggc2xpZGUgKTtcbiAgICAgIHNsaWRlLmFkZENlbGwoIGNlbGwgKTtcbiAgICB9XG4gIH0gKTtcbiAgLy8gbGFzdCBzbGlkZVxuICBzbGlkZS51cGRhdGVUYXJnZXQoKTtcbiAgLy8gdXBkYXRlIC5zZWxlY3RlZFNsaWRlXG4gIHRoaXMudXBkYXRlU2VsZWN0ZWRTbGlkZSgpO1xufTtcblxucHJvdG8uX2dldENhbkNlbGxGaXQgPSBmdW5jdGlvbigpIHtcbiAgbGV0IHsgZ3JvdXBDZWxscyB9ID0gdGhpcy5vcHRpb25zO1xuICBpZiAoICFncm91cENlbGxzICkgcmV0dXJuICgpID0+IGZhbHNlO1xuXG4gIGlmICggdHlwZW9mIGdyb3VwQ2VsbHMgPT0gJ251bWJlcicgKSB7XG4gICAgLy8gZ3JvdXAgYnkgbnVtYmVyLiAzIC0+IFswLDEsMl0sIFszLDQsNV0sIC4uLlxuICAgIGxldCBudW1iZXIgPSBwYXJzZUludCggZ3JvdXBDZWxscywgMTAgKTtcbiAgICByZXR1cm4gKCBpICkgPT4gKCBpICUgbnVtYmVyICkgIT09IDA7XG4gIH1cbiAgLy8gZGVmYXVsdCwgZ3JvdXAgYnkgd2lkdGggb2Ygc2xpZGVcbiAgbGV0IHBlcmNlbnQgPSAxO1xuICAvLyBwYXJzZSAnNzUlXG4gIGxldCBwZXJjZW50TWF0Y2ggPSB0eXBlb2YgZ3JvdXBDZWxscyA9PSAnc3RyaW5nJyAmJiBncm91cENlbGxzLm1hdGNoKCAvXihcXGQrKSUkLyApO1xuICBpZiAoIHBlcmNlbnRNYXRjaCApIHBlcmNlbnQgPSBwYXJzZUludCggcGVyY2VudE1hdGNoWzFdLCAxMCApIC8gMTAwO1xuICBsZXQgZ3JvdXBXaWR0aCA9ICggdGhpcy5zaXplLmlubmVyV2lkdGggKyAxICkgKiBwZXJjZW50O1xuICByZXR1cm4gKCBpLCBzbGlkZVdpZHRoICkgPT4gc2xpZGVXaWR0aCA8PSBncm91cFdpZHRoO1xufTtcblxuLy8gYWxpYXMgX2luaXQgZm9yIGpRdWVyeSBwbHVnaW4gLmZsaWNraXR5KClcbnByb3RvLl9pbml0ID1cbnByb3RvLnJlcG9zaXRpb24gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wb3NpdGlvbkNlbGxzKCk7XG4gIHRoaXMucG9zaXRpb25TbGlkZXJBdFNlbGVjdGVkKCk7XG59O1xuXG5wcm90by5nZXRTaXplID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc2l6ZSA9IGdldFNpemUoIHRoaXMuZWxlbWVudCApO1xuICB0aGlzLnNldENlbGxBbGlnbigpO1xuICB0aGlzLmN1cnNvclBvc2l0aW9uID0gdGhpcy5zaXplLmlubmVyV2lkdGggKiB0aGlzLmNlbGxBbGlnbjtcbn07XG5cbmxldCBjZWxsQWxpZ25TaG9ydGhhbmRzID0ge1xuICBsZWZ0OiAwLFxuICBjZW50ZXI6IDAuNSxcbiAgcmlnaHQ6IDEsXG59O1xuXG5wcm90by5zZXRDZWxsQWxpZ24gPSBmdW5jdGlvbigpIHtcbiAgbGV0IHsgY2VsbEFsaWduLCByaWdodFRvTGVmdCB9ID0gdGhpcy5vcHRpb25zO1xuICBsZXQgc2hvcnRoYW5kID0gY2VsbEFsaWduU2hvcnRoYW5kc1sgY2VsbEFsaWduIF07XG4gIHRoaXMuY2VsbEFsaWduID0gc2hvcnRoYW5kICE9PSB1bmRlZmluZWQgPyBzaG9ydGhhbmQgOiBjZWxsQWxpZ247XG4gIGlmICggcmlnaHRUb0xlZnQgKSB0aGlzLmNlbGxBbGlnbiA9IDEgLSB0aGlzLmNlbGxBbGlnbjtcbn07XG5cbnByb3RvLnNldEdhbGxlcnlTaXplID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMub3B0aW9ucy5zZXRHYWxsZXJ5U2l6ZSApIHJldHVybjtcblxuICBsZXQgaGVpZ2h0ID0gdGhpcy5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0ICYmIHRoaXMuc2VsZWN0ZWRTbGlkZSA/XG4gICAgdGhpcy5zZWxlY3RlZFNsaWRlLmhlaWdodCA6IHRoaXMubWF4Q2VsbEhlaWdodDtcbiAgdGhpcy52aWV3cG9ydC5zdHlsZS5oZWlnaHQgPSBgJHtoZWlnaHR9cHhgO1xufTtcblxucHJvdG8uX3VwZGF0ZVdyYXBTaGlmdENlbGxzID0gZnVuY3Rpb24oKSB7XG4gIC8vIHVwZGF0ZSBpc1dyYXBwaW5nXG4gIHRoaXMuaXNXcmFwcGluZyA9IHRoaXMuZ2V0SXNXcmFwcGluZygpO1xuICAvLyBvbmx5IGZvciB3cmFwLWFyb3VuZFxuICBpZiAoICF0aGlzLmlzV3JhcHBpbmcgKSByZXR1cm47XG5cbiAgLy8gdW5zaGlmdCBwcmV2aW91cyBjZWxsc1xuICB0aGlzLl91bnNoaWZ0Q2VsbHMoIHRoaXMuYmVmb3JlU2hpZnRDZWxscyApO1xuICB0aGlzLl91bnNoaWZ0Q2VsbHMoIHRoaXMuYWZ0ZXJTaGlmdENlbGxzICk7XG4gIC8vIGdldCBiZWZvcmUgY2VsbHNcbiAgLy8gaW5pdGlhbCBnYXBcbiAgbGV0IGJlZm9yZUdhcFggPSB0aGlzLmN1cnNvclBvc2l0aW9uO1xuICBsZXQgbGFzdEluZGV4ID0gdGhpcy5jZWxscy5sZW5ndGggLSAxO1xuICB0aGlzLmJlZm9yZVNoaWZ0Q2VsbHMgPSB0aGlzLl9nZXRHYXBDZWxscyggYmVmb3JlR2FwWCwgbGFzdEluZGV4LCAtMSApO1xuICAvLyBnZXQgYWZ0ZXIgY2VsbHNcbiAgLy8gZW5kaW5nIGdhcCBiZXR3ZWVuIGxhc3QgY2VsbCBhbmQgZW5kIG9mIGdhbGxlcnkgdmlld3BvcnRcbiAgbGV0IGFmdGVyR2FwWCA9IHRoaXMuc2l6ZS5pbm5lcldpZHRoIC0gdGhpcy5jdXJzb3JQb3NpdGlvbjtcbiAgLy8gc3RhcnQgY2xvbmluZyBhdCBmaXJzdCBjZWxsLCB3b3JraW5nIGZvcndhcmRzXG4gIHRoaXMuYWZ0ZXJTaGlmdENlbGxzID0gdGhpcy5fZ2V0R2FwQ2VsbHMoIGFmdGVyR2FwWCwgMCwgMSApO1xufTtcblxucHJvdG8uZ2V0SXNXcmFwcGluZyA9IGZ1bmN0aW9uKCkge1xuICBsZXQgeyB3cmFwQXJvdW5kIH0gPSB0aGlzLm9wdGlvbnM7XG4gIGlmICggIXdyYXBBcm91bmQgfHwgdGhpcy5zbGlkZXMubGVuZ3RoIDwgMiApIHJldHVybiBmYWxzZTtcblxuICBpZiAoIHdyYXBBcm91bmQgIT09ICdmaWxsJyApIHJldHVybiB0cnVlO1xuICAvLyBjaGVjayB0aGF0IHNsaWRlcyBjYW4gZml0XG5cbiAgbGV0IGdhcFdpZHRoID0gdGhpcy5zbGlkZWFibGVXaWR0aCAtIHRoaXMuc2l6ZS5pbm5lcldpZHRoO1xuICBpZiAoIGdhcFdpZHRoID4gdGhpcy5zaXplLmlubmVyV2lkdGggKSByZXR1cm4gdHJ1ZTsgLy8gZ2FwICogMnggYmlnLCBhbGwgZ29vZFxuICAvLyBjaGVjayB0aGF0IGNvbnRlbnQgd2lkdGggLSBzaGlmdGluZyBjZWxsIGlzIGJpZ2dlciB0aGFuIHZpZXdwb3J0IHdpZHRoXG4gIGZvciAoIGxldCBjZWxsIG9mIHRoaXMuY2VsbHMgKSB7XG4gICAgaWYgKCBjZWxsLnNpemUub3V0ZXJXaWR0aCA+IGdhcFdpZHRoICkgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufTtcblxucHJvdG8uX2dldEdhcENlbGxzID0gZnVuY3Rpb24oIGdhcFgsIGNlbGxJbmRleCwgaW5jcmVtZW50ICkge1xuICAvLyBrZWVwIGFkZGluZyBjZWxscyB1bnRpbCB0aGUgY292ZXIgdGhlIGluaXRpYWwgZ2FwXG4gIGxldCBjZWxscyA9IFtdO1xuICB3aGlsZSAoIGdhcFggPiAwICkge1xuICAgIGxldCBjZWxsID0gdGhpcy5jZWxsc1sgY2VsbEluZGV4IF07XG4gICAgaWYgKCAhY2VsbCApIGJyZWFrO1xuXG4gICAgY2VsbHMucHVzaCggY2VsbCApO1xuICAgIGNlbGxJbmRleCArPSBpbmNyZW1lbnQ7XG4gICAgZ2FwWCAtPSBjZWxsLnNpemUub3V0ZXJXaWR0aDtcbiAgfVxuICByZXR1cm4gY2VsbHM7XG59O1xuXG4vLyAtLS0tLSBjb250YWluICYgd3JhcCAtLS0tLSAvL1xuXG4vLyBjb250YWluIGNlbGwgdGFyZ2V0cyBzbyBubyBleGNlc3Mgc2xpZGluZ1xucHJvdG8uX2NvbnRhaW5TbGlkZXMgPSBmdW5jdGlvbigpIHtcbiAgbGV0IGlzQ29udGFpbmluZyA9IHRoaXMub3B0aW9ucy5jb250YWluICYmICF0aGlzLmlzV3JhcHBpbmcgJiZcbiAgICAgIHRoaXMuY2VsbHMubGVuZ3RoO1xuICBpZiAoICFpc0NvbnRhaW5pbmcgKSByZXR1cm47XG5cbiAgbGV0IGNvbnRlbnRXaWR0aCA9IHRoaXMuc2xpZGVhYmxlV2lkdGggLSB0aGlzLmdldExhc3RDZWxsKCkuc2l6ZVsgdGhpcy5lbmRNYXJnaW4gXTtcbiAgLy8gY29udGVudCBpcyBsZXNzIHRoYW4gZ2FsbGVyeSBzaXplXG4gIGxldCBpc0NvbnRlbnRTbWFsbGVyID0gY29udGVudFdpZHRoIDwgdGhpcy5zaXplLmlubmVyV2lkdGg7XG4gIGlmICggaXNDb250ZW50U21hbGxlciApIHtcbiAgICAvLyBhbGwgY2VsbHMgZml0IGluc2lkZSBnYWxsZXJ5XG4gICAgdGhpcy5zbGlkZXMuZm9yRWFjaCggKCBzbGlkZSApID0+IHtcbiAgICAgIHNsaWRlLnRhcmdldCA9IGNvbnRlbnRXaWR0aCAqIHRoaXMuY2VsbEFsaWduO1xuICAgIH0gKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBjb250YWluIHRvIGJvdW5kc1xuICAgIGxldCBiZWdpbkJvdW5kID0gdGhpcy5jdXJzb3JQb3NpdGlvbiArIHRoaXMuY2VsbHNbMF0uc2l6ZVsgdGhpcy5iZWdpbk1hcmdpbiBdO1xuICAgIGxldCBlbmRCb3VuZCA9IGNvbnRlbnRXaWR0aCAtIHRoaXMuc2l6ZS5pbm5lcldpZHRoICogKCAxIC0gdGhpcy5jZWxsQWxpZ24gKTtcbiAgICB0aGlzLnNsaWRlcy5mb3JFYWNoKCAoIHNsaWRlICkgPT4ge1xuICAgICAgc2xpZGUudGFyZ2V0ID0gTWF0aC5tYXgoIHNsaWRlLnRhcmdldCwgYmVnaW5Cb3VuZCApO1xuICAgICAgc2xpZGUudGFyZ2V0ID0gTWF0aC5taW4oIHNsaWRlLnRhcmdldCwgZW5kQm91bmQgKTtcbiAgICB9ICk7XG4gIH1cbn07XG5cbi8vIC0tLS0tIGV2ZW50cyAtLS0tLSAvL1xuXG4vKipcbiAqIGVtaXRzIGV2ZW50cyB2aWEgZXZlbnRFbWl0dGVyIGFuZCBqUXVlcnkgZXZlbnRzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZSAtIG5hbWUgb2YgZXZlbnRcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gb3JpZ2luYWwgZXZlbnRcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgLSBleHRyYSBhcmd1bWVudHNcbiAqL1xucHJvdG8uZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uKCB0eXBlLCBldmVudCwgYXJncyApIHtcbiAgbGV0IGVtaXRBcmdzID0gZXZlbnQgPyBbIGV2ZW50IF0uY29uY2F0KCBhcmdzICkgOiBhcmdzO1xuICB0aGlzLmVtaXRFdmVudCggdHlwZSwgZW1pdEFyZ3MgKTtcblxuICBpZiAoIGpRdWVyeSAmJiB0aGlzLiRlbGVtZW50ICkge1xuICAgIC8vIGRlZmF1bHQgdHJpZ2dlciB3aXRoIHR5cGUgaWYgbm8gZXZlbnRcbiAgICB0eXBlICs9IHRoaXMub3B0aW9ucy5uYW1lc3BhY2VKUXVlcnlFdmVudHMgPyAnLmZsaWNraXR5JyA6ICcnO1xuICAgIGxldCAkZXZlbnQgPSB0eXBlO1xuICAgIGlmICggZXZlbnQgKSB7XG4gICAgICAvLyBjcmVhdGUgalF1ZXJ5IGV2ZW50XG4gICAgICBsZXQgalFFdmVudCA9IG5ldyBqUXVlcnkuRXZlbnQoIGV2ZW50ICk7XG4gICAgICBqUUV2ZW50LnR5cGUgPSB0eXBlO1xuICAgICAgJGV2ZW50ID0galFFdmVudDtcbiAgICB9XG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCAkZXZlbnQsIGFyZ3MgKTtcbiAgfVxufTtcblxuY29uc3QgdW5pZHJhZ2dlckV2ZW50cyA9IFtcbiAgJ2RyYWdTdGFydCcsXG4gICdkcmFnTW92ZScsXG4gICdkcmFnRW5kJyxcbiAgJ3BvaW50ZXJEb3duJyxcbiAgJ3BvaW50ZXJNb3ZlJyxcbiAgJ3BvaW50ZXJFbmQnLFxuICAnc3RhdGljQ2xpY2snLFxuXTtcblxubGV0IF9lbWl0RXZlbnQgPSBwcm90by5lbWl0RXZlbnQ7XG5wcm90by5lbWl0RXZlbnQgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBhcmdzICkge1xuICBpZiAoIGV2ZW50TmFtZSA9PT0gJ3N0YXRpY0NsaWNrJyApIHtcbiAgICAvLyBhZGQgY2VsbEVsZW0gYW5kIGNlbGxJbmRleCBhcmdzIHRvIHN0YXRpY0NsaWNrXG4gICAgbGV0IGNsaWNrZWRDZWxsID0gdGhpcy5nZXRQYXJlbnRDZWxsKCBhcmdzWzBdLnRhcmdldCApO1xuICAgIGxldCBjZWxsRWxlbSA9IGNsaWNrZWRDZWxsICYmIGNsaWNrZWRDZWxsLmVsZW1lbnQ7XG4gICAgbGV0IGNlbGxJbmRleCA9IGNsaWNrZWRDZWxsICYmIHRoaXMuY2VsbHMuaW5kZXhPZiggY2xpY2tlZENlbGwgKTtcbiAgICBhcmdzID0gYXJncy5jb25jYXQoIGNlbGxFbGVtLCBjZWxsSW5kZXggKTtcbiAgfVxuICAvLyBkbyByZWd1bGFyIHRoaW5nXG4gIF9lbWl0RXZlbnQuY2FsbCggdGhpcywgZXZlbnROYW1lLCBhcmdzICk7XG4gIC8vIGR1Y2stcHVuY2ggaW4galF1ZXJ5IGV2ZW50cyBmb3IgVW5pZHJhZ2dlciBldmVudHNcbiAgbGV0IGlzVW5pZHJhZ2dlckV2ZW50ID0gdW5pZHJhZ2dlckV2ZW50cy5pbmNsdWRlcyggZXZlbnROYW1lICk7XG4gIGlmICggIWlzVW5pZHJhZ2dlckV2ZW50IHx8ICFqUXVlcnkgfHwgIXRoaXMuJGVsZW1lbnQgKSByZXR1cm47XG5cbiAgZXZlbnROYW1lICs9IHRoaXMub3B0aW9ucy5uYW1lc3BhY2VKUXVlcnlFdmVudHMgPyAnLmZsaWNraXR5JyA6ICcnO1xuICBsZXQgZXZlbnQgPSBhcmdzLnNoaWZ0KCAwICk7XG4gIGxldCBqUUV2ZW50ID0gbmV3IGpRdWVyeS5FdmVudCggZXZlbnQgKTtcbiAgalFFdmVudC50eXBlID0gZXZlbnROYW1lO1xuICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoIGpRRXZlbnQsIGFyZ3MgKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHNlbGVjdCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vKipcbiAqIEBwYXJhbSB7SW50ZWdlcn0gaW5kZXggLSBpbmRleCBvZiB0aGUgc2xpZGVcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNXcmFwIC0gd2lsbCB3cmFwLWFyb3VuZCB0byBsYXN0L2ZpcnN0IGlmIGF0IHRoZSBlbmRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNJbnN0YW50IC0gd2lsbCBpbW1lZGlhdGVseSBzZXQgcG9zaXRpb24gYXQgc2VsZWN0ZWQgY2VsbFxuICovXG5wcm90by5zZWxlY3QgPSBmdW5jdGlvbiggaW5kZXgsIGlzV3JhcCwgaXNJbnN0YW50ICkge1xuICBpZiAoICF0aGlzLmlzQWN0aXZlICkgcmV0dXJuO1xuXG4gIGluZGV4ID0gcGFyc2VJbnQoIGluZGV4LCAxMCApO1xuICB0aGlzLl93cmFwU2VsZWN0KCBpbmRleCApO1xuXG4gIGlmICggdGhpcy5pc1dyYXBwaW5nIHx8IGlzV3JhcCApIHtcbiAgICBpbmRleCA9IHV0aWxzLm1vZHVsbyggaW5kZXgsIHRoaXMuc2xpZGVzLmxlbmd0aCApO1xuICB9XG4gIC8vIGJhaWwgaWYgaW52YWxpZCBpbmRleFxuICBpZiAoICF0aGlzLnNsaWRlc1sgaW5kZXggXSApIHJldHVybjtcblxuICBsZXQgcHJldkluZGV4ID0gdGhpcy5zZWxlY3RlZEluZGV4O1xuICB0aGlzLnNlbGVjdGVkSW5kZXggPSBpbmRleDtcbiAgdGhpcy51cGRhdGVTZWxlY3RlZFNsaWRlKCk7XG4gIGlmICggaXNJbnN0YW50ICkge1xuICAgIHRoaXMucG9zaXRpb25TbGlkZXJBdFNlbGVjdGVkKCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zdGFydEFuaW1hdGlvbigpO1xuICB9XG4gIGlmICggdGhpcy5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0ICkge1xuICAgIHRoaXMuc2V0R2FsbGVyeVNpemUoKTtcbiAgfVxuICAvLyBldmVudHNcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KCAnc2VsZWN0JywgbnVsbCwgWyBpbmRleCBdICk7XG4gIC8vIGNoYW5nZSBldmVudCBpZiBuZXcgaW5kZXhcbiAgaWYgKCBpbmRleCAhPT0gcHJldkluZGV4ICkge1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudCggJ2NoYW5nZScsIG51bGwsIFsgaW5kZXggXSApO1xuICB9XG59O1xuXG4vLyB3cmFwcyBwb3NpdGlvbiBmb3Igd3JhcEFyb3VuZCwgdG8gbW92ZSB0byBjbG9zZXN0IHNsaWRlLiAjMTEzXG5wcm90by5fd3JhcFNlbGVjdCA9IGZ1bmN0aW9uKCBpbmRleCApIHtcbiAgaWYgKCAhdGhpcy5pc1dyYXBwaW5nICkgcmV0dXJuO1xuXG4gIGNvbnN0IHsgc2VsZWN0ZWRJbmRleCwgc2xpZGVhYmxlV2lkdGgsIHNsaWRlczogeyBsZW5ndGggfSB9ID0gdGhpcztcbiAgLy8gc2hpZnQgaW5kZXggZm9yIHdyYXAsIGRvIG5vdCB3cmFwIGRyYWdTZWxlY3RcbiAgaWYgKCAhdGhpcy5pc0RyYWdTZWxlY3QgKSB7XG4gICAgbGV0IHdyYXBJbmRleCA9IHV0aWxzLm1vZHVsbyggaW5kZXgsIGxlbmd0aCApO1xuICAgIC8vIGdvIHRvIHNob3J0ZXN0XG4gICAgbGV0IGRlbHRhID0gTWF0aC5hYnMoIHdyYXBJbmRleCAtIHNlbGVjdGVkSW5kZXggKTtcbiAgICBsZXQgYmFja1dyYXBEZWx0YSA9IE1hdGguYWJzKCAoIHdyYXBJbmRleCArIGxlbmd0aCApIC0gc2VsZWN0ZWRJbmRleCApO1xuICAgIGxldCBmb3Jld2FyZFdyYXBEZWx0YSA9IE1hdGguYWJzKCAoIHdyYXBJbmRleCAtIGxlbmd0aCApIC0gc2VsZWN0ZWRJbmRleCApO1xuICAgIGlmICggYmFja1dyYXBEZWx0YSA8IGRlbHRhICkge1xuICAgICAgaW5kZXggKz0gbGVuZ3RoO1xuICAgIH0gZWxzZSBpZiAoIGZvcmV3YXJkV3JhcERlbHRhIDwgZGVsdGEgKSB7XG4gICAgICBpbmRleCAtPSBsZW5ndGg7XG4gICAgfVxuICB9XG5cbiAgLy8gd3JhcCBwb3NpdGlvbiBzbyBzbGlkZXIgaXMgd2l0aGluIG5vcm1hbCBhcmVhXG4gIGlmICggaW5kZXggPCAwICkge1xuICAgIHRoaXMueCAtPSBzbGlkZWFibGVXaWR0aDtcbiAgfSBlbHNlIGlmICggaW5kZXggPj0gbGVuZ3RoICkge1xuICAgIHRoaXMueCArPSBzbGlkZWFibGVXaWR0aDtcbiAgfVxufTtcblxucHJvdG8ucHJldmlvdXMgPSBmdW5jdGlvbiggaXNXcmFwLCBpc0luc3RhbnQgKSB7XG4gIHRoaXMuc2VsZWN0KCB0aGlzLnNlbGVjdGVkSW5kZXggLSAxLCBpc1dyYXAsIGlzSW5zdGFudCApO1xufTtcblxucHJvdG8ubmV4dCA9IGZ1bmN0aW9uKCBpc1dyYXAsIGlzSW5zdGFudCApIHtcbiAgdGhpcy5zZWxlY3QoIHRoaXMuc2VsZWN0ZWRJbmRleCArIDEsIGlzV3JhcCwgaXNJbnN0YW50ICk7XG59O1xuXG5wcm90by51cGRhdGVTZWxlY3RlZFNsaWRlID0gZnVuY3Rpb24oKSB7XG4gIGxldCBzbGlkZSA9IHRoaXMuc2xpZGVzWyB0aGlzLnNlbGVjdGVkSW5kZXggXTtcbiAgLy8gc2VsZWN0ZWRJbmRleCBjb3VsZCBiZSBvdXRzaWRlIG9mIHNsaWRlcywgaWYgdHJpZ2dlcmVkIGJlZm9yZSByZXNpemUoKVxuICBpZiAoICFzbGlkZSApIHJldHVybjtcblxuICAvLyB1bnNlbGVjdCBwcmV2aW91cyBzZWxlY3RlZCBzbGlkZVxuICB0aGlzLnVuc2VsZWN0U2VsZWN0ZWRTbGlkZSgpO1xuICAvLyB1cGRhdGUgbmV3IHNlbGVjdGVkIHNsaWRlXG4gIHRoaXMuc2VsZWN0ZWRTbGlkZSA9IHNsaWRlO1xuICBzbGlkZS5zZWxlY3QoKTtcbiAgdGhpcy5zZWxlY3RlZENlbGxzID0gc2xpZGUuY2VsbHM7XG4gIHRoaXMuc2VsZWN0ZWRFbGVtZW50cyA9IHNsaWRlLmdldENlbGxFbGVtZW50cygpO1xuICAvLyBIQUNLOiBzZWxlY3RlZENlbGwgJiBzZWxlY3RlZEVsZW1lbnQgaXMgZmlyc3QgY2VsbCBpbiBzbGlkZSwgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgdGhpcy5zZWxlY3RlZENlbGwgPSBzbGlkZS5jZWxsc1swXTtcbiAgdGhpcy5zZWxlY3RlZEVsZW1lbnQgPSB0aGlzLnNlbGVjdGVkRWxlbWVudHNbMF07XG59O1xuXG5wcm90by51bnNlbGVjdFNlbGVjdGVkU2xpZGUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCB0aGlzLnNlbGVjdGVkU2xpZGUgKSB0aGlzLnNlbGVjdGVkU2xpZGUudW5zZWxlY3QoKTtcbn07XG5cbnByb3RvLnNlbGVjdEluaXRpYWxJbmRleCA9IGZ1bmN0aW9uKCkge1xuICBsZXQgaW5pdGlhbEluZGV4ID0gdGhpcy5vcHRpb25zLmluaXRpYWxJbmRleDtcbiAgLy8gYWxyZWFkeSBhY3RpdmF0ZWQsIHNlbGVjdCBwcmV2aW91cyBzZWxlY3RlZEluZGV4XG4gIGlmICggdGhpcy5pc0luaXRBY3RpdmF0ZWQgKSB7XG4gICAgdGhpcy5zZWxlY3QoIHRoaXMuc2VsZWN0ZWRJbmRleCwgZmFsc2UsIHRydWUgKTtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gc2VsZWN0IHdpdGggc2VsZWN0b3Igc3RyaW5nXG4gIGlmICggaW5pdGlhbEluZGV4ICYmIHR5cGVvZiBpbml0aWFsSW5kZXggPT0gJ3N0cmluZycgKSB7XG4gICAgbGV0IGNlbGwgPSB0aGlzLnF1ZXJ5Q2VsbCggaW5pdGlhbEluZGV4ICk7XG4gICAgaWYgKCBjZWxsICkge1xuICAgICAgdGhpcy5zZWxlY3RDZWxsKCBpbml0aWFsSW5kZXgsIGZhbHNlLCB0cnVlICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgbGV0IGluZGV4ID0gMDtcbiAgLy8gc2VsZWN0IHdpdGggbnVtYmVyXG4gIGlmICggaW5pdGlhbEluZGV4ICYmIHRoaXMuc2xpZGVzWyBpbml0aWFsSW5kZXggXSApIHtcbiAgICBpbmRleCA9IGluaXRpYWxJbmRleDtcbiAgfVxuICAvLyBzZWxlY3QgaW5zdGFudGx5XG4gIHRoaXMuc2VsZWN0KCBpbmRleCwgZmFsc2UsIHRydWUgKTtcbn07XG5cbi8qKlxuICogc2VsZWN0IHNsaWRlIGZyb20gbnVtYmVyIG9yIGNlbGwgZWxlbWVudFxuICogQHBhcmFtIHtbRWxlbWVudCwgTnVtYmVyXX0gdmFsdWUgLSB6ZXJvLWJhc2VkIGluZGV4IG9yIGVsZW1lbnQgdG8gc2VsZWN0XG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzV3JhcCAtIGVuYWJsZXMgd3JhcHBpbmcgYXJvdW5kIGZvciBleHRyYSBpbmRleFxuICogQHBhcmFtIHtCb29sZWFufSBpc0luc3RhbnQgLSBkaXNhYmxlcyBzbGlkZSBhbmltYXRpb25cbiAqL1xucHJvdG8uc2VsZWN0Q2VsbCA9IGZ1bmN0aW9uKCB2YWx1ZSwgaXNXcmFwLCBpc0luc3RhbnQgKSB7XG4gIC8vIGdldCBjZWxsXG4gIGxldCBjZWxsID0gdGhpcy5xdWVyeUNlbGwoIHZhbHVlICk7XG4gIGlmICggIWNlbGwgKSByZXR1cm47XG5cbiAgbGV0IGluZGV4ID0gdGhpcy5nZXRDZWxsU2xpZGVJbmRleCggY2VsbCApO1xuICB0aGlzLnNlbGVjdCggaW5kZXgsIGlzV3JhcCwgaXNJbnN0YW50ICk7XG59O1xuXG5wcm90by5nZXRDZWxsU2xpZGVJbmRleCA9IGZ1bmN0aW9uKCBjZWxsICkge1xuICAvLyBnZXQgaW5kZXggb2Ygc2xpZGUgdGhhdCBoYXMgY2VsbFxuICBsZXQgY2VsbFNsaWRlID0gdGhpcy5zbGlkZXMuZmluZCggKCBzbGlkZSApID0+IHNsaWRlLmNlbGxzLmluY2x1ZGVzKCBjZWxsICkgKTtcbiAgcmV0dXJuIHRoaXMuc2xpZGVzLmluZGV4T2YoIGNlbGxTbGlkZSApO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZ2V0IGNlbGxzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8qKlxuICogZ2V0IEZsaWNraXR5LkNlbGwsIGdpdmVuIGFuIEVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbSAtIG1hdGNoaW5nIGNlbGwgZWxlbWVudFxuICogQHJldHVybnMge0ZsaWNraXR5LkNlbGx9IGNlbGwgLSBtYXRjaGluZyBjZWxsXG4gKi9cbnByb3RvLmdldENlbGwgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgLy8gbG9vcCB0aHJvdWdoIGNlbGxzIHRvIGdldCB0aGUgb25lIHRoYXQgbWF0Y2hlc1xuICBmb3IgKCBsZXQgY2VsbCBvZiB0aGlzLmNlbGxzICkge1xuICAgIGlmICggY2VsbC5lbGVtZW50ID09PSBlbGVtICkgcmV0dXJuIGNlbGw7XG4gIH1cbn07XG5cbi8qKlxuICogZ2V0IGNvbGxlY3Rpb24gb2YgRmxpY2tpdHkuQ2VsbHMsIGdpdmVuIEVsZW1lbnRzXG4gKiBAcGFyYW0ge1tFbGVtZW50LCBBcnJheSwgTm9kZUxpc3RdfSBlbGVtcyAtIG11bHRpcGxlIGVsZW1lbnRzXG4gKiBAcmV0dXJucyB7QXJyYXl9IGNlbGxzIC0gRmxpY2tpdHkuQ2VsbHNcbiAqL1xucHJvdG8uZ2V0Q2VsbHMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIGVsZW1zID0gdXRpbHMubWFrZUFycmF5KCBlbGVtcyApO1xuICByZXR1cm4gZWxlbXMubWFwKCAoIGVsZW0gKSA9PiB0aGlzLmdldENlbGwoIGVsZW0gKSApLmZpbHRlciggQm9vbGVhbiApO1xufTtcblxuLyoqXG4gKiBnZXQgY2VsbCBlbGVtZW50c1xuICogQHJldHVybnMge0FycmF5fSBjZWxsRWxlbXNcbiAqL1xucHJvdG8uZ2V0Q2VsbEVsZW1lbnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmNlbGxzLm1hcCggKCBjZWxsICkgPT4gY2VsbC5lbGVtZW50ICk7XG59O1xuXG4vKipcbiAqIGdldCBwYXJlbnQgY2VsbCBmcm9tIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbSAtIGNoaWxkIGVsZW1lbnRcbiAqIEByZXR1cm5zIHtGbGlja2l0LkNlbGx9IGNlbGwgLSBwYXJlbnQgY2VsbFxuICovXG5wcm90by5nZXRQYXJlbnRDZWxsID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIC8vIGZpcnN0IGNoZWNrIGlmIGVsZW0gaXMgY2VsbFxuICBsZXQgY2VsbCA9IHRoaXMuZ2V0Q2VsbCggZWxlbSApO1xuICBpZiAoIGNlbGwgKSByZXR1cm4gY2VsbDtcblxuICAvLyB0cnkgdG8gZ2V0IHBhcmVudCBjZWxsIGVsZW1cbiAgbGV0IGNsb3Nlc3QgPSBlbGVtLmNsb3Nlc3QoJy5mbGlja2l0eS1zbGlkZXIgPiAqJyk7XG4gIHJldHVybiB0aGlzLmdldENlbGwoIGNsb3Nlc3QgKTtcbn07XG5cbi8qKlxuICogZ2V0IGNlbGxzIGFkamFjZW50IHRvIGEgc2xpZGVcbiAqIEBwYXJhbSB7SW50ZWdlcn0gYWRqQ291bnQgLSBudW1iZXIgb2YgYWRqYWNlbnQgc2xpZGVzXG4gKiBAcGFyYW0ge0ludGVnZXJ9IGluZGV4IC0gaW5kZXggb2Ygc2xpZGUgdG8gc3RhcnRcbiAqIEByZXR1cm5zIHtBcnJheX0gY2VsbHMgLSBhcnJheSBvZiBGbGlja2l0eS5DZWxsc1xuICovXG5wcm90by5nZXRBZGphY2VudENlbGxFbGVtZW50cyA9IGZ1bmN0aW9uKCBhZGpDb3VudCwgaW5kZXggKSB7XG4gIGlmICggIWFkakNvdW50ICkgcmV0dXJuIHRoaXMuc2VsZWN0ZWRTbGlkZS5nZXRDZWxsRWxlbWVudHMoKTtcblxuICBpbmRleCA9IGluZGV4ID09PSB1bmRlZmluZWQgPyB0aGlzLnNlbGVjdGVkSW5kZXggOiBpbmRleDtcblxuICBsZXQgbGVuID0gdGhpcy5zbGlkZXMubGVuZ3RoO1xuICBpZiAoIDEgKyAoIGFkakNvdW50ICogMiApID49IGxlbiApIHtcbiAgICByZXR1cm4gdGhpcy5nZXRDZWxsRWxlbWVudHMoKTsgLy8gZ2V0IGFsbFxuICB9XG5cbiAgbGV0IGNlbGxFbGVtcyA9IFtdO1xuICBmb3IgKCBsZXQgaSA9IGluZGV4IC0gYWRqQ291bnQ7IGkgPD0gaW5kZXggKyBhZGpDb3VudDsgaSsrICkge1xuICAgIGxldCBzbGlkZUluZGV4ID0gdGhpcy5pc1dyYXBwaW5nID8gdXRpbHMubW9kdWxvKCBpLCBsZW4gKSA6IGk7XG4gICAgbGV0IHNsaWRlID0gdGhpcy5zbGlkZXNbIHNsaWRlSW5kZXggXTtcbiAgICBpZiAoIHNsaWRlICkge1xuICAgICAgY2VsbEVsZW1zID0gY2VsbEVsZW1zLmNvbmNhdCggc2xpZGUuZ2V0Q2VsbEVsZW1lbnRzKCkgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNlbGxFbGVtcztcbn07XG5cbi8qKlxuICogc2VsZWN0IHNsaWRlIGZyb20gbnVtYmVyIG9yIGNlbGwgZWxlbWVudFxuICogQHBhcmFtIHtbRWxlbWVudCwgU3RyaW5nLCBOdW1iZXJdfSBzZWxlY3RvciAtIGVsZW1lbnQsIHNlbGVjdG9yIHN0cmluZywgb3IgaW5kZXhcbiAqIEByZXR1cm5zIHtGbGlja2l0eS5DZWxsfSAtIG1hdGNoaW5nIGNlbGxcbiAqL1xucHJvdG8ucXVlcnlDZWxsID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuICBpZiAoIHR5cGVvZiBzZWxlY3RvciA9PSAnbnVtYmVyJyApIHtcbiAgICAvLyB1c2UgbnVtYmVyIGFzIGluZGV4XG4gICAgcmV0dXJuIHRoaXMuY2VsbHNbIHNlbGVjdG9yIF07XG4gIH1cbiAgLy8gZG8gbm90IHNlbGVjdCBpbnZhbGlkIHNlbGVjdG9ycyBmcm9tIGhhc2g6ICMxMjMsICMvLiAjNzkxXG4gIGxldCBpc1NlbGVjdG9yU3RyaW5nID0gdHlwZW9mIHNlbGVjdG9yID09ICdzdHJpbmcnICYmICFzZWxlY3Rvci5tYXRjaCggL15bIy5dP1tcXGQvXS8gKTtcbiAgaWYgKCBpc1NlbGVjdG9yU3RyaW5nICkge1xuICAgIC8vIHVzZSBzdHJpbmcgYXMgc2VsZWN0b3IsIGdldCBlbGVtZW50XG4gICAgc2VsZWN0b3IgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3Rvciggc2VsZWN0b3IgKTtcbiAgfVxuICAvLyBnZXQgY2VsbCBmcm9tIGVsZW1lbnRcbiAgcmV0dXJuIHRoaXMuZ2V0Q2VsbCggc2VsZWN0b3IgKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGV2ZW50cyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5wcm90by51aUNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVtaXRFdmVudCgndWlDaGFuZ2UnKTtcbn07XG5cbi8vIC0tLS0tIHJlc2l6ZSAtLS0tLSAvL1xuXG5wcm90by5vbnJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLndhdGNoQ1NTKCk7XG4gIHRoaXMucmVzaXplKCk7XG59O1xuXG51dGlscy5kZWJvdW5jZU1ldGhvZCggRmxpY2tpdHksICdvbnJlc2l6ZScsIDE1MCApO1xuXG5wcm90by5yZXNpemUgPSBmdW5jdGlvbigpIHtcbiAgLy8gIzExNzcgZGlzYWJsZSByZXNpemUgYmVoYXZpb3Igd2hlbiBhbmltYXRpbmcgb3IgZHJhZ2dpbmcgZm9yIGlPUyAxNVxuICBpZiAoICF0aGlzLmlzQWN0aXZlIHx8IHRoaXMuaXNBbmltYXRpbmcgfHwgdGhpcy5pc0RyYWdnaW5nICkgcmV0dXJuO1xuICB0aGlzLmdldFNpemUoKTtcbiAgLy8gd3JhcCB2YWx1ZXNcbiAgaWYgKCB0aGlzLmlzV3JhcHBpbmcgKSB7XG4gICAgdGhpcy54ID0gdXRpbHMubW9kdWxvKCB0aGlzLngsIHRoaXMuc2xpZGVhYmxlV2lkdGggKTtcbiAgfVxuICB0aGlzLnBvc2l0aW9uQ2VsbHMoKTtcbiAgdGhpcy5fdXBkYXRlV3JhcFNoaWZ0Q2VsbHMoKTtcbiAgdGhpcy5zZXRHYWxsZXJ5U2l6ZSgpO1xuICB0aGlzLmVtaXRFdmVudCgncmVzaXplJyk7XG4gIC8vIHVwZGF0ZSBzZWxlY3RlZCBpbmRleCBmb3IgZ3JvdXAgc2xpZGVzLCBpbnN0YW50XG4gIC8vIFRPRE86IHBvc2l0aW9uIGNhbiBiZSBsb3N0IGJldHdlZW4gZ3JvdXBzIG9mIHZhcmlvdXMgbnVtYmVyc1xuICBsZXQgc2VsZWN0ZWRFbGVtZW50ID0gdGhpcy5zZWxlY3RlZEVsZW1lbnRzICYmIHRoaXMuc2VsZWN0ZWRFbGVtZW50c1swXTtcbiAgdGhpcy5zZWxlY3RDZWxsKCBzZWxlY3RlZEVsZW1lbnQsIGZhbHNlLCB0cnVlICk7XG59O1xuXG4vLyB3YXRjaGVzIHRoZSA6YWZ0ZXIgcHJvcGVydHksIGFjdGl2YXRlcy9kZWFjdGl2YXRlc1xucHJvdG8ud2F0Y2hDU1MgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5vcHRpb25zLndhdGNoQ1NTICkgcmV0dXJuO1xuXG4gIGxldCBhZnRlckNvbnRlbnQgPSBnZXRDb21wdXRlZFN0eWxlKCB0aGlzLmVsZW1lbnQsICc6YWZ0ZXInICkuY29udGVudDtcbiAgLy8gYWN0aXZhdGUgaWYgOmFmdGVyIHsgY29udGVudDogJ2ZsaWNraXR5JyB9XG4gIGlmICggYWZ0ZXJDb250ZW50LmluY2x1ZGVzKCdmbGlja2l0eScpICkge1xuICAgIHRoaXMuYWN0aXZhdGUoKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmRlYWN0aXZhdGUoKTtcbiAgfVxufTtcblxuLy8gLS0tLS0ga2V5ZG93biAtLS0tLSAvL1xuXG4vLyBnbyBwcmV2aW91cy9uZXh0IGlmIGxlZnQvcmlnaHQga2V5cyBwcmVzc2VkXG5wcm90by5vbmtleWRvd24gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIGxldCB7IGFjdGl2ZUVsZW1lbnQgfSA9IGRvY3VtZW50O1xuICBsZXQgaGFuZGxlciA9IEZsaWNraXR5LmtleWJvYXJkSGFuZGxlcnNbIGV2ZW50LmtleSBdO1xuICAvLyBvbmx5IHdvcmsgaWYgZWxlbWVudCBpcyBpbiBmb2N1c1xuICBpZiAoICF0aGlzLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSB8fCAhYWN0aXZlRWxlbWVudCB8fCAhaGFuZGxlciApIHJldHVybjtcblxuICBsZXQgaXNGb2N1c2VkID0gdGhpcy5mb2N1c2FibGVFbGVtcy5zb21lKCAoIGVsZW0gKSA9PiBhY3RpdmVFbGVtZW50ID09PSBlbGVtICk7XG4gIGlmICggaXNGb2N1c2VkICkgaGFuZGxlci5jYWxsKCB0aGlzICk7XG59O1xuXG5GbGlja2l0eS5rZXlib2FyZEhhbmRsZXJzID0ge1xuICBBcnJvd0xlZnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudWlDaGFuZ2UoKTtcbiAgICBsZXQgbGVmdE1ldGhvZCA9IHRoaXMub3B0aW9ucy5yaWdodFRvTGVmdCA/ICduZXh0JyA6ICdwcmV2aW91cyc7XG4gICAgdGhpc1sgbGVmdE1ldGhvZCBdKCk7XG4gIH0sXG4gIEFycm93UmlnaHQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudWlDaGFuZ2UoKTtcbiAgICBsZXQgcmlnaHRNZXRob2QgPSB0aGlzLm9wdGlvbnMucmlnaHRUb0xlZnQgPyAncHJldmlvdXMnIDogJ25leHQnO1xuICAgIHRoaXNbIHJpZ2h0TWV0aG9kIF0oKTtcbiAgfSxcbn07XG5cbi8vIC0tLS0tIGZvY3VzIC0tLS0tIC8vXG5cbnByb3RvLmZvY3VzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZWxlbWVudC5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBkZXN0cm95IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8vIGRlYWN0aXZhdGUgYWxsIEZsaWNraXR5IGZ1bmN0aW9uYWxpdHksIGJ1dCBrZWVwIHN0dWZmIGF2YWlsYWJsZVxucHJvdG8uZGVhY3RpdmF0ZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLmlzQWN0aXZlICkgcmV0dXJuO1xuXG4gIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdmbGlja2l0eS1lbmFibGVkJyk7XG4gIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdmbGlja2l0eS1ydGwnKTtcbiAgdGhpcy51bnNlbGVjdFNlbGVjdGVkU2xpZGUoKTtcbiAgLy8gZGVzdHJveSBjZWxsc1xuICB0aGlzLmNlbGxzLmZvckVhY2goICggY2VsbCApID0+IGNlbGwuZGVzdHJveSgpICk7XG4gIHRoaXMudmlld3BvcnQucmVtb3ZlKCk7XG4gIC8vIG1vdmUgY2hpbGQgZWxlbWVudHMgYmFjayBpbnRvIGVsZW1lbnRcbiAgdGhpcy5lbGVtZW50LmFwcGVuZCggLi4udGhpcy5zbGlkZXIuY2hpbGRyZW4gKTtcbiAgaWYgKCB0aGlzLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSApIHtcbiAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCd0YWJJbmRleCcpO1xuICAgIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAna2V5ZG93bicsIHRoaXMgKTtcbiAgfVxuICAvLyBzZXQgZmxhZ3NcbiAgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xuICB0aGlzLmVtaXRFdmVudCgnZGVhY3RpdmF0ZScpO1xufTtcblxucHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmRlYWN0aXZhdGUoKTtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdyZXNpemUnLCB0aGlzICk7XG4gIHRoaXMuYWxsT2ZmKCk7XG4gIHRoaXMuZW1pdEV2ZW50KCdkZXN0cm95Jyk7XG4gIGlmICggalF1ZXJ5ICYmIHRoaXMuJGVsZW1lbnQgKSB7XG4gICAgalF1ZXJ5LnJlbW92ZURhdGEoIHRoaXMuZWxlbWVudCwgJ2ZsaWNraXR5JyApO1xuICB9XG4gIGRlbGV0ZSB0aGlzLmVsZW1lbnQuZmxpY2tpdHlHVUlEO1xuICBkZWxldGUgaW5zdGFuY2VzWyB0aGlzLmd1aWQgXTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHByb3RvdHlwZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5PYmplY3QuYXNzaWduKCBwcm90bywgYW5pbWF0ZVByb3RvdHlwZSApO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBleHRyYXMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLyoqXG4gKiBnZXQgRmxpY2tpdHkgaW5zdGFuY2UgZnJvbSBlbGVtZW50XG4gKiBAcGFyYW0ge1tFbGVtZW50LCBTdHJpbmddfSBlbGVtIC0gZWxlbWVudCBvciBzZWxlY3RvciBzdHJpbmdcbiAqIEByZXR1cm5zIHtGbGlja2l0eX0gLSBGbGlja2l0eSBpbnN0YW5jZVxuICovXG5GbGlja2l0eS5kYXRhID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIGVsZW0gPSB1dGlscy5nZXRRdWVyeUVsZW1lbnQoIGVsZW0gKTtcbiAgaWYgKCBlbGVtICkgcmV0dXJuIGluc3RhbmNlc1sgZWxlbS5mbGlja2l0eUdVSUQgXTtcbn07XG5cbnV0aWxzLmh0bWxJbml0KCBGbGlja2l0eSwgJ2ZsaWNraXR5JyApO1xuXG5sZXQgeyBqUXVlcnlCcmlkZ2V0IH0gPSB3aW5kb3c7XG5pZiAoIGpRdWVyeSAmJiBqUXVlcnlCcmlkZ2V0ICkge1xuICBqUXVlcnlCcmlkZ2V0KCAnZmxpY2tpdHknLCBGbGlja2l0eSwgalF1ZXJ5ICk7XG59XG5cbi8vIHNldCBpbnRlcm5hbCBqUXVlcnksIGZvciBXZWJwYWNrICsgalF1ZXJ5IHYzLCAjNDc4XG5GbGlja2l0eS5zZXRKUXVlcnkgPSBmdW5jdGlvbigganEgKSB7XG4gIGpRdWVyeSA9IGpxO1xufTtcblxuRmxpY2tpdHkuQ2VsbCA9IENlbGw7XG5GbGlja2l0eS5TbGlkZSA9IFNsaWRlO1xuXG5yZXR1cm4gRmxpY2tpdHk7XG5cbn0gKSApO1xuXG59LHtcIi4vYW5pbWF0ZVwiOjI0LFwiLi9jZWxsXCI6MjUsXCIuL3NsaWRlXCI6MzQsXCJldi1lbWl0dGVyXCI6MixcImZpenp5LXVpLXV0aWxzXCI6MyxcImdldC1zaXplXCI6MzV9XSwyNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vLyBkcmFnXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdyxcbiAgICAgICAgcmVxdWlyZSgnLi9jb3JlJyksXG4gICAgICAgIHJlcXVpcmUoJ3VuaWRyYWdnZXInKSxcbiAgICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKSxcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LkZsaWNraXR5ID0gZmFjdG9yeShcbiAgICAgICAgd2luZG93LFxuICAgICAgICB3aW5kb3cuRmxpY2tpdHksXG4gICAgICAgIHdpbmRvdy5VbmlkcmFnZ2VyLFxuICAgICAgICB3aW5kb3cuZml6enlVSVV0aWxzLFxuICAgICk7XG4gIH1cblxufSggdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsXG4gICAgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBGbGlja2l0eSwgVW5pZHJhZ2dlciwgdXRpbHMgKSB7XG5cbi8vIC0tLS0tIGRlZmF1bHRzIC0tLS0tIC8vXG5cbk9iamVjdC5hc3NpZ24oIEZsaWNraXR5LmRlZmF1bHRzLCB7XG4gIGRyYWdnYWJsZTogJz4xJyxcbiAgZHJhZ1RocmVzaG9sZDogMyxcbn0gKTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZHJhZyBwcm90b3R5cGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxubGV0IHByb3RvID0gRmxpY2tpdHkucHJvdG90eXBlO1xuT2JqZWN0LmFzc2lnbiggcHJvdG8sIFVuaWRyYWdnZXIucHJvdG90eXBlICk7IC8vIGluaGVyaXQgVW5pZHJhZ2dlclxucHJvdG8udG91Y2hBY3Rpb25WYWx1ZSA9ICcnO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuRmxpY2tpdHkuY3JlYXRlLmRyYWcgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5vbiggJ2FjdGl2YXRlJywgdGhpcy5vbkFjdGl2YXRlRHJhZyApO1xuICB0aGlzLm9uKCAndWlDaGFuZ2UnLCB0aGlzLl91aUNoYW5nZURyYWcgKTtcbiAgdGhpcy5vbiggJ2RlYWN0aXZhdGUnLCB0aGlzLm9uRGVhY3RpdmF0ZURyYWcgKTtcbiAgdGhpcy5vbiggJ2NlbGxDaGFuZ2UnLCB0aGlzLnVwZGF0ZURyYWdnYWJsZSApO1xuICB0aGlzLm9uKCAncG9pbnRlckRvd24nLCB0aGlzLmhhbmRsZVBvaW50ZXJEb3duICk7XG4gIHRoaXMub24oICdwb2ludGVyVXAnLCB0aGlzLmhhbmRsZVBvaW50ZXJVcCApO1xuICB0aGlzLm9uKCAncG9pbnRlckRvd24nLCB0aGlzLmhhbmRsZVBvaW50ZXJEb25lICk7XG4gIHRoaXMub24oICdkcmFnU3RhcnQnLCB0aGlzLmhhbmRsZURyYWdTdGFydCApO1xuICB0aGlzLm9uKCAnZHJhZ01vdmUnLCB0aGlzLmhhbmRsZURyYWdNb3ZlICk7XG4gIHRoaXMub24oICdkcmFnRW5kJywgdGhpcy5oYW5kbGVEcmFnRW5kICk7XG4gIHRoaXMub24oICdzdGF0aWNDbGljaycsIHRoaXMuaGFuZGxlU3RhdGljQ2xpY2sgKTtcbiAgLy8gVE9ETyB1cGRhdGVEcmFnZ2FibGUgb24gcmVzaXplPyBpZiBncm91cENlbGxzICYgc2xpZGVzIGNoYW5nZVxufTtcblxucHJvdG8ub25BY3RpdmF0ZURyYWcgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5oYW5kbGVzID0gWyB0aGlzLnZpZXdwb3J0IF07XG4gIHRoaXMuYmluZEhhbmRsZXMoKTtcbiAgdGhpcy51cGRhdGVEcmFnZ2FibGUoKTtcbn07XG5cbnByb3RvLm9uRGVhY3RpdmF0ZURyYWcgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy51bmJpbmRIYW5kbGVzKCk7XG4gIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1kcmFnZ2FibGUnKTtcbn07XG5cbnByb3RvLnVwZGF0ZURyYWdnYWJsZSA9IGZ1bmN0aW9uKCkge1xuICAvLyBkaXNhYmxlIGRyYWdnaW5nIGlmIGxlc3MgdGhhbiAyIHNsaWRlcy4gIzI3OFxuICBpZiAoIHRoaXMub3B0aW9ucy5kcmFnZ2FibGUgPT09ICc+MScgKSB7XG4gICAgdGhpcy5pc0RyYWdnYWJsZSA9IHRoaXMuc2xpZGVzLmxlbmd0aCA+IDE7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5pc0RyYWdnYWJsZSA9IHRoaXMub3B0aW9ucy5kcmFnZ2FibGU7XG4gIH1cbiAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoICdpcy1kcmFnZ2FibGUnLCB0aGlzLmlzRHJhZ2dhYmxlICk7XG59O1xuXG5wcm90by5fdWlDaGFuZ2VEcmFnID0gZnVuY3Rpb24oKSB7XG4gIGRlbGV0ZSB0aGlzLmlzRnJlZVNjcm9sbGluZztcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHBvaW50ZXIgZXZlbnRzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnByb3RvLmhhbmRsZVBvaW50ZXJEb3duID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICBpZiAoICF0aGlzLmlzRHJhZ2dhYmxlICkge1xuICAgIC8vIHByb2NlZWQgZm9yIHN0YXRpY0NsaWNrXG4gICAgdGhpcy5iaW5kQWN0aXZlUG9pbnRlckV2ZW50cyggZXZlbnQgKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgaXNUb3VjaFN0YXJ0ID0gZXZlbnQudHlwZSA9PT0gJ3RvdWNoc3RhcnQnO1xuICBsZXQgaXNUb3VjaFBvaW50ZXIgPSBldmVudC5wb2ludGVyVHlwZSA9PT0gJ3RvdWNoJztcbiAgbGV0IGlzRm9jdXNOb2RlID0gZXZlbnQudGFyZ2V0Lm1hdGNoZXMoJ2lucHV0LCB0ZXh0YXJlYSwgc2VsZWN0Jyk7XG4gIGlmICggIWlzVG91Y2hTdGFydCAmJiAhaXNUb3VjaFBvaW50ZXIgJiYgIWlzRm9jdXNOb2RlICkgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgaWYgKCAhaXNGb2N1c05vZGUgKSB0aGlzLmZvY3VzKCk7XG4gIC8vIGJsdXJcbiAgaWYgKCBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSB0aGlzLmVsZW1lbnQgKSBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmJsdXIoKTtcbiAgLy8gc3RvcCBpZiBpdCB3YXMgbW92aW5nXG4gIHRoaXMuZHJhZ1ggPSB0aGlzLng7XG4gIHRoaXMudmlld3BvcnQuY2xhc3NMaXN0LmFkZCgnaXMtcG9pbnRlci1kb3duJyk7XG4gIC8vIHRyYWNrIHNjcm9sbGluZ1xuICB0aGlzLnBvaW50ZXJEb3duU2Nyb2xsID0gZ2V0U2Nyb2xsUG9zaXRpb24oKTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdzY3JvbGwnLCB0aGlzICk7XG4gIHRoaXMuYmluZEFjdGl2ZVBvaW50ZXJFdmVudHMoIGV2ZW50ICk7XG59O1xuXG4vLyAtLS0tLSBtb3ZlIC0tLS0tIC8vXG5cbnByb3RvLmhhc0RyYWdTdGFydGVkID0gZnVuY3Rpb24oIG1vdmVWZWN0b3IgKSB7XG4gIHJldHVybiBNYXRoLmFicyggbW92ZVZlY3Rvci54ICkgPiB0aGlzLm9wdGlvbnMuZHJhZ1RocmVzaG9sZDtcbn07XG5cbi8vIC0tLS0tIHVwIC0tLS0tIC8vXG5cbnByb3RvLmhhbmRsZVBvaW50ZXJVcCA9IGZ1bmN0aW9uKCkge1xuICBkZWxldGUgdGhpcy5pc1RvdWNoU2Nyb2xsaW5nO1xuICB0aGlzLnZpZXdwb3J0LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLXBvaW50ZXItZG93bicpO1xufTtcblxucHJvdG8uaGFuZGxlUG9pbnRlckRvbmUgPSBmdW5jdGlvbigpIHtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdzY3JvbGwnLCB0aGlzICk7XG4gIGRlbGV0ZSB0aGlzLnBvaW50ZXJEb3duU2Nyb2xsO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZHJhZ2dpbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxucHJvdG8uaGFuZGxlRHJhZ1N0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMuaXNEcmFnZ2FibGUgKSByZXR1cm47XG5cbiAgdGhpcy5kcmFnU3RhcnRQb3NpdGlvbiA9IHRoaXMueDtcbiAgdGhpcy5zdGFydEFuaW1hdGlvbigpO1xuICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3Njcm9sbCcsIHRoaXMgKTtcbn07XG5cbnByb3RvLmhhbmRsZURyYWdNb3ZlID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyLCBtb3ZlVmVjdG9yICkge1xuICBpZiAoICF0aGlzLmlzRHJhZ2dhYmxlICkgcmV0dXJuO1xuXG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgdGhpcy5wcmV2aW91c0RyYWdYID0gdGhpcy5kcmFnWDtcbiAgLy8gcmV2ZXJzZSBpZiByaWdodC10by1sZWZ0XG4gIGxldCBkaXJlY3Rpb24gPSB0aGlzLm9wdGlvbnMucmlnaHRUb0xlZnQgPyAtMSA6IDE7XG4gIC8vIHdyYXAgYXJvdW5kIG1vdmUuICM1ODlcbiAgaWYgKCB0aGlzLmlzV3JhcHBpbmcgKSBtb3ZlVmVjdG9yLnggJT0gdGhpcy5zbGlkZWFibGVXaWR0aDtcbiAgbGV0IGRyYWdYID0gdGhpcy5kcmFnU3RhcnRQb3NpdGlvbiArIG1vdmVWZWN0b3IueCAqIGRpcmVjdGlvbjtcblxuICBpZiAoICF0aGlzLmlzV3JhcHBpbmcgKSB7XG4gICAgLy8gc2xvdyBkcmFnXG4gICAgbGV0IG9yaWdpbkJvdW5kID0gTWF0aC5tYXgoIC10aGlzLnNsaWRlc1swXS50YXJnZXQsIHRoaXMuZHJhZ1N0YXJ0UG9zaXRpb24gKTtcbiAgICBkcmFnWCA9IGRyYWdYID4gb3JpZ2luQm91bmQgPyAoIGRyYWdYICsgb3JpZ2luQm91bmQgKSAqIDAuNSA6IGRyYWdYO1xuICAgIGxldCBlbmRCb3VuZCA9IE1hdGgubWluKCAtdGhpcy5nZXRMYXN0U2xpZGUoKS50YXJnZXQsIHRoaXMuZHJhZ1N0YXJ0UG9zaXRpb24gKTtcbiAgICBkcmFnWCA9IGRyYWdYIDwgZW5kQm91bmQgPyAoIGRyYWdYICsgZW5kQm91bmQgKSAqIDAuNSA6IGRyYWdYO1xuICB9XG5cbiAgdGhpcy5kcmFnWCA9IGRyYWdYO1xuICB0aGlzLmRyYWdNb3ZlVGltZSA9IG5ldyBEYXRlKCk7XG59O1xuXG5wcm90by5oYW5kbGVEcmFnRW5kID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMuaXNEcmFnZ2FibGUgKSByZXR1cm47XG5cbiAgbGV0IHsgZnJlZVNjcm9sbCB9ID0gdGhpcy5vcHRpb25zO1xuICBpZiAoIGZyZWVTY3JvbGwgKSB0aGlzLmlzRnJlZVNjcm9sbGluZyA9IHRydWU7XG4gIC8vIHNldCBzZWxlY3RlZEluZGV4IGJhc2VkIG9uIHdoZXJlIGZsaWNrIHdpbGwgZW5kIHVwXG4gIGxldCBpbmRleCA9IHRoaXMuZHJhZ0VuZFJlc3RpbmdTZWxlY3QoKTtcblxuICBpZiAoIGZyZWVTY3JvbGwgJiYgIXRoaXMuaXNXcmFwcGluZyApIHtcbiAgICAvLyBpZiBmcmVlLXNjcm9sbCAmIG5vdCB3cmFwIGFyb3VuZFxuICAgIC8vIGRvIG5vdCBmcmVlLXNjcm9sbCBpZiBnb2luZyBvdXRzaWRlIG9mIGJvdW5kaW5nIHNsaWRlc1xuICAgIC8vIHNvIGJvdW5kaW5nIHNsaWRlcyBjYW4gYXR0cmFjdCBzbGlkZXIsIGFuZCBrZWVwIGl0IGluIGJvdW5kc1xuICAgIGxldCByZXN0aW5nWCA9IHRoaXMuZ2V0UmVzdGluZ1Bvc2l0aW9uKCk7XG4gICAgdGhpcy5pc0ZyZWVTY3JvbGxpbmcgPSAtcmVzdGluZ1ggPiB0aGlzLnNsaWRlc1swXS50YXJnZXQgJiZcbiAgICAgIC1yZXN0aW5nWCA8IHRoaXMuZ2V0TGFzdFNsaWRlKCkudGFyZ2V0O1xuICB9IGVsc2UgaWYgKCAhZnJlZVNjcm9sbCAmJiBpbmRleCA9PT0gdGhpcy5zZWxlY3RlZEluZGV4ICkge1xuICAgIC8vIGJvb3N0IHNlbGVjdGlvbiBpZiBzZWxlY3RlZCBpbmRleCBoYXMgbm90IGNoYW5nZWRcbiAgICBpbmRleCArPSB0aGlzLmRyYWdFbmRCb29zdFNlbGVjdCgpO1xuICB9XG4gIGRlbGV0ZSB0aGlzLnByZXZpb3VzRHJhZ1g7XG4gIC8vIGFwcGx5IHNlbGVjdGlvblxuICAvLyBIQUNLLCBzZXQgZmxhZyBzbyBkcmFnZ2luZyBzdGF5cyBpbiBjb3JyZWN0IGRpcmVjdGlvblxuICB0aGlzLmlzRHJhZ1NlbGVjdCA9IHRoaXMuaXNXcmFwcGluZztcbiAgdGhpcy5zZWxlY3QoIGluZGV4ICk7XG4gIGRlbGV0ZSB0aGlzLmlzRHJhZ1NlbGVjdDtcbn07XG5cbnByb3RvLmRyYWdFbmRSZXN0aW5nU2VsZWN0ID0gZnVuY3Rpb24oKSB7XG4gIGxldCByZXN0aW5nWCA9IHRoaXMuZ2V0UmVzdGluZ1Bvc2l0aW9uKCk7XG4gIC8vIGhvdyBmYXIgYXdheSBmcm9tIHNlbGVjdGVkIHNsaWRlXG4gIGxldCBkaXN0YW5jZSA9IE1hdGguYWJzKCB0aGlzLmdldFNsaWRlRGlzdGFuY2UoIC1yZXN0aW5nWCwgdGhpcy5zZWxlY3RlZEluZGV4ICkgKTtcbiAgLy8gZ2V0IGNsb3NldCByZXN0aW5nIGdvaW5nIHVwIGFuZCBnb2luZyBkb3duXG4gIGxldCBwb3NpdGl2ZVJlc3RpbmcgPSB0aGlzLl9nZXRDbG9zZXN0UmVzdGluZyggcmVzdGluZ1gsIGRpc3RhbmNlLCAxICk7XG4gIGxldCBuZWdhdGl2ZVJlc3RpbmcgPSB0aGlzLl9nZXRDbG9zZXN0UmVzdGluZyggcmVzdGluZ1gsIGRpc3RhbmNlLCAtMSApO1xuICAvLyB1c2UgY2xvc2VyIHJlc3RpbmcgZm9yIHdyYXAtYXJvdW5kXG4gIHJldHVybiBwb3NpdGl2ZVJlc3RpbmcuZGlzdGFuY2UgPCBuZWdhdGl2ZVJlc3RpbmcuZGlzdGFuY2UgP1xuICAgIHBvc2l0aXZlUmVzdGluZy5pbmRleCA6IG5lZ2F0aXZlUmVzdGluZy5pbmRleDtcbn07XG5cbi8qKlxuICogZ2l2ZW4gcmVzdGluZyBYIGFuZCBkaXN0YW5jZSB0byBzZWxlY3RlZCBjZWxsXG4gKiBnZXQgdGhlIGRpc3RhbmNlIGFuZCBpbmRleCBvZiB0aGUgY2xvc2VzdCBjZWxsXG4gKiBAcGFyYW0ge051bWJlcn0gcmVzdGluZ1ggLSBlc3RpbWF0ZWQgcG9zdC1mbGljayByZXN0aW5nIHBvc2l0aW9uXG4gKiBAcGFyYW0ge051bWJlcn0gZGlzdGFuY2UgLSBkaXN0YW5jZSB0byBzZWxlY3RlZCBjZWxsXG4gKiBAcGFyYW0ge0ludGVnZXJ9IGluY3JlbWVudCAtICsxIG9yIC0xLCBnb2luZyB1cCBvciBkb3duXG4gKiBAcmV0dXJucyB7T2JqZWN0fSAtIHsgZGlzdGFuY2U6IHtOdW1iZXJ9LCBpbmRleDoge0ludGVnZXJ9IH1cbiAqL1xucHJvdG8uX2dldENsb3Nlc3RSZXN0aW5nID0gZnVuY3Rpb24oIHJlc3RpbmdYLCBkaXN0YW5jZSwgaW5jcmVtZW50ICkge1xuICBsZXQgaW5kZXggPSB0aGlzLnNlbGVjdGVkSW5kZXg7XG4gIGxldCBtaW5EaXN0YW5jZSA9IEluZmluaXR5O1xuICBsZXQgY29uZGl0aW9uID0gdGhpcy5vcHRpb25zLmNvbnRhaW4gJiYgIXRoaXMuaXNXcmFwcGluZyA/XG4gICAgLy8gaWYgY29udGFpbmluZywga2VlcCBnb2luZyBpZiBkaXN0YW5jZSBpcyBlcXVhbCB0byBtaW5EaXN0YW5jZVxuICAgICggZGlzdCwgbWluRGlzdCApID0+IGRpc3QgPD0gbWluRGlzdCA6XG4gICAgKCBkaXN0LCBtaW5EaXN0ICkgPT4gZGlzdCA8IG1pbkRpc3Q7XG5cbiAgd2hpbGUgKCBjb25kaXRpb24oIGRpc3RhbmNlLCBtaW5EaXN0YW5jZSApICkge1xuICAgIC8vIG1lYXN1cmUgZGlzdGFuY2UgdG8gbmV4dCBjZWxsXG4gICAgaW5kZXggKz0gaW5jcmVtZW50O1xuICAgIG1pbkRpc3RhbmNlID0gZGlzdGFuY2U7XG4gICAgZGlzdGFuY2UgPSB0aGlzLmdldFNsaWRlRGlzdGFuY2UoIC1yZXN0aW5nWCwgaW5kZXggKTtcbiAgICBpZiAoIGRpc3RhbmNlID09PSBudWxsICkgYnJlYWs7XG5cbiAgICBkaXN0YW5jZSA9IE1hdGguYWJzKCBkaXN0YW5jZSApO1xuICB9XG4gIHJldHVybiB7XG4gICAgZGlzdGFuY2U6IG1pbkRpc3RhbmNlLFxuICAgIC8vIHNlbGVjdGVkIHdhcyBwcmV2aW91cyBpbmRleFxuICAgIGluZGV4OiBpbmRleCAtIGluY3JlbWVudCxcbiAgfTtcbn07XG5cbi8qKlxuICogbWVhc3VyZSBkaXN0YW5jZSBiZXR3ZWVuIHggYW5kIGEgc2xpZGUgdGFyZ2V0XG4gKiBAcGFyYW0ge051bWJlcn0geCAtIGhvcml6b250YWwgcG9zaXRpb25cbiAqIEBwYXJhbSB7SW50ZWdlcn0gaW5kZXggLSBzbGlkZSBpbmRleFxuICogQHJldHVybnMge051bWJlcn0gLSBzbGlkZSBkaXN0YW5jZVxuICovXG5wcm90by5nZXRTbGlkZURpc3RhbmNlID0gZnVuY3Rpb24oIHgsIGluZGV4ICkge1xuICBsZXQgbGVuID0gdGhpcy5zbGlkZXMubGVuZ3RoO1xuICAvLyB3cmFwIGFyb3VuZCBpZiBhdCBsZWFzdCAyIHNsaWRlc1xuICBsZXQgaXNXcmFwQXJvdW5kID0gdGhpcy5vcHRpb25zLndyYXBBcm91bmQgJiYgbGVuID4gMTtcbiAgbGV0IHNsaWRlSW5kZXggPSBpc1dyYXBBcm91bmQgPyB1dGlscy5tb2R1bG8oIGluZGV4LCBsZW4gKSA6IGluZGV4O1xuICBsZXQgc2xpZGUgPSB0aGlzLnNsaWRlc1sgc2xpZGVJbmRleCBdO1xuICBpZiAoICFzbGlkZSApIHJldHVybiBudWxsO1xuXG4gIC8vIGFkZCBkaXN0YW5jZSBmb3Igd3JhcC1hcm91bmQgc2xpZGVzXG4gIGxldCB3cmFwID0gaXNXcmFwQXJvdW5kID8gdGhpcy5zbGlkZWFibGVXaWR0aCAqIE1hdGguZmxvb3IoIGluZGV4L2xlbiApIDogMDtcbiAgcmV0dXJuIHggLSAoIHNsaWRlLnRhcmdldCArIHdyYXAgKTtcbn07XG5cbnByb3RvLmRyYWdFbmRCb29zdFNlbGVjdCA9IGZ1bmN0aW9uKCkge1xuICAvLyBkbyBub3QgYm9vc3QgaWYgbm8gcHJldmlvdXNEcmFnWCBvciBkcmFnTW92ZVRpbWVcbiAgaWYgKCB0aGlzLnByZXZpb3VzRHJhZ1ggPT09IHVuZGVmaW5lZCB8fCAhdGhpcy5kcmFnTW92ZVRpbWUgfHxcbiAgICAvLyBvciBpZiBkcmFnIHdhcyBoZWxkIGZvciAxMDAgbXNcbiAgICBuZXcgRGF0ZSgpIC0gdGhpcy5kcmFnTW92ZVRpbWUgPiAxMDAgKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBsZXQgZGlzdGFuY2UgPSB0aGlzLmdldFNsaWRlRGlzdGFuY2UoIC10aGlzLmRyYWdYLCB0aGlzLnNlbGVjdGVkSW5kZXggKTtcbiAgbGV0IGRlbHRhID0gdGhpcy5wcmV2aW91c0RyYWdYIC0gdGhpcy5kcmFnWDtcbiAgaWYgKCBkaXN0YW5jZSA+IDAgJiYgZGVsdGEgPiAwICkge1xuICAgIC8vIGJvb3N0IHRvIG5leHQgaWYgbW92aW5nIHRvd2FyZHMgdGhlIHJpZ2h0LCBhbmQgcG9zaXRpdmUgdmVsb2NpdHlcbiAgICByZXR1cm4gMTtcbiAgfSBlbHNlIGlmICggZGlzdGFuY2UgPCAwICYmIGRlbHRhIDwgMCApIHtcbiAgICAvLyBib29zdCB0byBwcmV2aW91cyBpZiBtb3ZpbmcgdG93YXJkcyB0aGUgbGVmdCwgYW5kIG5lZ2F0aXZlIHZlbG9jaXR5XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIHJldHVybiAwO1xufTtcblxuLy8gLS0tLS0gc2Nyb2xsIC0tLS0tIC8vXG5cbnByb3RvLm9uc2Nyb2xsID0gZnVuY3Rpb24oKSB7XG4gIGxldCBzY3JvbGwgPSBnZXRTY3JvbGxQb3NpdGlvbigpO1xuICBsZXQgc2Nyb2xsTW92ZVggPSB0aGlzLnBvaW50ZXJEb3duU2Nyb2xsLnggLSBzY3JvbGwueDtcbiAgbGV0IHNjcm9sbE1vdmVZID0gdGhpcy5wb2ludGVyRG93blNjcm9sbC55IC0gc2Nyb2xsLnk7XG4gIC8vIGNhbmNlbCBjbGljay90YXAgaWYgc2Nyb2xsIGlzIHRvbyBtdWNoXG4gIGlmICggTWF0aC5hYnMoIHNjcm9sbE1vdmVYICkgPiAzIHx8IE1hdGguYWJzKCBzY3JvbGxNb3ZlWSApID4gMyApIHtcbiAgICB0aGlzLnBvaW50ZXJEb25lKCk7XG4gIH1cbn07XG5cbi8vIC0tLS0tIHV0aWxzIC0tLS0tIC8vXG5cbmZ1bmN0aW9uIGdldFNjcm9sbFBvc2l0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHg6IHdpbmRvdy5wYWdlWE9mZnNldCxcbiAgICB5OiB3aW5kb3cucGFnZVlPZmZzZXQsXG4gIH07XG59XG5cbi8vIC0tLS0tICAtLS0tLSAvL1xuXG5yZXR1cm4gRmxpY2tpdHk7XG5cbn0gKSApO1xuXG59LHtcIi4vY29yZVwiOjI2LFwiZml6enktdWktdXRpbHNcIjozLFwidW5pZHJhZ2dlclwiOjM4fV0sMjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLy8gaW1hZ2VzbG9hZGVkXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICAgIHJlcXVpcmUoJy4vY29yZScpLFxuICAgICAgICByZXF1aXJlKCdpbWFnZXNsb2FkZWQnKSxcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgZmFjdG9yeShcbiAgICAgICAgd2luZG93LkZsaWNraXR5LFxuICAgICAgICB3aW5kb3cuaW1hZ2VzTG9hZGVkLFxuICAgICk7XG4gIH1cblxufSggdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsXG4gICAgZnVuY3Rpb24gZmFjdG9yeSggRmxpY2tpdHksIGltYWdlc0xvYWRlZCApIHtcblxuRmxpY2tpdHkuY3JlYXRlLmltYWdlc0xvYWRlZCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLm9uKCAnYWN0aXZhdGUnLCB0aGlzLmltYWdlc0xvYWRlZCApO1xufTtcblxuRmxpY2tpdHkucHJvdG90eXBlLmltYWdlc0xvYWRlZCA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLm9wdGlvbnMuaW1hZ2VzTG9hZGVkICkgcmV0dXJuO1xuXG4gIGxldCBvbkltYWdlc0xvYWRlZFByb2dyZXNzID0gKCBpbnN0YW5jZSwgaW1hZ2UgKSA9PiB7XG4gICAgbGV0IGNlbGwgPSB0aGlzLmdldFBhcmVudENlbGwoIGltYWdlLmltZyApO1xuICAgIHRoaXMuY2VsbFNpemVDaGFuZ2UoIGNlbGwgJiYgY2VsbC5lbGVtZW50ICk7XG4gICAgaWYgKCAhdGhpcy5vcHRpb25zLmZyZWVTY3JvbGwgKSB0aGlzLnBvc2l0aW9uU2xpZGVyQXRTZWxlY3RlZCgpO1xuICB9O1xuICBpbWFnZXNMb2FkZWQoIHRoaXMuc2xpZGVyICkub24oICdwcm9ncmVzcycsIG9uSW1hZ2VzTG9hZGVkUHJvZ3Jlc3MgKTtcbn07XG5cbnJldHVybiBGbGlja2l0eTtcblxufSApICk7XG5cbn0se1wiLi9jb3JlXCI6MjYsXCJpbWFnZXNsb2FkZWRcIjozNn1dLDI5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qIVxuICogRmxpY2tpdHkgdjMuMC4wXG4gKiBUb3VjaCwgcmVzcG9uc2l2ZSwgZmxpY2thYmxlIGNhcm91c2Vsc1xuICpcbiAqIExpY2Vuc2VkIEdQTHYzIGZvciBvcGVuIHNvdXJjZSB1c2VcbiAqIG9yIEZsaWNraXR5IENvbW1lcmNpYWwgTGljZW5zZSBmb3IgY29tbWVyY2lhbCB1c2VcbiAqXG4gKiBodHRwczovL2ZsaWNraXR5Lm1ldGFmaXp6eS5jb1xuICogQ29weXJpZ2h0IDIwMTUtMjAyMiBNZXRhZml6enlcbiAqL1xuXG5pZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gIGNvbnN0IEZsaWNraXR5ID0gcmVxdWlyZSgnLi9jb3JlJyk7XG4gIHJlcXVpcmUoJy4vZHJhZycpO1xuICByZXF1aXJlKCcuL3ByZXYtbmV4dC1idXR0b24nKTtcbiAgcmVxdWlyZSgnLi9wYWdlLWRvdHMnKTtcbiAgcmVxdWlyZSgnLi9wbGF5ZXInKTtcbiAgcmVxdWlyZSgnLi9hZGQtcmVtb3ZlLWNlbGwnKTtcbiAgcmVxdWlyZSgnLi9sYXp5bG9hZCcpO1xuICByZXF1aXJlKCcuL2ltYWdlc2xvYWRlZCcpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gRmxpY2tpdHk7XG59XG5cbn0se1wiLi9hZGQtcmVtb3ZlLWNlbGxcIjoyMyxcIi4vY29yZVwiOjI2LFwiLi9kcmFnXCI6MjcsXCIuL2ltYWdlc2xvYWRlZFwiOjI4LFwiLi9sYXp5bG9hZFwiOjMwLFwiLi9wYWdlLWRvdHNcIjozMSxcIi4vcGxheWVyXCI6MzIsXCIuL3ByZXYtbmV4dC1idXR0b25cIjozM31dLDMwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8vIGxhenlsb2FkXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICAgIHJlcXVpcmUoJy4vY29yZScpLFxuICAgICAgICByZXF1aXJlKCdmaXp6eS11aS11dGlscycpLFxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICBmYWN0b3J5KFxuICAgICAgICB3aW5kb3cuRmxpY2tpdHksXG4gICAgICAgIHdpbmRvdy5maXp6eVVJVXRpbHMsXG4gICAgKTtcbiAgfVxuXG59KCB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24gZmFjdG9yeSggRmxpY2tpdHksIHV0aWxzICkge1xuXG5jb25zdCBsYXp5QXR0ciA9ICdkYXRhLWZsaWNraXR5LWxhenlsb2FkJztcbmNvbnN0IGxhenlTcmNBdHRyID0gYCR7bGF6eUF0dHJ9LXNyY2A7XG5jb25zdCBsYXp5U3Jjc2V0QXR0ciA9IGAke2xhenlBdHRyfS1zcmNzZXRgO1xuY29uc3QgaW1nU2VsZWN0b3IgPSBgaW1nWyR7bGF6eUF0dHJ9XSwgaW1nWyR7bGF6eVNyY0F0dHJ9XSwgYCArXG4gIGBpbWdbJHtsYXp5U3Jjc2V0QXR0cn1dLCBzb3VyY2VbJHtsYXp5U3Jjc2V0QXR0cn1dYDtcblxuRmxpY2tpdHkuY3JlYXRlLmxhenlMb2FkID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMub24oICdzZWxlY3QnLCB0aGlzLmxhenlMb2FkICk7XG5cbiAgdGhpcy5oYW5kbGVMYXp5TG9hZENvbXBsZXRlID0gdGhpcy5vbkxhenlMb2FkQ29tcGxldGUuYmluZCggdGhpcyApO1xufTtcblxubGV0IHByb3RvID0gRmxpY2tpdHkucHJvdG90eXBlO1xuXG5wcm90by5sYXp5TG9hZCA9IGZ1bmN0aW9uKCkge1xuICBsZXQgeyBsYXp5TG9hZCB9ID0gdGhpcy5vcHRpb25zO1xuICBpZiAoICFsYXp5TG9hZCApIHJldHVybjtcblxuICAvLyBnZXQgYWRqYWNlbnQgY2VsbHMsIHVzZSBsYXp5TG9hZCBvcHRpb24gZm9yIGFkamFjZW50IGNvdW50XG4gIGxldCBhZGpDb3VudCA9IHR5cGVvZiBsYXp5TG9hZCA9PSAnbnVtYmVyJyA/IGxhenlMb2FkIDogMDtcbiAgLy8gbGF6eSBsb2FkIGltYWdlc1xuICB0aGlzLmdldEFkamFjZW50Q2VsbEVsZW1lbnRzKCBhZGpDb3VudCApXG4gICAgLm1hcCggZ2V0Q2VsbExhenlJbWFnZXMgKVxuICAgIC5mbGF0KClcbiAgICAuZm9yRWFjaCggKCBpbWcgKSA9PiBuZXcgTGF6eUxvYWRlciggaW1nLCB0aGlzLmhhbmRsZUxhenlMb2FkQ29tcGxldGUgKSApO1xufTtcblxuZnVuY3Rpb24gZ2V0Q2VsbExhenlJbWFnZXMoIGNlbGxFbGVtICkge1xuICAvLyBjaGVjayBpZiBjZWxsIGVsZW1lbnQgaXMgbGF6eSBpbWFnZVxuICBpZiAoIGNlbGxFbGVtLm1hdGNoZXMoJ2ltZycpICkge1xuICAgIGxldCBjZWxsQXR0ciA9IGNlbGxFbGVtLmdldEF0dHJpYnV0ZSggbGF6eUF0dHIgKTtcbiAgICBsZXQgY2VsbFNyY0F0dHIgPSBjZWxsRWxlbS5nZXRBdHRyaWJ1dGUoIGxhenlTcmNBdHRyICk7XG4gICAgbGV0IGNlbGxTcmNzZXRBdHRyID0gY2VsbEVsZW0uZ2V0QXR0cmlidXRlKCBsYXp5U3Jjc2V0QXR0ciApO1xuICAgIGlmICggY2VsbEF0dHIgfHwgY2VsbFNyY0F0dHIgfHwgY2VsbFNyY3NldEF0dHIgKSB7XG4gICAgICByZXR1cm4gY2VsbEVsZW07XG4gICAgfVxuICB9XG4gIC8vIHNlbGVjdCBsYXp5IGltYWdlcyBpbiBjZWxsXG4gIHJldHVybiBbIC4uLmNlbGxFbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoIGltZ1NlbGVjdG9yICkgXTtcbn1cblxucHJvdG8ub25MYXp5TG9hZENvbXBsZXRlID0gZnVuY3Rpb24oIGltZywgZXZlbnQgKSB7XG4gIGxldCBjZWxsID0gdGhpcy5nZXRQYXJlbnRDZWxsKCBpbWcgKTtcbiAgbGV0IGNlbGxFbGVtID0gY2VsbCAmJiBjZWxsLmVsZW1lbnQ7XG4gIHRoaXMuY2VsbFNpemVDaGFuZ2UoIGNlbGxFbGVtICk7XG5cbiAgdGhpcy5kaXNwYXRjaEV2ZW50KCAnbGF6eUxvYWQnLCBldmVudCwgY2VsbEVsZW0gKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIExhenlMb2FkZXIgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLyoqXG4gKiBjbGFzcyB0byBoYW5kbGUgbG9hZGluZyBpbWFnZXNcbiAqIEBwYXJhbSB7SW1hZ2V9IGltZyAtIEltYWdlIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9uQ29tcGxldGUgLSBjYWxsYmFjayBmdW5jdGlvblxuICovXG5mdW5jdGlvbiBMYXp5TG9hZGVyKCBpbWcsIG9uQ29tcGxldGUgKSB7XG4gIHRoaXMuaW1nID0gaW1nO1xuICB0aGlzLm9uQ29tcGxldGUgPSBvbkNvbXBsZXRlO1xuICB0aGlzLmxvYWQoKTtcbn1cblxuTGF6eUxvYWRlci5wcm90b3R5cGUuaGFuZGxlRXZlbnQgPSB1dGlscy5oYW5kbGVFdmVudDtcblxuTGF6eUxvYWRlci5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5pbWcuYWRkRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xuICAvLyBnZXQgc3JjICYgc3Jjc2V0XG4gIGxldCBzcmMgPSB0aGlzLmltZy5nZXRBdHRyaWJ1dGUoIGxhenlBdHRyICkgfHxcbiAgICB0aGlzLmltZy5nZXRBdHRyaWJ1dGUoIGxhenlTcmNBdHRyICk7XG4gIGxldCBzcmNzZXQgPSB0aGlzLmltZy5nZXRBdHRyaWJ1dGUoIGxhenlTcmNzZXRBdHRyICk7XG4gIC8vIHNldCBzcmMgJiBzZXJzZXRcbiAgdGhpcy5pbWcuc3JjID0gc3JjO1xuICBpZiAoIHNyY3NldCApIHRoaXMuaW1nLnNldEF0dHJpYnV0ZSggJ3NyY3NldCcsIHNyY3NldCApO1xuICAvLyByZW1vdmUgYXR0clxuICB0aGlzLmltZy5yZW1vdmVBdHRyaWJ1dGUoIGxhenlBdHRyICk7XG4gIHRoaXMuaW1nLnJlbW92ZUF0dHJpYnV0ZSggbGF6eVNyY0F0dHIgKTtcbiAgdGhpcy5pbWcucmVtb3ZlQXR0cmlidXRlKCBsYXp5U3Jjc2V0QXR0ciApO1xufTtcblxuTGF6eUxvYWRlci5wcm90b3R5cGUub25sb2FkID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB0aGlzLmNvbXBsZXRlKCBldmVudCwgJ2ZsaWNraXR5LWxhenlsb2FkZWQnICk7XG59O1xuXG5MYXp5TG9hZGVyLnByb3RvdHlwZS5vbmVycm9yID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB0aGlzLmNvbXBsZXRlKCBldmVudCwgJ2ZsaWNraXR5LWxhenllcnJvcicgKTtcbn07XG5cbkxhenlMb2FkZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24oIGV2ZW50LCBjbGFzc05hbWUgKSB7XG4gIC8vIHVuYmluZCBldmVudHNcbiAgdGhpcy5pbWcucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCB0aGlzICk7XG4gIHRoaXMuaW1nLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdlcnJvcicsIHRoaXMgKTtcbiAgbGV0IG1lZGlhRWxlbSA9IHRoaXMuaW1nLnBhcmVudE5vZGUubWF0Y2hlcygncGljdHVyZScpID8gdGhpcy5pbWcucGFyZW50Tm9kZSA6IHRoaXMuaW1nO1xuICBtZWRpYUVsZW0uY2xhc3NMaXN0LmFkZCggY2xhc3NOYW1lICk7XG5cbiAgdGhpcy5vbkNvbXBsZXRlKCB0aGlzLmltZywgZXZlbnQgKTtcbn07XG5cbi8vIC0tLS0tICAtLS0tLSAvL1xuXG5GbGlja2l0eS5MYXp5TG9hZGVyID0gTGF6eUxvYWRlcjtcblxucmV0dXJuIEZsaWNraXR5O1xuXG59ICkgKTtcblxufSx7XCIuL2NvcmVcIjoyNixcImZpenp5LXVpLXV0aWxzXCI6M31dLDMxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8vIHBhZ2UgZG90c1xuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgICByZXF1aXJlKCcuL2NvcmUnKSxcbiAgICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKSxcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgZmFjdG9yeShcbiAgICAgICAgd2luZG93LkZsaWNraXR5LFxuICAgICAgICB3aW5kb3cuZml6enlVSVV0aWxzLFxuICAgICk7XG4gIH1cblxufSggdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uIGZhY3RvcnkoIEZsaWNraXR5LCB1dGlscyApIHtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUGFnZURvdHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gUGFnZURvdHMoKSB7XG4gIC8vIGNyZWF0ZSBob2xkZXIgZWxlbWVudFxuICB0aGlzLmhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB0aGlzLmhvbGRlci5jbGFzc05hbWUgPSAnZmxpY2tpdHktcGFnZS1kb3RzJztcbiAgLy8gY3JlYXRlIGRvdHMsIGFycmF5IG9mIGVsZW1lbnRzXG4gIHRoaXMuZG90cyA9IFtdO1xufVxuXG5QYWdlRG90cy5wcm90b3R5cGUuc2V0RG90cyA9IGZ1bmN0aW9uKCBzbGlkZXNMZW5ndGggKSB7XG4gIC8vIGdldCBkaWZmZXJlbmNlIGJldHdlZW4gbnVtYmVyIG9mIHNsaWRlcyBhbmQgbnVtYmVyIG9mIGRvdHNcbiAgbGV0IGRlbHRhID0gc2xpZGVzTGVuZ3RoIC0gdGhpcy5kb3RzLmxlbmd0aDtcbiAgaWYgKCBkZWx0YSA+IDAgKSB7XG4gICAgdGhpcy5hZGREb3RzKCBkZWx0YSApO1xuICB9IGVsc2UgaWYgKCBkZWx0YSA8IDAgKSB7XG4gICAgdGhpcy5yZW1vdmVEb3RzKCAtZGVsdGEgKTtcbiAgfVxufTtcblxuUGFnZURvdHMucHJvdG90eXBlLmFkZERvdHMgPSBmdW5jdGlvbiggY291bnQgKSB7XG4gIGxldCBuZXdEb3RzID0gbmV3IEFycmF5KCBjb3VudCApLmZpbGwoKVxuICAgIC5tYXAoICggaXRlbSwgaSApID0+IHtcbiAgICAgIGxldCBkb3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgIGRvdC5zZXRBdHRyaWJ1dGUoICd0eXBlJywgJ2J1dHRvbicgKTtcbiAgICAgIGxldCBudW0gPSBpICsgMSArIHRoaXMuZG90cy5sZW5ndGg7XG4gICAgICBkb3QuY2xhc3NOYW1lID0gJ2ZsaWNraXR5LXBhZ2UtZG90JztcbiAgICAgIGRvdC50ZXh0Q29udGVudCA9IGBWaWV3IHNsaWRlICR7bnVtfWA7XG4gICAgICByZXR1cm4gZG90O1xuICAgIH0gKTtcblxuICB0aGlzLmhvbGRlci5hcHBlbmQoIC4uLm5ld0RvdHMgKTtcbiAgdGhpcy5kb3RzID0gdGhpcy5kb3RzLmNvbmNhdCggbmV3RG90cyApO1xufTtcblxuUGFnZURvdHMucHJvdG90eXBlLnJlbW92ZURvdHMgPSBmdW5jdGlvbiggY291bnQgKSB7XG4gIC8vIHJlbW92ZSBmcm9tIHRoaXMuZG90cyBjb2xsZWN0aW9uXG4gIGxldCByZW1vdmVEb3RzID0gdGhpcy5kb3RzLnNwbGljZSggdGhpcy5kb3RzLmxlbmd0aCAtIGNvdW50LCBjb3VudCApO1xuICAvLyByZW1vdmUgZnJvbSBET01cbiAgcmVtb3ZlRG90cy5mb3JFYWNoKCAoIGRvdCApID0+IGRvdC5yZW1vdmUoKSApO1xufTtcblxuUGFnZURvdHMucHJvdG90eXBlLnVwZGF0ZVNlbGVjdGVkID0gZnVuY3Rpb24oIGluZGV4ICkge1xuICAvLyByZW1vdmUgc2VsZWN0ZWQgY2xhc3Mgb24gcHJldmlvdXNcbiAgaWYgKCB0aGlzLnNlbGVjdGVkRG90ICkge1xuICAgIHRoaXMuc2VsZWN0ZWREb3QuY2xhc3NMaXN0LnJlbW92ZSgnaXMtc2VsZWN0ZWQnKTtcbiAgICB0aGlzLnNlbGVjdGVkRG90LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1jdXJyZW50Jyk7XG4gIH1cbiAgLy8gZG9uJ3QgcHJvY2VlZCBpZiBubyBkb3RzXG4gIGlmICggIXRoaXMuZG90cy5sZW5ndGggKSByZXR1cm47XG5cbiAgdGhpcy5zZWxlY3RlZERvdCA9IHRoaXMuZG90c1sgaW5kZXggXTtcbiAgdGhpcy5zZWxlY3RlZERvdC5jbGFzc0xpc3QuYWRkKCdpcy1zZWxlY3RlZCcpO1xuICB0aGlzLnNlbGVjdGVkRG90LnNldEF0dHJpYnV0ZSggJ2FyaWEtY3VycmVudCcsICdzdGVwJyApO1xufTtcblxuRmxpY2tpdHkuUGFnZURvdHMgPSBQYWdlRG90cztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRmxpY2tpdHkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuT2JqZWN0LmFzc2lnbiggRmxpY2tpdHkuZGVmYXVsdHMsIHtcbiAgcGFnZURvdHM6IHRydWUsXG59ICk7XG5cbkZsaWNraXR5LmNyZWF0ZS5wYWdlRG90cyA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLm9wdGlvbnMucGFnZURvdHMgKSByZXR1cm47XG5cbiAgdGhpcy5wYWdlRG90cyA9IG5ldyBQYWdlRG90cygpO1xuICB0aGlzLmhhbmRsZVBhZ2VEb3RzQ2xpY2sgPSB0aGlzLm9uUGFnZURvdHNDbGljay5iaW5kKCB0aGlzICk7XG4gIC8vIGV2ZW50c1xuICB0aGlzLm9uKCAnYWN0aXZhdGUnLCB0aGlzLmFjdGl2YXRlUGFnZURvdHMgKTtcbiAgdGhpcy5vbiggJ3NlbGVjdCcsIHRoaXMudXBkYXRlU2VsZWN0ZWRQYWdlRG90cyApO1xuICB0aGlzLm9uKCAnY2VsbENoYW5nZScsIHRoaXMudXBkYXRlUGFnZURvdHMgKTtcbiAgdGhpcy5vbiggJ3Jlc2l6ZScsIHRoaXMudXBkYXRlUGFnZURvdHMgKTtcbiAgdGhpcy5vbiggJ2RlYWN0aXZhdGUnLCB0aGlzLmRlYWN0aXZhdGVQYWdlRG90cyApO1xufTtcblxubGV0IHByb3RvID0gRmxpY2tpdHkucHJvdG90eXBlO1xuXG5wcm90by5hY3RpdmF0ZVBhZ2VEb3RzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGFnZURvdHMuc2V0RG90cyggdGhpcy5zbGlkZXMubGVuZ3RoICk7XG4gIHRoaXMuZm9jdXNhYmxlRWxlbXMucHVzaCggLi4udGhpcy5wYWdlRG90cy5kb3RzICk7XG4gIHRoaXMucGFnZURvdHMuaG9sZGVyLmFkZEV2ZW50TGlzdGVuZXIoICdjbGljaycsIHRoaXMuaGFuZGxlUGFnZURvdHNDbGljayApO1xuICB0aGlzLmVsZW1lbnQuYXBwZW5kKCB0aGlzLnBhZ2VEb3RzLmhvbGRlciApO1xufTtcblxucHJvdG8ub25QYWdlRG90c0NsaWNrID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICBsZXQgaW5kZXggPSB0aGlzLnBhZ2VEb3RzLmRvdHMuaW5kZXhPZiggZXZlbnQudGFyZ2V0ICk7XG4gIGlmICggaW5kZXggPT09IC0xICkgcmV0dXJuOyAvLyBvbmx5IGRvdCBjbGlja3NcblxuICB0aGlzLnVpQ2hhbmdlKCk7XG4gIHRoaXMuc2VsZWN0KCBpbmRleCApO1xufTtcblxucHJvdG8udXBkYXRlU2VsZWN0ZWRQYWdlRG90cyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBhZ2VEb3RzLnVwZGF0ZVNlbGVjdGVkKCB0aGlzLnNlbGVjdGVkSW5kZXggKTtcbn07XG5cbnByb3RvLnVwZGF0ZVBhZ2VEb3RzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGFnZURvdHMuZG90cy5mb3JFYWNoKCAoIGRvdCApID0+IHtcbiAgICB1dGlscy5yZW1vdmVGcm9tKCB0aGlzLmZvY3VzYWJsZUVsZW1zLCBkb3QgKTtcbiAgfSApO1xuICB0aGlzLnBhZ2VEb3RzLnNldERvdHMoIHRoaXMuc2xpZGVzLmxlbmd0aCApO1xuICB0aGlzLmZvY3VzYWJsZUVsZW1zLnB1c2goIC4uLnRoaXMucGFnZURvdHMuZG90cyApO1xufTtcblxucHJvdG8uZGVhY3RpdmF0ZVBhZ2VEb3RzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGFnZURvdHMuaG9sZGVyLnJlbW92ZSgpO1xuICB0aGlzLnBhZ2VEb3RzLmhvbGRlci5yZW1vdmVFdmVudExpc3RlbmVyKCAnY2xpY2snLCB0aGlzLmhhbmRsZVBhZ2VEb3RzQ2xpY2sgKTtcbn07XG5cbi8vIC0tLS0tICAtLS0tLSAvL1xuXG5GbGlja2l0eS5QYWdlRG90cyA9IFBhZ2VEb3RzO1xuXG5yZXR1cm4gRmxpY2tpdHk7XG5cbn0gKSApO1xuXG59LHtcIi4vY29yZVwiOjI2LFwiZml6enktdWktdXRpbHNcIjozfV0sMzI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLy8gcGxheWVyICYgYXV0b1BsYXlcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSggcmVxdWlyZSgnLi9jb3JlJykgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIGZhY3RvcnkoIHdpbmRvdy5GbGlja2l0eSApO1xuICB9XG5cbn0oIHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiBmYWN0b3J5KCBGbGlja2l0eSApIHtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUGxheWVyIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmZ1bmN0aW9uIFBsYXllciggYXV0b1BsYXksIG9uVGljayApIHtcbiAgdGhpcy5hdXRvUGxheSA9IGF1dG9QbGF5O1xuICB0aGlzLm9uVGljayA9IG9uVGljaztcbiAgdGhpcy5zdGF0ZSA9ICdzdG9wcGVkJztcbiAgLy8gdmlzaWJpbGl0eSBjaGFuZ2UgZXZlbnQgaGFuZGxlclxuICB0aGlzLm9uVmlzaWJpbGl0eUNoYW5nZSA9IHRoaXMudmlzaWJpbGl0eUNoYW5nZS5iaW5kKCB0aGlzICk7XG4gIHRoaXMub25WaXNpYmlsaXR5UGxheSA9IHRoaXMudmlzaWJpbGl0eVBsYXkuYmluZCggdGhpcyApO1xufVxuXG4vLyBzdGFydCBwbGF5XG5QbGF5ZXIucHJvdG90eXBlLnBsYXkgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCB0aGlzLnN0YXRlID09PSAncGxheWluZycgKSByZXR1cm47XG5cbiAgLy8gZG8gbm90IHBsYXkgaWYgcGFnZSBpcyBoaWRkZW4sIHN0YXJ0IHBsYXlpbmcgd2hlbiBwYWdlIGlzIHZpc2libGVcbiAgbGV0IGlzUGFnZUhpZGRlbiA9IGRvY3VtZW50LmhpZGRlbjtcbiAgaWYgKCBpc1BhZ2VIaWRkZW4gKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ3Zpc2liaWxpdHljaGFuZ2UnLCB0aGlzLm9uVmlzaWJpbGl0eVBsYXkgKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLnN0YXRlID0gJ3BsYXlpbmcnO1xuICAvLyBsaXN0ZW4gdG8gdmlzaWJpbGl0eSBjaGFuZ2VcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ3Zpc2liaWxpdHljaGFuZ2UnLCB0aGlzLm9uVmlzaWJpbGl0eUNoYW5nZSApO1xuICAvLyBzdGFydCB0aWNraW5nXG4gIHRoaXMudGljaygpO1xufTtcblxuUGxheWVyLnByb3RvdHlwZS50aWNrID0gZnVuY3Rpb24oKSB7XG4gIC8vIGRvIG5vdCB0aWNrIGlmIG5vdCBwbGF5aW5nXG4gIGlmICggdGhpcy5zdGF0ZSAhPT0gJ3BsYXlpbmcnICkgcmV0dXJuO1xuXG4gIC8vIGRlZmF1bHQgdG8gMyBzZWNvbmRzXG4gIGxldCB0aW1lID0gdHlwZW9mIHRoaXMuYXV0b1BsYXkgPT0gJ251bWJlcicgPyB0aGlzLmF1dG9QbGF5IDogMzAwMDtcbiAgLy8gSEFDSzogcmVzZXQgdGlja3MgaWYgc3RvcHBlZCBhbmQgc3RhcnRlZCB3aXRoaW4gaW50ZXJ2YWxcbiAgdGhpcy5jbGVhcigpO1xuICB0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KCAoKSA9PiB7XG4gICAgdGhpcy5vblRpY2soKTtcbiAgICB0aGlzLnRpY2soKTtcbiAgfSwgdGltZSApO1xufTtcblxuUGxheWVyLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc3RhdGUgPSAnc3RvcHBlZCc7XG4gIHRoaXMuY2xlYXIoKTtcbiAgLy8gcmVtb3ZlIHZpc2liaWxpdHkgY2hhbmdlIGV2ZW50XG4gIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICd2aXNpYmlsaXR5Y2hhbmdlJywgdGhpcy5vblZpc2liaWxpdHlDaGFuZ2UgKTtcbn07XG5cblBsYXllci5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgY2xlYXJUaW1lb3V0KCB0aGlzLnRpbWVvdXQgKTtcbn07XG5cblBsYXllci5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCB0aGlzLnN0YXRlID09PSAncGxheWluZycgKSB7XG4gICAgdGhpcy5zdGF0ZSA9ICdwYXVzZWQnO1xuICAgIHRoaXMuY2xlYXIoKTtcbiAgfVxufTtcblxuUGxheWVyLnByb3RvdHlwZS51bnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gIC8vIHJlLXN0YXJ0IHBsYXkgaWYgcGF1c2VkXG4gIGlmICggdGhpcy5zdGF0ZSA9PT0gJ3BhdXNlZCcgKSB0aGlzLnBsYXkoKTtcbn07XG5cbi8vIHBhdXNlIGlmIHBhZ2UgdmlzaWJpbGl0eSBpcyBoaWRkZW4sIHVucGF1c2UgaWYgdmlzaWJsZVxuUGxheWVyLnByb3RvdHlwZS52aXNpYmlsaXR5Q2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gIGxldCBpc1BhZ2VIaWRkZW4gPSBkb2N1bWVudC5oaWRkZW47XG4gIHRoaXNbIGlzUGFnZUhpZGRlbiA/ICdwYXVzZScgOiAndW5wYXVzZScgXSgpO1xufTtcblxuUGxheWVyLnByb3RvdHlwZS52aXNpYmlsaXR5UGxheSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBsYXkoKTtcbiAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3Zpc2liaWxpdHljaGFuZ2UnLCB0aGlzLm9uVmlzaWJpbGl0eVBsYXkgKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEZsaWNraXR5IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbk9iamVjdC5hc3NpZ24oIEZsaWNraXR5LmRlZmF1bHRzLCB7XG4gIHBhdXNlQXV0b1BsYXlPbkhvdmVyOiB0cnVlLFxufSApO1xuXG5GbGlja2l0eS5jcmVhdGUucGxheWVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGxheWVyID0gbmV3IFBsYXllciggdGhpcy5vcHRpb25zLmF1dG9QbGF5LCAoKSA9PiB7XG4gICAgdGhpcy5uZXh0KCB0cnVlICk7XG4gIH0gKTtcblxuICB0aGlzLm9uKCAnYWN0aXZhdGUnLCB0aGlzLmFjdGl2YXRlUGxheWVyICk7XG4gIHRoaXMub24oICd1aUNoYW5nZScsIHRoaXMuc3RvcFBsYXllciApO1xuICB0aGlzLm9uKCAncG9pbnRlckRvd24nLCB0aGlzLnN0b3BQbGF5ZXIgKTtcbiAgdGhpcy5vbiggJ2RlYWN0aXZhdGUnLCB0aGlzLmRlYWN0aXZhdGVQbGF5ZXIgKTtcbn07XG5cbmxldCBwcm90byA9IEZsaWNraXR5LnByb3RvdHlwZTtcblxucHJvdG8uYWN0aXZhdGVQbGF5ZXIgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5vcHRpb25zLmF1dG9QbGF5ICkgcmV0dXJuO1xuXG4gIHRoaXMucGxheWVyLnBsYXkoKTtcbiAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdtb3VzZWVudGVyJywgdGhpcyApO1xufTtcblxuLy8gUGxheWVyIEFQSSwgZG9uJ3QgaGF0ZSB0aGUgLi4uIHRoYW5rcyBJIGtub3cgd2hlcmUgdGhlIGRvb3IgaXNcblxucHJvdG8ucGxheVBsYXllciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBsYXllci5wbGF5KCk7XG59O1xuXG5wcm90by5zdG9wUGxheWVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGxheWVyLnN0b3AoKTtcbn07XG5cbnByb3RvLnBhdXNlUGxheWVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGxheWVyLnBhdXNlKCk7XG59O1xuXG5wcm90by51bnBhdXNlUGxheWVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGxheWVyLnVucGF1c2UoKTtcbn07XG5cbnByb3RvLmRlYWN0aXZhdGVQbGF5ZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wbGF5ZXIuc3RvcCgpO1xuICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ21vdXNlZW50ZXInLCB0aGlzICk7XG59O1xuXG4vLyAtLS0tLSBtb3VzZWVudGVyL2xlYXZlIC0tLS0tIC8vXG5cbi8vIHBhdXNlIGF1dG8tcGxheSBvbiBob3ZlclxucHJvdG8ub25tb3VzZWVudGVyID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMub3B0aW9ucy5wYXVzZUF1dG9QbGF5T25Ib3ZlciApIHJldHVybjtcblxuICB0aGlzLnBsYXllci5wYXVzZSgpO1xuICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ21vdXNlbGVhdmUnLCB0aGlzICk7XG59O1xuXG4vLyByZXN1bWUgYXV0by1wbGF5IG9uIGhvdmVyIG9mZlxucHJvdG8ub25tb3VzZWxlYXZlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGxheWVyLnVucGF1c2UoKTtcbiAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdtb3VzZWxlYXZlJywgdGhpcyApO1xufTtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbkZsaWNraXR5LlBsYXllciA9IFBsYXllcjtcblxucmV0dXJuIEZsaWNraXR5O1xuXG59ICkgKTtcblxufSx7XCIuL2NvcmVcIjoyNn1dLDMzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8vIHByZXYvbmV4dCBidXR0b25zXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoIHJlcXVpcmUoJy4vY29yZScpICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICBmYWN0b3J5KCB3aW5kb3cuRmxpY2tpdHkgKTtcbiAgfVxuXG59KCB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24gZmFjdG9yeSggRmxpY2tpdHkgKSB7XG5cbmNvbnN0IHN2Z1VSSSA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFByZXZOZXh0QnV0dG9uIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmZ1bmN0aW9uIFByZXZOZXh0QnV0dG9uKCBpbmNyZW1lbnQsIGRpcmVjdGlvbiwgYXJyb3dTaGFwZSApIHtcbiAgdGhpcy5pbmNyZW1lbnQgPSBpbmNyZW1lbnQ7XG4gIHRoaXMuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuICB0aGlzLmlzUHJldmlvdXMgPSBpbmNyZW1lbnQgPT09ICdwcmV2aW91cyc7XG4gIHRoaXMuaXNMZWZ0ID0gZGlyZWN0aW9uID09PSAnbGVmdCc7XG4gIHRoaXMuX2NyZWF0ZSggYXJyb3dTaGFwZSApO1xufVxuXG5QcmV2TmV4dEJ1dHRvbi5wcm90b3R5cGUuX2NyZWF0ZSA9IGZ1bmN0aW9uKCBhcnJvd1NoYXBlICkge1xuICAvLyBwcm9wZXJ0aWVzXG4gIGxldCBlbGVtZW50ID0gdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gIGVsZW1lbnQuY2xhc3NOYW1lID0gYGZsaWNraXR5LWJ1dHRvbiBmbGlja2l0eS1wcmV2LW5leHQtYnV0dG9uICR7dGhpcy5pbmNyZW1lbnR9YDtcbiAgbGV0IGxhYmVsID0gdGhpcy5pc1ByZXZpb3VzID8gJ1ByZXZpb3VzJyA6ICdOZXh0JztcbiAgLy8gcHJldmVudCBidXR0b24gZnJvbSBzdWJtaXR0aW5nIGZvcm0gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzEwODM2MDc2LzE4MjE4M1xuICBlbGVtZW50LnNldEF0dHJpYnV0ZSggJ3R5cGUnLCAnYnV0dG9uJyApO1xuICBlbGVtZW50LnNldEF0dHJpYnV0ZSggJ2FyaWEtbGFiZWwnLCBsYWJlbCApO1xuICAvLyBpbml0IGFzIGRpc2FibGVkXG4gIHRoaXMuZGlzYWJsZSgpO1xuICAvLyBjcmVhdGUgYXJyb3dcbiAgbGV0IHN2ZyA9IHRoaXMuY3JlYXRlU1ZHKCBsYWJlbCwgYXJyb3dTaGFwZSApO1xuICBlbGVtZW50LmFwcGVuZCggc3ZnICk7XG59O1xuXG5QcmV2TmV4dEJ1dHRvbi5wcm90b3R5cGUuY3JlYXRlU1ZHID0gZnVuY3Rpb24oIGxhYmVsLCBhcnJvd1NoYXBlICkge1xuICBsZXQgc3ZnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCBzdmdVUkksICdzdmcnICk7XG4gIHN2Zy5zZXRBdHRyaWJ1dGUoICdjbGFzcycsICdmbGlja2l0eS1idXR0b24taWNvbicgKTtcbiAgc3ZnLnNldEF0dHJpYnV0ZSggJ3ZpZXdCb3gnLCAnMCAwIDEwMCAxMDAnICk7XG4gIC8vIGFkZCB0aXRsZSAjMTE4OVxuICBsZXQgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoIHN2Z1VSSSwgJ3RpdGxlJyApO1xuICB0aXRsZS5hcHBlbmQoIGxhYmVsICk7XG4gIC8vIGFkZCBwYXRoXG4gIGxldCBwYXRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCBzdmdVUkksICdwYXRoJyApO1xuICBsZXQgcGF0aE1vdmVtZW50cyA9IGdldEFycm93TW92ZW1lbnRzKCBhcnJvd1NoYXBlICk7XG4gIHBhdGguc2V0QXR0cmlidXRlKCAnZCcsIHBhdGhNb3ZlbWVudHMgKTtcbiAgcGF0aC5zZXRBdHRyaWJ1dGUoICdjbGFzcycsICdhcnJvdycgKTtcbiAgLy8gcm90YXRlIGFycm93XG4gIGlmICggIXRoaXMuaXNMZWZ0ICkge1xuICAgIHBhdGguc2V0QXR0cmlidXRlKCAndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgxMDAsIDEwMCkgcm90YXRlKDE4MCknICk7XG4gIH1cbiAgc3ZnLmFwcGVuZCggdGl0bGUsIHBhdGggKTtcbiAgcmV0dXJuIHN2Zztcbn07XG5cbi8vIGdldCBTVkcgcGF0aCBtb3ZtZW1lbnRcbmZ1bmN0aW9uIGdldEFycm93TW92ZW1lbnRzKCBzaGFwZSApIHtcbiAgLy8gdXNlIHNoYXBlIGFzIG1vdmVtZW50IGlmIHN0cmluZ1xuICBpZiAoIHR5cGVvZiBzaGFwZSA9PSAnc3RyaW5nJyApIHJldHVybiBzaGFwZTtcblxuICBsZXQgeyB4MCwgeDEsIHgyLCB4MywgeTEsIHkyIH0gPSBzaGFwZTtcblxuICAvLyBjcmVhdGUgbW92ZW1lbnQgc3RyaW5nXG4gIHJldHVybiBgTSAke3gwfSwgNTBcbiAgICBMICR7eDF9LCAke3kxICsgNTB9XG4gICAgTCAke3gyfSwgJHt5MiArIDUwfVxuICAgIEwgJHt4M30sIDUwXG4gICAgTCAke3gyfSwgJHs1MCAtIHkyfVxuICAgIEwgJHt4MX0sICR7NTAgLSB5MX1cbiAgICBaYDtcbn1cblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cblByZXZOZXh0QnV0dG9uLnByb3RvdHlwZS5lbmFibGUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbn07XG5cblByZXZOZXh0QnV0dG9uLnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoICdkaXNhYmxlZCcsIHRydWUgKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEZsaWNraXR5IHByb3RvdHlwZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5PYmplY3QuYXNzaWduKCBGbGlja2l0eS5kZWZhdWx0cywge1xuICBwcmV2TmV4dEJ1dHRvbnM6IHRydWUsXG4gIGFycm93U2hhcGU6IHtcbiAgICB4MDogMTAsXG4gICAgeDE6IDYwLCB5MTogNTAsXG4gICAgeDI6IDcwLCB5MjogNDAsXG4gICAgeDM6IDMwLFxuICB9LFxufSApO1xuXG5GbGlja2l0eS5jcmVhdGUucHJldk5leHRCdXR0b25zID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMub3B0aW9ucy5wcmV2TmV4dEJ1dHRvbnMgKSByZXR1cm47XG5cbiAgbGV0IHsgcmlnaHRUb0xlZnQsIGFycm93U2hhcGUgfSA9IHRoaXMub3B0aW9ucztcbiAgbGV0IHByZXZEaXJlY3Rpb24gPSByaWdodFRvTGVmdCA/ICdyaWdodCcgOiAnbGVmdCc7XG4gIGxldCBuZXh0RGlyZWN0aW9uID0gcmlnaHRUb0xlZnQgPyAnbGVmdCcgOiAncmlnaHQnO1xuICB0aGlzLnByZXZCdXR0b24gPSBuZXcgUHJldk5leHRCdXR0b24oICdwcmV2aW91cycsIHByZXZEaXJlY3Rpb24sIGFycm93U2hhcGUgKTtcbiAgdGhpcy5uZXh0QnV0dG9uID0gbmV3IFByZXZOZXh0QnV0dG9uKCAnbmV4dCcsIG5leHREaXJlY3Rpb24sIGFycm93U2hhcGUgKTtcbiAgdGhpcy5mb2N1c2FibGVFbGVtcy5wdXNoKCB0aGlzLnByZXZCdXR0b24uZWxlbWVudCApO1xuICB0aGlzLmZvY3VzYWJsZUVsZW1zLnB1c2goIHRoaXMubmV4dEJ1dHRvbi5lbGVtZW50ICk7XG5cbiAgdGhpcy5oYW5kbGVQcmV2QnV0dG9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgdGhpcy51aUNoYW5nZSgpO1xuICAgIHRoaXMucHJldmlvdXMoKTtcbiAgfTtcblxuICB0aGlzLmhhbmRsZU5leHRCdXR0b25DbGljayA9ICgpID0+IHtcbiAgICB0aGlzLnVpQ2hhbmdlKCk7XG4gICAgdGhpcy5uZXh0KCk7XG4gIH07XG5cbiAgdGhpcy5vbiggJ2FjdGl2YXRlJywgdGhpcy5hY3RpdmF0ZVByZXZOZXh0QnV0dG9ucyApO1xuICB0aGlzLm9uKCAnc2VsZWN0JywgdGhpcy51cGRhdGVQcmV2TmV4dEJ1dHRvbnMgKTtcbn07XG5cbmxldCBwcm90byA9IEZsaWNraXR5LnByb3RvdHlwZTtcblxucHJvdG8udXBkYXRlUHJldk5leHRCdXR0b25zID0gZnVuY3Rpb24oKSB7XG4gIGxldCBsYXN0SW5kZXggPSB0aGlzLnNsaWRlcy5sZW5ndGggPyB0aGlzLnNsaWRlcy5sZW5ndGggLSAxIDogMDtcbiAgdGhpcy51cGRhdGVQcmV2TmV4dEJ1dHRvbiggdGhpcy5wcmV2QnV0dG9uLCAwICk7XG4gIHRoaXMudXBkYXRlUHJldk5leHRCdXR0b24oIHRoaXMubmV4dEJ1dHRvbiwgbGFzdEluZGV4ICk7XG59O1xuXG5wcm90by51cGRhdGVQcmV2TmV4dEJ1dHRvbiA9IGZ1bmN0aW9uKCBidXR0b24sIGRpc2FibGVkSW5kZXggKSB7XG4gIC8vIGVuYWJsZSBpcyB3cmFwQXJvdW5kIGFuZCBhdCBsZWFzdCAyIHNsaWRlc1xuICBpZiAoIHRoaXMuaXNXcmFwcGluZyAmJiB0aGlzLnNsaWRlcy5sZW5ndGggPiAxICkge1xuICAgIGJ1dHRvbi5lbmFibGUoKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgaXNFbmFibGVkID0gdGhpcy5zZWxlY3RlZEluZGV4ICE9PSBkaXNhYmxlZEluZGV4O1xuICBidXR0b25bIGlzRW5hYmxlZCA/ICdlbmFibGUnIDogJ2Rpc2FibGUnIF0oKTtcbiAgLy8gaWYgZGlzYWJsaW5nIGJ1dHRvbiB0aGF0IGlzIGZvY3VzZWQsXG4gIC8vIHNoaWZ0IGZvY3VzIHRvIGVsZW1lbnQgdG8gbWFpbnRhaW4ga2V5Ym9hcmQgYWNjZXNzaWJpbGl0eVxuICBsZXQgaXNEaXNhYmxlZEZvY3VzZWQgPSAhaXNFbmFibGVkICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGJ1dHRvbi5lbGVtZW50O1xuICBpZiAoIGlzRGlzYWJsZWRGb2N1c2VkICkgdGhpcy5mb2N1cygpO1xufTtcblxucHJvdG8uYWN0aXZhdGVQcmV2TmV4dEJ1dHRvbnMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wcmV2QnV0dG9uLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgdGhpcy5oYW5kbGVQcmV2QnV0dG9uQ2xpY2sgKTtcbiAgdGhpcy5uZXh0QnV0dG9uLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgdGhpcy5oYW5kbGVOZXh0QnV0dG9uQ2xpY2sgKTtcbiAgdGhpcy5lbGVtZW50LmFwcGVuZCggdGhpcy5wcmV2QnV0dG9uLmVsZW1lbnQsIHRoaXMubmV4dEJ1dHRvbi5lbGVtZW50ICk7XG4gIHRoaXMub24oICdkZWFjdGl2YXRlJywgdGhpcy5kZWFjdGl2YXRlUHJldk5leHRCdXR0b25zICk7XG59O1xuXG5wcm90by5kZWFjdGl2YXRlUHJldk5leHRCdXR0b25zID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucHJldkJ1dHRvbi5lbGVtZW50LnJlbW92ZSgpO1xuICB0aGlzLm5leHRCdXR0b24uZWxlbWVudC5yZW1vdmUoKTtcbiAgdGhpcy5wcmV2QnV0dG9uLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgdGhpcy5oYW5kbGVQcmV2QnV0dG9uQ2xpY2sgKTtcbiAgdGhpcy5uZXh0QnV0dG9uLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgdGhpcy5oYW5kbGVOZXh0QnV0dG9uQ2xpY2sgKTtcbiAgdGhpcy5vZmYoICdkZWFjdGl2YXRlJywgdGhpcy5kZWFjdGl2YXRlUHJldk5leHRCdXR0b25zICk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuRmxpY2tpdHkuUHJldk5leHRCdXR0b24gPSBQcmV2TmV4dEJ1dHRvbjtcblxucmV0dXJuIEZsaWNraXR5O1xuXG59ICkgKTtcblxufSx7XCIuL2NvcmVcIjoyNn1dLDM0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8vIHNsaWRlXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5GbGlja2l0eSA9IHdpbmRvdy5GbGlja2l0eSB8fCB7fTtcbiAgICB3aW5kb3cuRmxpY2tpdHkuU2xpZGUgPSBmYWN0b3J5KCk7XG4gIH1cblxufSggdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uIGZhY3RvcnkoKSB7XG5cbmZ1bmN0aW9uIFNsaWRlKCBiZWdpbk1hcmdpbiwgZW5kTWFyZ2luLCBjZWxsQWxpZ24gKSB7XG4gIHRoaXMuYmVnaW5NYXJnaW4gPSBiZWdpbk1hcmdpbjtcbiAgdGhpcy5lbmRNYXJnaW4gPSBlbmRNYXJnaW47XG4gIHRoaXMuY2VsbEFsaWduID0gY2VsbEFsaWduO1xuICB0aGlzLmNlbGxzID0gW107XG4gIHRoaXMub3V0ZXJXaWR0aCA9IDA7XG4gIHRoaXMuaGVpZ2h0ID0gMDtcbn1cblxubGV0IHByb3RvID0gU2xpZGUucHJvdG90eXBlO1xuXG5wcm90by5hZGRDZWxsID0gZnVuY3Rpb24oIGNlbGwgKSB7XG4gIHRoaXMuY2VsbHMucHVzaCggY2VsbCApO1xuICB0aGlzLm91dGVyV2lkdGggKz0gY2VsbC5zaXplLm91dGVyV2lkdGg7XG4gIHRoaXMuaGVpZ2h0ID0gTWF0aC5tYXgoIGNlbGwuc2l6ZS5vdXRlckhlaWdodCwgdGhpcy5oZWlnaHQgKTtcbiAgLy8gZmlyc3QgY2VsbCBzdHVmZlxuICBpZiAoIHRoaXMuY2VsbHMubGVuZ3RoID09PSAxICkge1xuICAgIHRoaXMueCA9IGNlbGwueDsgLy8geCBjb21lcyBmcm9tIGZpcnN0IGNlbGxcbiAgICB0aGlzLmZpcnN0TWFyZ2luID0gY2VsbC5zaXplWyB0aGlzLmJlZ2luTWFyZ2luIF07XG4gIH1cbn07XG5cbnByb3RvLnVwZGF0ZVRhcmdldCA9IGZ1bmN0aW9uKCkge1xuICBsZXQgbGFzdENlbGwgPSB0aGlzLmdldExhc3RDZWxsKCk7XG4gIGxldCBsYXN0TWFyZ2luID0gbGFzdENlbGwgPyBsYXN0Q2VsbC5zaXplWyB0aGlzLmVuZE1hcmdpbiBdIDogMDtcbiAgbGV0IHNsaWRlV2lkdGggPSB0aGlzLm91dGVyV2lkdGggLSAoIHRoaXMuZmlyc3RNYXJnaW4gKyBsYXN0TWFyZ2luICk7XG4gIHRoaXMudGFyZ2V0ID0gdGhpcy54ICsgdGhpcy5maXJzdE1hcmdpbiArIHNsaWRlV2lkdGggKiB0aGlzLmNlbGxBbGlnbjtcbn07XG5cbnByb3RvLmdldExhc3RDZWxsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmNlbGxzWyB0aGlzLmNlbGxzLmxlbmd0aCAtIDEgXTtcbn07XG5cbnByb3RvLnNlbGVjdCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmNlbGxzLmZvckVhY2goICggY2VsbCApID0+IGNlbGwuc2VsZWN0KCkgKTtcbn07XG5cbnByb3RvLnVuc2VsZWN0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY2VsbHMuZm9yRWFjaCggKCBjZWxsICkgPT4gY2VsbC51bnNlbGVjdCgpICk7XG59O1xuXG5wcm90by5nZXRDZWxsRWxlbWVudHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuY2VsbHMubWFwKCAoIGNlbGwgKSA9PiBjZWxsLmVsZW1lbnQgKTtcbn07XG5cbnJldHVybiBTbGlkZTtcblxufSApICk7XG5cbn0se31dLDM1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qIVxuICogSW5maW5pdGUgU2Nyb2xsIHYyLjAuNFxuICogbWVhc3VyZSBzaXplIG9mIGVsZW1lbnRzXG4gKiBNSVQgbGljZW5zZVxuICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuZ2V0U2l6ZSA9IGZhY3RvcnkoKTtcbiAgfVxuXG59ICkoIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSgpIHtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaGVscGVycyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vLyBnZXQgYSBudW1iZXIgZnJvbSBhIHN0cmluZywgbm90IGEgcGVyY2VudGFnZVxuZnVuY3Rpb24gZ2V0U3R5bGVTaXplKCB2YWx1ZSApIHtcbiAgbGV0IG51bSA9IHBhcnNlRmxvYXQoIHZhbHVlICk7XG4gIC8vIG5vdCBhIHBlcmNlbnQgbGlrZSAnMTAwJScsIGFuZCBhIG51bWJlclxuICBsZXQgaXNWYWxpZCA9IHZhbHVlLmluZGV4T2YoJyUnKSA9PSAtMSAmJiAhaXNOYU4oIG51bSApO1xuICByZXR1cm4gaXNWYWxpZCAmJiBudW07XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIG1lYXN1cmVtZW50cyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5sZXQgbWVhc3VyZW1lbnRzID0gW1xuICAncGFkZGluZ0xlZnQnLFxuICAncGFkZGluZ1JpZ2h0JyxcbiAgJ3BhZGRpbmdUb3AnLFxuICAncGFkZGluZ0JvdHRvbScsXG4gICdtYXJnaW5MZWZ0JyxcbiAgJ21hcmdpblJpZ2h0JyxcbiAgJ21hcmdpblRvcCcsXG4gICdtYXJnaW5Cb3R0b20nLFxuICAnYm9yZGVyTGVmdFdpZHRoJyxcbiAgJ2JvcmRlclJpZ2h0V2lkdGgnLFxuICAnYm9yZGVyVG9wV2lkdGgnLFxuICAnYm9yZGVyQm90dG9tV2lkdGgnLFxuXTtcblxubGV0IG1lYXN1cmVtZW50c0xlbmd0aCA9IG1lYXN1cmVtZW50cy5sZW5ndGg7XG5cbmZ1bmN0aW9uIGdldFplcm9TaXplKCkge1xuICBsZXQgc2l6ZSA9IHtcbiAgICB3aWR0aDogMCxcbiAgICBoZWlnaHQ6IDAsXG4gICAgaW5uZXJXaWR0aDogMCxcbiAgICBpbm5lckhlaWdodDogMCxcbiAgICBvdXRlcldpZHRoOiAwLFxuICAgIG91dGVySGVpZ2h0OiAwLFxuICB9O1xuICBtZWFzdXJlbWVudHMuZm9yRWFjaCggKCBtZWFzdXJlbWVudCApID0+IHtcbiAgICBzaXplWyBtZWFzdXJlbWVudCBdID0gMDtcbiAgfSApO1xuICByZXR1cm4gc2l6ZTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZ2V0U2l6ZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5mdW5jdGlvbiBnZXRTaXplKCBlbGVtICkge1xuICAvLyB1c2UgcXVlcnlTZWxldG9yIGlmIGVsZW0gaXMgc3RyaW5nXG4gIGlmICggdHlwZW9mIGVsZW0gPT0gJ3N0cmluZycgKSBlbGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvciggZWxlbSApO1xuXG4gIC8vIGRvIG5vdCBwcm9jZWVkIG9uIG5vbi1vYmplY3RzXG4gIGxldCBpc0VsZW1lbnQgPSBlbGVtICYmIHR5cGVvZiBlbGVtID09ICdvYmplY3QnICYmIGVsZW0ubm9kZVR5cGU7XG4gIGlmICggIWlzRWxlbWVudCApIHJldHVybjtcblxuICBsZXQgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cbiAgLy8gaWYgaGlkZGVuLCBldmVyeXRoaW5nIGlzIDBcbiAgaWYgKCBzdHlsZS5kaXNwbGF5ID09ICdub25lJyApIHJldHVybiBnZXRaZXJvU2l6ZSgpO1xuXG4gIGxldCBzaXplID0ge307XG4gIHNpemUud2lkdGggPSBlbGVtLm9mZnNldFdpZHRoO1xuICBzaXplLmhlaWdodCA9IGVsZW0ub2Zmc2V0SGVpZ2h0O1xuXG4gIGxldCBpc0JvcmRlckJveCA9IHNpemUuaXNCb3JkZXJCb3ggPSBzdHlsZS5ib3hTaXppbmcgPT0gJ2JvcmRlci1ib3gnO1xuXG4gIC8vIGdldCBhbGwgbWVhc3VyZW1lbnRzXG4gIG1lYXN1cmVtZW50cy5mb3JFYWNoKCAoIG1lYXN1cmVtZW50ICkgPT4ge1xuICAgIGxldCB2YWx1ZSA9IHN0eWxlWyBtZWFzdXJlbWVudCBdO1xuICAgIGxldCBudW0gPSBwYXJzZUZsb2F0KCB2YWx1ZSApO1xuICAgIC8vIGFueSAnYXV0bycsICdtZWRpdW0nIHZhbHVlIHdpbGwgYmUgMFxuICAgIHNpemVbIG1lYXN1cmVtZW50IF0gPSAhaXNOYU4oIG51bSApID8gbnVtIDogMDtcbiAgfSApO1xuXG4gIGxldCBwYWRkaW5nV2lkdGggPSBzaXplLnBhZGRpbmdMZWZ0ICsgc2l6ZS5wYWRkaW5nUmlnaHQ7XG4gIGxldCBwYWRkaW5nSGVpZ2h0ID0gc2l6ZS5wYWRkaW5nVG9wICsgc2l6ZS5wYWRkaW5nQm90dG9tO1xuICBsZXQgbWFyZ2luV2lkdGggPSBzaXplLm1hcmdpbkxlZnQgKyBzaXplLm1hcmdpblJpZ2h0O1xuICBsZXQgbWFyZ2luSGVpZ2h0ID0gc2l6ZS5tYXJnaW5Ub3AgKyBzaXplLm1hcmdpbkJvdHRvbTtcbiAgbGV0IGJvcmRlcldpZHRoID0gc2l6ZS5ib3JkZXJMZWZ0V2lkdGggKyBzaXplLmJvcmRlclJpZ2h0V2lkdGg7XG4gIGxldCBib3JkZXJIZWlnaHQgPSBzaXplLmJvcmRlclRvcFdpZHRoICsgc2l6ZS5ib3JkZXJCb3R0b21XaWR0aDtcblxuICAvLyBvdmVyd3JpdGUgd2lkdGggYW5kIGhlaWdodCBpZiB3ZSBjYW4gZ2V0IGl0IGZyb20gc3R5bGVcbiAgbGV0IHN0eWxlV2lkdGggPSBnZXRTdHlsZVNpemUoIHN0eWxlLndpZHRoICk7XG4gIGlmICggc3R5bGVXaWR0aCAhPT0gZmFsc2UgKSB7XG4gICAgc2l6ZS53aWR0aCA9IHN0eWxlV2lkdGggK1xuICAgICAgLy8gYWRkIHBhZGRpbmcgYW5kIGJvcmRlciB1bmxlc3MgaXQncyBhbHJlYWR5IGluY2x1ZGluZyBpdFxuICAgICAgKCBpc0JvcmRlckJveCA/IDAgOiBwYWRkaW5nV2lkdGggKyBib3JkZXJXaWR0aCApO1xuICB9XG5cbiAgbGV0IHN0eWxlSGVpZ2h0ID0gZ2V0U3R5bGVTaXplKCBzdHlsZS5oZWlnaHQgKTtcbiAgaWYgKCBzdHlsZUhlaWdodCAhPT0gZmFsc2UgKSB7XG4gICAgc2l6ZS5oZWlnaHQgPSBzdHlsZUhlaWdodCArXG4gICAgICAvLyBhZGQgcGFkZGluZyBhbmQgYm9yZGVyIHVubGVzcyBpdCdzIGFscmVhZHkgaW5jbHVkaW5nIGl0XG4gICAgICAoIGlzQm9yZGVyQm94ID8gMCA6IHBhZGRpbmdIZWlnaHQgKyBib3JkZXJIZWlnaHQgKTtcbiAgfVxuXG4gIHNpemUuaW5uZXJXaWR0aCA9IHNpemUud2lkdGggLSAoIHBhZGRpbmdXaWR0aCArIGJvcmRlcldpZHRoICk7XG4gIHNpemUuaW5uZXJIZWlnaHQgPSBzaXplLmhlaWdodCAtICggcGFkZGluZ0hlaWdodCArIGJvcmRlckhlaWdodCApO1xuXG4gIHNpemUub3V0ZXJXaWR0aCA9IHNpemUud2lkdGggKyBtYXJnaW5XaWR0aDtcbiAgc2l6ZS5vdXRlckhlaWdodCA9IHNpemUuaGVpZ2h0ICsgbWFyZ2luSGVpZ2h0O1xuXG4gIHJldHVybiBzaXplO1xufVxuXG5yZXR1cm4gZ2V0U2l6ZTtcblxufSApO1xuXG59LHt9XSwzNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKiFcbiAqIGltYWdlc0xvYWRlZCB2NS4wLjBcbiAqIEphdmFTY3JpcHQgaXMgYWxsIGxpa2UgXCJZb3UgaW1hZ2VzIGFyZSBkb25lIHlldCBvciB3aGF0P1wiXG4gKiBNSVQgTGljZW5zZVxuICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSggd2luZG93LCByZXF1aXJlKCdldi1lbWl0dGVyJykgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5pbWFnZXNMb2FkZWQgPSBmYWN0b3J5KCB3aW5kb3csIHdpbmRvdy5FdkVtaXR0ZXIgKTtcbiAgfVxuXG59ICkoIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcyxcbiAgICBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIEV2RW1pdHRlciApIHtcblxubGV0ICQgPSB3aW5kb3cualF1ZXJ5O1xubGV0IGNvbnNvbGUgPSB3aW5kb3cuY29uc29sZTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaGVscGVycyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vLyB0dXJuIGVsZW1lbnQgb3Igbm9kZUxpc3QgaW50byBhbiBhcnJheVxuZnVuY3Rpb24gbWFrZUFycmF5KCBvYmogKSB7XG4gIC8vIHVzZSBvYmplY3QgaWYgYWxyZWFkeSBhbiBhcnJheVxuICBpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkgcmV0dXJuIG9iajtcblxuICBsZXQgaXNBcnJheUxpa2UgPSB0eXBlb2Ygb2JqID09ICdvYmplY3QnICYmIHR5cGVvZiBvYmoubGVuZ3RoID09ICdudW1iZXInO1xuICAvLyBjb252ZXJ0IG5vZGVMaXN0IHRvIGFycmF5XG4gIGlmICggaXNBcnJheUxpa2UgKSByZXR1cm4gWyAuLi5vYmogXTtcblxuICAvLyBhcnJheSBvZiBzaW5nbGUgaW5kZXhcbiAgcmV0dXJuIFsgb2JqIF07XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGltYWdlc0xvYWRlZCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vKipcbiAqIEBwYXJhbSB7W0FycmF5LCBFbGVtZW50LCBOb2RlTGlzdCwgU3RyaW5nXX0gZWxlbVxuICogQHBhcmFtIHtbT2JqZWN0LCBGdW5jdGlvbl19IG9wdGlvbnMgLSBpZiBmdW5jdGlvbiwgdXNlIGFzIGNhbGxiYWNrXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvbkFsd2F5cyAtIGNhbGxiYWNrIGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7SW1hZ2VzTG9hZGVkfVxuICovXG5mdW5jdGlvbiBJbWFnZXNMb2FkZWQoIGVsZW0sIG9wdGlvbnMsIG9uQWx3YXlzICkge1xuICAvLyBjb2VyY2UgSW1hZ2VzTG9hZGVkKCkgd2l0aG91dCBuZXcsIHRvIGJlIG5ldyBJbWFnZXNMb2FkZWQoKVxuICBpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBJbWFnZXNMb2FkZWQgKSApIHtcbiAgICByZXR1cm4gbmV3IEltYWdlc0xvYWRlZCggZWxlbSwgb3B0aW9ucywgb25BbHdheXMgKTtcbiAgfVxuICAvLyB1c2UgZWxlbSBhcyBzZWxlY3RvciBzdHJpbmdcbiAgbGV0IHF1ZXJ5RWxlbSA9IGVsZW07XG4gIGlmICggdHlwZW9mIGVsZW0gPT0gJ3N0cmluZycgKSB7XG4gICAgcXVlcnlFbGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggZWxlbSApO1xuICB9XG4gIC8vIGJhaWwgaWYgYmFkIGVsZW1lbnRcbiAgaWYgKCAhcXVlcnlFbGVtICkge1xuICAgIGNvbnNvbGUuZXJyb3IoYEJhZCBlbGVtZW50IGZvciBpbWFnZXNMb2FkZWQgJHtxdWVyeUVsZW0gfHwgZWxlbX1gKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLmVsZW1lbnRzID0gbWFrZUFycmF5KCBxdWVyeUVsZW0gKTtcbiAgdGhpcy5vcHRpb25zID0ge307XG4gIC8vIHNoaWZ0IGFyZ3VtZW50cyBpZiBubyBvcHRpb25zIHNldFxuICBpZiAoIHR5cGVvZiBvcHRpb25zID09ICdmdW5jdGlvbicgKSB7XG4gICAgb25BbHdheXMgPSBvcHRpb25zO1xuICB9IGVsc2Uge1xuICAgIE9iamVjdC5hc3NpZ24oIHRoaXMub3B0aW9ucywgb3B0aW9ucyApO1xuICB9XG5cbiAgaWYgKCBvbkFsd2F5cyApIHRoaXMub24oICdhbHdheXMnLCBvbkFsd2F5cyApO1xuXG4gIHRoaXMuZ2V0SW1hZ2VzKCk7XG4gIC8vIGFkZCBqUXVlcnkgRGVmZXJyZWQgb2JqZWN0XG4gIGlmICggJCApIHRoaXMuanFEZWZlcnJlZCA9IG5ldyAkLkRlZmVycmVkKCk7XG5cbiAgLy8gSEFDSyBjaGVjayBhc3luYyB0byBhbGxvdyB0aW1lIHRvIGJpbmQgbGlzdGVuZXJzXG4gIHNldFRpbWVvdXQoIHRoaXMuY2hlY2suYmluZCggdGhpcyApICk7XG59XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBFdkVtaXR0ZXIucHJvdG90eXBlICk7XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuZ2V0SW1hZ2VzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaW1hZ2VzID0gW107XG5cbiAgLy8gZmlsdGVyICYgZmluZCBpdGVtcyBpZiB3ZSBoYXZlIGFuIGl0ZW0gc2VsZWN0b3JcbiAgdGhpcy5lbGVtZW50cy5mb3JFYWNoKCB0aGlzLmFkZEVsZW1lbnRJbWFnZXMsIHRoaXMgKTtcbn07XG5cbmNvbnN0IGVsZW1lbnROb2RlVHlwZXMgPSBbIDEsIDksIDExIF07XG5cbi8qKlxuICogQHBhcmFtIHtOb2RlfSBlbGVtXG4gKi9cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuYWRkRWxlbWVudEltYWdlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICAvLyBmaWx0ZXIgc2libGluZ3NcbiAgaWYgKCBlbGVtLm5vZGVOYW1lID09PSAnSU1HJyApIHtcbiAgICB0aGlzLmFkZEltYWdlKCBlbGVtICk7XG4gIH1cbiAgLy8gZ2V0IGJhY2tncm91bmQgaW1hZ2Ugb24gZWxlbWVudFxuICBpZiAoIHRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kID09PSB0cnVlICkge1xuICAgIHRoaXMuYWRkRWxlbWVudEJhY2tncm91bmRJbWFnZXMoIGVsZW0gKTtcbiAgfVxuXG4gIC8vIGZpbmQgY2hpbGRyZW5cbiAgLy8gbm8gbm9uLWVsZW1lbnQgbm9kZXMsICMxNDNcbiAgbGV0IHsgbm9kZVR5cGUgfSA9IGVsZW07XG4gIGlmICggIW5vZGVUeXBlIHx8ICFlbGVtZW50Tm9kZVR5cGVzLmluY2x1ZGVzKCBub2RlVHlwZSApICkgcmV0dXJuO1xuXG4gIGxldCBjaGlsZEltZ3MgPSBlbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoJ2ltZycpO1xuICAvLyBjb25jYXQgY2hpbGRFbGVtcyB0byBmaWx0ZXJGb3VuZCBhcnJheVxuICBmb3IgKCBsZXQgaW1nIG9mIGNoaWxkSW1ncyApIHtcbiAgICB0aGlzLmFkZEltYWdlKCBpbWcgKTtcbiAgfVxuXG4gIC8vIGdldCBjaGlsZCBiYWNrZ3JvdW5kIGltYWdlc1xuICBpZiAoIHR5cGVvZiB0aGlzLm9wdGlvbnMuYmFja2dyb3VuZCA9PSAnc3RyaW5nJyApIHtcbiAgICBsZXQgY2hpbGRyZW4gPSBlbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoIHRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kICk7XG4gICAgZm9yICggbGV0IGNoaWxkIG9mIGNoaWxkcmVuICkge1xuICAgICAgdGhpcy5hZGRFbGVtZW50QmFja2dyb3VuZEltYWdlcyggY2hpbGQgKTtcbiAgICB9XG4gIH1cbn07XG5cbmNvbnN0IHJlVVJMID0gL3VybFxcKChbJ1wiXSk/KC4qPylcXDFcXCkvZ2k7XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuYWRkRWxlbWVudEJhY2tncm91bmRJbWFnZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgbGV0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuICAvLyBGaXJlZm94IHJldHVybnMgbnVsbCBpZiBpbiBhIGhpZGRlbiBpZnJhbWUgaHR0cHM6Ly9idWd6aWwubGEvNTQ4Mzk3XG4gIGlmICggIXN0eWxlICkgcmV0dXJuO1xuXG4gIC8vIGdldCB1cmwgaW5zaWRlIHVybChcIi4uLlwiKVxuICBsZXQgbWF0Y2hlcyA9IHJlVVJMLmV4ZWMoIHN0eWxlLmJhY2tncm91bmRJbWFnZSApO1xuICB3aGlsZSAoIG1hdGNoZXMgIT09IG51bGwgKSB7XG4gICAgbGV0IHVybCA9IG1hdGNoZXMgJiYgbWF0Y2hlc1syXTtcbiAgICBpZiAoIHVybCApIHtcbiAgICAgIHRoaXMuYWRkQmFja2dyb3VuZCggdXJsLCBlbGVtICk7XG4gICAgfVxuICAgIG1hdGNoZXMgPSByZVVSTC5leGVjKCBzdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge0ltYWdlfSBpbWdcbiAqL1xuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5hZGRJbWFnZSA9IGZ1bmN0aW9uKCBpbWcgKSB7XG4gIGxldCBsb2FkaW5nSW1hZ2UgPSBuZXcgTG9hZGluZ0ltYWdlKCBpbWcgKTtcbiAgdGhpcy5pbWFnZXMucHVzaCggbG9hZGluZ0ltYWdlICk7XG59O1xuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLmFkZEJhY2tncm91bmQgPSBmdW5jdGlvbiggdXJsLCBlbGVtICkge1xuICBsZXQgYmFja2dyb3VuZCA9IG5ldyBCYWNrZ3JvdW5kKCB1cmwsIGVsZW0gKTtcbiAgdGhpcy5pbWFnZXMucHVzaCggYmFja2dyb3VuZCApO1xufTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnByb2dyZXNzZWRDb3VudCA9IDA7XG4gIHRoaXMuaGFzQW55QnJva2VuID0gZmFsc2U7XG4gIC8vIGNvbXBsZXRlIGlmIG5vIGltYWdlc1xuICBpZiAoICF0aGlzLmltYWdlcy5sZW5ndGggKSB7XG4gICAgdGhpcy5jb21wbGV0ZSgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLXN0eWxlICovXG4gIGxldCBvblByb2dyZXNzID0gKCBpbWFnZSwgZWxlbSwgbWVzc2FnZSApID0+IHtcbiAgICAvLyBIQUNLIC0gQ2hyb21lIHRyaWdnZXJzIGV2ZW50IGJlZm9yZSBvYmplY3QgcHJvcGVydGllcyBoYXZlIGNoYW5nZWQuICM4M1xuICAgIHNldFRpbWVvdXQoICgpID0+IHtcbiAgICAgIHRoaXMucHJvZ3Jlc3MoIGltYWdlLCBlbGVtLCBtZXNzYWdlICk7XG4gICAgfSApO1xuICB9O1xuXG4gIHRoaXMuaW1hZ2VzLmZvckVhY2goIGZ1bmN0aW9uKCBsb2FkaW5nSW1hZ2UgKSB7XG4gICAgbG9hZGluZ0ltYWdlLm9uY2UoICdwcm9ncmVzcycsIG9uUHJvZ3Jlc3MgKTtcbiAgICBsb2FkaW5nSW1hZ2UuY2hlY2soKTtcbiAgfSApO1xufTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5wcm9ncmVzcyA9IGZ1bmN0aW9uKCBpbWFnZSwgZWxlbSwgbWVzc2FnZSApIHtcbiAgdGhpcy5wcm9ncmVzc2VkQ291bnQrKztcbiAgdGhpcy5oYXNBbnlCcm9rZW4gPSB0aGlzLmhhc0FueUJyb2tlbiB8fCAhaW1hZ2UuaXNMb2FkZWQ7XG4gIC8vIHByb2dyZXNzIGV2ZW50XG4gIHRoaXMuZW1pdEV2ZW50KCAncHJvZ3Jlc3MnLCBbIHRoaXMsIGltYWdlLCBlbGVtIF0gKTtcbiAgaWYgKCB0aGlzLmpxRGVmZXJyZWQgJiYgdGhpcy5qcURlZmVycmVkLm5vdGlmeSApIHtcbiAgICB0aGlzLmpxRGVmZXJyZWQubm90aWZ5KCB0aGlzLCBpbWFnZSApO1xuICB9XG4gIC8vIGNoZWNrIGlmIGNvbXBsZXRlZFxuICBpZiAoIHRoaXMucHJvZ3Jlc3NlZENvdW50ID09PSB0aGlzLmltYWdlcy5sZW5ndGggKSB7XG4gICAgdGhpcy5jb21wbGV0ZSgpO1xuICB9XG5cbiAgaWYgKCB0aGlzLm9wdGlvbnMuZGVidWcgJiYgY29uc29sZSApIHtcbiAgICBjb25zb2xlLmxvZyggYHByb2dyZXNzOiAke21lc3NhZ2V9YCwgaW1hZ2UsIGVsZW0gKTtcbiAgfVxufTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICBsZXQgZXZlbnROYW1lID0gdGhpcy5oYXNBbnlCcm9rZW4gPyAnZmFpbCcgOiAnZG9uZSc7XG4gIHRoaXMuaXNDb21wbGV0ZSA9IHRydWU7XG4gIHRoaXMuZW1pdEV2ZW50KCBldmVudE5hbWUsIFsgdGhpcyBdICk7XG4gIHRoaXMuZW1pdEV2ZW50KCAnYWx3YXlzJywgWyB0aGlzIF0gKTtcbiAgaWYgKCB0aGlzLmpxRGVmZXJyZWQgKSB7XG4gICAgbGV0IGpxTWV0aG9kID0gdGhpcy5oYXNBbnlCcm9rZW4gPyAncmVqZWN0JyA6ICdyZXNvbHZlJztcbiAgICB0aGlzLmpxRGVmZXJyZWRbIGpxTWV0aG9kIF0oIHRoaXMgKTtcbiAgfVxufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmZ1bmN0aW9uIExvYWRpbmdJbWFnZSggaW1nICkge1xuICB0aGlzLmltZyA9IGltZztcbn1cblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEV2RW1pdHRlci5wcm90b3R5cGUgKTtcblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uKCkge1xuICAvLyBJZiBjb21wbGV0ZSBpcyB0cnVlIGFuZCBicm93c2VyIHN1cHBvcnRzIG5hdHVyYWwgc2l6ZXMsXG4gIC8vIHRyeSB0byBjaGVjayBmb3IgaW1hZ2Ugc3RhdHVzIG1hbnVhbGx5LlxuICBsZXQgaXNDb21wbGV0ZSA9IHRoaXMuZ2V0SXNJbWFnZUNvbXBsZXRlKCk7XG4gIGlmICggaXNDb21wbGV0ZSApIHtcbiAgICAvLyByZXBvcnQgYmFzZWQgb24gbmF0dXJhbFdpZHRoXG4gICAgdGhpcy5jb25maXJtKCB0aGlzLmltZy5uYXR1cmFsV2lkdGggIT09IDAsICduYXR1cmFsV2lkdGgnICk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gSWYgbm9uZSBvZiB0aGUgY2hlY2tzIGFib3ZlIG1hdGNoZWQsIHNpbXVsYXRlIGxvYWRpbmcgb24gZGV0YWNoZWQgZWxlbWVudC5cbiAgdGhpcy5wcm94eUltYWdlID0gbmV3IEltYWdlKCk7XG4gIC8vIGFkZCBjcm9zc09yaWdpbiBhdHRyaWJ1dGUuICMyMDRcbiAgaWYgKCB0aGlzLmltZy5jcm9zc09yaWdpbiApIHtcbiAgICB0aGlzLnByb3h5SW1hZ2UuY3Jvc3NPcmlnaW4gPSB0aGlzLmltZy5jcm9zc09yaWdpbjtcbiAgfVxuICB0aGlzLnByb3h5SW1hZ2UuYWRkRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCB0aGlzICk7XG4gIHRoaXMucHJveHlJbWFnZS5hZGRFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG4gIC8vIGJpbmQgdG8gaW1hZ2UgYXMgd2VsbCBmb3IgRmlyZWZveC4gIzE5MVxuICB0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5pbWcuYWRkRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xuICB0aGlzLnByb3h5SW1hZ2Uuc3JjID0gdGhpcy5pbWcuY3VycmVudFNyYyB8fCB0aGlzLmltZy5zcmM7XG59O1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLmdldElzSW1hZ2VDb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICAvLyBjaGVjayBmb3Igbm9uLXplcm8sIG5vbi11bmRlZmluZWQgbmF0dXJhbFdpZHRoXG4gIC8vIGZpeGVzIFNhZmFyaStJbmZpbml0ZVNjcm9sbCtNYXNvbnJ5IGJ1ZyBpbmZpbml0ZS1zY3JvbGwjNjcxXG4gIHJldHVybiB0aGlzLmltZy5jb21wbGV0ZSAmJiB0aGlzLmltZy5uYXR1cmFsV2lkdGg7XG59O1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLmNvbmZpcm0gPSBmdW5jdGlvbiggaXNMb2FkZWQsIG1lc3NhZ2UgKSB7XG4gIHRoaXMuaXNMb2FkZWQgPSBpc0xvYWRlZDtcbiAgbGV0IHsgcGFyZW50Tm9kZSB9ID0gdGhpcy5pbWc7XG4gIC8vIGVtaXQgcHJvZ3Jlc3Mgd2l0aCBwYXJlbnQgPHBpY3R1cmU+IG9yIHNlbGYgPGltZz5cbiAgbGV0IGVsZW0gPSBwYXJlbnROb2RlLm5vZGVOYW1lID09PSAnUElDVFVSRScgPyBwYXJlbnROb2RlIDogdGhpcy5pbWc7XG4gIHRoaXMuZW1pdEV2ZW50KCAncHJvZ3Jlc3MnLCBbIHRoaXMsIGVsZW0sIG1lc3NhZ2UgXSApO1xufTtcblxuLy8gLS0tLS0gZXZlbnRzIC0tLS0tIC8vXG5cbi8vIHRyaWdnZXIgc3BlY2lmaWVkIGhhbmRsZXIgZm9yIGV2ZW50IHR5cGVcbkxvYWRpbmdJbWFnZS5wcm90b3R5cGUuaGFuZGxlRXZlbnQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIGxldCBtZXRob2QgPSAnb24nICsgZXZlbnQudHlwZTtcbiAgaWYgKCB0aGlzWyBtZXRob2QgXSApIHtcbiAgICB0aGlzWyBtZXRob2QgXSggZXZlbnQgKTtcbiAgfVxufTtcblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5jb25maXJtKCB0cnVlLCAnb25sb2FkJyApO1xuICB0aGlzLnVuYmluZEV2ZW50cygpO1xufTtcblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY29uZmlybSggZmFsc2UsICdvbmVycm9yJyApO1xuICB0aGlzLnVuYmluZEV2ZW50cygpO1xufTtcblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS51bmJpbmRFdmVudHMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wcm94eUltYWdlLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLnByb3h5SW1hZ2UucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xuICB0aGlzLmltZy5yZW1vdmVFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5pbWcucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQmFja2dyb3VuZCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5mdW5jdGlvbiBCYWNrZ3JvdW5kKCB1cmwsIGVsZW1lbnQgKSB7XG4gIHRoaXMudXJsID0gdXJsO1xuICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICB0aGlzLmltZyA9IG5ldyBJbWFnZSgpO1xufVxuXG4vLyBpbmhlcml0IExvYWRpbmdJbWFnZSBwcm90b3R5cGVcbkJhY2tncm91bmQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTG9hZGluZ0ltYWdlLnByb3RvdHlwZSApO1xuXG5CYWNrZ3JvdW5kLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5pbWcuYWRkRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xuICB0aGlzLmltZy5zcmMgPSB0aGlzLnVybDtcbiAgLy8gY2hlY2sgaWYgaW1hZ2UgaXMgYWxyZWFkeSBjb21wbGV0ZVxuICBsZXQgaXNDb21wbGV0ZSA9IHRoaXMuZ2V0SXNJbWFnZUNvbXBsZXRlKCk7XG4gIGlmICggaXNDb21wbGV0ZSApIHtcbiAgICB0aGlzLmNvbmZpcm0oIHRoaXMuaW1nLm5hdHVyYWxXaWR0aCAhPT0gMCwgJ25hdHVyYWxXaWR0aCcgKTtcbiAgICB0aGlzLnVuYmluZEV2ZW50cygpO1xuICB9XG59O1xuXG5CYWNrZ3JvdW5kLnByb3RvdHlwZS51bmJpbmRFdmVudHMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5pbWcucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCB0aGlzICk7XG4gIHRoaXMuaW1nLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdlcnJvcicsIHRoaXMgKTtcbn07XG5cbkJhY2tncm91bmQucHJvdG90eXBlLmNvbmZpcm0gPSBmdW5jdGlvbiggaXNMb2FkZWQsIG1lc3NhZ2UgKSB7XG4gIHRoaXMuaXNMb2FkZWQgPSBpc0xvYWRlZDtcbiAgdGhpcy5lbWl0RXZlbnQoICdwcm9ncmVzcycsIFsgdGhpcywgdGhpcy5lbGVtZW50LCBtZXNzYWdlIF0gKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGpRdWVyeSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5JbWFnZXNMb2FkZWQubWFrZUpRdWVyeVBsdWdpbiA9IGZ1bmN0aW9uKCBqUXVlcnkgKSB7XG4gIGpRdWVyeSA9IGpRdWVyeSB8fCB3aW5kb3cualF1ZXJ5O1xuICBpZiAoICFqUXVlcnkgKSByZXR1cm47XG5cbiAgLy8gc2V0IGxvY2FsIHZhcmlhYmxlXG4gICQgPSBqUXVlcnk7XG4gIC8vICQoKS5pbWFnZXNMb2FkZWQoKVxuICAkLmZuLmltYWdlc0xvYWRlZCA9IGZ1bmN0aW9uKCBvcHRpb25zLCBvbkFsd2F5cyApIHtcbiAgICBsZXQgaW5zdGFuY2UgPSBuZXcgSW1hZ2VzTG9hZGVkKCB0aGlzLCBvcHRpb25zLCBvbkFsd2F5cyApO1xuICAgIHJldHVybiBpbnN0YW5jZS5qcURlZmVycmVkLnByb21pc2UoICQoIHRoaXMgKSApO1xuICB9O1xufTtcbi8vIHRyeSBtYWtpbmcgcGx1Z2luXG5JbWFnZXNMb2FkZWQubWFrZUpRdWVyeVBsdWdpbigpO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxucmV0dXJuIEltYWdlc0xvYWRlZDtcblxufSApO1xuXG59LHtcImV2LWVtaXR0ZXJcIjoyfV0sMzc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uKHdpbmRvdywgZmFjdG9yeSkge1xuXHR2YXIgbGF6eVNpemVzID0gZmFjdG9yeSh3aW5kb3csIHdpbmRvdy5kb2N1bWVudCwgRGF0ZSk7XG5cdHdpbmRvdy5sYXp5U2l6ZXMgPSBsYXp5U2l6ZXM7XG5cdGlmKHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpe1xuXHRcdG1vZHVsZS5leHBvcnRzID0gbGF6eVNpemVzO1xuXHR9XG59KHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgP1xuICAgICAgd2luZG93IDoge30sIFxuLyoqXG4gKiBpbXBvcnQoXCIuL3R5cGVzL2dsb2JhbFwiKVxuICogQHR5cGVkZWYgeyBpbXBvcnQoXCIuL3R5cGVzL2xhenlzaXplcy1jb25maWdcIikuTGF6eVNpemVzQ29uZmlnUGFydGlhbCB9IExhenlTaXplc0NvbmZpZ1BhcnRpYWxcbiAqL1xuZnVuY3Rpb24gbCh3aW5kb3csIGRvY3VtZW50LCBEYXRlKSB7IC8vIFBhc3MgaW4gdGhlIHdpbmRvdyBEYXRlIGZ1bmN0aW9uIGFsc28gZm9yIFNTUiBiZWNhdXNlIHRoZSBEYXRlIGNsYXNzIGNhbiBiZSBsb3N0XG5cdCd1c2Ugc3RyaWN0Jztcblx0Lypqc2hpbnQgZXFudWxsOnRydWUgKi9cblxuXHR2YXIgbGF6eXNpemVzLFxuXHRcdC8qKlxuXHRcdCAqIEB0eXBlIHsgTGF6eVNpemVzQ29uZmlnUGFydGlhbCB9XG5cdFx0ICovXG5cdFx0bGF6eVNpemVzQ2ZnO1xuXG5cdChmdW5jdGlvbigpe1xuXHRcdHZhciBwcm9wO1xuXG5cdFx0dmFyIGxhenlTaXplc0RlZmF1bHRzID0ge1xuXHRcdFx0bGF6eUNsYXNzOiAnbGF6eWxvYWQnLFxuXHRcdFx0bG9hZGVkQ2xhc3M6ICdsYXp5bG9hZGVkJyxcblx0XHRcdGxvYWRpbmdDbGFzczogJ2xhenlsb2FkaW5nJyxcblx0XHRcdHByZWxvYWRDbGFzczogJ2xhenlwcmVsb2FkJyxcblx0XHRcdGVycm9yQ2xhc3M6ICdsYXp5ZXJyb3InLFxuXHRcdFx0Ly9zdHJpY3RDbGFzczogJ2xhenlzdHJpY3QnLFxuXHRcdFx0YXV0b3NpemVzQ2xhc3M6ICdsYXp5YXV0b3NpemVzJyxcblx0XHRcdGZhc3RMb2FkZWRDbGFzczogJ2xzLWlzLWNhY2hlZCcsXG5cdFx0XHRpZnJhbWVMb2FkTW9kZTogMCxcblx0XHRcdHNyY0F0dHI6ICdkYXRhLXNyYycsXG5cdFx0XHRzcmNzZXRBdHRyOiAnZGF0YS1zcmNzZXQnLFxuXHRcdFx0c2l6ZXNBdHRyOiAnZGF0YS1zaXplcycsXG5cdFx0XHQvL3ByZWxvYWRBZnRlckxvYWQ6IGZhbHNlLFxuXHRcdFx0bWluU2l6ZTogNDAsXG5cdFx0XHRjdXN0b21NZWRpYToge30sXG5cdFx0XHRpbml0OiB0cnVlLFxuXHRcdFx0ZXhwRmFjdG9yOiAxLjUsXG5cdFx0XHRoRmFjOiAwLjgsXG5cdFx0XHRsb2FkTW9kZTogMixcblx0XHRcdGxvYWRIaWRkZW46IHRydWUsXG5cdFx0XHRyaWNUaW1lb3V0OiAwLFxuXHRcdFx0dGhyb3R0bGVEZWxheTogMTI1LFxuXHRcdH07XG5cblx0XHRsYXp5U2l6ZXNDZmcgPSB3aW5kb3cubGF6eVNpemVzQ29uZmlnIHx8IHdpbmRvdy5sYXp5c2l6ZXNDb25maWcgfHwge307XG5cblx0XHRmb3IocHJvcCBpbiBsYXp5U2l6ZXNEZWZhdWx0cyl7XG5cdFx0XHRpZighKHByb3AgaW4gbGF6eVNpemVzQ2ZnKSl7XG5cdFx0XHRcdGxhenlTaXplc0NmZ1twcm9wXSA9IGxhenlTaXplc0RlZmF1bHRzW3Byb3BdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSkoKTtcblxuXHRpZiAoIWRvY3VtZW50IHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGluaXQ6IGZ1bmN0aW9uICgpIHt9LFxuXHRcdFx0LyoqXG5cdFx0XHQgKiBAdHlwZSB7IExhenlTaXplc0NvbmZpZ1BhcnRpYWwgfVxuXHRcdFx0ICovXG5cdFx0XHRjZmc6IGxhenlTaXplc0NmZyxcblx0XHRcdC8qKlxuXHRcdFx0ICogQHR5cGUgeyB0cnVlIH1cblx0XHRcdCAqL1xuXHRcdFx0bm9TdXBwb3J0OiB0cnVlLFxuXHRcdH07XG5cdH1cblxuXHR2YXIgZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXHR2YXIgc3VwcG9ydFBpY3R1cmUgPSB3aW5kb3cuSFRNTFBpY3R1cmVFbGVtZW50O1xuXG5cdHZhciBfYWRkRXZlbnRMaXN0ZW5lciA9ICdhZGRFdmVudExpc3RlbmVyJztcblxuXHR2YXIgX2dldEF0dHJpYnV0ZSA9ICdnZXRBdHRyaWJ1dGUnO1xuXG5cdC8qKlxuXHQgKiBVcGRhdGUgdG8gYmluZCB0byB3aW5kb3cgYmVjYXVzZSAndGhpcycgYmVjb21lcyBudWxsIGR1cmluZyBTU1Jcblx0ICogYnVpbGRzLlxuXHQgKi9cblx0dmFyIGFkZEV2ZW50TGlzdGVuZXIgPSB3aW5kb3dbX2FkZEV2ZW50TGlzdGVuZXJdLmJpbmQod2luZG93KTtcblxuXHR2YXIgc2V0VGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0O1xuXG5cdHZhciByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHNldFRpbWVvdXQ7XG5cblx0dmFyIHJlcXVlc3RJZGxlQ2FsbGJhY2sgPSB3aW5kb3cucmVxdWVzdElkbGVDYWxsYmFjaztcblxuXHR2YXIgcmVnUGljdHVyZSA9IC9ecGljdHVyZSQvaTtcblxuXHR2YXIgbG9hZEV2ZW50cyA9IFsnbG9hZCcsICdlcnJvcicsICdsYXp5aW5jbHVkZWQnLCAnX2xhenlsb2FkZWQnXTtcblxuXHR2YXIgcmVnQ2xhc3NDYWNoZSA9IHt9O1xuXG5cdHZhciBmb3JFYWNoID0gQXJyYXkucHJvdG90eXBlLmZvckVhY2g7XG5cblx0LyoqXG5cdCAqIEBwYXJhbSBlbGUge0VsZW1lbnR9XG5cdCAqIEBwYXJhbSBjbHMge3N0cmluZ31cblx0ICovXG5cdHZhciBoYXNDbGFzcyA9IGZ1bmN0aW9uKGVsZSwgY2xzKSB7XG5cdFx0aWYoIXJlZ0NsYXNzQ2FjaGVbY2xzXSl7XG5cdFx0XHRyZWdDbGFzc0NhY2hlW2Nsc10gPSBuZXcgUmVnRXhwKCcoXFxcXHN8XiknK2NscysnKFxcXFxzfCQpJyk7XG5cdFx0fVxuXHRcdHJldHVybiByZWdDbGFzc0NhY2hlW2Nsc10udGVzdChlbGVbX2dldEF0dHJpYnV0ZV0oJ2NsYXNzJykgfHwgJycpICYmIHJlZ0NsYXNzQ2FjaGVbY2xzXTtcblx0fTtcblxuXHQvKipcblx0ICogQHBhcmFtIGVsZSB7RWxlbWVudH1cblx0ICogQHBhcmFtIGNscyB7c3RyaW5nfVxuXHQgKi9cblx0dmFyIGFkZENsYXNzID0gZnVuY3Rpb24oZWxlLCBjbHMpIHtcblx0XHRpZiAoIWhhc0NsYXNzKGVsZSwgY2xzKSl7XG5cdFx0XHRlbGUuc2V0QXR0cmlidXRlKCdjbGFzcycsIChlbGVbX2dldEF0dHJpYnV0ZV0oJ2NsYXNzJykgfHwgJycpLnRyaW0oKSArICcgJyArIGNscyk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBAcGFyYW0gZWxlIHtFbGVtZW50fVxuXHQgKiBAcGFyYW0gY2xzIHtzdHJpbmd9XG5cdCAqL1xuXHR2YXIgcmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbihlbGUsIGNscykge1xuXHRcdHZhciByZWc7XG5cdFx0aWYgKChyZWcgPSBoYXNDbGFzcyhlbGUsY2xzKSkpIHtcblx0XHRcdGVsZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgKGVsZVtfZ2V0QXR0cmlidXRlXSgnY2xhc3MnKSB8fCAnJykucmVwbGFjZShyZWcsICcgJykpO1xuXHRcdH1cblx0fTtcblxuXHR2YXIgYWRkUmVtb3ZlTG9hZEV2ZW50cyA9IGZ1bmN0aW9uKGRvbSwgZm4sIGFkZCl7XG5cdFx0dmFyIGFjdGlvbiA9IGFkZCA/IF9hZGRFdmVudExpc3RlbmVyIDogJ3JlbW92ZUV2ZW50TGlzdGVuZXInO1xuXHRcdGlmKGFkZCl7XG5cdFx0XHRhZGRSZW1vdmVMb2FkRXZlbnRzKGRvbSwgZm4pO1xuXHRcdH1cblx0XHRsb2FkRXZlbnRzLmZvckVhY2goZnVuY3Rpb24oZXZ0KXtcblx0XHRcdGRvbVthY3Rpb25dKGV2dCwgZm4pO1xuXHRcdH0pO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBAcGFyYW0gZWxlbSB7IEVsZW1lbnQgfVxuXHQgKiBAcGFyYW0gbmFtZSB7IHN0cmluZyB9XG5cdCAqIEBwYXJhbSBkZXRhaWwgeyBhbnkgfVxuXHQgKiBAcGFyYW0gbm9CdWJibGVzIHsgYm9vbGVhbiB9XG5cdCAqIEBwYXJhbSBub0NhbmNlbGFibGUgeyBib29sZWFuIH1cblx0ICogQHJldHVybnMgeyBDdXN0b21FdmVudCB9XG5cdCAqL1xuXHR2YXIgdHJpZ2dlckV2ZW50ID0gZnVuY3Rpb24oZWxlbSwgbmFtZSwgZGV0YWlsLCBub0J1YmJsZXMsIG5vQ2FuY2VsYWJsZSl7XG5cdFx0dmFyIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG5cblx0XHRpZighZGV0YWlsKXtcblx0XHRcdGRldGFpbCA9IHt9O1xuXHRcdH1cblxuXHRcdGRldGFpbC5pbnN0YW5jZSA9IGxhenlzaXplcztcblxuXHRcdGV2ZW50LmluaXRFdmVudChuYW1lLCAhbm9CdWJibGVzLCAhbm9DYW5jZWxhYmxlKTtcblxuXHRcdGV2ZW50LmRldGFpbCA9IGRldGFpbDtcblxuXHRcdGVsZW0uZGlzcGF0Y2hFdmVudChldmVudCk7XG5cdFx0cmV0dXJuIGV2ZW50O1xuXHR9O1xuXG5cdHZhciB1cGRhdGVQb2x5ZmlsbCA9IGZ1bmN0aW9uIChlbCwgZnVsbCl7XG5cdFx0dmFyIHBvbHlmaWxsO1xuXHRcdGlmKCAhc3VwcG9ydFBpY3R1cmUgJiYgKCBwb2x5ZmlsbCA9ICh3aW5kb3cucGljdHVyZWZpbGwgfHwgbGF6eVNpemVzQ2ZnLnBmKSApICl7XG5cdFx0XHRpZihmdWxsICYmIGZ1bGwuc3JjICYmICFlbFtfZ2V0QXR0cmlidXRlXSgnc3Jjc2V0Jykpe1xuXHRcdFx0XHRlbC5zZXRBdHRyaWJ1dGUoJ3NyY3NldCcsIGZ1bGwuc3JjKTtcblx0XHRcdH1cblx0XHRcdHBvbHlmaWxsKHtyZWV2YWx1YXRlOiB0cnVlLCBlbGVtZW50czogW2VsXX0pO1xuXHRcdH0gZWxzZSBpZihmdWxsICYmIGZ1bGwuc3JjKXtcblx0XHRcdGVsLnNyYyA9IGZ1bGwuc3JjO1xuXHRcdH1cblx0fTtcblxuXHR2YXIgZ2V0Q1NTID0gZnVuY3Rpb24gKGVsZW0sIHN0eWxlKXtcblx0XHRyZXR1cm4gKGdldENvbXB1dGVkU3R5bGUoZWxlbSwgbnVsbCkgfHwge30pW3N0eWxlXTtcblx0fTtcblxuXHQvKipcblx0ICpcblx0ICogQHBhcmFtIGVsZW0geyBFbGVtZW50IH1cblx0ICogQHBhcmFtIHBhcmVudCB7IEVsZW1lbnQgfVxuXHQgKiBAcGFyYW0gW3dpZHRoXSB7bnVtYmVyfVxuXHQgKiBAcmV0dXJucyB7bnVtYmVyfVxuXHQgKi9cblx0dmFyIGdldFdpZHRoID0gZnVuY3Rpb24oZWxlbSwgcGFyZW50LCB3aWR0aCl7XG5cdFx0d2lkdGggPSB3aWR0aCB8fCBlbGVtLm9mZnNldFdpZHRoO1xuXG5cdFx0d2hpbGUod2lkdGggPCBsYXp5U2l6ZXNDZmcubWluU2l6ZSAmJiBwYXJlbnQgJiYgIWVsZW0uX2xhenlzaXplc1dpZHRoKXtcblx0XHRcdHdpZHRoID0gIHBhcmVudC5vZmZzZXRXaWR0aDtcblx0XHRcdHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuXHRcdH1cblxuXHRcdHJldHVybiB3aWR0aDtcblx0fTtcblxuXHR2YXIgckFGID0gKGZ1bmN0aW9uKCl7XG5cdFx0dmFyIHJ1bm5pbmcsIHdhaXRpbmc7XG5cdFx0dmFyIGZpcnN0Rm5zID0gW107XG5cdFx0dmFyIHNlY29uZEZucyA9IFtdO1xuXHRcdHZhciBmbnMgPSBmaXJzdEZucztcblxuXHRcdHZhciBydW4gPSBmdW5jdGlvbigpe1xuXHRcdFx0dmFyIHJ1bkZucyA9IGZucztcblxuXHRcdFx0Zm5zID0gZmlyc3RGbnMubGVuZ3RoID8gc2Vjb25kRm5zIDogZmlyc3RGbnM7XG5cblx0XHRcdHJ1bm5pbmcgPSB0cnVlO1xuXHRcdFx0d2FpdGluZyA9IGZhbHNlO1xuXG5cdFx0XHR3aGlsZShydW5GbnMubGVuZ3RoKXtcblx0XHRcdFx0cnVuRm5zLnNoaWZ0KCkoKTtcblx0XHRcdH1cblxuXHRcdFx0cnVubmluZyA9IGZhbHNlO1xuXHRcdH07XG5cblx0XHR2YXIgcmFmQmF0Y2ggPSBmdW5jdGlvbihmbiwgcXVldWUpe1xuXHRcdFx0aWYocnVubmluZyAmJiAhcXVldWUpe1xuXHRcdFx0XHRmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm5zLnB1c2goZm4pO1xuXG5cdFx0XHRcdGlmKCF3YWl0aW5nKXtcblx0XHRcdFx0XHR3YWl0aW5nID0gdHJ1ZTtcblx0XHRcdFx0XHQoZG9jdW1lbnQuaGlkZGVuID8gc2V0VGltZW91dCA6IHJlcXVlc3RBbmltYXRpb25GcmFtZSkocnVuKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyYWZCYXRjaC5fbHNGbHVzaCA9IHJ1bjtcblxuXHRcdHJldHVybiByYWZCYXRjaDtcblx0fSkoKTtcblxuXHR2YXIgckFGSXQgPSBmdW5jdGlvbihmbiwgc2ltcGxlKXtcblx0XHRyZXR1cm4gc2ltcGxlID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyQUYoZm4pO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpe1xuXHRcdFx0XHR2YXIgdGhhdCA9IHRoaXM7XG5cdFx0XHRcdHZhciBhcmdzID0gYXJndW1lbnRzO1xuXHRcdFx0XHRyQUYoZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRmbi5hcHBseSh0aGF0LCBhcmdzKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0O1xuXHR9O1xuXG5cdHZhciB0aHJvdHRsZSA9IGZ1bmN0aW9uKGZuKXtcblx0XHR2YXIgcnVubmluZztcblx0XHR2YXIgbGFzdFRpbWUgPSAwO1xuXHRcdHZhciBnRGVsYXkgPSBsYXp5U2l6ZXNDZmcudGhyb3R0bGVEZWxheTtcblx0XHR2YXIgcklDVGltZW91dCA9IGxhenlTaXplc0NmZy5yaWNUaW1lb3V0O1xuXHRcdHZhciBydW4gPSBmdW5jdGlvbigpe1xuXHRcdFx0cnVubmluZyA9IGZhbHNlO1xuXHRcdFx0bGFzdFRpbWUgPSBEYXRlLm5vdygpO1xuXHRcdFx0Zm4oKTtcblx0XHR9O1xuXHRcdHZhciBpZGxlQ2FsbGJhY2sgPSByZXF1ZXN0SWRsZUNhbGxiYWNrICYmIHJJQ1RpbWVvdXQgPiA0OSA/XG5cdFx0XHRmdW5jdGlvbigpe1xuXHRcdFx0XHRyZXF1ZXN0SWRsZUNhbGxiYWNrKHJ1biwge3RpbWVvdXQ6IHJJQ1RpbWVvdXR9KTtcblxuXHRcdFx0XHRpZihySUNUaW1lb3V0ICE9PSBsYXp5U2l6ZXNDZmcucmljVGltZW91dCl7XG5cdFx0XHRcdFx0cklDVGltZW91dCA9IGxhenlTaXplc0NmZy5yaWNUaW1lb3V0O1xuXHRcdFx0XHR9XG5cdFx0XHR9IDpcblx0XHRcdHJBRkl0KGZ1bmN0aW9uKCl7XG5cdFx0XHRcdHNldFRpbWVvdXQocnVuKTtcblx0XHRcdH0sIHRydWUpXG5cdFx0O1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uKGlzUHJpb3JpdHkpe1xuXHRcdFx0dmFyIGRlbGF5O1xuXG5cdFx0XHRpZigoaXNQcmlvcml0eSA9IGlzUHJpb3JpdHkgPT09IHRydWUpKXtcblx0XHRcdFx0cklDVGltZW91dCA9IDMzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihydW5uaW5nKXtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRydW5uaW5nID0gIHRydWU7XG5cblx0XHRcdGRlbGF5ID0gZ0RlbGF5IC0gKERhdGUubm93KCkgLSBsYXN0VGltZSk7XG5cblx0XHRcdGlmKGRlbGF5IDwgMCl7XG5cdFx0XHRcdGRlbGF5ID0gMDtcblx0XHRcdH1cblxuXHRcdFx0aWYoaXNQcmlvcml0eSB8fCBkZWxheSA8IDkpe1xuXHRcdFx0XHRpZGxlQ2FsbGJhY2soKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNldFRpbWVvdXQoaWRsZUNhbGxiYWNrLCBkZWxheSk7XG5cdFx0XHR9XG5cdFx0fTtcblx0fTtcblxuXHQvL2Jhc2VkIG9uIGh0dHA6Ly9tb2Rlcm5qYXZhc2NyaXB0LmJsb2dzcG90LmRlLzIwMTMvMDgvYnVpbGRpbmctYmV0dGVyLWRlYm91bmNlLmh0bWxcblx0dmFyIGRlYm91bmNlID0gZnVuY3Rpb24oZnVuYykge1xuXHRcdHZhciB0aW1lb3V0LCB0aW1lc3RhbXA7XG5cdFx0dmFyIHdhaXQgPSA5OTtcblx0XHR2YXIgcnVuID0gZnVuY3Rpb24oKXtcblx0XHRcdHRpbWVvdXQgPSBudWxsO1xuXHRcdFx0ZnVuYygpO1xuXHRcdH07XG5cdFx0dmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbGFzdCA9IERhdGUubm93KCkgLSB0aW1lc3RhbXA7XG5cblx0XHRcdGlmIChsYXN0IDwgd2FpdCkge1xuXHRcdFx0XHRzZXRUaW1lb3V0KGxhdGVyLCB3YWl0IC0gbGFzdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQocmVxdWVzdElkbGVDYWxsYmFjayB8fCBydW4pKHJ1bik7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdHRpbWVzdGFtcCA9IERhdGUubm93KCk7XG5cblx0XHRcdGlmICghdGltZW91dCkge1xuXHRcdFx0XHR0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG5cdFx0XHR9XG5cdFx0fTtcblx0fTtcblxuXHR2YXIgbG9hZGVyID0gKGZ1bmN0aW9uKCl7XG5cdFx0dmFyIHByZWxvYWRFbGVtcywgaXNDb21wbGV0ZWQsIHJlc2V0UHJlbG9hZGluZ1RpbWVyLCBsb2FkTW9kZSwgc3RhcnRlZDtcblxuXHRcdHZhciBlTHZXLCBlbHZILCBlTHRvcCwgZUxsZWZ0LCBlTHJpZ2h0LCBlTGJvdHRvbSwgaXNCb2R5SGlkZGVuO1xuXG5cdFx0dmFyIHJlZ0ltZyA9IC9eaW1nJC9pO1xuXHRcdHZhciByZWdJZnJhbWUgPSAvXmlmcmFtZSQvaTtcblxuXHRcdHZhciBzdXBwb3J0U2Nyb2xsID0gKCdvbnNjcm9sbCcgaW4gd2luZG93KSAmJiAhKC8oZ2xlfGluZylib3QvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpO1xuXG5cdFx0dmFyIHNocmlua0V4cGFuZCA9IDA7XG5cdFx0dmFyIGN1cnJlbnRFeHBhbmQgPSAwO1xuXG5cdFx0dmFyIGlzTG9hZGluZyA9IDA7XG5cdFx0dmFyIGxvd1J1bnMgPSAtMTtcblxuXHRcdHZhciByZXNldFByZWxvYWRpbmcgPSBmdW5jdGlvbihlKXtcblx0XHRcdGlzTG9hZGluZy0tO1xuXHRcdFx0aWYoIWUgfHwgaXNMb2FkaW5nIDwgMCB8fCAhZS50YXJnZXQpe1xuXHRcdFx0XHRpc0xvYWRpbmcgPSAwO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR2YXIgaXNWaXNpYmxlID0gZnVuY3Rpb24gKGVsZW0pIHtcblx0XHRcdGlmIChpc0JvZHlIaWRkZW4gPT0gbnVsbCkge1xuXHRcdFx0XHRpc0JvZHlIaWRkZW4gPSBnZXRDU1MoZG9jdW1lbnQuYm9keSwgJ3Zpc2liaWxpdHknKSA9PSAnaGlkZGVuJztcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGlzQm9keUhpZGRlbiB8fCAhKGdldENTUyhlbGVtLnBhcmVudE5vZGUsICd2aXNpYmlsaXR5JykgPT0gJ2hpZGRlbicgJiYgZ2V0Q1NTKGVsZW0sICd2aXNpYmlsaXR5JykgPT0gJ2hpZGRlbicpO1xuXHRcdH07XG5cblx0XHR2YXIgaXNOZXN0ZWRWaXNpYmxlID0gZnVuY3Rpb24oZWxlbSwgZWxlbUV4cGFuZCl7XG5cdFx0XHR2YXIgb3V0ZXJSZWN0O1xuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW07XG5cdFx0XHR2YXIgdmlzaWJsZSA9IGlzVmlzaWJsZShlbGVtKTtcblxuXHRcdFx0ZUx0b3AgLT0gZWxlbUV4cGFuZDtcblx0XHRcdGVMYm90dG9tICs9IGVsZW1FeHBhbmQ7XG5cdFx0XHRlTGxlZnQgLT0gZWxlbUV4cGFuZDtcblx0XHRcdGVMcmlnaHQgKz0gZWxlbUV4cGFuZDtcblxuXHRcdFx0d2hpbGUodmlzaWJsZSAmJiAocGFyZW50ID0gcGFyZW50Lm9mZnNldFBhcmVudCkgJiYgcGFyZW50ICE9IGRvY3VtZW50LmJvZHkgJiYgcGFyZW50ICE9IGRvY0VsZW0pe1xuXHRcdFx0XHR2aXNpYmxlID0gKChnZXRDU1MocGFyZW50LCAnb3BhY2l0eScpIHx8IDEpID4gMCk7XG5cblx0XHRcdFx0aWYodmlzaWJsZSAmJiBnZXRDU1MocGFyZW50LCAnb3ZlcmZsb3cnKSAhPSAndmlzaWJsZScpe1xuXHRcdFx0XHRcdG91dGVyUmVjdCA9IHBhcmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHRcdFx0XHR2aXNpYmxlID0gZUxyaWdodCA+IG91dGVyUmVjdC5sZWZ0ICYmXG5cdFx0XHRcdFx0XHRlTGxlZnQgPCBvdXRlclJlY3QucmlnaHQgJiZcblx0XHRcdFx0XHRcdGVMYm90dG9tID4gb3V0ZXJSZWN0LnRvcCAtIDEgJiZcblx0XHRcdFx0XHRcdGVMdG9wIDwgb3V0ZXJSZWN0LmJvdHRvbSArIDFcblx0XHRcdFx0XHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZpc2libGU7XG5cdFx0fTtcblxuXHRcdHZhciBjaGVja0VsZW1lbnRzID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZUxsZW4sIGksIHJlY3QsIGF1dG9Mb2FkRWxlbSwgbG9hZGVkU29tZXRoaW5nLCBlbGVtRXhwYW5kLCBlbGVtTmVnYXRpdmVFeHBhbmQsIGVsZW1FeHBhbmRWYWwsXG5cdFx0XHRcdGJlZm9yZUV4cGFuZFZhbCwgZGVmYXVsdEV4cGFuZCwgcHJlbG9hZEV4cGFuZCwgaEZhYztcblx0XHRcdHZhciBsYXp5bG9hZEVsZW1zID0gbGF6eXNpemVzLmVsZW1lbnRzO1xuXG5cdFx0XHRpZigobG9hZE1vZGUgPSBsYXp5U2l6ZXNDZmcubG9hZE1vZGUpICYmIGlzTG9hZGluZyA8IDggJiYgKGVMbGVuID0gbGF6eWxvYWRFbGVtcy5sZW5ndGgpKXtcblxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0XHRsb3dSdW5zKys7XG5cblx0XHRcdFx0Zm9yKDsgaSA8IGVMbGVuOyBpKyspe1xuXG5cdFx0XHRcdFx0aWYoIWxhenlsb2FkRWxlbXNbaV0gfHwgbGF6eWxvYWRFbGVtc1tpXS5fbGF6eVJhY2Upe2NvbnRpbnVlO31cblxuXHRcdFx0XHRcdGlmKCFzdXBwb3J0U2Nyb2xsIHx8IChsYXp5c2l6ZXMucHJlbWF0dXJlVW52ZWlsICYmIGxhenlzaXplcy5wcmVtYXR1cmVVbnZlaWwobGF6eWxvYWRFbGVtc1tpXSkpKXt1bnZlaWxFbGVtZW50KGxhenlsb2FkRWxlbXNbaV0pO2NvbnRpbnVlO31cblxuXHRcdFx0XHRcdGlmKCEoZWxlbUV4cGFuZFZhbCA9IGxhenlsb2FkRWxlbXNbaV1bX2dldEF0dHJpYnV0ZV0oJ2RhdGEtZXhwYW5kJykpIHx8ICEoZWxlbUV4cGFuZCA9IGVsZW1FeHBhbmRWYWwgKiAxKSl7XG5cdFx0XHRcdFx0XHRlbGVtRXhwYW5kID0gY3VycmVudEV4cGFuZDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIWRlZmF1bHRFeHBhbmQpIHtcblx0XHRcdFx0XHRcdGRlZmF1bHRFeHBhbmQgPSAoIWxhenlTaXplc0NmZy5leHBhbmQgfHwgbGF6eVNpemVzQ2ZnLmV4cGFuZCA8IDEpID9cblx0XHRcdFx0XHRcdFx0ZG9jRWxlbS5jbGllbnRIZWlnaHQgPiA1MDAgJiYgZG9jRWxlbS5jbGllbnRXaWR0aCA+IDUwMCA/IDUwMCA6IDM3MCA6XG5cdFx0XHRcdFx0XHRcdGxhenlTaXplc0NmZy5leHBhbmQ7XG5cblx0XHRcdFx0XHRcdGxhenlzaXplcy5fZGVmRXggPSBkZWZhdWx0RXhwYW5kO1xuXG5cdFx0XHRcdFx0XHRwcmVsb2FkRXhwYW5kID0gZGVmYXVsdEV4cGFuZCAqIGxhenlTaXplc0NmZy5leHBGYWN0b3I7XG5cdFx0XHRcdFx0XHRoRmFjID0gbGF6eVNpemVzQ2ZnLmhGYWM7XG5cdFx0XHRcdFx0XHRpc0JvZHlIaWRkZW4gPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRpZihjdXJyZW50RXhwYW5kIDwgcHJlbG9hZEV4cGFuZCAmJiBpc0xvYWRpbmcgPCAxICYmIGxvd1J1bnMgPiAyICYmIGxvYWRNb2RlID4gMiAmJiAhZG9jdW1lbnQuaGlkZGVuKXtcblx0XHRcdFx0XHRcdFx0Y3VycmVudEV4cGFuZCA9IHByZWxvYWRFeHBhbmQ7XG5cdFx0XHRcdFx0XHRcdGxvd1J1bnMgPSAwO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmKGxvYWRNb2RlID4gMSAmJiBsb3dSdW5zID4gMSAmJiBpc0xvYWRpbmcgPCA2KXtcblx0XHRcdFx0XHRcdFx0Y3VycmVudEV4cGFuZCA9IGRlZmF1bHRFeHBhbmQ7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjdXJyZW50RXhwYW5kID0gc2hyaW5rRXhwYW5kO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmKGJlZm9yZUV4cGFuZFZhbCAhPT0gZWxlbUV4cGFuZCl7XG5cdFx0XHRcdFx0XHRlTHZXID0gaW5uZXJXaWR0aCArIChlbGVtRXhwYW5kICogaEZhYyk7XG5cdFx0XHRcdFx0XHRlbHZIID0gaW5uZXJIZWlnaHQgKyBlbGVtRXhwYW5kO1xuXHRcdFx0XHRcdFx0ZWxlbU5lZ2F0aXZlRXhwYW5kID0gZWxlbUV4cGFuZCAqIC0xO1xuXHRcdFx0XHRcdFx0YmVmb3JlRXhwYW5kVmFsID0gZWxlbUV4cGFuZDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZWN0ID0gbGF6eWxvYWRFbGVtc1tpXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdFx0XHRcdGlmICgoZUxib3R0b20gPSByZWN0LmJvdHRvbSkgPj0gZWxlbU5lZ2F0aXZlRXhwYW5kICYmXG5cdFx0XHRcdFx0XHQoZUx0b3AgPSByZWN0LnRvcCkgPD0gZWx2SCAmJlxuXHRcdFx0XHRcdFx0KGVMcmlnaHQgPSByZWN0LnJpZ2h0KSA+PSBlbGVtTmVnYXRpdmVFeHBhbmQgKiBoRmFjICYmXG5cdFx0XHRcdFx0XHQoZUxsZWZ0ID0gcmVjdC5sZWZ0KSA8PSBlTHZXICYmXG5cdFx0XHRcdFx0XHQoZUxib3R0b20gfHwgZUxyaWdodCB8fCBlTGxlZnQgfHwgZUx0b3ApICYmXG5cdFx0XHRcdFx0XHQobGF6eVNpemVzQ2ZnLmxvYWRIaWRkZW4gfHwgaXNWaXNpYmxlKGxhenlsb2FkRWxlbXNbaV0pKSAmJlxuXHRcdFx0XHRcdFx0KChpc0NvbXBsZXRlZCAmJiBpc0xvYWRpbmcgPCAzICYmICFlbGVtRXhwYW5kVmFsICYmIChsb2FkTW9kZSA8IDMgfHwgbG93UnVucyA8IDQpKSB8fCBpc05lc3RlZFZpc2libGUobGF6eWxvYWRFbGVtc1tpXSwgZWxlbUV4cGFuZCkpKXtcblx0XHRcdFx0XHRcdHVudmVpbEVsZW1lbnQobGF6eWxvYWRFbGVtc1tpXSk7XG5cdFx0XHRcdFx0XHRsb2FkZWRTb21ldGhpbmcgPSB0cnVlO1xuXHRcdFx0XHRcdFx0aWYoaXNMb2FkaW5nID4gOSl7YnJlYWs7fVxuXHRcdFx0XHRcdH0gZWxzZSBpZighbG9hZGVkU29tZXRoaW5nICYmIGlzQ29tcGxldGVkICYmICFhdXRvTG9hZEVsZW0gJiZcblx0XHRcdFx0XHRcdGlzTG9hZGluZyA8IDQgJiYgbG93UnVucyA8IDQgJiYgbG9hZE1vZGUgPiAyICYmXG5cdFx0XHRcdFx0XHQocHJlbG9hZEVsZW1zWzBdIHx8IGxhenlTaXplc0NmZy5wcmVsb2FkQWZ0ZXJMb2FkKSAmJlxuXHRcdFx0XHRcdFx0KHByZWxvYWRFbGVtc1swXSB8fCAoIWVsZW1FeHBhbmRWYWwgJiYgKChlTGJvdHRvbSB8fCBlTHJpZ2h0IHx8IGVMbGVmdCB8fCBlTHRvcCkgfHwgbGF6eWxvYWRFbGVtc1tpXVtfZ2V0QXR0cmlidXRlXShsYXp5U2l6ZXNDZmcuc2l6ZXNBdHRyKSAhPSAnYXV0bycpKSkpe1xuXHRcdFx0XHRcdFx0YXV0b0xvYWRFbGVtID0gcHJlbG9hZEVsZW1zWzBdIHx8IGxhenlsb2FkRWxlbXNbaV07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoYXV0b0xvYWRFbGVtICYmICFsb2FkZWRTb21ldGhpbmcpe1xuXHRcdFx0XHRcdHVudmVpbEVsZW1lbnQoYXV0b0xvYWRFbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR2YXIgdGhyb3R0bGVkQ2hlY2tFbGVtZW50cyA9IHRocm90dGxlKGNoZWNrRWxlbWVudHMpO1xuXG5cdFx0dmFyIHN3aXRjaExvYWRpbmdDbGFzcyA9IGZ1bmN0aW9uKGUpe1xuXHRcdFx0dmFyIGVsZW0gPSBlLnRhcmdldDtcblxuXHRcdFx0aWYgKGVsZW0uX2xhenlDYWNoZSkge1xuXHRcdFx0XHRkZWxldGUgZWxlbS5fbGF6eUNhY2hlO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHJlc2V0UHJlbG9hZGluZyhlKTtcblx0XHRcdGFkZENsYXNzKGVsZW0sIGxhenlTaXplc0NmZy5sb2FkZWRDbGFzcyk7XG5cdFx0XHRyZW1vdmVDbGFzcyhlbGVtLCBsYXp5U2l6ZXNDZmcubG9hZGluZ0NsYXNzKTtcblx0XHRcdGFkZFJlbW92ZUxvYWRFdmVudHMoZWxlbSwgcmFmU3dpdGNoTG9hZGluZ0NsYXNzKTtcblx0XHRcdHRyaWdnZXJFdmVudChlbGVtLCAnbGF6eWxvYWRlZCcpO1xuXHRcdH07XG5cdFx0dmFyIHJhZmVkU3dpdGNoTG9hZGluZ0NsYXNzID0gckFGSXQoc3dpdGNoTG9hZGluZ0NsYXNzKTtcblx0XHR2YXIgcmFmU3dpdGNoTG9hZGluZ0NsYXNzID0gZnVuY3Rpb24oZSl7XG5cdFx0XHRyYWZlZFN3aXRjaExvYWRpbmdDbGFzcyh7dGFyZ2V0OiBlLnRhcmdldH0pO1xuXHRcdH07XG5cblx0XHR2YXIgY2hhbmdlSWZyYW1lU3JjID0gZnVuY3Rpb24oZWxlbSwgc3JjKXtcblx0XHRcdHZhciBsb2FkTW9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlKCdkYXRhLWxvYWQtbW9kZScpIHx8IGxhenlTaXplc0NmZy5pZnJhbWVMb2FkTW9kZTtcblxuXHRcdFx0Ly8gbG9hZE1vZGUgY2FuIGJlIGFsc28gYSBzdHJpbmchXG5cdFx0XHRpZiAobG9hZE1vZGUgPT0gMCkge1xuXHRcdFx0XHRlbGVtLmNvbnRlbnRXaW5kb3cubG9jYXRpb24ucmVwbGFjZShzcmMpO1xuXHRcdFx0fSBlbHNlIGlmIChsb2FkTW9kZSA9PSAxKSB7XG5cdFx0XHRcdGVsZW0uc3JjID0gc3JjO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR2YXIgaGFuZGxlU291cmNlcyA9IGZ1bmN0aW9uKHNvdXJjZSl7XG5cdFx0XHR2YXIgY3VzdG9tTWVkaWE7XG5cblx0XHRcdHZhciBzb3VyY2VTcmNzZXQgPSBzb3VyY2VbX2dldEF0dHJpYnV0ZV0obGF6eVNpemVzQ2ZnLnNyY3NldEF0dHIpO1xuXG5cdFx0XHRpZiggKGN1c3RvbU1lZGlhID0gbGF6eVNpemVzQ2ZnLmN1c3RvbU1lZGlhW3NvdXJjZVtfZ2V0QXR0cmlidXRlXSgnZGF0YS1tZWRpYScpIHx8IHNvdXJjZVtfZ2V0QXR0cmlidXRlXSgnbWVkaWEnKV0pICl7XG5cdFx0XHRcdHNvdXJjZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgY3VzdG9tTWVkaWEpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihzb3VyY2VTcmNzZXQpe1xuXHRcdFx0XHRzb3VyY2Uuc2V0QXR0cmlidXRlKCdzcmNzZXQnLCBzb3VyY2VTcmNzZXQpO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR2YXIgbGF6eVVudmVpbCA9IHJBRkl0KGZ1bmN0aW9uIChlbGVtLCBkZXRhaWwsIGlzQXV0bywgc2l6ZXMsIGlzSW1nKXtcblx0XHRcdHZhciBzcmMsIHNyY3NldCwgcGFyZW50LCBpc1BpY3R1cmUsIGV2ZW50LCBmaXJlc0xvYWQ7XG5cblx0XHRcdGlmKCEoZXZlbnQgPSB0cmlnZ2VyRXZlbnQoZWxlbSwgJ2xhenliZWZvcmV1bnZlaWwnLCBkZXRhaWwpKS5kZWZhdWx0UHJldmVudGVkKXtcblxuXHRcdFx0XHRpZihzaXplcyl7XG5cdFx0XHRcdFx0aWYoaXNBdXRvKXtcblx0XHRcdFx0XHRcdGFkZENsYXNzKGVsZW0sIGxhenlTaXplc0NmZy5hdXRvc2l6ZXNDbGFzcyk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCdzaXplcycsIHNpemVzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzcmNzZXQgPSBlbGVtW19nZXRBdHRyaWJ1dGVdKGxhenlTaXplc0NmZy5zcmNzZXRBdHRyKTtcblx0XHRcdFx0c3JjID0gZWxlbVtfZ2V0QXR0cmlidXRlXShsYXp5U2l6ZXNDZmcuc3JjQXR0cik7XG5cblx0XHRcdFx0aWYoaXNJbWcpIHtcblx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdFx0aXNQaWN0dXJlID0gcGFyZW50ICYmIHJlZ1BpY3R1cmUudGVzdChwYXJlbnQubm9kZU5hbWUgfHwgJycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZmlyZXNMb2FkID0gZGV0YWlsLmZpcmVzTG9hZCB8fCAoKCdzcmMnIGluIGVsZW0pICYmIChzcmNzZXQgfHwgc3JjIHx8IGlzUGljdHVyZSkpO1xuXG5cdFx0XHRcdGV2ZW50ID0ge3RhcmdldDogZWxlbX07XG5cblx0XHRcdFx0YWRkQ2xhc3MoZWxlbSwgbGF6eVNpemVzQ2ZnLmxvYWRpbmdDbGFzcyk7XG5cblx0XHRcdFx0aWYoZmlyZXNMb2FkKXtcblx0XHRcdFx0XHRjbGVhclRpbWVvdXQocmVzZXRQcmVsb2FkaW5nVGltZXIpO1xuXHRcdFx0XHRcdHJlc2V0UHJlbG9hZGluZ1RpbWVyID0gc2V0VGltZW91dChyZXNldFByZWxvYWRpbmcsIDI1MDApO1xuXHRcdFx0XHRcdGFkZFJlbW92ZUxvYWRFdmVudHMoZWxlbSwgcmFmU3dpdGNoTG9hZGluZ0NsYXNzLCB0cnVlKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmKGlzUGljdHVyZSl7XG5cdFx0XHRcdFx0Zm9yRWFjaC5jYWxsKHBhcmVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc291cmNlJyksIGhhbmRsZVNvdXJjZXMpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoc3Jjc2V0KXtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSgnc3Jjc2V0Jywgc3Jjc2V0KTtcblx0XHRcdFx0fSBlbHNlIGlmKHNyYyAmJiAhaXNQaWN0dXJlKXtcblx0XHRcdFx0XHRpZihyZWdJZnJhbWUudGVzdChlbGVtLm5vZGVOYW1lKSl7XG5cdFx0XHRcdFx0XHRjaGFuZ2VJZnJhbWVTcmMoZWxlbSwgc3JjKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZWxlbS5zcmMgPSBzcmM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoaXNJbWcgJiYgKHNyY3NldCB8fCBpc1BpY3R1cmUpKXtcblx0XHRcdFx0XHR1cGRhdGVQb2x5ZmlsbChlbGVtLCB7c3JjOiBzcmN9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZihlbGVtLl9sYXp5UmFjZSl7XG5cdFx0XHRcdGRlbGV0ZSBlbGVtLl9sYXp5UmFjZTtcblx0XHRcdH1cblx0XHRcdHJlbW92ZUNsYXNzKGVsZW0sIGxhenlTaXplc0NmZy5sYXp5Q2xhc3MpO1xuXG5cdFx0XHRyQUYoZnVuY3Rpb24oKXtcblx0XHRcdFx0Ly8gUGFydCBvZiB0aGlzIGNhbiBiZSByZW1vdmVkIGFzIHNvb24gYXMgdGhpcyBmaXggaXMgb2xkZXI6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTc3MzEgKDIwMTUpXG5cdFx0XHRcdHZhciBpc0xvYWRlZCA9IGVsZW0uY29tcGxldGUgJiYgZWxlbS5uYXR1cmFsV2lkdGggPiAxO1xuXG5cdFx0XHRcdGlmKCAhZmlyZXNMb2FkIHx8IGlzTG9hZGVkKXtcblx0XHRcdFx0XHRpZiAoaXNMb2FkZWQpIHtcblx0XHRcdFx0XHRcdGFkZENsYXNzKGVsZW0sIGxhenlTaXplc0NmZy5mYXN0TG9hZGVkQ2xhc3MpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRzd2l0Y2hMb2FkaW5nQ2xhc3MoZXZlbnQpO1xuXHRcdFx0XHRcdGVsZW0uX2xhenlDYWNoZSA9IHRydWU7XG5cdFx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0aWYgKCdfbGF6eUNhY2hlJyBpbiBlbGVtKSB7XG5cdFx0XHRcdFx0XHRcdGRlbGV0ZSBlbGVtLl9sYXp5Q2FjaGU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSwgOSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGVsZW0ubG9hZGluZyA9PSAnbGF6eScpIHtcblx0XHRcdFx0XHRpc0xvYWRpbmctLTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdHJ1ZSk7XG5cdFx0fSk7XG5cblx0XHQvKipcblx0XHQgKlxuXHRcdCAqIEBwYXJhbSBlbGVtIHsgRWxlbWVudCB9XG5cdFx0ICovXG5cdFx0dmFyIHVudmVpbEVsZW1lbnQgPSBmdW5jdGlvbiAoZWxlbSl7XG5cdFx0XHRpZiAoZWxlbS5fbGF6eVJhY2UpIHtyZXR1cm47fVxuXHRcdFx0dmFyIGRldGFpbDtcblxuXHRcdFx0dmFyIGlzSW1nID0gcmVnSW1nLnRlc3QoZWxlbS5ub2RlTmFtZSk7XG5cblx0XHRcdC8vYWxsb3cgdXNpbmcgc2l6ZXM9XCJhdXRvXCIsIGJ1dCBkb24ndCB1c2UuIGl0J3MgaW52YWxpZC4gVXNlIGRhdGEtc2l6ZXM9XCJhdXRvXCIgb3IgYSB2YWxpZCB2YWx1ZSBmb3Igc2l6ZXMgaW5zdGVhZCAoaS5lLjogc2l6ZXM9XCI4MHZ3XCIpXG5cdFx0XHR2YXIgc2l6ZXMgPSBpc0ltZyAmJiAoZWxlbVtfZ2V0QXR0cmlidXRlXShsYXp5U2l6ZXNDZmcuc2l6ZXNBdHRyKSB8fCBlbGVtW19nZXRBdHRyaWJ1dGVdKCdzaXplcycpKTtcblx0XHRcdHZhciBpc0F1dG8gPSBzaXplcyA9PSAnYXV0byc7XG5cblx0XHRcdGlmKCAoaXNBdXRvIHx8ICFpc0NvbXBsZXRlZCkgJiYgaXNJbWcgJiYgKGVsZW1bX2dldEF0dHJpYnV0ZV0oJ3NyYycpIHx8IGVsZW0uc3Jjc2V0KSAmJiAhZWxlbS5jb21wbGV0ZSAmJiAhaGFzQ2xhc3MoZWxlbSwgbGF6eVNpemVzQ2ZnLmVycm9yQ2xhc3MpICYmIGhhc0NsYXNzKGVsZW0sIGxhenlTaXplc0NmZy5sYXp5Q2xhc3MpKXtyZXR1cm47fVxuXG5cdFx0XHRkZXRhaWwgPSB0cmlnZ2VyRXZlbnQoZWxlbSwgJ2xhenl1bnZlaWxyZWFkJykuZGV0YWlsO1xuXG5cdFx0XHRpZihpc0F1dG8pe1xuXHRcdFx0XHQgYXV0b1NpemVyLnVwZGF0ZUVsZW0oZWxlbSwgdHJ1ZSwgZWxlbS5vZmZzZXRXaWR0aCk7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uX2xhenlSYWNlID0gdHJ1ZTtcblx0XHRcdGlzTG9hZGluZysrO1xuXG5cdFx0XHRsYXp5VW52ZWlsKGVsZW0sIGRldGFpbCwgaXNBdXRvLCBzaXplcywgaXNJbWcpO1xuXHRcdH07XG5cblx0XHR2YXIgYWZ0ZXJTY3JvbGwgPSBkZWJvdW5jZShmdW5jdGlvbigpe1xuXHRcdFx0bGF6eVNpemVzQ2ZnLmxvYWRNb2RlID0gMztcblx0XHRcdHRocm90dGxlZENoZWNrRWxlbWVudHMoKTtcblx0XHR9KTtcblxuXHRcdHZhciBhbHRMb2FkbW9kZVNjcm9sbExpc3RuZXIgPSBmdW5jdGlvbigpe1xuXHRcdFx0aWYobGF6eVNpemVzQ2ZnLmxvYWRNb2RlID09IDMpe1xuXHRcdFx0XHRsYXp5U2l6ZXNDZmcubG9hZE1vZGUgPSAyO1xuXHRcdFx0fVxuXHRcdFx0YWZ0ZXJTY3JvbGwoKTtcblx0XHR9O1xuXG5cdFx0dmFyIG9ubG9hZCA9IGZ1bmN0aW9uKCl7XG5cdFx0XHRpZihpc0NvbXBsZXRlZCl7cmV0dXJuO31cblx0XHRcdGlmKERhdGUubm93KCkgLSBzdGFydGVkIDwgOTk5KXtcblx0XHRcdFx0c2V0VGltZW91dChvbmxvYWQsIDk5OSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXG5cdFx0XHRpc0NvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdGxhenlTaXplc0NmZy5sb2FkTW9kZSA9IDM7XG5cblx0XHRcdHRocm90dGxlZENoZWNrRWxlbWVudHMoKTtcblxuXHRcdFx0YWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgYWx0TG9hZG1vZGVTY3JvbGxMaXN0bmVyLCB0cnVlKTtcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdF86IGZ1bmN0aW9uKCl7XG5cdFx0XHRcdHN0YXJ0ZWQgPSBEYXRlLm5vdygpO1xuXG5cdFx0XHRcdGxhenlzaXplcy5lbGVtZW50cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUobGF6eVNpemVzQ2ZnLmxhenlDbGFzcyk7XG5cdFx0XHRcdHByZWxvYWRFbGVtcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUobGF6eVNpemVzQ2ZnLmxhenlDbGFzcyArICcgJyArIGxhenlTaXplc0NmZy5wcmVsb2FkQ2xhc3MpO1xuXG5cdFx0XHRcdGFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRocm90dGxlZENoZWNrRWxlbWVudHMsIHRydWUpO1xuXG5cdFx0XHRcdGFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRocm90dGxlZENoZWNrRWxlbWVudHMsIHRydWUpO1xuXG5cdFx0XHRcdGFkZEV2ZW50TGlzdGVuZXIoJ3BhZ2VzaG93JywgZnVuY3Rpb24gKGUpIHtcblx0XHRcdFx0XHRpZiAoZS5wZXJzaXN0ZWQpIHtcblx0XHRcdFx0XHRcdHZhciBsb2FkaW5nRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIGxhenlTaXplc0NmZy5sb2FkaW5nQ2xhc3MpO1xuXG5cdFx0XHRcdFx0XHRpZiAobG9hZGluZ0VsZW1lbnRzLmxlbmd0aCAmJiBsb2FkaW5nRWxlbWVudHMuZm9yRWFjaCkge1xuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0XHRcdGxvYWRpbmdFbGVtZW50cy5mb3JFYWNoKCBmdW5jdGlvbiAoaW1nKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoaW1nLmNvbXBsZXRlKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHVudmVpbEVsZW1lbnQoaW1nKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRpZih3aW5kb3cuTXV0YXRpb25PYnNlcnZlcil7XG5cdFx0XHRcdFx0bmV3IE11dGF0aW9uT2JzZXJ2ZXIoIHRocm90dGxlZENoZWNrRWxlbWVudHMgKS5vYnNlcnZlKCBkb2NFbGVtLCB7Y2hpbGRMaXN0OiB0cnVlLCBzdWJ0cmVlOiB0cnVlLCBhdHRyaWJ1dGVzOiB0cnVlfSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRvY0VsZW1bX2FkZEV2ZW50TGlzdGVuZXJdKCdET01Ob2RlSW5zZXJ0ZWQnLCB0aHJvdHRsZWRDaGVja0VsZW1lbnRzLCB0cnVlKTtcblx0XHRcdFx0XHRkb2NFbGVtW19hZGRFdmVudExpc3RlbmVyXSgnRE9NQXR0ck1vZGlmaWVkJywgdGhyb3R0bGVkQ2hlY2tFbGVtZW50cywgdHJ1ZSk7XG5cdFx0XHRcdFx0c2V0SW50ZXJ2YWwodGhyb3R0bGVkQ2hlY2tFbGVtZW50cywgOTk5KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGFkZEV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCB0aHJvdHRsZWRDaGVja0VsZW1lbnRzLCB0cnVlKTtcblxuXHRcdFx0XHQvLywgJ2Z1bGxzY3JlZW5jaGFuZ2UnXG5cdFx0XHRcdFsnZm9jdXMnLCAnbW91c2VvdmVyJywgJ2NsaWNrJywgJ2xvYWQnLCAndHJhbnNpdGlvbmVuZCcsICdhbmltYXRpb25lbmQnXS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpe1xuXHRcdFx0XHRcdGRvY3VtZW50W19hZGRFdmVudExpc3RlbmVyXShuYW1lLCB0aHJvdHRsZWRDaGVja0VsZW1lbnRzLCB0cnVlKTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0aWYoKC9kJHxeYy8udGVzdChkb2N1bWVudC5yZWFkeVN0YXRlKSkpe1xuXHRcdFx0XHRcdG9ubG9hZCgpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBvbmxvYWQpO1xuXHRcdFx0XHRcdGRvY3VtZW50W19hZGRFdmVudExpc3RlbmVyXSgnRE9NQ29udGVudExvYWRlZCcsIHRocm90dGxlZENoZWNrRWxlbWVudHMpO1xuXHRcdFx0XHRcdHNldFRpbWVvdXQob25sb2FkLCAyMDAwMCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZihsYXp5c2l6ZXMuZWxlbWVudHMubGVuZ3RoKXtcblx0XHRcdFx0XHRjaGVja0VsZW1lbnRzKCk7XG5cdFx0XHRcdFx0ckFGLl9sc0ZsdXNoKCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhyb3R0bGVkQ2hlY2tFbGVtZW50cygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0Y2hlY2tFbGVtczogdGhyb3R0bGVkQ2hlY2tFbGVtZW50cyxcblx0XHRcdHVudmVpbDogdW52ZWlsRWxlbWVudCxcblx0XHRcdF9hTFNMOiBhbHRMb2FkbW9kZVNjcm9sbExpc3RuZXIsXG5cdFx0fTtcblx0fSkoKTtcblxuXG5cdHZhciBhdXRvU2l6ZXIgPSAoZnVuY3Rpb24oKXtcblx0XHR2YXIgYXV0b3NpemVzRWxlbXM7XG5cblx0XHR2YXIgc2l6ZUVsZW1lbnQgPSByQUZJdChmdW5jdGlvbihlbGVtLCBwYXJlbnQsIGV2ZW50LCB3aWR0aCl7XG5cdFx0XHR2YXIgc291cmNlcywgaSwgbGVuO1xuXHRcdFx0ZWxlbS5fbGF6eXNpemVzV2lkdGggPSB3aWR0aDtcblx0XHRcdHdpZHRoICs9ICdweCc7XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCdzaXplcycsIHdpZHRoKTtcblxuXHRcdFx0aWYocmVnUGljdHVyZS50ZXN0KHBhcmVudC5ub2RlTmFtZSB8fCAnJykpe1xuXHRcdFx0XHRzb3VyY2VzID0gcGFyZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzb3VyY2UnKTtcblx0XHRcdFx0Zm9yKGkgPSAwLCBsZW4gPSBzb3VyY2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKXtcblx0XHRcdFx0XHRzb3VyY2VzW2ldLnNldEF0dHJpYnV0ZSgnc2l6ZXMnLCB3aWR0aCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYoIWV2ZW50LmRldGFpbC5kYXRhQXR0cil7XG5cdFx0XHRcdHVwZGF0ZVBvbHlmaWxsKGVsZW0sIGV2ZW50LmRldGFpbCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0LyoqXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0gZWxlbSB7RWxlbWVudH1cblx0XHQgKiBAcGFyYW0gZGF0YUF0dHJcblx0XHQgKiBAcGFyYW0gW3dpZHRoXSB7IG51bWJlciB9XG5cdFx0ICovXG5cdFx0dmFyIGdldFNpemVFbGVtZW50ID0gZnVuY3Rpb24gKGVsZW0sIGRhdGFBdHRyLCB3aWR0aCl7XG5cdFx0XHR2YXIgZXZlbnQ7XG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZihwYXJlbnQpe1xuXHRcdFx0XHR3aWR0aCA9IGdldFdpZHRoKGVsZW0sIHBhcmVudCwgd2lkdGgpO1xuXHRcdFx0XHRldmVudCA9IHRyaWdnZXJFdmVudChlbGVtLCAnbGF6eWJlZm9yZXNpemVzJywge3dpZHRoOiB3aWR0aCwgZGF0YUF0dHI6ICEhZGF0YUF0dHJ9KTtcblxuXHRcdFx0XHRpZighZXZlbnQuZGVmYXVsdFByZXZlbnRlZCl7XG5cdFx0XHRcdFx0d2lkdGggPSBldmVudC5kZXRhaWwud2lkdGg7XG5cblx0XHRcdFx0XHRpZih3aWR0aCAmJiB3aWR0aCAhPT0gZWxlbS5fbGF6eXNpemVzV2lkdGgpe1xuXHRcdFx0XHRcdFx0c2l6ZUVsZW1lbnQoZWxlbSwgcGFyZW50LCBldmVudCwgd2lkdGgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR2YXIgdXBkYXRlRWxlbWVudHNTaXplcyA9IGZ1bmN0aW9uKCl7XG5cdFx0XHR2YXIgaTtcblx0XHRcdHZhciBsZW4gPSBhdXRvc2l6ZXNFbGVtcy5sZW5ndGg7XG5cdFx0XHRpZihsZW4pe1xuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0XHRmb3IoOyBpIDwgbGVuOyBpKyspe1xuXHRcdFx0XHRcdGdldFNpemVFbGVtZW50KGF1dG9zaXplc0VsZW1zW2ldKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR2YXIgZGVib3VuY2VkVXBkYXRlRWxlbWVudHNTaXplcyA9IGRlYm91bmNlKHVwZGF0ZUVsZW1lbnRzU2l6ZXMpO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdF86IGZ1bmN0aW9uKCl7XG5cdFx0XHRcdGF1dG9zaXplc0VsZW1zID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShsYXp5U2l6ZXNDZmcuYXV0b3NpemVzQ2xhc3MpO1xuXHRcdFx0XHRhZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBkZWJvdW5jZWRVcGRhdGVFbGVtZW50c1NpemVzKTtcblx0XHRcdH0sXG5cdFx0XHRjaGVja0VsZW1zOiBkZWJvdW5jZWRVcGRhdGVFbGVtZW50c1NpemVzLFxuXHRcdFx0dXBkYXRlRWxlbTogZ2V0U2l6ZUVsZW1lbnRcblx0XHR9O1xuXHR9KSgpO1xuXG5cdHZhciBpbml0ID0gZnVuY3Rpb24oKXtcblx0XHRpZighaW5pdC5pICYmIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUpe1xuXHRcdFx0aW5pdC5pID0gdHJ1ZTtcblx0XHRcdGF1dG9TaXplci5fKCk7XG5cdFx0XHRsb2FkZXIuXygpO1xuXHRcdH1cblx0fTtcblxuXHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdFx0aWYobGF6eVNpemVzQ2ZnLmluaXQpe1xuXHRcdFx0aW5pdCgpO1xuXHRcdH1cblx0fSk7XG5cblx0bGF6eXNpemVzID0ge1xuXHRcdC8qKlxuXHRcdCAqIEB0eXBlIHsgTGF6eVNpemVzQ29uZmlnUGFydGlhbCB9XG5cdFx0ICovXG5cdFx0Y2ZnOiBsYXp5U2l6ZXNDZmcsXG5cdFx0YXV0b1NpemVyOiBhdXRvU2l6ZXIsXG5cdFx0bG9hZGVyOiBsb2FkZXIsXG5cdFx0aW5pdDogaW5pdCxcblx0XHR1UDogdXBkYXRlUG9seWZpbGwsXG5cdFx0YUM6IGFkZENsYXNzLFxuXHRcdHJDOiByZW1vdmVDbGFzcyxcblx0XHRoQzogaGFzQ2xhc3MsXG5cdFx0ZmlyZTogdHJpZ2dlckV2ZW50LFxuXHRcdGdXOiBnZXRXaWR0aCxcblx0XHRyQUY6IHJBRixcblx0fTtcblxuXHRyZXR1cm4gbGF6eXNpemVzO1xufVxuKSk7XG5cbn0se31dLDM4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qIVxuICogVW5pZHJhZ2dlciB2My4wLjFcbiAqIERyYWdnYWJsZSBiYXNlIGNsYXNzXG4gKiBNSVQgbGljZW5zZVxuICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgICAgd2luZG93LFxuICAgICAgICByZXF1aXJlKCdldi1lbWl0dGVyJyksXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5VbmlkcmFnZ2VyID0gZmFjdG9yeShcbiAgICAgICAgd2luZG93LFxuICAgICAgICB3aW5kb3cuRXZFbWl0dGVyLFxuICAgICk7XG4gIH1cblxufSggdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgRXZFbWl0dGVyICkge1xuXG5mdW5jdGlvbiBVbmlkcmFnZ2VyKCkge31cblxuLy8gaW5oZXJpdCBFdkVtaXR0ZXJcbmxldCBwcm90byA9IFVuaWRyYWdnZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggRXZFbWl0dGVyLnByb3RvdHlwZSApO1xuXG4vLyAtLS0tLSBiaW5kIHN0YXJ0IC0tLS0tIC8vXG5cbi8vIHRyaWdnZXIgaGFuZGxlciBtZXRob2RzIGZvciBldmVudHNcbnByb3RvLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICBsZXQgbWV0aG9kID0gJ29uJyArIGV2ZW50LnR5cGU7XG4gIGlmICggdGhpc1sgbWV0aG9kIF0gKSB7XG4gICAgdGhpc1sgbWV0aG9kIF0oIGV2ZW50ICk7XG4gIH1cbn07XG5cbmxldCBzdGFydEV2ZW50LCBhY3RpdmVFdmVudHM7XG5pZiAoICdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyApIHtcbiAgLy8gSEFDSyBwcmVmZXIgVG91Y2ggRXZlbnRzIGFzIHlvdSBjYW4gcHJldmVudERlZmF1bHQgb24gdG91Y2hzdGFydCB0b1xuICAvLyBkaXNhYmxlIHNjcm9sbCBpbiBpT1MgJiBtb2JpbGUgQ2hyb21lIG1ldGFmaXp6eS9mbGlja2l0eSMxMTc3XG4gIHN0YXJ0RXZlbnQgPSAndG91Y2hzdGFydCc7XG4gIGFjdGl2ZUV2ZW50cyA9IFsgJ3RvdWNobW92ZScsICd0b3VjaGVuZCcsICd0b3VjaGNhbmNlbCcgXTtcbn0gZWxzZSBpZiAoIHdpbmRvdy5Qb2ludGVyRXZlbnQgKSB7XG4gIC8vIFBvaW50ZXIgRXZlbnRzXG4gIHN0YXJ0RXZlbnQgPSAncG9pbnRlcmRvd24nO1xuICBhY3RpdmVFdmVudHMgPSBbICdwb2ludGVybW92ZScsICdwb2ludGVydXAnLCAncG9pbnRlcmNhbmNlbCcgXTtcbn0gZWxzZSB7XG4gIC8vIG1vdXNlIGV2ZW50c1xuICBzdGFydEV2ZW50ID0gJ21vdXNlZG93bic7XG4gIGFjdGl2ZUV2ZW50cyA9IFsgJ21vdXNlbW92ZScsICdtb3VzZXVwJyBdO1xufVxuXG4vLyBwcm90b3R5cGUgc28gaXQgY2FuIGJlIG92ZXJ3cml0ZWFibGUgYnkgRmxpY2tpdHlcbnByb3RvLnRvdWNoQWN0aW9uVmFsdWUgPSAnbm9uZSc7XG5cbnByb3RvLmJpbmRIYW5kbGVzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2JpbmRIYW5kbGVzKCAnYWRkRXZlbnRMaXN0ZW5lcicsIHRoaXMudG91Y2hBY3Rpb25WYWx1ZSApO1xufTtcblxucHJvdG8udW5iaW5kSGFuZGxlcyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9iaW5kSGFuZGxlcyggJ3JlbW92ZUV2ZW50TGlzdGVuZXInLCAnJyApO1xufTtcblxuLyoqXG4gKiBBZGQgb3IgcmVtb3ZlIHN0YXJ0IGV2ZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gYmluZE1ldGhvZCAtIGFkZEV2ZW50TGlzdGVuZXIgb3IgcmVtb3ZlRXZlbnRMaXN0ZW5lclxuICogQHBhcmFtIHtTdHJpbmd9IHRvdWNoQWN0aW9uIC0gdmFsdWUgZm9yIHRvdWNoLWFjdGlvbiBDU1MgcHJvcGVydHlcbiAqL1xucHJvdG8uX2JpbmRIYW5kbGVzID0gZnVuY3Rpb24oIGJpbmRNZXRob2QsIHRvdWNoQWN0aW9uICkge1xuICB0aGlzLmhhbmRsZXMuZm9yRWFjaCggKCBoYW5kbGUgKSA9PiB7XG4gICAgaGFuZGxlWyBiaW5kTWV0aG9kIF0oIHN0YXJ0RXZlbnQsIHRoaXMgKTtcbiAgICBoYW5kbGVbIGJpbmRNZXRob2QgXSggJ2NsaWNrJywgdGhpcyApO1xuICAgIC8vIHRvdWNoLWFjdGlvbjogbm9uZSB0byBvdmVycmlkZSBicm93c2VyIHRvdWNoIGdlc3R1cmVzLiBtZXRhZml6enkvZmxpY2tpdHkjNTQwXG4gICAgaWYgKCB3aW5kb3cuUG9pbnRlckV2ZW50ICkgaGFuZGxlLnN0eWxlLnRvdWNoQWN0aW9uID0gdG91Y2hBY3Rpb247XG4gIH0gKTtcbn07XG5cbnByb3RvLmJpbmRBY3RpdmVQb2ludGVyRXZlbnRzID0gZnVuY3Rpb24oKSB7XG4gIGFjdGl2ZUV2ZW50cy5mb3JFYWNoKCAoIGV2ZW50TmFtZSApID0+IHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggZXZlbnROYW1lLCB0aGlzICk7XG4gIH0gKTtcbn07XG5cbnByb3RvLnVuYmluZEFjdGl2ZVBvaW50ZXJFdmVudHMgPSBmdW5jdGlvbigpIHtcbiAgYWN0aXZlRXZlbnRzLmZvckVhY2goICggZXZlbnROYW1lICkgPT4ge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBldmVudE5hbWUsIHRoaXMgKTtcbiAgfSApO1xufTtcblxuLy8gLS0tLS0gZXZlbnQgaGFuZGxlciBoZWxwZXJzIC0tLS0tIC8vXG5cbi8vIHRyaWdnZXIgbWV0aG9kIHdpdGggbWF0Y2hpbmcgcG9pbnRlclxucHJvdG8ud2l0aFBvaW50ZXIgPSBmdW5jdGlvbiggbWV0aG9kTmFtZSwgZXZlbnQgKSB7XG4gIGlmICggZXZlbnQucG9pbnRlcklkID09PSB0aGlzLnBvaW50ZXJJZGVudGlmaWVyICkge1xuICAgIHRoaXNbIG1ldGhvZE5hbWUgXSggZXZlbnQsIGV2ZW50ICk7XG4gIH1cbn07XG5cbi8vIHRyaWdnZXIgbWV0aG9kIHdpdGggbWF0Y2hpbmcgdG91Y2hcbnByb3RvLndpdGhUb3VjaCA9IGZ1bmN0aW9uKCBtZXRob2ROYW1lLCBldmVudCApIHtcbiAgbGV0IHRvdWNoO1xuICBmb3IgKCBsZXQgY2hhbmdlZFRvdWNoIG9mIGV2ZW50LmNoYW5nZWRUb3VjaGVzICkge1xuICAgIGlmICggY2hhbmdlZFRvdWNoLmlkZW50aWZpZXIgPT09IHRoaXMucG9pbnRlcklkZW50aWZpZXIgKSB7XG4gICAgICB0b3VjaCA9IGNoYW5nZWRUb3VjaDtcbiAgICB9XG4gIH1cbiAgaWYgKCB0b3VjaCApIHRoaXNbIG1ldGhvZE5hbWUgXSggZXZlbnQsIHRvdWNoICk7XG59O1xuXG4vLyAtLS0tLSBzdGFydCBldmVudCAtLS0tLSAvL1xuXG5wcm90by5vbm1vdXNlZG93biA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy5wb2ludGVyRG93biggZXZlbnQsIGV2ZW50ICk7XG59O1xuXG5wcm90by5vbnRvdWNoc3RhcnQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMucG9pbnRlckRvd24oIGV2ZW50LCBldmVudC5jaGFuZ2VkVG91Y2hlc1swXSApO1xufTtcblxucHJvdG8ub25wb2ludGVyZG93biA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy5wb2ludGVyRG93biggZXZlbnQsIGV2ZW50ICk7XG59O1xuXG4vLyBub2RlcyB0aGF0IGhhdmUgdGV4dCBmaWVsZHNcbmNvbnN0IGN1cnNvck5vZGVzID0gWyAnVEVYVEFSRUEnLCAnSU5QVVQnLCAnU0VMRUNUJywgJ09QVElPTicgXTtcbi8vIGlucHV0IHR5cGVzIHRoYXQgZG8gbm90IGhhdmUgdGV4dCBmaWVsZHNcbmNvbnN0IGNsaWNrVHlwZXMgPSBbICdyYWRpbycsICdjaGVja2JveCcsICdidXR0b24nLCAnc3VibWl0JywgJ2ltYWdlJywgJ2ZpbGUnIF07XG5cbi8qKlxuICogYW55IHRpbWUgeW91IHNldCBgZXZlbnQsIHBvaW50ZXJgIGl0IHJlZmVycyB0bzpcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gKiBAcGFyYW0ge0V2ZW50IHwgVG91Y2h9IHBvaW50ZXJcbiAqL1xucHJvdG8ucG9pbnRlckRvd24gPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIC8vIGRpc21pc3MgbXVsdGktdG91Y2ggdGFwcywgcmlnaHQgY2xpY2tzLCBhbmQgY2xpY2tzIG9uIHRleHQgZmllbGRzXG4gIGxldCBpc0N1cnNvck5vZGUgPSBjdXJzb3JOb2Rlcy5pbmNsdWRlcyggZXZlbnQudGFyZ2V0Lm5vZGVOYW1lICk7XG4gIGxldCBpc0NsaWNrVHlwZSA9IGNsaWNrVHlwZXMuaW5jbHVkZXMoIGV2ZW50LnRhcmdldC50eXBlICk7XG4gIGxldCBpc09rYXlFbGVtZW50ID0gIWlzQ3Vyc29yTm9kZSB8fCBpc0NsaWNrVHlwZTtcbiAgbGV0IGlzT2theSA9ICF0aGlzLmlzUG9pbnRlckRvd24gJiYgIWV2ZW50LmJ1dHRvbiAmJiBpc09rYXlFbGVtZW50O1xuICBpZiAoICFpc09rYXkgKSByZXR1cm47XG5cbiAgdGhpcy5pc1BvaW50ZXJEb3duID0gdHJ1ZTtcbiAgLy8gc2F2ZSBwb2ludGVyIGlkZW50aWZpZXIgdG8gbWF0Y2ggdXAgdG91Y2ggZXZlbnRzXG4gIHRoaXMucG9pbnRlcklkZW50aWZpZXIgPSBwb2ludGVyLnBvaW50ZXJJZCAhPT0gdW5kZWZpbmVkID9cbiAgICAvLyBwb2ludGVySWQgZm9yIHBvaW50ZXIgZXZlbnRzLCB0b3VjaC5pbmRlbnRpZmllciBmb3IgdG91Y2ggZXZlbnRzXG4gICAgcG9pbnRlci5wb2ludGVySWQgOiBwb2ludGVyLmlkZW50aWZpZXI7XG4gIC8vIHRyYWNrIHBvc2l0aW9uIGZvciBtb3ZlXG4gIHRoaXMucG9pbnRlckRvd25Qb2ludGVyID0ge1xuICAgIHBhZ2VYOiBwb2ludGVyLnBhZ2VYLFxuICAgIHBhZ2VZOiBwb2ludGVyLnBhZ2VZLFxuICB9O1xuXG4gIHRoaXMuYmluZEFjdGl2ZVBvaW50ZXJFdmVudHMoKTtcbiAgdGhpcy5lbWl0RXZlbnQoICdwb2ludGVyRG93bicsIFsgZXZlbnQsIHBvaW50ZXIgXSApO1xufTtcblxuLy8gLS0tLS0gbW92ZSAtLS0tLSAvL1xuXG5wcm90by5vbm1vdXNlbW92ZSA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy5wb2ludGVyTW92ZSggZXZlbnQsIGV2ZW50ICk7XG59O1xuXG5wcm90by5vbnBvaW50ZXJtb3ZlID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB0aGlzLndpdGhQb2ludGVyKCAncG9pbnRlck1vdmUnLCBldmVudCApO1xufTtcblxucHJvdG8ub250b3VjaG1vdmUgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMud2l0aFRvdWNoKCAncG9pbnRlck1vdmUnLCBldmVudCApO1xufTtcblxucHJvdG8ucG9pbnRlck1vdmUgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIGxldCBtb3ZlVmVjdG9yID0ge1xuICAgIHg6IHBvaW50ZXIucGFnZVggLSB0aGlzLnBvaW50ZXJEb3duUG9pbnRlci5wYWdlWCxcbiAgICB5OiBwb2ludGVyLnBhZ2VZIC0gdGhpcy5wb2ludGVyRG93blBvaW50ZXIucGFnZVksXG4gIH07XG4gIHRoaXMuZW1pdEV2ZW50KCAncG9pbnRlck1vdmUnLCBbIGV2ZW50LCBwb2ludGVyLCBtb3ZlVmVjdG9yIF0gKTtcbiAgLy8gc3RhcnQgZHJhZyBpZiBwb2ludGVyIGhhcyBtb3ZlZCBmYXIgZW5vdWdoIHRvIHN0YXJ0IGRyYWdcbiAgbGV0IGlzRHJhZ1N0YXJ0aW5nID0gIXRoaXMuaXNEcmFnZ2luZyAmJiB0aGlzLmhhc0RyYWdTdGFydGVkKCBtb3ZlVmVjdG9yICk7XG4gIGlmICggaXNEcmFnU3RhcnRpbmcgKSB0aGlzLmRyYWdTdGFydCggZXZlbnQsIHBvaW50ZXIgKTtcbiAgaWYgKCB0aGlzLmlzRHJhZ2dpbmcgKSB0aGlzLmRyYWdNb3ZlKCBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciApO1xufTtcblxuLy8gY29uZGl0aW9uIGlmIHBvaW50ZXIgaGFzIG1vdmVkIGZhciBlbm91Z2ggdG8gc3RhcnQgZHJhZ1xucHJvdG8uaGFzRHJhZ1N0YXJ0ZWQgPSBmdW5jdGlvbiggbW92ZVZlY3RvciApIHtcbiAgcmV0dXJuIE1hdGguYWJzKCBtb3ZlVmVjdG9yLnggKSA+IDMgfHwgTWF0aC5hYnMoIG1vdmVWZWN0b3IueSApID4gMztcbn07XG5cbi8vIC0tLS0tIGRyYWcgLS0tLS0gLy9cblxucHJvdG8uZHJhZ1N0YXJ0ID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB0aGlzLmlzRHJhZ2dpbmcgPSB0cnVlO1xuICB0aGlzLmlzUHJldmVudGluZ0NsaWNrcyA9IHRydWU7IC8vIHNldCBmbGFnIHRvIHByZXZlbnQgY2xpY2tzXG4gIHRoaXMuZW1pdEV2ZW50KCAnZHJhZ1N0YXJ0JywgWyBldmVudCwgcG9pbnRlciBdICk7XG59O1xuXG5wcm90by5kcmFnTW92ZSA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciApIHtcbiAgdGhpcy5lbWl0RXZlbnQoICdkcmFnTW92ZScsIFsgZXZlbnQsIHBvaW50ZXIsIG1vdmVWZWN0b3IgXSApO1xufTtcblxuLy8gLS0tLS0gZW5kIC0tLS0tIC8vXG5cbnByb3RvLm9ubW91c2V1cCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy5wb2ludGVyVXAoIGV2ZW50LCBldmVudCApO1xufTtcblxucHJvdG8ub25wb2ludGVydXAgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMud2l0aFBvaW50ZXIoICdwb2ludGVyVXAnLCBldmVudCApO1xufTtcblxucHJvdG8ub250b3VjaGVuZCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy53aXRoVG91Y2goICdwb2ludGVyVXAnLCBldmVudCApO1xufTtcblxucHJvdG8ucG9pbnRlclVwID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB0aGlzLnBvaW50ZXJEb25lKCk7XG4gIHRoaXMuZW1pdEV2ZW50KCAncG9pbnRlclVwJywgWyBldmVudCwgcG9pbnRlciBdICk7XG5cbiAgaWYgKCB0aGlzLmlzRHJhZ2dpbmcgKSB7XG4gICAgdGhpcy5kcmFnRW5kKCBldmVudCwgcG9pbnRlciApO1xuICB9IGVsc2Uge1xuICAgIC8vIHBvaW50ZXIgZGlkbid0IG1vdmUgZW5vdWdoIGZvciBkcmFnIHRvIHN0YXJ0XG4gICAgdGhpcy5zdGF0aWNDbGljayggZXZlbnQsIHBvaW50ZXIgKTtcbiAgfVxufTtcblxucHJvdG8uZHJhZ0VuZCA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7IC8vIHJlc2V0IGZsYWdcbiAgLy8gcmUtZW5hYmxlIGNsaWNraW5nIGFzeW5jXG4gIHNldFRpbWVvdXQoICgpID0+IGRlbGV0ZSB0aGlzLmlzUHJldmVudGluZ0NsaWNrcyApO1xuXG4gIHRoaXMuZW1pdEV2ZW50KCAnZHJhZ0VuZCcsIFsgZXZlbnQsIHBvaW50ZXIgXSApO1xufTtcblxuLy8gdHJpZ2dlcmVkIG9uIHBvaW50ZXIgdXAgJiBwb2ludGVyIGNhbmNlbFxucHJvdG8ucG9pbnRlckRvbmUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5pc1BvaW50ZXJEb3duID0gZmFsc2U7XG4gIGRlbGV0ZSB0aGlzLnBvaW50ZXJJZGVudGlmaWVyO1xuICB0aGlzLnVuYmluZEFjdGl2ZVBvaW50ZXJFdmVudHMoKTtcbiAgdGhpcy5lbWl0RXZlbnQoJ3BvaW50ZXJEb25lJyk7XG59O1xuXG4vLyAtLS0tLSBjYW5jZWwgLS0tLS0gLy9cblxucHJvdG8ub25wb2ludGVyY2FuY2VsID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB0aGlzLndpdGhQb2ludGVyKCAncG9pbnRlckNhbmNlbCcsIGV2ZW50ICk7XG59O1xuXG5wcm90by5vbnRvdWNoY2FuY2VsID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB0aGlzLndpdGhUb3VjaCggJ3BvaW50ZXJDYW5jZWwnLCBldmVudCApO1xufTtcblxucHJvdG8ucG9pbnRlckNhbmNlbCA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgdGhpcy5wb2ludGVyRG9uZSgpO1xuICB0aGlzLmVtaXRFdmVudCggJ3BvaW50ZXJDYW5jZWwnLCBbIGV2ZW50LCBwb2ludGVyIF0gKTtcbn07XG5cbi8vIC0tLS0tIGNsaWNrIC0tLS0tIC8vXG5cbi8vIGhhbmRsZSBhbGwgY2xpY2tzIGFuZCBwcmV2ZW50IGNsaWNrcyB3aGVuIGRyYWdnaW5nXG5wcm90by5vbmNsaWNrID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICBpZiAoIHRoaXMuaXNQcmV2ZW50aW5nQ2xpY2tzICkgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbn07XG5cbi8vIHRyaWdnZXJlZCBhZnRlciBwb2ludGVyIGRvd24gJiB1cCB3aXRoIG5vL3RpbnkgbW92ZW1lbnRcbnByb3RvLnN0YXRpY0NsaWNrID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICAvLyBpZ25vcmUgZW11bGF0ZWQgbW91c2UgdXAgY2xpY2tzXG4gIGxldCBpc01vdXNldXAgPSBldmVudC50eXBlID09PSAnbW91c2V1cCc7XG4gIGlmICggaXNNb3VzZXVwICYmIHRoaXMuaXNJZ25vcmluZ01vdXNlVXAgKSByZXR1cm47XG5cbiAgdGhpcy5lbWl0RXZlbnQoICdzdGF0aWNDbGljaycsIFsgZXZlbnQsIHBvaW50ZXIgXSApO1xuXG4gIC8vIHNldCBmbGFnIGZvciBlbXVsYXRlZCBjbGlja3MgMzAwbXMgYWZ0ZXIgdG91Y2hlbmRcbiAgaWYgKCBpc01vdXNldXAgKSB7XG4gICAgdGhpcy5pc0lnbm9yaW5nTW91c2VVcCA9IHRydWU7XG4gICAgLy8gcmVzZXQgZmxhZyBhZnRlciA0MDBtc1xuICAgIHNldFRpbWVvdXQoICgpID0+IHtcbiAgICAgIGRlbGV0ZSB0aGlzLmlzSWdub3JpbmdNb3VzZVVwO1xuICAgIH0sIDQwMCApO1xuICB9XG59O1xuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxucmV0dXJuIFVuaWRyYWdnZXI7XG5cbn0gKSApO1xuXG59LHtcImV2LWVtaXR0ZXJcIjoyfV0sMzk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuYXJndW1lbnRzWzRdWzddWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKVxufSx7XCJkdXBcIjo3fV0sNDA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyohXG4gKiBVbmlwb2ludGVyIHYyLjQuMFxuICogYmFzZSBjbGFzcyBmb3IgZG9pbmcgb25lIHRoaW5nIHdpdGggcG9pbnRlciBldmVudFxuICogTUlUIGxpY2Vuc2VcbiAqL1xuXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCB1bmRlZjogdHJ1ZSwgdW51c2VkOiB0cnVlLCBzdHJpY3Q6IHRydWUgKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgLyoganNoaW50IHN0cmljdDogZmFsc2UgKi8gLypnbG9iYWwgZGVmaW5lLCBtb2R1bGUsIHJlcXVpcmUgKi9cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIFtcbiAgICAgICdldi1lbWl0dGVyL2V2LWVtaXR0ZXInXG4gICAgXSwgZnVuY3Rpb24oIEV2RW1pdHRlciApIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIEV2RW1pdHRlciApO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgcmVxdWlyZSgnZXYtZW1pdHRlcicpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5Vbmlwb2ludGVyID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHdpbmRvdy5FdkVtaXR0ZXJcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBFdkVtaXR0ZXIgKSB7XG5cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmZ1bmN0aW9uIFVuaXBvaW50ZXIoKSB7fVxuXG4vLyBpbmhlcml0IEV2RW1pdHRlclxudmFyIHByb3RvID0gVW5pcG9pbnRlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBFdkVtaXR0ZXIucHJvdG90eXBlICk7XG5cbnByb3RvLmJpbmRTdGFydEV2ZW50ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIHRoaXMuX2JpbmRTdGFydEV2ZW50KCBlbGVtLCB0cnVlICk7XG59O1xuXG5wcm90by51bmJpbmRTdGFydEV2ZW50ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIHRoaXMuX2JpbmRTdGFydEV2ZW50KCBlbGVtLCBmYWxzZSApO1xufTtcblxuLyoqXG4gKiBBZGQgb3IgcmVtb3ZlIHN0YXJ0IGV2ZW50XG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzQWRkIC0gcmVtb3ZlIGlmIGZhbHNleVxuICovXG5wcm90by5fYmluZFN0YXJ0RXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgaXNBZGQgKSB7XG4gIC8vIG11bmdlIGlzQWRkLCBkZWZhdWx0IHRvIHRydWVcbiAgaXNBZGQgPSBpc0FkZCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGlzQWRkO1xuICB2YXIgYmluZE1ldGhvZCA9IGlzQWRkID8gJ2FkZEV2ZW50TGlzdGVuZXInIDogJ3JlbW92ZUV2ZW50TGlzdGVuZXInO1xuXG4gIC8vIGRlZmF1bHQgdG8gbW91c2UgZXZlbnRzXG4gIHZhciBzdGFydEV2ZW50ID0gJ21vdXNlZG93bic7XG4gIGlmICggJ29udG91Y2hzdGFydCcgaW4gd2luZG93ICkge1xuICAgIC8vIEhBQ0sgcHJlZmVyIFRvdWNoIEV2ZW50cyBhcyB5b3UgY2FuIHByZXZlbnREZWZhdWx0IG9uIHRvdWNoc3RhcnQgdG9cbiAgICAvLyBkaXNhYmxlIHNjcm9sbCBpbiBpT1MgJiBtb2JpbGUgQ2hyb21lIG1ldGFmaXp6eS9mbGlja2l0eSMxMTc3XG4gICAgc3RhcnRFdmVudCA9ICd0b3VjaHN0YXJ0JztcbiAgfSBlbHNlIGlmICggd2luZG93LlBvaW50ZXJFdmVudCApIHtcbiAgICAvLyBQb2ludGVyIEV2ZW50c1xuICAgIHN0YXJ0RXZlbnQgPSAncG9pbnRlcmRvd24nO1xuICB9XG4gIGVsZW1bIGJpbmRNZXRob2QgXSggc3RhcnRFdmVudCwgdGhpcyApO1xufTtcblxuLy8gdHJpZ2dlciBoYW5kbGVyIG1ldGhvZHMgZm9yIGV2ZW50c1xucHJvdG8uaGFuZGxlRXZlbnQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHZhciBtZXRob2QgPSAnb24nICsgZXZlbnQudHlwZTtcbiAgaWYgKCB0aGlzWyBtZXRob2QgXSApIHtcbiAgICB0aGlzWyBtZXRob2QgXSggZXZlbnQgKTtcbiAgfVxufTtcblxuLy8gcmV0dXJucyB0aGUgdG91Y2ggdGhhdCB3ZSdyZSBrZWVwaW5nIHRyYWNrIG9mXG5wcm90by5nZXRUb3VjaCA9IGZ1bmN0aW9uKCB0b3VjaGVzICkge1xuICBmb3IgKCB2YXIgaT0wOyBpIDwgdG91Y2hlcy5sZW5ndGg7IGkrKyApIHtcbiAgICB2YXIgdG91Y2ggPSB0b3VjaGVzW2ldO1xuICAgIGlmICggdG91Y2guaWRlbnRpZmllciA9PSB0aGlzLnBvaW50ZXJJZGVudGlmaWVyICkge1xuICAgICAgcmV0dXJuIHRvdWNoO1xuICAgIH1cbiAgfVxufTtcblxuLy8gLS0tLS0gc3RhcnQgZXZlbnQgLS0tLS0gLy9cblxucHJvdG8ub25tb3VzZWRvd24gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIC8vIGRpc21pc3MgY2xpY2tzIGZyb20gcmlnaHQgb3IgbWlkZGxlIGJ1dHRvbnNcbiAgdmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcbiAgaWYgKCBidXR0b24gJiYgKCBidXR0b24gIT09IDAgJiYgYnV0dG9uICE9PSAxICkgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMuX3BvaW50ZXJEb3duKCBldmVudCwgZXZlbnQgKTtcbn07XG5cbnByb3RvLm9udG91Y2hzdGFydCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy5fcG9pbnRlckRvd24oIGV2ZW50LCBldmVudC5jaGFuZ2VkVG91Y2hlc1swXSApO1xufTtcblxucHJvdG8ub25wb2ludGVyZG93biA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy5fcG9pbnRlckRvd24oIGV2ZW50LCBldmVudCApO1xufTtcblxuLyoqXG4gKiBwb2ludGVyIHN0YXJ0XG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICogQHBhcmFtIHtFdmVudCBvciBUb3VjaH0gcG9pbnRlclxuICovXG5wcm90by5fcG9pbnRlckRvd24gPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIC8vIGRpc21pc3MgcmlnaHQgY2xpY2sgYW5kIG90aGVyIHBvaW50ZXJzXG4gIC8vIGJ1dHRvbiA9IDAgaXMgb2theSwgMS00IG5vdFxuICBpZiAoIGV2ZW50LmJ1dHRvbiB8fCB0aGlzLmlzUG9pbnRlckRvd24gKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5pc1BvaW50ZXJEb3duID0gdHJ1ZTtcbiAgLy8gc2F2ZSBwb2ludGVyIGlkZW50aWZpZXIgdG8gbWF0Y2ggdXAgdG91Y2ggZXZlbnRzXG4gIHRoaXMucG9pbnRlcklkZW50aWZpZXIgPSBwb2ludGVyLnBvaW50ZXJJZCAhPT0gdW5kZWZpbmVkID9cbiAgICAvLyBwb2ludGVySWQgZm9yIHBvaW50ZXIgZXZlbnRzLCB0b3VjaC5pbmRlbnRpZmllciBmb3IgdG91Y2ggZXZlbnRzXG4gICAgcG9pbnRlci5wb2ludGVySWQgOiBwb2ludGVyLmlkZW50aWZpZXI7XG5cbiAgdGhpcy5wb2ludGVyRG93biggZXZlbnQsIHBvaW50ZXIgKTtcbn07XG5cbnByb3RvLnBvaW50ZXJEb3duID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB0aGlzLl9iaW5kUG9zdFN0YXJ0RXZlbnRzKCBldmVudCApO1xuICB0aGlzLmVtaXRFdmVudCggJ3BvaW50ZXJEb3duJywgWyBldmVudCwgcG9pbnRlciBdICk7XG59O1xuXG4vLyBoYXNoIG9mIGV2ZW50cyB0byBiZSBib3VuZCBhZnRlciBzdGFydCBldmVudFxudmFyIHBvc3RTdGFydEV2ZW50cyA9IHtcbiAgbW91c2Vkb3duOiBbICdtb3VzZW1vdmUnLCAnbW91c2V1cCcgXSxcbiAgdG91Y2hzdGFydDogWyAndG91Y2htb3ZlJywgJ3RvdWNoZW5kJywgJ3RvdWNoY2FuY2VsJyBdLFxuICBwb2ludGVyZG93bjogWyAncG9pbnRlcm1vdmUnLCAncG9pbnRlcnVwJywgJ3BvaW50ZXJjYW5jZWwnIF0sXG59O1xuXG5wcm90by5fYmluZFBvc3RTdGFydEV2ZW50cyA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgaWYgKCAhZXZlbnQgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGdldCBwcm9wZXIgZXZlbnRzIHRvIG1hdGNoIHN0YXJ0IGV2ZW50XG4gIHZhciBldmVudHMgPSBwb3N0U3RhcnRFdmVudHNbIGV2ZW50LnR5cGUgXTtcbiAgLy8gYmluZCBldmVudHMgdG8gbm9kZVxuICBldmVudHMuZm9yRWFjaCggZnVuY3Rpb24oIGV2ZW50TmFtZSApIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggZXZlbnROYW1lLCB0aGlzICk7XG4gIH0sIHRoaXMgKTtcbiAgLy8gc2F2ZSB0aGVzZSBhcmd1bWVudHNcbiAgdGhpcy5fYm91bmRQb2ludGVyRXZlbnRzID0gZXZlbnRzO1xufTtcblxucHJvdG8uX3VuYmluZFBvc3RTdGFydEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuICAvLyBjaGVjayBmb3IgX2JvdW5kRXZlbnRzLCBpbiBjYXNlIGRyYWdFbmQgdHJpZ2dlcmVkIHR3aWNlIChvbGQgSUU4IGJ1ZylcbiAgaWYgKCAhdGhpcy5fYm91bmRQb2ludGVyRXZlbnRzICkge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLl9ib3VuZFBvaW50ZXJFdmVudHMuZm9yRWFjaCggZnVuY3Rpb24oIGV2ZW50TmFtZSApIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggZXZlbnROYW1lLCB0aGlzICk7XG4gIH0sIHRoaXMgKTtcblxuICBkZWxldGUgdGhpcy5fYm91bmRQb2ludGVyRXZlbnRzO1xufTtcblxuLy8gLS0tLS0gbW92ZSBldmVudCAtLS0tLSAvL1xuXG5wcm90by5vbm1vdXNlbW92ZSA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy5fcG9pbnRlck1vdmUoIGV2ZW50LCBldmVudCApO1xufTtcblxucHJvdG8ub25wb2ludGVybW92ZSA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgaWYgKCBldmVudC5wb2ludGVySWQgPT0gdGhpcy5wb2ludGVySWRlbnRpZmllciApIHtcbiAgICB0aGlzLl9wb2ludGVyTW92ZSggZXZlbnQsIGV2ZW50ICk7XG4gIH1cbn07XG5cbnByb3RvLm9udG91Y2htb3ZlID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB2YXIgdG91Y2ggPSB0aGlzLmdldFRvdWNoKCBldmVudC5jaGFuZ2VkVG91Y2hlcyApO1xuICBpZiAoIHRvdWNoICkge1xuICAgIHRoaXMuX3BvaW50ZXJNb3ZlKCBldmVudCwgdG91Y2ggKTtcbiAgfVxufTtcblxuLyoqXG4gKiBwb2ludGVyIG1vdmVcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gKiBAcGFyYW0ge0V2ZW50IG9yIFRvdWNofSBwb2ludGVyXG4gKiBAcHJpdmF0ZVxuICovXG5wcm90by5fcG9pbnRlck1vdmUgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHRoaXMucG9pbnRlck1vdmUoIGV2ZW50LCBwb2ludGVyICk7XG59O1xuXG4vLyBwdWJsaWNcbnByb3RvLnBvaW50ZXJNb3ZlID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB0aGlzLmVtaXRFdmVudCggJ3BvaW50ZXJNb3ZlJywgWyBldmVudCwgcG9pbnRlciBdICk7XG59O1xuXG4vLyAtLS0tLSBlbmQgZXZlbnQgLS0tLS0gLy9cblxuXG5wcm90by5vbm1vdXNldXAgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMuX3BvaW50ZXJVcCggZXZlbnQsIGV2ZW50ICk7XG59O1xuXG5wcm90by5vbnBvaW50ZXJ1cCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgaWYgKCBldmVudC5wb2ludGVySWQgPT0gdGhpcy5wb2ludGVySWRlbnRpZmllciApIHtcbiAgICB0aGlzLl9wb2ludGVyVXAoIGV2ZW50LCBldmVudCApO1xuICB9XG59O1xuXG5wcm90by5vbnRvdWNoZW5kID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB2YXIgdG91Y2ggPSB0aGlzLmdldFRvdWNoKCBldmVudC5jaGFuZ2VkVG91Y2hlcyApO1xuICBpZiAoIHRvdWNoICkge1xuICAgIHRoaXMuX3BvaW50ZXJVcCggZXZlbnQsIHRvdWNoICk7XG4gIH1cbn07XG5cbi8qKlxuICogcG9pbnRlciB1cFxuICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAqIEBwYXJhbSB7RXZlbnQgb3IgVG91Y2h9IHBvaW50ZXJcbiAqIEBwcml2YXRlXG4gKi9cbnByb3RvLl9wb2ludGVyVXAgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHRoaXMuX3BvaW50ZXJEb25lKCk7XG4gIHRoaXMucG9pbnRlclVwKCBldmVudCwgcG9pbnRlciApO1xufTtcblxuLy8gcHVibGljXG5wcm90by5wb2ludGVyVXAgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHRoaXMuZW1pdEV2ZW50KCAncG9pbnRlclVwJywgWyBldmVudCwgcG9pbnRlciBdICk7XG59O1xuXG4vLyAtLS0tLSBwb2ludGVyIGRvbmUgLS0tLS0gLy9cblxuLy8gdHJpZ2dlcmVkIG9uIHBvaW50ZXIgdXAgJiBwb2ludGVyIGNhbmNlbFxucHJvdG8uX3BvaW50ZXJEb25lID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX3BvaW50ZXJSZXNldCgpO1xuICB0aGlzLl91bmJpbmRQb3N0U3RhcnRFdmVudHMoKTtcbiAgdGhpcy5wb2ludGVyRG9uZSgpO1xufTtcblxucHJvdG8uX3BvaW50ZXJSZXNldCA9IGZ1bmN0aW9uKCkge1xuICAvLyByZXNldCBwcm9wZXJ0aWVzXG4gIHRoaXMuaXNQb2ludGVyRG93biA9IGZhbHNlO1xuICBkZWxldGUgdGhpcy5wb2ludGVySWRlbnRpZmllcjtcbn07XG5cbnByb3RvLnBvaW50ZXJEb25lID0gbm9vcDtcblxuLy8gLS0tLS0gcG9pbnRlciBjYW5jZWwgLS0tLS0gLy9cblxucHJvdG8ub25wb2ludGVyY2FuY2VsID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICBpZiAoIGV2ZW50LnBvaW50ZXJJZCA9PSB0aGlzLnBvaW50ZXJJZGVudGlmaWVyICkge1xuICAgIHRoaXMuX3BvaW50ZXJDYW5jZWwoIGV2ZW50LCBldmVudCApO1xuICB9XG59O1xuXG5wcm90by5vbnRvdWNoY2FuY2VsID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB2YXIgdG91Y2ggPSB0aGlzLmdldFRvdWNoKCBldmVudC5jaGFuZ2VkVG91Y2hlcyApO1xuICBpZiAoIHRvdWNoICkge1xuICAgIHRoaXMuX3BvaW50ZXJDYW5jZWwoIGV2ZW50LCB0b3VjaCApO1xuICB9XG59O1xuXG4vKipcbiAqIHBvaW50ZXIgY2FuY2VsXG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICogQHBhcmFtIHtFdmVudCBvciBUb3VjaH0gcG9pbnRlclxuICogQHByaXZhdGVcbiAqL1xucHJvdG8uX3BvaW50ZXJDYW5jZWwgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHRoaXMuX3BvaW50ZXJEb25lKCk7XG4gIHRoaXMucG9pbnRlckNhbmNlbCggZXZlbnQsIHBvaW50ZXIgKTtcbn07XG5cbi8vIHB1YmxpY1xucHJvdG8ucG9pbnRlckNhbmNlbCA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgdGhpcy5lbWl0RXZlbnQoICdwb2ludGVyQ2FuY2VsJywgWyBldmVudCwgcG9pbnRlciBdICk7XG59O1xuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxuLy8gdXRpbGl0eSBmdW5jdGlvbiBmb3IgZ2V0dGluZyB4L3kgY29vcmRzIGZyb20gZXZlbnRcblVuaXBvaW50ZXIuZ2V0UG9pbnRlclBvaW50ID0gZnVuY3Rpb24oIHBvaW50ZXIgKSB7XG4gIHJldHVybiB7XG4gICAgeDogcG9pbnRlci5wYWdlWCxcbiAgICB5OiBwb2ludGVyLnBhZ2VZXG4gIH07XG59O1xuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxucmV0dXJuIFVuaXBvaW50ZXI7XG5cbn0pKTtcblxufSx7XCJldi1lbWl0dGVyXCI6Mzl9XSw0MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vLyB2ZW5kb3Jcclxud2luZG93LkZsaWNraXR5ID0gcmVxdWlyZSgnZmxpY2tpdHknKTtcclxucmVxdWlyZSgnbGF6eXNpemVzJyk7XHJcbnJlcXVpcmUoJ2ZsaWNraXR5LWltYWdlc2xvYWRlZCcpO1xyXG5yZXF1aXJlKCdmbGlja2l0eS1mdWxsc2NyZWVuJyk7XHJcbnJlcXVpcmUoJ2ZsaWNraXR5LWFzLW5hdi1mb3InKTtcclxuXHJcbi8vIG1vZHVsZXNcclxud2luZG93LlB1YlN1YiA9IHJlcXVpcmUoJy4vc2NyaXB0cy9wdWJzdWInKTtcclxuXHJcbmZ1bmN0aW9uIGRlYm91bmNlKGZuLCB3YWl0KSB7XHJcblx0bGV0IHQ7XHJcblx0cmV0dXJuICguLi5hcmdzKSA9PiB7XHJcblx0XHRjbGVhclRpbWVvdXQodCk7XHJcblx0XHR0ID0gc2V0VGltZW91dCgoKSA9PiBmbi5hcHBseSh0aGlzLCBhcmdzKSwgd2FpdCk7XHJcblx0fTtcclxufVxyXG5cclxuXHJcblxufSx7XCIuL3NjcmlwdHMvcHVic3ViXCI6NDIsXCJmbGlja2l0eVwiOjI5LFwiZmxpY2tpdHktYXMtbmF2LWZvclwiOjQsXCJmbGlja2l0eS1mdWxsc2NyZWVuXCI6NSxcImZsaWNraXR5LWltYWdlc2xvYWRlZFwiOjYsXCJsYXp5c2l6ZXNcIjozN31dLDQyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdEVWRU5UUzoge1xyXG5cdFx0Y2FydFVwZGF0ZWQ6ICdjYXJ0LXVwZGF0ZWQnXHJcblx0fSxcclxuXHRzdWJzY3JpYmVyczoge30sXHJcblx0c3Vic2NyaWJlOiBmdW5jdGlvbiAoZXZlbnROYW1lLCBjYWxsYmFjaykge1xyXG5cdFx0aWYgKHRoaXMuc3Vic2NyaWJlcnNbZXZlbnROYW1lXSA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdHRoaXMuc3Vic2NyaWJlcnNbZXZlbnROYW1lXSA9IFtdO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuc3Vic2NyaWJlcnNbZXZlbnROYW1lXSA9IFsuLi50aGlzLnN1YnNjcmliZXJzW2V2ZW50TmFtZV0sIGNhbGxiYWNrXTtcclxuXHJcblx0XHRyZXR1cm4gKCkgPT4ge1xyXG5cdFx0XHR0aGlzLnN1YnNjcmliZXJzW2V2ZW50TmFtZV0gPSB0aGlzLnN1YnNjcmliZXJzW2V2ZW50TmFtZV0uZmlsdGVyKChjYikgPT4ge1xyXG5cdFx0XHRcdHJldHVybiBjYiAhPT0gY2FsbGJhY2s7XHJcblx0XHRcdH0pO1xyXG5cdFx0fTtcclxuXHR9LFxyXG5cdHB1Ymxpc2g6IGZ1bmN0aW9uIChldmVudE5hbWUsIGRhdGEpIHtcclxuXHRcdGlmICh0aGlzLnN1YnNjcmliZXJzW2V2ZW50TmFtZV0pIHtcclxuXHRcdFx0dGhpcy5zdWJzY3JpYmVyc1tldmVudE5hbWVdLmZvckVhY2goKGNhbGxiYWNrKSA9PiB7XHJcblx0XHRcdFx0Y2FsbGJhY2soZGF0YSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cbn0se31dfSx7fSxbNDFdKVxuXG4iLCIvKipcbiAqIEV2RW1pdHRlciB2Mi4xLjFcbiAqIExpbCcgZXZlbnQgZW1pdHRlclxuICogTUlUIExpY2Vuc2VcbiAqL1xuXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlMgLSBCcm93c2VyaWZ5LCBXZWJwYWNrXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQnJvd3NlciBnbG9iYWxzXG4gICAgZ2xvYmFsLkV2RW1pdHRlciA9IGZhY3RvcnkoKTtcbiAgfVxuXG59KCB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oKSB7XG5cbmZ1bmN0aW9uIEV2RW1pdHRlcigpIHt9XG5cbmxldCBwcm90byA9IEV2RW1pdHRlci5wcm90b3R5cGU7XG5cbnByb3RvLm9uID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKSB7XG4gIGlmICggIWV2ZW50TmFtZSB8fCAhbGlzdGVuZXIgKSByZXR1cm4gdGhpcztcblxuICAvLyBzZXQgZXZlbnRzIGhhc2hcbiAgbGV0IGV2ZW50cyA9IHRoaXMuX2V2ZW50cyA9IHRoaXMuX2V2ZW50cyB8fCB7fTtcbiAgLy8gc2V0IGxpc3RlbmVycyBhcnJheVxuICBsZXQgbGlzdGVuZXJzID0gZXZlbnRzWyBldmVudE5hbWUgXSA9IGV2ZW50c1sgZXZlbnROYW1lIF0gfHwgW107XG4gIC8vIG9ubHkgYWRkIG9uY2VcbiAgaWYgKCAhbGlzdGVuZXJzLmluY2x1ZGVzKCBsaXN0ZW5lciApICkge1xuICAgIGxpc3RlbmVycy5wdXNoKCBsaXN0ZW5lciApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5vbmNlID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKSB7XG4gIGlmICggIWV2ZW50TmFtZSB8fCAhbGlzdGVuZXIgKSByZXR1cm4gdGhpcztcblxuICAvLyBhZGQgZXZlbnRcbiAgdGhpcy5vbiggZXZlbnROYW1lLCBsaXN0ZW5lciApO1xuICAvLyBzZXQgb25jZSBmbGFnXG4gIC8vIHNldCBvbmNlRXZlbnRzIGhhc2hcbiAgbGV0IG9uY2VFdmVudHMgPSB0aGlzLl9vbmNlRXZlbnRzID0gdGhpcy5fb25jZUV2ZW50cyB8fCB7fTtcbiAgLy8gc2V0IG9uY2VMaXN0ZW5lcnMgb2JqZWN0XG4gIGxldCBvbmNlTGlzdGVuZXJzID0gb25jZUV2ZW50c1sgZXZlbnROYW1lIF0gPSBvbmNlRXZlbnRzWyBldmVudE5hbWUgXSB8fCB7fTtcbiAgLy8gc2V0IGZsYWdcbiAgb25jZUxpc3RlbmVyc1sgbGlzdGVuZXIgXSA9IHRydWU7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5vZmYgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBsaXN0ZW5lciApIHtcbiAgbGV0IGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50cyAmJiB0aGlzLl9ldmVudHNbIGV2ZW50TmFtZSBdO1xuICBpZiAoICFsaXN0ZW5lcnMgfHwgIWxpc3RlbmVycy5sZW5ndGggKSByZXR1cm4gdGhpcztcblxuICBsZXQgaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZiggbGlzdGVuZXIgKTtcbiAgaWYgKCBpbmRleCAhPSAtMSApIHtcbiAgICBsaXN0ZW5lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5lbWl0RXZlbnQgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBhcmdzICkge1xuICBsZXQgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzICYmIHRoaXMuX2V2ZW50c1sgZXZlbnROYW1lIF07XG4gIGlmICggIWxpc3RlbmVycyB8fCAhbGlzdGVuZXJzLmxlbmd0aCApIHJldHVybiB0aGlzO1xuXG4gIC8vIGNvcHkgb3ZlciB0byBhdm9pZCBpbnRlcmZlcmVuY2UgaWYgLm9mZigpIGluIGxpc3RlbmVyXG4gIGxpc3RlbmVycyA9IGxpc3RlbmVycy5zbGljZSggMCApO1xuICBhcmdzID0gYXJncyB8fCBbXTtcbiAgLy8gb25jZSBzdHVmZlxuICBsZXQgb25jZUxpc3RlbmVycyA9IHRoaXMuX29uY2VFdmVudHMgJiYgdGhpcy5fb25jZUV2ZW50c1sgZXZlbnROYW1lIF07XG5cbiAgZm9yICggbGV0IGxpc3RlbmVyIG9mIGxpc3RlbmVycyApIHtcbiAgICBsZXQgaXNPbmNlID0gb25jZUxpc3RlbmVycyAmJiBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdO1xuICAgIGlmICggaXNPbmNlICkge1xuICAgICAgLy8gcmVtb3ZlIGxpc3RlbmVyXG4gICAgICAvLyByZW1vdmUgYmVmb3JlIHRyaWdnZXIgdG8gcHJldmVudCByZWN1cnNpb25cbiAgICAgIHRoaXMub2ZmKCBldmVudE5hbWUsIGxpc3RlbmVyICk7XG4gICAgICAvLyB1bnNldCBvbmNlIGZsYWdcbiAgICAgIGRlbGV0ZSBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdO1xuICAgIH1cbiAgICAvLyB0cmlnZ2VyIGxpc3RlbmVyXG4gICAgbGlzdGVuZXIuYXBwbHkoIHRoaXMsIGFyZ3MgKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG8uYWxsT2ZmID0gZnVuY3Rpb24oKSB7XG4gIGRlbGV0ZSB0aGlzLl9ldmVudHM7XG4gIGRlbGV0ZSB0aGlzLl9vbmNlRXZlbnRzO1xuICByZXR1cm4gdGhpcztcbn07XG5cbnJldHVybiBFdkVtaXR0ZXI7XG5cbn0gKSApO1xuIiwiLyoqXG4gKiBGaXp6eSBVSSB1dGlscyB2My4wLjBcbiAqIE1JVCBsaWNlbnNlXG4gKi9cblxuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCBnbG9iYWwgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIGdsb2JhbC5maXp6eVVJVXRpbHMgPSBmYWN0b3J5KCBnbG9iYWwgKTtcbiAgfVxuXG59KCB0aGlzLCBmdW5jdGlvbiBmYWN0b3J5KCBnbG9iYWwgKSB7XG5cbmxldCB1dGlscyA9IHt9O1xuXG4vLyAtLS0tLSBleHRlbmQgLS0tLS0gLy9cblxuLy8gZXh0ZW5kcyBvYmplY3RzXG51dGlscy5leHRlbmQgPSBmdW5jdGlvbiggYSwgYiApIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oIGEsIGIgKTtcbn07XG5cbi8vIC0tLS0tIG1vZHVsbyAtLS0tLSAvL1xuXG51dGlscy5tb2R1bG8gPSBmdW5jdGlvbiggbnVtLCBkaXYgKSB7XG4gIHJldHVybiAoICggbnVtICUgZGl2ICkgKyBkaXYgKSAlIGRpdjtcbn07XG5cbi8vIC0tLS0tIG1ha2VBcnJheSAtLS0tLSAvL1xuXG4vLyB0dXJuIGVsZW1lbnQgb3Igbm9kZUxpc3QgaW50byBhbiBhcnJheVxudXRpbHMubWFrZUFycmF5ID0gZnVuY3Rpb24oIG9iaiApIHtcbiAgLy8gdXNlIG9iamVjdCBpZiBhbHJlYWR5IGFuIGFycmF5XG4gIGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSByZXR1cm4gb2JqO1xuXG4gIC8vIHJldHVybiBlbXB0eSBhcnJheSBpZiB1bmRlZmluZWQgb3IgbnVsbC4gIzZcbiAgaWYgKCBvYmogPT09IG51bGwgfHwgb2JqID09PSB1bmRlZmluZWQgKSByZXR1cm4gW107XG5cbiAgbGV0IGlzQXJyYXlMaWtlID0gdHlwZW9mIG9iaiA9PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqLmxlbmd0aCA9PSAnbnVtYmVyJztcbiAgLy8gY29udmVydCBub2RlTGlzdCB0byBhcnJheVxuICBpZiAoIGlzQXJyYXlMaWtlICkgcmV0dXJuIFsgLi4ub2JqIF07XG5cbiAgLy8gYXJyYXkgb2Ygc2luZ2xlIGluZGV4XG4gIHJldHVybiBbIG9iaiBdO1xufTtcblxuLy8gLS0tLS0gcmVtb3ZlRnJvbSAtLS0tLSAvL1xuXG51dGlscy5yZW1vdmVGcm9tID0gZnVuY3Rpb24oIGFyeSwgb2JqICkge1xuICBsZXQgaW5kZXggPSBhcnkuaW5kZXhPZiggb2JqICk7XG4gIGlmICggaW5kZXggIT0gLTEgKSB7XG4gICAgYXJ5LnNwbGljZSggaW5kZXgsIDEgKTtcbiAgfVxufTtcblxuLy8gLS0tLS0gZ2V0UGFyZW50IC0tLS0tIC8vXG5cbnV0aWxzLmdldFBhcmVudCA9IGZ1bmN0aW9uKCBlbGVtLCBzZWxlY3RvciApIHtcbiAgd2hpbGUgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbSAhPSBkb2N1bWVudC5ib2R5ICkge1xuICAgIGVsZW0gPSBlbGVtLnBhcmVudE5vZGU7XG4gICAgaWYgKCBlbGVtLm1hdGNoZXMoIHNlbGVjdG9yICkgKSByZXR1cm4gZWxlbTtcbiAgfVxufTtcblxuLy8gLS0tLS0gZ2V0UXVlcnlFbGVtZW50IC0tLS0tIC8vXG5cbi8vIHVzZSBlbGVtZW50IGFzIHNlbGVjdG9yIHN0cmluZ1xudXRpbHMuZ2V0UXVlcnlFbGVtZW50ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIGlmICggdHlwZW9mIGVsZW0gPT0gJ3N0cmluZycgKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIGVsZW0gKTtcbiAgfVxuICByZXR1cm4gZWxlbTtcbn07XG5cbi8vIC0tLS0tIGhhbmRsZUV2ZW50IC0tLS0tIC8vXG5cbi8vIGVuYWJsZSAub250eXBlIHRvIHRyaWdnZXIgZnJvbSAuYWRkRXZlbnRMaXN0ZW5lciggZWxlbSwgJ3R5cGUnIClcbnV0aWxzLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICBsZXQgbWV0aG9kID0gJ29uJyArIGV2ZW50LnR5cGU7XG4gIGlmICggdGhpc1sgbWV0aG9kIF0gKSB7XG4gICAgdGhpc1sgbWV0aG9kIF0oIGV2ZW50ICk7XG4gIH1cbn07XG5cbi8vIC0tLS0tIGZpbHRlckZpbmRFbGVtZW50cyAtLS0tLSAvL1xuXG51dGlscy5maWx0ZXJGaW5kRWxlbWVudHMgPSBmdW5jdGlvbiggZWxlbXMsIHNlbGVjdG9yICkge1xuICAvLyBtYWtlIGFycmF5IG9mIGVsZW1zXG4gIGVsZW1zID0gdXRpbHMubWFrZUFycmF5KCBlbGVtcyApO1xuXG4gIHJldHVybiBlbGVtc1xuICAgIC8vIGNoZWNrIHRoYXQgZWxlbSBpcyBhbiBhY3R1YWwgZWxlbWVudFxuICAgIC5maWx0ZXIoICggZWxlbSApID0+IGVsZW0gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCApXG4gICAgLnJlZHVjZSggKCBmZkVsZW1zLCBlbGVtICkgPT4ge1xuICAgICAgLy8gYWRkIGVsZW0gaWYgbm8gc2VsZWN0b3JcbiAgICAgIGlmICggIXNlbGVjdG9yICkge1xuICAgICAgICBmZkVsZW1zLnB1c2goIGVsZW0gKTtcbiAgICAgICAgcmV0dXJuIGZmRWxlbXM7XG4gICAgICB9XG4gICAgICAvLyBmaWx0ZXIgJiBmaW5kIGl0ZW1zIGlmIHdlIGhhdmUgYSBzZWxlY3RvclxuICAgICAgLy8gZmlsdGVyXG4gICAgICBpZiAoIGVsZW0ubWF0Y2hlcyggc2VsZWN0b3IgKSApIHtcbiAgICAgICAgZmZFbGVtcy5wdXNoKCBlbGVtICk7XG4gICAgICB9XG4gICAgICAvLyBmaW5kIGNoaWxkcmVuXG4gICAgICBsZXQgY2hpbGRFbGVtcyA9IGVsZW0ucXVlcnlTZWxlY3RvckFsbCggc2VsZWN0b3IgKTtcbiAgICAgIC8vIGNvbmNhdCBjaGlsZEVsZW1zIHRvIGZpbHRlckZvdW5kIGFycmF5XG4gICAgICBmZkVsZW1zID0gZmZFbGVtcy5jb25jYXQoIC4uLmNoaWxkRWxlbXMgKTtcbiAgICAgIHJldHVybiBmZkVsZW1zO1xuICAgIH0sIFtdICk7XG59O1xuXG4vLyAtLS0tLSBkZWJvdW5jZU1ldGhvZCAtLS0tLSAvL1xuXG51dGlscy5kZWJvdW5jZU1ldGhvZCA9IGZ1bmN0aW9uKCBfY2xhc3MsIG1ldGhvZE5hbWUsIHRocmVzaG9sZCApIHtcbiAgdGhyZXNob2xkID0gdGhyZXNob2xkIHx8IDEwMDtcbiAgLy8gb3JpZ2luYWwgbWV0aG9kXG4gIGxldCBtZXRob2QgPSBfY2xhc3MucHJvdG90eXBlWyBtZXRob2ROYW1lIF07XG4gIGxldCB0aW1lb3V0TmFtZSA9IG1ldGhvZE5hbWUgKyAnVGltZW91dCc7XG5cbiAgX2NsYXNzLnByb3RvdHlwZVsgbWV0aG9kTmFtZSBdID0gZnVuY3Rpb24oKSB7XG4gICAgY2xlYXJUaW1lb3V0KCB0aGlzWyB0aW1lb3V0TmFtZSBdICk7XG5cbiAgICBsZXQgYXJncyA9IGFyZ3VtZW50cztcbiAgICB0aGlzWyB0aW1lb3V0TmFtZSBdID0gc2V0VGltZW91dCggKCkgPT4ge1xuICAgICAgbWV0aG9kLmFwcGx5KCB0aGlzLCBhcmdzICk7XG4gICAgICBkZWxldGUgdGhpc1sgdGltZW91dE5hbWUgXTtcbiAgICB9LCB0aHJlc2hvbGQgKTtcbiAgfTtcbn07XG5cbi8vIC0tLS0tIGRvY1JlYWR5IC0tLS0tIC8vXG5cbnV0aWxzLmRvY1JlYWR5ID0gZnVuY3Rpb24oIG9uRG9jUmVhZHkgKSB7XG4gIGxldCByZWFkeVN0YXRlID0gZG9jdW1lbnQucmVhZHlTdGF0ZTtcbiAgaWYgKCByZWFkeVN0YXRlID09ICdjb21wbGV0ZScgfHwgcmVhZHlTdGF0ZSA9PSAnaW50ZXJhY3RpdmUnICkge1xuICAgIC8vIGRvIGFzeW5jIHRvIGFsbG93IGZvciBvdGhlciBzY3JpcHRzIHRvIHJ1bi4gbWV0YWZpenp5L2ZsaWNraXR5IzQ0MVxuICAgIHNldFRpbWVvdXQoIG9uRG9jUmVhZHkgKTtcbiAgfSBlbHNlIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCAnRE9NQ29udGVudExvYWRlZCcsIG9uRG9jUmVhZHkgKTtcbiAgfVxufTtcblxuLy8gLS0tLS0gaHRtbEluaXQgLS0tLS0gLy9cblxuLy8gaHR0cDovL2JpdC5seS8zb1lMdXNjXG51dGlscy50b0Rhc2hlZCA9IGZ1bmN0aW9uKCBzdHIgKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSggLyguKShbQS1aXSkvZywgZnVuY3Rpb24oIG1hdGNoLCAkMSwgJDIgKSB7XG4gICAgcmV0dXJuICQxICsgJy0nICsgJDI7XG4gIH0gKS50b0xvd2VyQ2FzZSgpO1xufTtcblxubGV0IGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZTtcblxuLy8gYWxsb3cgdXNlciB0byBpbml0aWFsaXplIGNsYXNzZXMgdmlhIFtkYXRhLW5hbWVzcGFjZV0gb3IgLmpzLW5hbWVzcGFjZSBjbGFzc1xuLy8gaHRtbEluaXQoIFdpZGdldCwgJ3dpZGdldE5hbWUnIClcbi8vIG9wdGlvbnMgYXJlIHBhcnNlZCBmcm9tIGRhdGEtbmFtZXNwYWNlLW9wdGlvbnNcbnV0aWxzLmh0bWxJbml0ID0gZnVuY3Rpb24oIFdpZGdldENsYXNzLCBuYW1lc3BhY2UgKSB7XG4gIHV0aWxzLmRvY1JlYWR5KCBmdW5jdGlvbigpIHtcbiAgICBsZXQgZGFzaGVkTmFtZXNwYWNlID0gdXRpbHMudG9EYXNoZWQoIG5hbWVzcGFjZSApO1xuICAgIGxldCBkYXRhQXR0ciA9ICdkYXRhLScgKyBkYXNoZWROYW1lc3BhY2U7XG4gICAgbGV0IGRhdGFBdHRyRWxlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCBgWyR7ZGF0YUF0dHJ9XWAgKTtcbiAgICBsZXQgalF1ZXJ5ID0gZ2xvYmFsLmpRdWVyeTtcblxuICAgIFsgLi4uZGF0YUF0dHJFbGVtcyBdLmZvckVhY2goICggZWxlbSApID0+IHtcbiAgICAgIGxldCBhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoIGRhdGFBdHRyICk7XG4gICAgICBsZXQgb3B0aW9ucztcbiAgICAgIHRyeSB7XG4gICAgICAgIG9wdGlvbnMgPSBhdHRyICYmIEpTT04ucGFyc2UoIGF0dHIgKTtcbiAgICAgIH0gY2F0Y2ggKCBlcnJvciApIHtcbiAgICAgICAgLy8gbG9nIGVycm9yLCBkbyBub3QgaW5pdGlhbGl6ZVxuICAgICAgICBpZiAoIGNvbnNvbGUgKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvciggYEVycm9yIHBhcnNpbmcgJHtkYXRhQXR0cn0gb24gJHtlbGVtLmNsYXNzTmFtZX06ICR7ZXJyb3J9YCApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIGluaXRpYWxpemVcbiAgICAgIGxldCBpbnN0YW5jZSA9IG5ldyBXaWRnZXRDbGFzcyggZWxlbSwgb3B0aW9ucyApO1xuICAgICAgLy8gbWFrZSBhdmFpbGFibGUgdmlhICQoKS5kYXRhKCduYW1lc3BhY2UnKVxuICAgICAgaWYgKCBqUXVlcnkgKSB7XG4gICAgICAgIGpRdWVyeS5kYXRhKCBlbGVtLCBuYW1lc3BhY2UsIGluc3RhbmNlICk7XG4gICAgICB9XG4gICAgfSApO1xuXG4gIH0gKTtcbn07XG5cbi8vIC0tLS0tICAtLS0tLSAvL1xuXG5yZXR1cm4gdXRpbHM7XG5cbn0gKSApO1xuIiwiLyohXG4gKiBGbGlja2l0eSBhc05hdkZvciB2My4wLjBcbiAqIGVuYWJsZSBhc05hdkZvciBmb3IgRmxpY2tpdHlcbiAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICAgIHJlcXVpcmUoJ2ZsaWNraXR5JyksXG4gICAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJyksXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5GbGlja2l0eSA9IGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdy5GbGlja2l0eSxcbiAgICAgICAgd2luZG93LmZpenp5VUlVdGlscyxcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggRmxpY2tpdHksIHV0aWxzICkge1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBhc05hdkZvciBwcm90b3R5cGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLy8gRmxpY2tpdHkuZGVmYXVsdHMuYXNOYXZGb3IgPSBudWxsO1xuXG5GbGlja2l0eS5jcmVhdGUuYXNOYXZGb3IgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5vbiggJ2FjdGl2YXRlJywgdGhpcy5hY3RpdmF0ZUFzTmF2Rm9yICk7XG4gIHRoaXMub24oICdkZWFjdGl2YXRlJywgdGhpcy5kZWFjdGl2YXRlQXNOYXZGb3IgKTtcbiAgdGhpcy5vbiggJ2Rlc3Ryb3knLCB0aGlzLmRlc3Ryb3lBc05hdkZvciApO1xuXG4gIGxldCBhc05hdkZvck9wdGlvbiA9IHRoaXMub3B0aW9ucy5hc05hdkZvcjtcbiAgaWYgKCAhYXNOYXZGb3JPcHRpb24gKSByZXR1cm47XG5cbiAgLy8gSEFDSyBkbyBhc3luYywgZ2l2ZSB0aW1lIGZvciBvdGhlciBmbGlja2l0eSB0byBiZSBpbml0YWxpemVkXG4gIHNldFRpbWVvdXQoICgpID0+IHtcbiAgICB0aGlzLnNldE5hdkNvbXBhbmlvbiggYXNOYXZGb3JPcHRpb24gKTtcbiAgfSApO1xufTtcblxubGV0IHByb3RvID0gRmxpY2tpdHkucHJvdG90eXBlO1xuXG5wcm90by5zZXROYXZDb21wYW5pb24gPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgZWxlbSA9IHV0aWxzLmdldFF1ZXJ5RWxlbWVudCggZWxlbSApO1xuICBsZXQgY29tcGFuaW9uID0gRmxpY2tpdHkuZGF0YSggZWxlbSApO1xuICAvLyBzdG9wIGlmIG5vIGNvbXBhbmlvbiBvciBjb21wYW5pb24gaXMgc2VsZlxuICBpZiAoICFjb21wYW5pb24gfHwgY29tcGFuaW9uID09PSB0aGlzICkgcmV0dXJuO1xuXG4gIHRoaXMubmF2Q29tcGFuaW9uID0gY29tcGFuaW9uO1xuICAvLyBjb21wYW5pb24gc2VsZWN0XG4gIHRoaXMub25OYXZDb21wYW5pb25TZWxlY3QgPSAoKSA9PiB7XG4gICAgdGhpcy5uYXZDb21wYW5pb25TZWxlY3QoKTtcbiAgfTtcbiAgY29tcGFuaW9uLm9uKCAnc2VsZWN0JywgdGhpcy5vbk5hdkNvbXBhbmlvblNlbGVjdCApO1xuICAvLyBjbGlja1xuICB0aGlzLm9uKCAnc3RhdGljQ2xpY2snLCB0aGlzLm9uTmF2U3RhdGljQ2xpY2sgKTtcblxuICB0aGlzLm5hdkNvbXBhbmlvblNlbGVjdCggdHJ1ZSApO1xufTtcblxucHJvdG8ubmF2Q29tcGFuaW9uU2VsZWN0ID0gZnVuY3Rpb24oIGlzSW5zdGFudCApIHtcbiAgLy8gd2FpdCBmb3IgY29tcGFuaW9uICYgc2VsZWN0ZWRDZWxscyBmaXJzdC4gIzhcbiAgbGV0IGNvbXBhbmlvbkNlbGxzID0gdGhpcy5uYXZDb21wYW5pb24gJiYgdGhpcy5uYXZDb21wYW5pb24uc2VsZWN0ZWRDZWxscztcbiAgaWYgKCAhY29tcGFuaW9uQ2VsbHMgKSByZXR1cm47XG5cbiAgLy8gc2VsZWN0IHNsaWRlIHRoYXQgbWF0Y2hlcyBmaXJzdCBjZWxsIG9mIHNsaWRlXG4gIGxldCBzZWxlY3RlZENlbGwgPSBjb21wYW5pb25DZWxsc1swXTtcbiAgbGV0IGZpcnN0SW5kZXggPSB0aGlzLm5hdkNvbXBhbmlvbi5jZWxscy5pbmRleE9mKCBzZWxlY3RlZENlbGwgKTtcbiAgbGV0IGxhc3RJbmRleCA9IGZpcnN0SW5kZXggKyBjb21wYW5pb25DZWxscy5sZW5ndGggLSAxO1xuICBsZXQgc2VsZWN0SW5kZXggPSBNYXRoLmZsb29yKCBsZXJwKCBmaXJzdEluZGV4LCBsYXN0SW5kZXgsXG4gICAgICB0aGlzLm5hdkNvbXBhbmlvbi5jZWxsQWxpZ24gKSApO1xuICB0aGlzLnNlbGVjdENlbGwoIHNlbGVjdEluZGV4LCBmYWxzZSwgaXNJbnN0YW50ICk7XG4gIC8vIHNldCBuYXYgc2VsZWN0ZWQgY2xhc3NcbiAgdGhpcy5yZW1vdmVOYXZTZWxlY3RlZEVsZW1lbnRzKCk7XG4gIC8vIHN0b3AgaWYgY29tcGFuaW9uIGhhcyBtb3JlIGNlbGxzIHRoYW4gdGhpcyBvbmVcbiAgaWYgKCBzZWxlY3RJbmRleCA+PSB0aGlzLmNlbGxzLmxlbmd0aCApIHJldHVybjtcblxuICBsZXQgc2VsZWN0ZWRDZWxscyA9IHRoaXMuY2VsbHMuc2xpY2UoIGZpcnN0SW5kZXgsIGxhc3RJbmRleCArIDEgKTtcbiAgdGhpcy5uYXZTZWxlY3RlZEVsZW1lbnRzID0gc2VsZWN0ZWRDZWxscy5tYXAoICggY2VsbCApID0+IGNlbGwuZWxlbWVudCApO1xuICB0aGlzLmNoYW5nZU5hdlNlbGVjdGVkQ2xhc3MoJ2FkZCcpO1xufTtcblxuZnVuY3Rpb24gbGVycCggYSwgYiwgdCApIHtcbiAgcmV0dXJuICggYiAtIGEgKSAqIHQgKyBhO1xufVxuXG5wcm90by5jaGFuZ2VOYXZTZWxlY3RlZENsYXNzID0gZnVuY3Rpb24oIG1ldGhvZCApIHtcbiAgdGhpcy5uYXZTZWxlY3RlZEVsZW1lbnRzLmZvckVhY2goIGZ1bmN0aW9uKCBuYXZFbGVtICkge1xuICAgIG5hdkVsZW0uY2xhc3NMaXN0WyBtZXRob2QgXSgnaXMtbmF2LXNlbGVjdGVkJyk7XG4gIH0gKTtcbn07XG5cbnByb3RvLmFjdGl2YXRlQXNOYXZGb3IgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5uYXZDb21wYW5pb25TZWxlY3QoIHRydWUgKTtcbn07XG5cbnByb3RvLnJlbW92ZU5hdlNlbGVjdGVkRWxlbWVudHMgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5uYXZTZWxlY3RlZEVsZW1lbnRzICkgcmV0dXJuO1xuXG4gIHRoaXMuY2hhbmdlTmF2U2VsZWN0ZWRDbGFzcygncmVtb3ZlJyk7XG4gIGRlbGV0ZSB0aGlzLm5hdlNlbGVjdGVkRWxlbWVudHM7XG59O1xuXG5wcm90by5vbk5hdlN0YXRpY0NsaWNrID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyLCBjZWxsRWxlbWVudCwgY2VsbEluZGV4ICkge1xuICBpZiAoIHR5cGVvZiBjZWxsSW5kZXggPT0gJ251bWJlcicgKSB7XG4gICAgdGhpcy5uYXZDb21wYW5pb24uc2VsZWN0Q2VsbCggY2VsbEluZGV4ICk7XG4gIH1cbn07XG5cbnByb3RvLmRlYWN0aXZhdGVBc05hdkZvciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnJlbW92ZU5hdlNlbGVjdGVkRWxlbWVudHMoKTtcbn07XG5cbnByb3RvLmRlc3Ryb3lBc05hdkZvciA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLm5hdkNvbXBhbmlvbiApIHJldHVybjtcblxuICB0aGlzLm5hdkNvbXBhbmlvbi5vZmYoICdzZWxlY3QnLCB0aGlzLm9uTmF2Q29tcGFuaW9uU2VsZWN0ICk7XG4gIHRoaXMub2ZmKCAnc3RhdGljQ2xpY2snLCB0aGlzLm9uTmF2U3RhdGljQ2xpY2sgKTtcbiAgZGVsZXRlIHRoaXMubmF2Q29tcGFuaW9uO1xufTtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbnJldHVybiBGbGlja2l0eTtcblxufSApICk7XG4iLCIvKiFcbiAqIEZsaWNraXR5IGZ1bGxzY3JlZW4gdjIuMC4wXG4gKiBFbmFibGUgZnVsbHNjcmVlbiB2aWV3IGZvciBGbGlja2l0eVxuICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSggcmVxdWlyZSgnZmxpY2tpdHknKSApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgZmFjdG9yeSggd2luZG93LkZsaWNraXR5ICk7XG4gIH1cblxufSggdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uIGZhY3RvcnkoIEZsaWNraXR5ICkge1xuXG5GbGlja2l0eS5jcmVhdGUuZnVsbHNjcmVlbiA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmlzRnVsbHNjcmVlbiA9IGZhbHNlO1xuXG4gIGlmICggIXRoaXMub3B0aW9ucy5mdWxsc2NyZWVuICkgcmV0dXJuO1xuICAvLyBidXR0b25zXG4gIHRoaXMudmlld0Z1bGxzY3JlZW5CdXR0b24gPSBuZXcgRnVsbHNjcmVlbkJ1dHRvbiggJ3ZpZXcnLCB0aGlzICk7XG4gIHRoaXMuZXhpdEZ1bGxzY3JlZW5CdXR0b24gPSBuZXcgRnVsbHNjcmVlbkJ1dHRvbiggJ2V4aXQnLCB0aGlzICk7XG5cbiAgdGhpcy5vbiggJ2FjdGl2YXRlJywgdGhpcy5fY2hhbmdlRnVsbHNjcmVlbkFjdGl2ZSApO1xuICB0aGlzLm9uKCAnZGVhY3RpdmF0ZScsIHRoaXMuX2NoYW5nZUZ1bGxzY3JlZW5BY3RpdmUgKTtcbn07XG5cbmxldCBwcm90byA9IEZsaWNraXR5LnByb3RvdHlwZTtcblxuLy8gLS0tLS0gYWN0aXZhdGlvbiAtLS0tLSAvL1xuXG5wcm90by5fY2hhbmdlRnVsbHNjcmVlbkFjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICBsZXQgY2hpbGRNZXRob2QgPSB0aGlzLmlzQWN0aXZlID8gJ2FwcGVuZENoaWxkJyA6ICdyZW1vdmVDaGlsZCc7XG4gIHRoaXMuZWxlbWVudFsgY2hpbGRNZXRob2QgXSggdGhpcy52aWV3RnVsbHNjcmVlbkJ1dHRvbi5lbGVtZW50ICk7XG4gIHRoaXMuZWxlbWVudFsgY2hpbGRNZXRob2QgXSggdGhpcy5leGl0RnVsbHNjcmVlbkJ1dHRvbi5lbGVtZW50ICk7XG4gIC8vIGFjdGl2YXRlIG9yIGRlYWN0aXZhdGUgYnV0dG9uc1xuICBsZXQgYWN0aXZlTWV0aG9kID0gdGhpcy5pc0FjdGl2ZSA/ICdhY3RpdmF0ZScgOiAnZGVhY3RpdmF0ZSc7XG4gIHRoaXMudmlld0Z1bGxzY3JlZW5CdXR0b25bIGFjdGl2ZU1ldGhvZCBdKCk7XG4gIHRoaXMuZXhpdEZ1bGxzY3JlZW5CdXR0b25bIGFjdGl2ZU1ldGhvZCBdKCk7XG59O1xuXG4vLyAtLS0tLSB2aWV3LCBleGl0LCB0b2dnbGUgLS0tLS0gLy9cblxucHJvdG8udmlld0Z1bGxzY3JlZW4gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2hhbmdlRnVsbHNjcmVlbiggdHJ1ZSApO1xuICB0aGlzLmZvY3VzKCk7XG59O1xuXG5wcm90by5leGl0RnVsbHNjcmVlbiA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jaGFuZ2VGdWxsc2NyZWVuKCBmYWxzZSApO1xufTtcblxucHJvdG8uX2NoYW5nZUZ1bGxzY3JlZW4gPSBmdW5jdGlvbiggaXNWaWV3ICkge1xuICBpZiAoIHRoaXMuaXNGdWxsc2NyZWVuID09PSBpc1ZpZXcgKSByZXR1cm47XG5cbiAgdGhpcy5pc0Z1bGxzY3JlZW4gPSBpc1ZpZXc7XG4gIGxldCBjbGFzc01ldGhvZCA9IGlzVmlldyA/ICdhZGQnIDogJ3JlbW92ZSc7XG4gIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3RbIGNsYXNzTWV0aG9kIF0oJ2lzLWZsaWNraXR5LWZ1bGxzY3JlZW4nKTtcbiAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdFsgY2xhc3NNZXRob2QgXSgnaXMtZnVsbHNjcmVlbicpO1xuICB0aGlzLnJlc2l6ZSgpO1xuICAvLyBIQUNLIGV4dHJhIHJlcG9zaXRpb24gb24gZnVsbHNjcmVlbiBmb3IgaW1hZ2VzXG4gIGlmICggdGhpcy5pc0Z1bGxzY3JlZW4gKSB0aGlzLnJlcG9zaXRpb24oKTtcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KCAnZnVsbHNjcmVlbkNoYW5nZScsIG51bGwsIFsgaXNWaWV3IF0gKTtcbn07XG5cbnByb3RvLnRvZ2dsZUZ1bGxzY3JlZW4gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2hhbmdlRnVsbHNjcmVlbiggIXRoaXMuaXNGdWxsc2NyZWVuICk7XG59O1xuXG4vLyAtLS0tLSBzZXRHYWxsZXJ5U2l6ZSAtLS0tLSAvL1xuXG4vLyBvdmVyd3JpdGUgc28gZnVsbHNjcmVlbiBjZWxscyBhcmUgZnVsbCBoZWlnaHRcbmxldCBzZXRHYWxsZXJ5U2l6ZSA9IHByb3RvLnNldEdhbGxlcnlTaXplO1xucHJvdG8uc2V0R2FsbGVyeVNpemUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5vcHRpb25zLnNldEdhbGxlcnlTaXplICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIHRoaXMuaXNGdWxsc2NyZWVuICkge1xuICAgIC8vIHJlbW92ZSBoZWlnaHQgc3R5bGUgb24gZnVsbHNjcmVlblxuICAgIHRoaXMudmlld3BvcnQuc3R5bGUuaGVpZ2h0ID0gJyc7XG4gIH0gZWxzZSB7XG4gICAgLy8gb3RoZXJ3aXNlLCBkbyBub3JtYWxcbiAgICBzZXRHYWxsZXJ5U2l6ZS5jYWxsKCB0aGlzICk7XG4gIH1cbn07XG5cbi8vIC0tLS0tIGtleWJvYXJkIC0tLS0tIC8vXG5cbi8vIEVTQyBrZXkgY2xvc2VzIGZ1bGwgc2NyZWVuXG5GbGlja2l0eS5rZXlib2FyZEhhbmRsZXJzWzI3XSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmV4aXRGdWxsc2NyZWVuKCk7XG59O1xuXG4vLyAtLS0tLSBGdWxsc2NyZWVuQnV0dG9uIC0tLS0tIC8vXG5cbmZ1bmN0aW9uIEZ1bGxzY3JlZW5CdXR0b24oIG5hbWUsIGZsaWNraXR5ICkge1xuICB0aGlzLm5hbWUgPSBuYW1lO1xuICB0aGlzLmNyZWF0ZUJ1dHRvbigpO1xuICB0aGlzLmNyZWF0ZUljb24oKTtcbiAgLy8gZXZlbnRzXG4gIC8vIHRyaWdnZXIgdmlld0Z1bGxzY3JlZW4gb3IgZXhpdEZ1bGxzY3JlZW4gb24gY2xpY2tcbiAgdGhpcy5vbkNsaWNrID0gZnVuY3Rpb24oKSB7XG4gICAgZmxpY2tpdHlbIG5hbWUgKyAnRnVsbHNjcmVlbicgXSgpO1xuICB9O1xuICB0aGlzLmNsaWNrSGFuZGxlciA9IHRoaXMub25DbGljay5iaW5kKCB0aGlzICk7XG59XG5cbkZ1bGxzY3JlZW5CdXR0b24ucHJvdG90eXBlLmNyZWF0ZUJ1dHRvbiA9IGZ1bmN0aW9uKCkge1xuICBsZXQgZWxlbWVudCA9IHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICBlbGVtZW50LmNsYXNzTmFtZSA9ICdmbGlja2l0eS1idXR0b24gZmxpY2tpdHktZnVsbHNjcmVlbi1idXR0b24gJyArXG4gICAgJ2ZsaWNraXR5LWZ1bGxzY3JlZW4tYnV0dG9uLScgKyB0aGlzLm5hbWU7XG4gIC8vIHByZXZlbnQgYnV0dG9uIGZyb20gc3VibWl0dGluZyBmb3JtXG4gIGVsZW1lbnQuc2V0QXR0cmlidXRlKCAndHlwZScsICdidXR0b24nICk7XG4gIC8vIHNldCBsYWJlbFxuICBsZXQgbGFiZWwgPSBjYXBpdGFsaXplKCB0aGlzLm5hbWUgKyAnIGZ1bGwtc2NyZWVuJyApO1xuICBlbGVtZW50LnNldEF0dHJpYnV0ZSggJ2FyaWEtbGFiZWwnLCBsYWJlbCApO1xuICBlbGVtZW50LnRpdGxlID0gbGFiZWw7XG59O1xuXG5mdW5jdGlvbiBjYXBpdGFsaXplKCB0ZXh0ICkge1xuICByZXR1cm4gdGV4dFswXS50b1VwcGVyQ2FzZSgpICsgdGV4dC5zbGljZSggMSApO1xufVxuXG5jb25zdCBzdmdVUkkgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnO1xuXG5jb25zdCBwYXRoRGlyZWN0aW9ucyA9IHtcbiAgdmlldzogJ00xNSwyMCw3LDI4aDV2NEgwVjIwSDR2NWw4LThabTUtNSw4LTh2NWg0VjBIMjBWNGg1bC04LDhaJyxcbiAgZXhpdDogJ00zMiwzbC03LDdoNXY0SDE4VjJoNFY3bDctN1pNMywzMmw3LTd2NWg0VjE4SDJ2NEg3TDAsMjlaJyxcbn07XG5cbkZ1bGxzY3JlZW5CdXR0b24ucHJvdG90eXBlLmNyZWF0ZUljb24gPSBmdW5jdGlvbigpIHtcbiAgbGV0IHN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyggc3ZnVVJJLCAnc3ZnJyApO1xuICBzdmcuc2V0QXR0cmlidXRlKCAnY2xhc3MnLCAnZmxpY2tpdHktYnV0dG9uLWljb24nICk7XG4gIHN2Zy5zZXRBdHRyaWJ1dGUoICd2aWV3Qm94JywgJzAgMCAzMiAzMicgKTtcbiAgLy8gcGF0aCAmIGRpcmVjdGlvblxuICBsZXQgcGF0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyggc3ZnVVJJLCAncGF0aCcgKTtcbiAgbGV0IGRpcmVjdGlvbiA9IHBhdGhEaXJlY3Rpb25zWyB0aGlzLm5hbWUgXTtcbiAgcGF0aC5zZXRBdHRyaWJ1dGUoICdkJywgZGlyZWN0aW9uICk7XG4gIC8vIHB1dCBpdCB0b2dldGhlclxuICBzdmcuYXBwZW5kQ2hpbGQoIHBhdGggKTtcbiAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKCBzdmcgKTtcbn07XG5cbkZ1bGxzY3JlZW5CdXR0b24ucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAnY2xpY2snLCB0aGlzLmNsaWNrSGFuZGxlciApO1xufTtcblxuRnVsbHNjcmVlbkJ1dHRvbi5wcm90b3R5cGUuZGVhY3RpdmF0ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgdGhpcy5jbGlja0hhbmRsZXIgKTtcbn07XG5cbkZsaWNraXR5LkZ1bGxzY3JlZW5CdXR0b24gPSBGdWxsc2NyZWVuQnV0dG9uO1xuXG4vLyAtLS0tLSBmaW4gLS0tLS0gLy9cblxucmV0dXJuIEZsaWNraXR5O1xuXG59ICkgKTtcbiIsIi8qIVxuICogRmxpY2tpdHkgaW1hZ2VzTG9hZGVkIHYyLjAuMFxuICogZW5hYmxlcyBpbWFnZXNMb2FkZWQgb3B0aW9uIGZvciBGbGlja2l0eVxuICovXG5cbi8qanNoaW50IGJyb3dzZXI6IHRydWUsIHN0cmljdDogdHJ1ZSwgdW5kZWY6IHRydWUsIHVudXNlZDogdHJ1ZSAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKmpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qZ2xvYmFscyBkZWZpbmUsIG1vZHVsZSwgcmVxdWlyZSAqL1xuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggW1xuICAgICAgJ2ZsaWNraXR5L2pzL2luZGV4JyxcbiAgICAgICdpbWFnZXNsb2FkZWQvaW1hZ2VzbG9hZGVkJ1xuICAgIF0sIGZ1bmN0aW9uKCBGbGlja2l0eSwgaW1hZ2VzTG9hZGVkICkge1xuICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgRmxpY2tpdHksIGltYWdlc0xvYWRlZCApO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgcmVxdWlyZSgnZmxpY2tpdHknKSxcbiAgICAgIHJlcXVpcmUoJ2ltYWdlc2xvYWRlZCcpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5GbGlja2l0eSA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3csXG4gICAgICB3aW5kb3cuRmxpY2tpdHksXG4gICAgICB3aW5kb3cuaW1hZ2VzTG9hZGVkXG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgRmxpY2tpdHksIGltYWdlc0xvYWRlZCApIHtcbid1c2Ugc3RyaWN0JztcblxuRmxpY2tpdHkuY3JlYXRlTWV0aG9kcy5wdXNoKCdfY3JlYXRlSW1hZ2VzTG9hZGVkJyk7XG5cbnZhciBwcm90byA9IEZsaWNraXR5LnByb3RvdHlwZTtcblxucHJvdG8uX2NyZWF0ZUltYWdlc0xvYWRlZCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLm9uKCAnYWN0aXZhdGUnLCB0aGlzLmltYWdlc0xvYWRlZCApO1xufTtcblxucHJvdG8uaW1hZ2VzTG9hZGVkID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMub3B0aW9ucy5pbWFnZXNMb2FkZWQgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBfdGhpcyA9IHRoaXM7XG4gIGZ1bmN0aW9uIG9uSW1hZ2VzTG9hZGVkUHJvZ3Jlc3MoIGluc3RhbmNlLCBpbWFnZSApIHtcbiAgICB2YXIgY2VsbCA9IF90aGlzLmdldFBhcmVudENlbGwoIGltYWdlLmltZyApO1xuICAgIF90aGlzLmNlbGxTaXplQ2hhbmdlKCBjZWxsICYmIGNlbGwuZWxlbWVudCApO1xuICAgIGlmICggIV90aGlzLm9wdGlvbnMuZnJlZVNjcm9sbCApIHtcbiAgICAgIF90aGlzLnBvc2l0aW9uU2xpZGVyQXRTZWxlY3RlZCgpO1xuICAgIH1cbiAgfVxuICBpbWFnZXNMb2FkZWQoIHRoaXMuc2xpZGVyICkub24oICdwcm9ncmVzcycsIG9uSW1hZ2VzTG9hZGVkUHJvZ3Jlc3MgKTtcbn07XG5cbnJldHVybiBGbGlja2l0eTtcblxufSkpO1xuIiwiLyoqXG4gKiBFdkVtaXR0ZXIgdjEuMS4wXG4gKiBMaWwnIGV2ZW50IGVtaXR0ZXJcbiAqIE1JVCBMaWNlbnNlXG4gKi9cblxuLyoganNoaW50IHVudXNlZDogdHJ1ZSwgdW5kZWY6IHRydWUsIHN0cmljdDogdHJ1ZSAqL1xuXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKiBnbG9iYWxzIGRlZmluZSwgbW9kdWxlLCB3aW5kb3cgKi9cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTUQgLSBSZXF1aXJlSlNcbiAgICBkZWZpbmUoIGZhY3RvcnkgKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KUyAtIEJyb3dzZXJpZnksIFdlYnBhY2tcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBCcm93c2VyIGdsb2JhbHNcbiAgICBnbG9iYWwuRXZFbWl0dGVyID0gZmFjdG9yeSgpO1xuICB9XG5cbn0oIHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbigpIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIEV2RW1pdHRlcigpIHt9XG5cbnZhciBwcm90byA9IEV2RW1pdHRlci5wcm90b3R5cGU7XG5cbnByb3RvLm9uID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKSB7XG4gIGlmICggIWV2ZW50TmFtZSB8fCAhbGlzdGVuZXIgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIHNldCBldmVudHMgaGFzaFxuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9O1xuICAvLyBzZXQgbGlzdGVuZXJzIGFycmF5XG4gIHZhciBsaXN0ZW5lcnMgPSBldmVudHNbIGV2ZW50TmFtZSBdID0gZXZlbnRzWyBldmVudE5hbWUgXSB8fCBbXTtcbiAgLy8gb25seSBhZGQgb25jZVxuICBpZiAoIGxpc3RlbmVycy5pbmRleE9mKCBsaXN0ZW5lciApID09IC0xICkge1xuICAgIGxpc3RlbmVycy5wdXNoKCBsaXN0ZW5lciApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5vbmNlID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKSB7XG4gIGlmICggIWV2ZW50TmFtZSB8fCAhbGlzdGVuZXIgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGFkZCBldmVudFxuICB0aGlzLm9uKCBldmVudE5hbWUsIGxpc3RlbmVyICk7XG4gIC8vIHNldCBvbmNlIGZsYWdcbiAgLy8gc2V0IG9uY2VFdmVudHMgaGFzaFxuICB2YXIgb25jZUV2ZW50cyA9IHRoaXMuX29uY2VFdmVudHMgPSB0aGlzLl9vbmNlRXZlbnRzIHx8IHt9O1xuICAvLyBzZXQgb25jZUxpc3RlbmVycyBvYmplY3RcbiAgdmFyIG9uY2VMaXN0ZW5lcnMgPSBvbmNlRXZlbnRzWyBldmVudE5hbWUgXSA9IG9uY2VFdmVudHNbIGV2ZW50TmFtZSBdIHx8IHt9O1xuICAvLyBzZXQgZmxhZ1xuICBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdID0gdHJ1ZTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvLm9mZiA9IGZ1bmN0aW9uKCBldmVudE5hbWUsIGxpc3RlbmVyICkge1xuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzICYmIHRoaXMuX2V2ZW50c1sgZXZlbnROYW1lIF07XG4gIGlmICggIWxpc3RlbmVycyB8fCAhbGlzdGVuZXJzLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YoIGxpc3RlbmVyICk7XG4gIGlmICggaW5kZXggIT0gLTEgKSB7XG4gICAgbGlzdGVuZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG8uZW1pdEV2ZW50ID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgYXJncyApIHtcbiAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50cyAmJiB0aGlzLl9ldmVudHNbIGV2ZW50TmFtZSBdO1xuICBpZiAoICFsaXN0ZW5lcnMgfHwgIWxpc3RlbmVycy5sZW5ndGggKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGNvcHkgb3ZlciB0byBhdm9pZCBpbnRlcmZlcmVuY2UgaWYgLm9mZigpIGluIGxpc3RlbmVyXG4gIGxpc3RlbmVycyA9IGxpc3RlbmVycy5zbGljZSgwKTtcbiAgYXJncyA9IGFyZ3MgfHwgW107XG4gIC8vIG9uY2Ugc3R1ZmZcbiAgdmFyIG9uY2VMaXN0ZW5lcnMgPSB0aGlzLl9vbmNlRXZlbnRzICYmIHRoaXMuX29uY2VFdmVudHNbIGV2ZW50TmFtZSBdO1xuXG4gIGZvciAoIHZhciBpPTA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKysgKSB7XG4gICAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJzW2ldXG4gICAgdmFyIGlzT25jZSA9IG9uY2VMaXN0ZW5lcnMgJiYgb25jZUxpc3RlbmVyc1sgbGlzdGVuZXIgXTtcbiAgICBpZiAoIGlzT25jZSApIHtcbiAgICAgIC8vIHJlbW92ZSBsaXN0ZW5lclxuICAgICAgLy8gcmVtb3ZlIGJlZm9yZSB0cmlnZ2VyIHRvIHByZXZlbnQgcmVjdXJzaW9uXG4gICAgICB0aGlzLm9mZiggZXZlbnROYW1lLCBsaXN0ZW5lciApO1xuICAgICAgLy8gdW5zZXQgb25jZSBmbGFnXG4gICAgICBkZWxldGUgb25jZUxpc3RlbmVyc1sgbGlzdGVuZXIgXTtcbiAgICB9XG4gICAgLy8gdHJpZ2dlciBsaXN0ZW5lclxuICAgIGxpc3RlbmVyLmFwcGx5KCB0aGlzLCBhcmdzICk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvLmFsbE9mZiA9IGZ1bmN0aW9uKCkge1xuICBkZWxldGUgdGhpcy5fZXZlbnRzO1xuICBkZWxldGUgdGhpcy5fb25jZUV2ZW50cztcbn07XG5cbnJldHVybiBFdkVtaXR0ZXI7XG5cbn0pKTtcbiIsIi8qKlxuICogRml6enkgVUkgdXRpbHMgdjIuMC43XG4gKiBNSVQgbGljZW5zZVxuICovXG5cbi8qanNoaW50IGJyb3dzZXI6IHRydWUsIHVuZGVmOiB0cnVlLCB1bnVzZWQ6IHRydWUsIHN0cmljdDogdHJ1ZSAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKmpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qZ2xvYmFscyBkZWZpbmUsIG1vZHVsZSwgcmVxdWlyZSAqL1xuXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCBbXG4gICAgICAnZGVzYW5kcm8tbWF0Y2hlcy1zZWxlY3Rvci9tYXRjaGVzLXNlbGVjdG9yJ1xuICAgIF0sIGZ1bmN0aW9uKCBtYXRjaGVzU2VsZWN0b3IgKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBtYXRjaGVzU2VsZWN0b3IgKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHJlcXVpcmUoJ2Rlc2FuZHJvLW1hdGNoZXMtc2VsZWN0b3InKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuZml6enlVSVV0aWxzID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHdpbmRvdy5tYXRjaGVzU2VsZWN0b3JcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBtYXRjaGVzU2VsZWN0b3IgKSB7XG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0ge307XG5cbi8vIC0tLS0tIGV4dGVuZCAtLS0tLSAvL1xuXG4vLyBleHRlbmRzIG9iamVjdHNcbnV0aWxzLmV4dGVuZCA9IGZ1bmN0aW9uKCBhLCBiICkge1xuICBmb3IgKCB2YXIgcHJvcCBpbiBiICkge1xuICAgIGFbIHByb3AgXSA9IGJbIHByb3AgXTtcbiAgfVxuICByZXR1cm4gYTtcbn07XG5cbi8vIC0tLS0tIG1vZHVsbyAtLS0tLSAvL1xuXG51dGlscy5tb2R1bG8gPSBmdW5jdGlvbiggbnVtLCBkaXYgKSB7XG4gIHJldHVybiAoICggbnVtICUgZGl2ICkgKyBkaXYgKSAlIGRpdjtcbn07XG5cbi8vIC0tLS0tIG1ha2VBcnJheSAtLS0tLSAvL1xuXG52YXIgYXJyYXlTbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuLy8gdHVybiBlbGVtZW50IG9yIG5vZGVMaXN0IGludG8gYW4gYXJyYXlcbnV0aWxzLm1ha2VBcnJheSA9IGZ1bmN0aW9uKCBvYmogKSB7XG4gIGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG4gICAgLy8gdXNlIG9iamVjdCBpZiBhbHJlYWR5IGFuIGFycmF5XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuICAvLyByZXR1cm4gZW1wdHkgYXJyYXkgaWYgdW5kZWZpbmVkIG9yIG51bGwuICM2XG4gIGlmICggb2JqID09PSBudWxsIHx8IG9iaiA9PT0gdW5kZWZpbmVkICkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHZhciBpc0FycmF5TGlrZSA9IHR5cGVvZiBvYmogPT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iai5sZW5ndGggPT0gJ251bWJlcic7XG4gIGlmICggaXNBcnJheUxpa2UgKSB7XG4gICAgLy8gY29udmVydCBub2RlTGlzdCB0byBhcnJheVxuICAgIHJldHVybiBhcnJheVNsaWNlLmNhbGwoIG9iaiApO1xuICB9XG5cbiAgLy8gYXJyYXkgb2Ygc2luZ2xlIGluZGV4XG4gIHJldHVybiBbIG9iaiBdO1xufTtcblxuLy8gLS0tLS0gcmVtb3ZlRnJvbSAtLS0tLSAvL1xuXG51dGlscy5yZW1vdmVGcm9tID0gZnVuY3Rpb24oIGFyeSwgb2JqICkge1xuICB2YXIgaW5kZXggPSBhcnkuaW5kZXhPZiggb2JqICk7XG4gIGlmICggaW5kZXggIT0gLTEgKSB7XG4gICAgYXJ5LnNwbGljZSggaW5kZXgsIDEgKTtcbiAgfVxufTtcblxuLy8gLS0tLS0gZ2V0UGFyZW50IC0tLS0tIC8vXG5cbnV0aWxzLmdldFBhcmVudCA9IGZ1bmN0aW9uKCBlbGVtLCBzZWxlY3RvciApIHtcbiAgd2hpbGUgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbSAhPSBkb2N1bWVudC5ib2R5ICkge1xuICAgIGVsZW0gPSBlbGVtLnBhcmVudE5vZGU7XG4gICAgaWYgKCBtYXRjaGVzU2VsZWN0b3IoIGVsZW0sIHNlbGVjdG9yICkgKSB7XG4gICAgICByZXR1cm4gZWxlbTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIC0tLS0tIGdldFF1ZXJ5RWxlbWVudCAtLS0tLSAvL1xuXG4vLyB1c2UgZWxlbWVudCBhcyBzZWxlY3RvciBzdHJpbmdcbnV0aWxzLmdldFF1ZXJ5RWxlbWVudCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICBpZiAoIHR5cGVvZiBlbGVtID09ICdzdHJpbmcnICkge1xuICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBlbGVtICk7XG4gIH1cbiAgcmV0dXJuIGVsZW07XG59O1xuXG4vLyAtLS0tLSBoYW5kbGVFdmVudCAtLS0tLSAvL1xuXG4vLyBlbmFibGUgLm9udHlwZSB0byB0cmlnZ2VyIGZyb20gLmFkZEV2ZW50TGlzdGVuZXIoIGVsZW0sICd0eXBlJyApXG51dGlscy5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdmFyIG1ldGhvZCA9ICdvbicgKyBldmVudC50eXBlO1xuICBpZiAoIHRoaXNbIG1ldGhvZCBdICkge1xuICAgIHRoaXNbIG1ldGhvZCBdKCBldmVudCApO1xuICB9XG59O1xuXG4vLyAtLS0tLSBmaWx0ZXJGaW5kRWxlbWVudHMgLS0tLS0gLy9cblxudXRpbHMuZmlsdGVyRmluZEVsZW1lbnRzID0gZnVuY3Rpb24oIGVsZW1zLCBzZWxlY3RvciApIHtcbiAgLy8gbWFrZSBhcnJheSBvZiBlbGVtc1xuICBlbGVtcyA9IHV0aWxzLm1ha2VBcnJheSggZWxlbXMgKTtcbiAgdmFyIGZmRWxlbXMgPSBbXTtcblxuICBlbGVtcy5mb3JFYWNoKCBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAvLyBjaGVjayB0aGF0IGVsZW0gaXMgYW4gYWN0dWFsIGVsZW1lbnRcbiAgICBpZiAoICEoIGVsZW0gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCApICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBhZGQgZWxlbSBpZiBubyBzZWxlY3RvclxuICAgIGlmICggIXNlbGVjdG9yICkge1xuICAgICAgZmZFbGVtcy5wdXNoKCBlbGVtICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGZpbHRlciAmIGZpbmQgaXRlbXMgaWYgd2UgaGF2ZSBhIHNlbGVjdG9yXG4gICAgLy8gZmlsdGVyXG4gICAgaWYgKCBtYXRjaGVzU2VsZWN0b3IoIGVsZW0sIHNlbGVjdG9yICkgKSB7XG4gICAgICBmZkVsZW1zLnB1c2goIGVsZW0gKTtcbiAgICB9XG4gICAgLy8gZmluZCBjaGlsZHJlblxuICAgIHZhciBjaGlsZEVsZW1zID0gZWxlbS5xdWVyeVNlbGVjdG9yQWxsKCBzZWxlY3RvciApO1xuICAgIC8vIGNvbmNhdCBjaGlsZEVsZW1zIHRvIGZpbHRlckZvdW5kIGFycmF5XG4gICAgZm9yICggdmFyIGk9MDsgaSA8IGNoaWxkRWxlbXMubGVuZ3RoOyBpKysgKSB7XG4gICAgICBmZkVsZW1zLnB1c2goIGNoaWxkRWxlbXNbaV0gKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBmZkVsZW1zO1xufTtcblxuLy8gLS0tLS0gZGVib3VuY2VNZXRob2QgLS0tLS0gLy9cblxudXRpbHMuZGVib3VuY2VNZXRob2QgPSBmdW5jdGlvbiggX2NsYXNzLCBtZXRob2ROYW1lLCB0aHJlc2hvbGQgKSB7XG4gIHRocmVzaG9sZCA9IHRocmVzaG9sZCB8fCAxMDA7XG4gIC8vIG9yaWdpbmFsIG1ldGhvZFxuICB2YXIgbWV0aG9kID0gX2NsYXNzLnByb3RvdHlwZVsgbWV0aG9kTmFtZSBdO1xuICB2YXIgdGltZW91dE5hbWUgPSBtZXRob2ROYW1lICsgJ1RpbWVvdXQnO1xuXG4gIF9jbGFzcy5wcm90b3R5cGVbIG1ldGhvZE5hbWUgXSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0aW1lb3V0ID0gdGhpc1sgdGltZW91dE5hbWUgXTtcbiAgICBjbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblxuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdGhpc1sgdGltZW91dE5hbWUgXSA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuICAgICAgbWV0aG9kLmFwcGx5KCBfdGhpcywgYXJncyApO1xuICAgICAgZGVsZXRlIF90aGlzWyB0aW1lb3V0TmFtZSBdO1xuICAgIH0sIHRocmVzaG9sZCApO1xuICB9O1xufTtcblxuLy8gLS0tLS0gZG9jUmVhZHkgLS0tLS0gLy9cblxudXRpbHMuZG9jUmVhZHkgPSBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG4gIHZhciByZWFkeVN0YXRlID0gZG9jdW1lbnQucmVhZHlTdGF0ZTtcbiAgaWYgKCByZWFkeVN0YXRlID09ICdjb21wbGV0ZScgfHwgcmVhZHlTdGF0ZSA9PSAnaW50ZXJhY3RpdmUnICkge1xuICAgIC8vIGRvIGFzeW5jIHRvIGFsbG93IGZvciBvdGhlciBzY3JpcHRzIHRvIHJ1bi4gbWV0YWZpenp5L2ZsaWNraXR5IzQ0MVxuICAgIHNldFRpbWVvdXQoIGNhbGxiYWNrICk7XG4gIH0gZWxzZSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ0RPTUNvbnRlbnRMb2FkZWQnLCBjYWxsYmFjayApO1xuICB9XG59O1xuXG4vLyAtLS0tLSBodG1sSW5pdCAtLS0tLSAvL1xuXG4vLyBodHRwOi8vamFtZXNyb2JlcnRzLm5hbWUvYmxvZy8yMDEwLzAyLzIyL3N0cmluZy1mdW5jdGlvbnMtZm9yLWphdmFzY3JpcHQtdHJpbS10by1jYW1lbC1jYXNlLXRvLWRhc2hlZC1hbmQtdG8tdW5kZXJzY29yZS9cbnV0aWxzLnRvRGFzaGVkID0gZnVuY3Rpb24oIHN0ciApIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKCAvKC4pKFtBLVpdKS9nLCBmdW5jdGlvbiggbWF0Y2gsICQxLCAkMiApIHtcbiAgICByZXR1cm4gJDEgKyAnLScgKyAkMjtcbiAgfSkudG9Mb3dlckNhc2UoKTtcbn07XG5cbnZhciBjb25zb2xlID0gd2luZG93LmNvbnNvbGU7XG4vKipcbiAqIGFsbG93IHVzZXIgdG8gaW5pdGlhbGl6ZSBjbGFzc2VzIHZpYSBbZGF0YS1uYW1lc3BhY2VdIG9yIC5qcy1uYW1lc3BhY2UgY2xhc3NcbiAqIGh0bWxJbml0KCBXaWRnZXQsICd3aWRnZXROYW1lJyApXG4gKiBvcHRpb25zIGFyZSBwYXJzZWQgZnJvbSBkYXRhLW5hbWVzcGFjZS1vcHRpb25zXG4gKi9cbnV0aWxzLmh0bWxJbml0ID0gZnVuY3Rpb24oIFdpZGdldENsYXNzLCBuYW1lc3BhY2UgKSB7XG4gIHV0aWxzLmRvY1JlYWR5KCBmdW5jdGlvbigpIHtcbiAgICB2YXIgZGFzaGVkTmFtZXNwYWNlID0gdXRpbHMudG9EYXNoZWQoIG5hbWVzcGFjZSApO1xuICAgIHZhciBkYXRhQXR0ciA9ICdkYXRhLScgKyBkYXNoZWROYW1lc3BhY2U7XG4gICAgdmFyIGRhdGFBdHRyRWxlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCAnWycgKyBkYXRhQXR0ciArICddJyApO1xuICAgIHZhciBqc0Rhc2hFbGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoICcuanMtJyArIGRhc2hlZE5hbWVzcGFjZSApO1xuICAgIHZhciBlbGVtcyA9IHV0aWxzLm1ha2VBcnJheSggZGF0YUF0dHJFbGVtcyApXG4gICAgICAuY29uY2F0KCB1dGlscy5tYWtlQXJyYXkoIGpzRGFzaEVsZW1zICkgKTtcbiAgICB2YXIgZGF0YU9wdGlvbnNBdHRyID0gZGF0YUF0dHIgKyAnLW9wdGlvbnMnO1xuICAgIHZhciBqUXVlcnkgPSB3aW5kb3cualF1ZXJ5O1xuXG4gICAgZWxlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICB2YXIgYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKCBkYXRhQXR0ciApIHx8XG4gICAgICAgIGVsZW0uZ2V0QXR0cmlidXRlKCBkYXRhT3B0aW9uc0F0dHIgKTtcbiAgICAgIHZhciBvcHRpb25zO1xuICAgICAgdHJ5IHtcbiAgICAgICAgb3B0aW9ucyA9IGF0dHIgJiYgSlNPTi5wYXJzZSggYXR0ciApO1xuICAgICAgfSBjYXRjaCAoIGVycm9yICkge1xuICAgICAgICAvLyBsb2cgZXJyb3IsIGRvIG5vdCBpbml0aWFsaXplXG4gICAgICAgIGlmICggY29uc29sZSApIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCAnRXJyb3IgcGFyc2luZyAnICsgZGF0YUF0dHIgKyAnIG9uICcgKyBlbGVtLmNsYXNzTmFtZSArXG4gICAgICAgICAgJzogJyArIGVycm9yICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gaW5pdGlhbGl6ZVxuICAgICAgdmFyIGluc3RhbmNlID0gbmV3IFdpZGdldENsYXNzKCBlbGVtLCBvcHRpb25zICk7XG4gICAgICAvLyBtYWtlIGF2YWlsYWJsZSB2aWEgJCgpLmRhdGEoJ25hbWVzcGFjZScpXG4gICAgICBpZiAoIGpRdWVyeSApIHtcbiAgICAgICAgalF1ZXJ5LmRhdGEoIGVsZW0sIG5hbWVzcGFjZSwgaW5zdGFuY2UgKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICB9KTtcbn07XG5cbi8vIC0tLS0tICAtLS0tLSAvL1xuXG5yZXR1cm4gdXRpbHM7XG5cbn0pKTtcbiIsIi8vIGFkZCwgcmVtb3ZlIGNlbGxcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCBbXG4gICAgICAnLi9mbGlja2l0eScsXG4gICAgICAnZml6enktdWktdXRpbHMvdXRpbHMnLFxuICAgIF0sIGZ1bmN0aW9uKCBGbGlja2l0eSwgdXRpbHMgKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBGbGlja2l0eSwgdXRpbHMgKTtcbiAgICB9ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdyxcbiAgICAgICAgcmVxdWlyZSgnLi9mbGlja2l0eScpLFxuICAgICAgICByZXF1aXJlKCdmaXp6eS11aS11dGlscycpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdyxcbiAgICAgICAgd2luZG93LkZsaWNraXR5LFxuICAgICAgICB3aW5kb3cuZml6enlVSVV0aWxzXG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgRmxpY2tpdHksIHV0aWxzICkge1xuXG4ndXNlIHN0cmljdCc7XG5cbi8vIGFwcGVuZCBjZWxscyB0byBhIGRvY3VtZW50IGZyYWdtZW50XG5mdW5jdGlvbiBnZXRDZWxsc0ZyYWdtZW50KCBjZWxscyApIHtcbiAgdmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICBjZWxscy5mb3JFYWNoKCBmdW5jdGlvbiggY2VsbCApIHtcbiAgICBmcmFnbWVudC5hcHBlbmRDaGlsZCggY2VsbC5lbGVtZW50ICk7XG4gIH0gKTtcbiAgcmV0dXJuIGZyYWdtZW50O1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBhZGQvcmVtb3ZlIGNlbGwgcHJvdG90eXBlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnZhciBwcm90byA9IEZsaWNraXR5LnByb3RvdHlwZTtcblxuLyoqXG4gKiBJbnNlcnQsIHByZXBlbmQsIG9yIGFwcGVuZCBjZWxsc1xuICogQHBhcmFtIHtbRWxlbWVudCwgQXJyYXksIE5vZGVMaXN0XX0gZWxlbXMgLSBFbGVtZW50cyB0byBpbnNlcnRcbiAqIEBwYXJhbSB7SW50ZWdlcn0gaW5kZXggLSBaZXJvLWJhc2VkIG51bWJlciB0byBpbnNlcnRcbiAqL1xucHJvdG8uaW5zZXJ0ID0gZnVuY3Rpb24oIGVsZW1zLCBpbmRleCApIHtcbiAgdmFyIGNlbGxzID0gdGhpcy5fbWFrZUNlbGxzKCBlbGVtcyApO1xuICBpZiAoICFjZWxscyB8fCAhY2VsbHMubGVuZ3RoICkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbGVuID0gdGhpcy5jZWxscy5sZW5ndGg7XG4gIC8vIGRlZmF1bHQgdG8gYXBwZW5kXG4gIGluZGV4ID0gaW5kZXggPT09IHVuZGVmaW5lZCA/IGxlbiA6IGluZGV4O1xuICAvLyBhZGQgY2VsbHMgd2l0aCBkb2N1bWVudCBmcmFnbWVudFxuICB2YXIgZnJhZ21lbnQgPSBnZXRDZWxsc0ZyYWdtZW50KCBjZWxscyApO1xuICAvLyBhcHBlbmQgdG8gc2xpZGVyXG4gIHZhciBpc0FwcGVuZCA9IGluZGV4ID09IGxlbjtcbiAgaWYgKCBpc0FwcGVuZCApIHtcbiAgICB0aGlzLnNsaWRlci5hcHBlbmRDaGlsZCggZnJhZ21lbnQgKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaW5zZXJ0Q2VsbEVsZW1lbnQgPSB0aGlzLmNlbGxzWyBpbmRleCBdLmVsZW1lbnQ7XG4gICAgdGhpcy5zbGlkZXIuaW5zZXJ0QmVmb3JlKCBmcmFnbWVudCwgaW5zZXJ0Q2VsbEVsZW1lbnQgKTtcbiAgfVxuICAvLyBhZGQgdG8gdGhpcy5jZWxsc1xuICBpZiAoIGluZGV4ID09PSAwICkge1xuICAgIC8vIHByZXBlbmQsIGFkZCB0byBzdGFydFxuICAgIHRoaXMuY2VsbHMgPSBjZWxscy5jb25jYXQoIHRoaXMuY2VsbHMgKTtcbiAgfSBlbHNlIGlmICggaXNBcHBlbmQgKSB7XG4gICAgLy8gYXBwZW5kLCBhZGQgdG8gZW5kXG4gICAgdGhpcy5jZWxscyA9IHRoaXMuY2VsbHMuY29uY2F0KCBjZWxscyApO1xuICB9IGVsc2Uge1xuICAgIC8vIGluc2VydCBpbiB0aGlzLmNlbGxzXG4gICAgdmFyIGVuZENlbGxzID0gdGhpcy5jZWxscy5zcGxpY2UoIGluZGV4LCBsZW4gLSBpbmRleCApO1xuICAgIHRoaXMuY2VsbHMgPSB0aGlzLmNlbGxzLmNvbmNhdCggY2VsbHMgKS5jb25jYXQoIGVuZENlbGxzICk7XG4gIH1cblxuICB0aGlzLl9zaXplQ2VsbHMoIGNlbGxzICk7XG4gIHRoaXMuY2VsbENoYW5nZSggaW5kZXgsIHRydWUgKTtcbn07XG5cbnByb3RvLmFwcGVuZCA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgdGhpcy5pbnNlcnQoIGVsZW1zLCB0aGlzLmNlbGxzLmxlbmd0aCApO1xufTtcblxucHJvdG8ucHJlcGVuZCA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgdGhpcy5pbnNlcnQoIGVsZW1zLCAwICk7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBjZWxsc1xuICogQHBhcmFtIHtbRWxlbWVudCwgQXJyYXksIE5vZGVMaXN0XX0gZWxlbXMgLSBFTGVtZW50cyB0byByZW1vdmVcbiAqL1xucHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICB2YXIgY2VsbHMgPSB0aGlzLmdldENlbGxzKCBlbGVtcyApO1xuICBpZiAoICFjZWxscyB8fCAhY2VsbHMubGVuZ3RoICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBtaW5DZWxsSW5kZXggPSB0aGlzLmNlbGxzLmxlbmd0aCAtIDE7XG4gIC8vIHJlbW92ZSBjZWxscyBmcm9tIGNvbGxlY3Rpb24gJiBET01cbiAgY2VsbHMuZm9yRWFjaCggZnVuY3Rpb24oIGNlbGwgKSB7XG4gICAgY2VsbC5yZW1vdmUoKTtcbiAgICB2YXIgaW5kZXggPSB0aGlzLmNlbGxzLmluZGV4T2YoIGNlbGwgKTtcbiAgICBtaW5DZWxsSW5kZXggPSBNYXRoLm1pbiggaW5kZXgsIG1pbkNlbGxJbmRleCApO1xuICAgIHV0aWxzLnJlbW92ZUZyb20oIHRoaXMuY2VsbHMsIGNlbGwgKTtcbiAgfSwgdGhpcyApO1xuXG4gIHRoaXMuY2VsbENoYW5nZSggbWluQ2VsbEluZGV4LCB0cnVlICk7XG59O1xuXG4vKipcbiAqIGxvZ2ljIHRvIGJlIHJ1biBhZnRlciBhIGNlbGwncyBzaXplIGNoYW5nZXNcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbSAtIGNlbGwncyBlbGVtZW50XG4gKi9cbnByb3RvLmNlbGxTaXplQ2hhbmdlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIHZhciBjZWxsID0gdGhpcy5nZXRDZWxsKCBlbGVtICk7XG4gIGlmICggIWNlbGwgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNlbGwuZ2V0U2l6ZSgpO1xuXG4gIHZhciBpbmRleCA9IHRoaXMuY2VsbHMuaW5kZXhPZiggY2VsbCApO1xuICB0aGlzLmNlbGxDaGFuZ2UoIGluZGV4ICk7XG59O1xuXG4vKipcbiAqIGxvZ2ljIGFueSB0aW1lIGEgY2VsbCBpcyBjaGFuZ2VkOiBhZGRlZCwgcmVtb3ZlZCwgb3Igc2l6ZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge0ludGVnZXJ9IGNoYW5nZWRDZWxsSW5kZXggLSBpbmRleCBvZiB0aGUgY2hhbmdlZCBjZWxsLCBvcHRpb25hbFxuICogQHBhcmFtIHtCb29sZWFufSBpc1Bvc2l0aW9uaW5nU2xpZGVyIC0gUG9zaXRpb25zIHNsaWRlciBhZnRlciBzZWxlY3Rpb25cbiAqL1xucHJvdG8uY2VsbENoYW5nZSA9IGZ1bmN0aW9uKCBjaGFuZ2VkQ2VsbEluZGV4LCBpc1Bvc2l0aW9uaW5nU2xpZGVyICkge1xuICB2YXIgcHJldlNlbGVjdGVkRWxlbSA9IHRoaXMuc2VsZWN0ZWRFbGVtZW50O1xuICB0aGlzLl9wb3NpdGlvbkNlbGxzKCBjaGFuZ2VkQ2VsbEluZGV4ICk7XG4gIHRoaXMuX2dldFdyYXBTaGlmdENlbGxzKCk7XG4gIHRoaXMuc2V0R2FsbGVyeVNpemUoKTtcbiAgLy8gdXBkYXRlIHNlbGVjdGVkSW5kZXhcbiAgLy8gdHJ5IHRvIG1haW50YWluIHBvc2l0aW9uICYgc2VsZWN0IHByZXZpb3VzIHNlbGVjdGVkIGVsZW1lbnRcbiAgdmFyIGNlbGwgPSB0aGlzLmdldENlbGwoIHByZXZTZWxlY3RlZEVsZW0gKTtcbiAgaWYgKCBjZWxsICkge1xuICAgIHRoaXMuc2VsZWN0ZWRJbmRleCA9IHRoaXMuZ2V0Q2VsbFNsaWRlSW5kZXgoIGNlbGwgKTtcbiAgfVxuICB0aGlzLnNlbGVjdGVkSW5kZXggPSBNYXRoLm1pbiggdGhpcy5zbGlkZXMubGVuZ3RoIC0gMSwgdGhpcy5zZWxlY3RlZEluZGV4ICk7XG5cbiAgdGhpcy5lbWl0RXZlbnQoICdjZWxsQ2hhbmdlJywgWyBjaGFuZ2VkQ2VsbEluZGV4IF0gKTtcbiAgLy8gcG9zaXRpb24gc2xpZGVyXG4gIHRoaXMuc2VsZWN0KCB0aGlzLnNlbGVjdGVkSW5kZXggKTtcbiAgLy8gZG8gbm90IHBvc2l0aW9uIHNsaWRlciBhZnRlciBsYXp5IGxvYWRcbiAgaWYgKCBpc1Bvc2l0aW9uaW5nU2xpZGVyICkge1xuICAgIHRoaXMucG9zaXRpb25TbGlkZXJBdFNlbGVjdGVkKCk7XG4gIH1cbn07XG5cbi8vIC0tLS0tICAtLS0tLSAvL1xuXG5yZXR1cm4gRmxpY2tpdHk7XG5cbn0gKSApO1xuIiwiLy8gYW5pbWF0ZVxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIFtcbiAgICAgICdmaXp6eS11aS11dGlscy91dGlscycsXG4gICAgXSwgZnVuY3Rpb24oIHV0aWxzICkge1xuICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgdXRpbHMgKTtcbiAgICB9ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdyxcbiAgICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuRmxpY2tpdHkgPSB3aW5kb3cuRmxpY2tpdHkgfHwge307XG4gICAgd2luZG93LkZsaWNraXR5LmFuaW1hdGVQcm90b3R5cGUgPSBmYWN0b3J5KFxuICAgICAgICB3aW5kb3csXG4gICAgICAgIHdpbmRvdy5maXp6eVVJVXRpbHNcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCB1dGlscyApIHtcblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBhbmltYXRlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnZhciBwcm90byA9IHt9O1xuXG5wcm90by5zdGFydEFuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIHRoaXMuaXNBbmltYXRpbmcgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5pc0FuaW1hdGluZyA9IHRydWU7XG4gIHRoaXMucmVzdGluZ0ZyYW1lcyA9IDA7XG4gIHRoaXMuYW5pbWF0ZSgpO1xufTtcblxucHJvdG8uYW5pbWF0ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmFwcGx5RHJhZ0ZvcmNlKCk7XG4gIHRoaXMuYXBwbHlTZWxlY3RlZEF0dHJhY3Rpb24oKTtcblxuICB2YXIgcHJldmlvdXNYID0gdGhpcy54O1xuXG4gIHRoaXMuaW50ZWdyYXRlUGh5c2ljcygpO1xuICB0aGlzLnBvc2l0aW9uU2xpZGVyKCk7XG4gIHRoaXMuc2V0dGxlKCBwcmV2aW91c1ggKTtcbiAgLy8gYW5pbWF0ZSBuZXh0IGZyYW1lXG4gIGlmICggdGhpcy5pc0FuaW1hdGluZyApIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSggZnVuY3Rpb24gYW5pbWF0ZUZyYW1lKCkge1xuICAgICAgX3RoaXMuYW5pbWF0ZSgpO1xuICAgIH0gKTtcbiAgfVxufTtcblxucHJvdG8ucG9zaXRpb25TbGlkZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHggPSB0aGlzLng7XG4gIC8vIHdyYXAgcG9zaXRpb24gYXJvdW5kXG4gIGlmICggdGhpcy5vcHRpb25zLndyYXBBcm91bmQgJiYgdGhpcy5jZWxscy5sZW5ndGggPiAxICkge1xuICAgIHggPSB1dGlscy5tb2R1bG8oIHgsIHRoaXMuc2xpZGVhYmxlV2lkdGggKTtcbiAgICB4IC09IHRoaXMuc2xpZGVhYmxlV2lkdGg7XG4gICAgdGhpcy5zaGlmdFdyYXBDZWxscyggeCApO1xuICB9XG5cbiAgdGhpcy5zZXRUcmFuc2xhdGVYKCB4LCB0aGlzLmlzQW5pbWF0aW5nICk7XG4gIHRoaXMuZGlzcGF0Y2hTY3JvbGxFdmVudCgpO1xufTtcblxucHJvdG8uc2V0VHJhbnNsYXRlWCA9IGZ1bmN0aW9uKCB4LCBpczNkICkge1xuICB4ICs9IHRoaXMuY3Vyc29yUG9zaXRpb247XG4gIC8vIHJldmVyc2UgaWYgcmlnaHQtdG8tbGVmdCBhbmQgdXNpbmcgdHJhbnNmb3JtXG4gIHggPSB0aGlzLm9wdGlvbnMucmlnaHRUb0xlZnQgPyAteCA6IHg7XG4gIHZhciB0cmFuc2xhdGVYID0gdGhpcy5nZXRQb3NpdGlvblZhbHVlKCB4ICk7XG4gIC8vIHVzZSAzRCB0cmFuc2Zvcm1zIGZvciBoYXJkd2FyZSBhY2NlbGVyYXRpb24gb24gaU9TXG4gIC8vIGJ1dCB1c2UgMkQgd2hlbiBzZXR0bGVkLCBmb3IgYmV0dGVyIGZvbnQtcmVuZGVyaW5nXG4gIHRoaXMuc2xpZGVyLnN0eWxlLnRyYW5zZm9ybSA9IGlzM2QgP1xuICAgICd0cmFuc2xhdGUzZCgnICsgdHJhbnNsYXRlWCArICcsMCwwKScgOiAndHJhbnNsYXRlWCgnICsgdHJhbnNsYXRlWCArICcpJztcbn07XG5cbnByb3RvLmRpc3BhdGNoU2Nyb2xsRXZlbnQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGZpcnN0U2xpZGUgPSB0aGlzLnNsaWRlc1swXTtcbiAgaWYgKCAhZmlyc3RTbGlkZSApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIHBvc2l0aW9uWCA9IC10aGlzLnggLSBmaXJzdFNsaWRlLnRhcmdldDtcbiAgdmFyIHByb2dyZXNzID0gcG9zaXRpb25YIC8gdGhpcy5zbGlkZXNXaWR0aDtcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KCAnc2Nyb2xsJywgbnVsbCwgWyBwcm9ncmVzcywgcG9zaXRpb25YIF0gKTtcbn07XG5cbnByb3RvLnBvc2l0aW9uU2xpZGVyQXRTZWxlY3RlZCA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLmNlbGxzLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy54ID0gLXRoaXMuc2VsZWN0ZWRTbGlkZS50YXJnZXQ7XG4gIHRoaXMudmVsb2NpdHkgPSAwOyAvLyBzdG9wIHdvYmJsZVxuICB0aGlzLnBvc2l0aW9uU2xpZGVyKCk7XG59O1xuXG5wcm90by5nZXRQb3NpdGlvblZhbHVlID0gZnVuY3Rpb24oIHBvc2l0aW9uICkge1xuICBpZiAoIHRoaXMub3B0aW9ucy5wZXJjZW50UG9zaXRpb24gKSB7XG4gICAgLy8gcGVyY2VudCBwb3NpdGlvbiwgcm91bmQgdG8gMiBkaWdpdHMsIGxpa2UgMTIuMzQlXG4gICAgcmV0dXJuICggTWF0aC5yb3VuZCggKCBwb3NpdGlvbiAvIHRoaXMuc2l6ZS5pbm5lcldpZHRoICkgKiAxMDAwMCApICogMC4wMSApICsgJyUnO1xuICB9IGVsc2Uge1xuICAgIC8vIHBpeGVsIHBvc2l0aW9uaW5nXG4gICAgcmV0dXJuIE1hdGgucm91bmQoIHBvc2l0aW9uICkgKyAncHgnO1xuICB9XG59O1xuXG5wcm90by5zZXR0bGUgPSBmdW5jdGlvbiggcHJldmlvdXNYICkge1xuICAvLyBrZWVwIHRyYWNrIG9mIGZyYW1lcyB3aGVyZSB4IGhhc24ndCBtb3ZlZFxuICB2YXIgaXNSZXN0aW5nID0gIXRoaXMuaXNQb2ludGVyRG93biAmJlxuICAgICAgTWF0aC5yb3VuZCggdGhpcy54ICogMTAwICkgPT0gTWF0aC5yb3VuZCggcHJldmlvdXNYICogMTAwICk7XG4gIGlmICggaXNSZXN0aW5nICkge1xuICAgIHRoaXMucmVzdGluZ0ZyYW1lcysrO1xuICB9XG4gIC8vIHN0b3AgYW5pbWF0aW5nIGlmIHJlc3RpbmcgZm9yIDMgb3IgbW9yZSBmcmFtZXNcbiAgaWYgKCB0aGlzLnJlc3RpbmdGcmFtZXMgPiAyICkge1xuICAgIHRoaXMuaXNBbmltYXRpbmcgPSBmYWxzZTtcbiAgICBkZWxldGUgdGhpcy5pc0ZyZWVTY3JvbGxpbmc7XG4gICAgLy8gcmVuZGVyIHBvc2l0aW9uIHdpdGggdHJhbnNsYXRlWCB3aGVuIHNldHRsZWRcbiAgICB0aGlzLnBvc2l0aW9uU2xpZGVyKCk7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KCAnc2V0dGxlJywgbnVsbCwgWyB0aGlzLnNlbGVjdGVkSW5kZXggXSApO1xuICB9XG59O1xuXG5wcm90by5zaGlmdFdyYXBDZWxscyA9IGZ1bmN0aW9uKCB4ICkge1xuICAvLyBzaGlmdCBiZWZvcmUgY2VsbHNcbiAgdmFyIGJlZm9yZUdhcCA9IHRoaXMuY3Vyc29yUG9zaXRpb24gKyB4O1xuICB0aGlzLl9zaGlmdENlbGxzKCB0aGlzLmJlZm9yZVNoaWZ0Q2VsbHMsIGJlZm9yZUdhcCwgLTEgKTtcbiAgLy8gc2hpZnQgYWZ0ZXIgY2VsbHNcbiAgdmFyIGFmdGVyR2FwID0gdGhpcy5zaXplLmlubmVyV2lkdGggLSAoIHggKyB0aGlzLnNsaWRlYWJsZVdpZHRoICsgdGhpcy5jdXJzb3JQb3NpdGlvbiApO1xuICB0aGlzLl9zaGlmdENlbGxzKCB0aGlzLmFmdGVyU2hpZnRDZWxscywgYWZ0ZXJHYXAsIDEgKTtcbn07XG5cbnByb3RvLl9zaGlmdENlbGxzID0gZnVuY3Rpb24oIGNlbGxzLCBnYXAsIHNoaWZ0ICkge1xuICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBjZWxscy5sZW5ndGg7IGkrKyApIHtcbiAgICB2YXIgY2VsbCA9IGNlbGxzW2ldO1xuICAgIHZhciBjZWxsU2hpZnQgPSBnYXAgPiAwID8gc2hpZnQgOiAwO1xuICAgIGNlbGwud3JhcFNoaWZ0KCBjZWxsU2hpZnQgKTtcbiAgICBnYXAgLT0gY2VsbC5zaXplLm91dGVyV2lkdGg7XG4gIH1cbn07XG5cbnByb3RvLl91bnNoaWZ0Q2VsbHMgPSBmdW5jdGlvbiggY2VsbHMgKSB7XG4gIGlmICggIWNlbGxzIHx8ICFjZWxscy5sZW5ndGggKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGZvciAoIHZhciBpID0gMDsgaSA8IGNlbGxzLmxlbmd0aDsgaSsrICkge1xuICAgIGNlbGxzW2ldLndyYXBTaGlmdCggMCApO1xuICB9XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBwaHlzaWNzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnByb3RvLmludGVncmF0ZVBoeXNpY3MgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy54ICs9IHRoaXMudmVsb2NpdHk7XG4gIHRoaXMudmVsb2NpdHkgKj0gdGhpcy5nZXRGcmljdGlvbkZhY3RvcigpO1xufTtcblxucHJvdG8uYXBwbHlGb3JjZSA9IGZ1bmN0aW9uKCBmb3JjZSApIHtcbiAgdGhpcy52ZWxvY2l0eSArPSBmb3JjZTtcbn07XG5cbnByb3RvLmdldEZyaWN0aW9uRmFjdG9yID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAxIC0gdGhpcy5vcHRpb25zWyB0aGlzLmlzRnJlZVNjcm9sbGluZyA/ICdmcmVlU2Nyb2xsRnJpY3Rpb24nIDogJ2ZyaWN0aW9uJyBdO1xufTtcblxucHJvdG8uZ2V0UmVzdGluZ1Bvc2l0aW9uID0gZnVuY3Rpb24oKSB7XG4gIC8vIG15IHRoYW5rcyB0byBTdGV2ZW4gV2l0dGVucywgd2hvIHNpbXBsaWZpZWQgdGhpcyBtYXRoIGdyZWF0bHlcbiAgcmV0dXJuIHRoaXMueCArIHRoaXMudmVsb2NpdHkgLyAoIDEgLSB0aGlzLmdldEZyaWN0aW9uRmFjdG9yKCkgKTtcbn07XG5cbnByb3RvLmFwcGx5RHJhZ0ZvcmNlID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMuaXNEcmFnZ2FibGUgfHwgIXRoaXMuaXNQb2ludGVyRG93biApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gY2hhbmdlIHRoZSBwb3NpdGlvbiB0byBkcmFnIHBvc2l0aW9uIGJ5IGFwcGx5aW5nIGZvcmNlXG4gIHZhciBkcmFnVmVsb2NpdHkgPSB0aGlzLmRyYWdYIC0gdGhpcy54O1xuICB2YXIgZHJhZ0ZvcmNlID0gZHJhZ1ZlbG9jaXR5IC0gdGhpcy52ZWxvY2l0eTtcbiAgdGhpcy5hcHBseUZvcmNlKCBkcmFnRm9yY2UgKTtcbn07XG5cbnByb3RvLmFwcGx5U2VsZWN0ZWRBdHRyYWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gIC8vIGRvIG5vdCBhdHRyYWN0IGlmIHBvaW50ZXIgZG93biBvciBubyBzbGlkZXNcbiAgdmFyIGRyYWdEb3duID0gdGhpcy5pc0RyYWdnYWJsZSAmJiB0aGlzLmlzUG9pbnRlckRvd247XG4gIGlmICggZHJhZ0Rvd24gfHwgdGhpcy5pc0ZyZWVTY3JvbGxpbmcgfHwgIXRoaXMuc2xpZGVzLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGRpc3RhbmNlID0gdGhpcy5zZWxlY3RlZFNsaWRlLnRhcmdldCAqIC0xIC0gdGhpcy54O1xuICB2YXIgZm9yY2UgPSBkaXN0YW5jZSAqIHRoaXMub3B0aW9ucy5zZWxlY3RlZEF0dHJhY3Rpb247XG4gIHRoaXMuYXBwbHlGb3JjZSggZm9yY2UgKTtcbn07XG5cbnJldHVybiBwcm90bztcblxufSApICk7XG4iLCIvLyBGbGlja2l0eS5DZWxsXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggW1xuICAgICAgJ2dldC1zaXplL2dldC1zaXplJyxcbiAgICBdLCBmdW5jdGlvbiggZ2V0U2l6ZSApIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIGdldFNpemUgKTtcbiAgICB9ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdyxcbiAgICAgICAgcmVxdWlyZSgnZ2V0LXNpemUnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuRmxpY2tpdHkgPSB3aW5kb3cuRmxpY2tpdHkgfHwge307XG4gICAgd2luZG93LkZsaWNraXR5LkNlbGwgPSBmYWN0b3J5KFxuICAgICAgICB3aW5kb3csXG4gICAgICAgIHdpbmRvdy5nZXRTaXplXG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgZ2V0U2l6ZSApIHtcblxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBDZWxsKCBlbGVtLCBwYXJlbnQgKSB7XG4gIHRoaXMuZWxlbWVudCA9IGVsZW07XG4gIHRoaXMucGFyZW50ID0gcGFyZW50O1xuXG4gIHRoaXMuY3JlYXRlKCk7XG59XG5cbnZhciBwcm90byA9IENlbGwucHJvdG90eXBlO1xuXG5wcm90by5jcmVhdGUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5lbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSggJ2FyaWEtaGlkZGVuJywgJ3RydWUnICk7XG4gIHRoaXMueCA9IDA7XG4gIHRoaXMuc2hpZnQgPSAwO1xuICB0aGlzLmVsZW1lbnQuc3R5bGVbIHRoaXMucGFyZW50Lm9yaWdpblNpZGUgXSA9IDA7XG59O1xuXG5wcm90by5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gIC8vIHJlc2V0IHN0eWxlXG4gIHRoaXMudW5zZWxlY3QoKTtcbiAgdGhpcy5lbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJyc7XG4gIHZhciBzaWRlID0gdGhpcy5wYXJlbnQub3JpZ2luU2lkZTtcbiAgdGhpcy5lbGVtZW50LnN0eWxlWyBzaWRlIF0gPSAnJztcbiAgdGhpcy5lbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9ICcnO1xuICB0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpO1xufTtcblxucHJvdG8uZ2V0U2l6ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnNpemUgPSBnZXRTaXplKCB0aGlzLmVsZW1lbnQgKTtcbn07XG5cbnByb3RvLnNldFBvc2l0aW9uID0gZnVuY3Rpb24oIHggKSB7XG4gIHRoaXMueCA9IHg7XG4gIHRoaXMudXBkYXRlVGFyZ2V0KCk7XG4gIHRoaXMucmVuZGVyUG9zaXRpb24oIHggKTtcbn07XG5cbi8vIHNldERlZmF1bHRUYXJnZXQgdjEgbWV0aG9kLCBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSwgcmVtb3ZlIGluIHYzXG5wcm90by51cGRhdGVUYXJnZXQgPSBwcm90by5zZXREZWZhdWx0VGFyZ2V0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBtYXJnaW5Qcm9wZXJ0eSA9IHRoaXMucGFyZW50Lm9yaWdpblNpZGUgPT0gJ2xlZnQnID8gJ21hcmdpbkxlZnQnIDogJ21hcmdpblJpZ2h0JztcbiAgdGhpcy50YXJnZXQgPSB0aGlzLnggKyB0aGlzLnNpemVbIG1hcmdpblByb3BlcnR5IF0gK1xuICAgIHRoaXMuc2l6ZS53aWR0aCAqIHRoaXMucGFyZW50LmNlbGxBbGlnbjtcbn07XG5cbnByb3RvLnJlbmRlclBvc2l0aW9uID0gZnVuY3Rpb24oIHggKSB7XG4gIC8vIHJlbmRlciBwb3NpdGlvbiBvZiBjZWxsIHdpdGggaW4gc2xpZGVyXG4gIHZhciBzaWRlT2Zmc2V0ID0gdGhpcy5wYXJlbnQub3JpZ2luU2lkZSA9PT0gJ2xlZnQnID8gMSA6IC0xO1xuXG4gIHZhciBhZGp1c3RlZFggPSB0aGlzLnBhcmVudC5vcHRpb25zLnBlcmNlbnRQb3NpdGlvbiA/XG4gICAgeCAqIHNpZGVPZmZzZXQgKiAoIHRoaXMucGFyZW50LnNpemUuaW5uZXJXaWR0aCAvIHRoaXMuc2l6ZS53aWR0aCApIDpcbiAgICB4ICogc2lkZU9mZnNldDtcblxuICB0aGlzLmVsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVgoJyArXG4gICAgdGhpcy5wYXJlbnQuZ2V0UG9zaXRpb25WYWx1ZSggYWRqdXN0ZWRYICkgKyAnKSc7XG59O1xuXG5wcm90by5zZWxlY3QgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLXNlbGVjdGVkJyk7XG4gIHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7XG59O1xuXG5wcm90by51bnNlbGVjdCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtc2VsZWN0ZWQnKTtcbiAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSggJ2FyaWEtaGlkZGVuJywgJ3RydWUnICk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7SW50ZWdlcn0gc2hpZnQgLSAwLCAxLCBvciAtMVxuICovXG5wcm90by53cmFwU2hpZnQgPSBmdW5jdGlvbiggc2hpZnQgKSB7XG4gIHRoaXMuc2hpZnQgPSBzaGlmdDtcbiAgdGhpcy5yZW5kZXJQb3NpdGlvbiggdGhpcy54ICsgdGhpcy5wYXJlbnQuc2xpZGVhYmxlV2lkdGggKiBzaGlmdCApO1xufTtcblxucHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0aGlzLmVsZW1lbnQgKTtcbn07XG5cbnJldHVybiBDZWxsO1xuXG59ICkgKTtcbiIsIi8vIGRyYWdcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCBbXG4gICAgICAnLi9mbGlja2l0eScsXG4gICAgICAndW5pZHJhZ2dlci91bmlkcmFnZ2VyJyxcbiAgICAgICdmaXp6eS11aS11dGlscy91dGlscycsXG4gICAgXSwgZnVuY3Rpb24oIEZsaWNraXR5LCBVbmlkcmFnZ2VyLCB1dGlscyApIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIEZsaWNraXR5LCBVbmlkcmFnZ2VyLCB1dGlscyApO1xuICAgIH0gKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgICAgd2luZG93LFxuICAgICAgICByZXF1aXJlKCcuL2ZsaWNraXR5JyksXG4gICAgICAgIHJlcXVpcmUoJ3VuaWRyYWdnZXInKSxcbiAgICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuRmxpY2tpdHkgPSBmYWN0b3J5KFxuICAgICAgICB3aW5kb3csXG4gICAgICAgIHdpbmRvdy5GbGlja2l0eSxcbiAgICAgICAgd2luZG93LlVuaWRyYWdnZXIsXG4gICAgICAgIHdpbmRvdy5maXp6eVVJVXRpbHNcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBGbGlja2l0eSwgVW5pZHJhZ2dlciwgdXRpbHMgKSB7XG5cbid1c2Ugc3RyaWN0JztcblxuLy8gLS0tLS0gZGVmYXVsdHMgLS0tLS0gLy9cblxudXRpbHMuZXh0ZW5kKCBGbGlja2l0eS5kZWZhdWx0cywge1xuICBkcmFnZ2FibGU6ICc+MScsXG4gIGRyYWdUaHJlc2hvbGQ6IDMsXG59ICk7XG5cbi8vIC0tLS0tIGNyZWF0ZSAtLS0tLSAvL1xuXG5GbGlja2l0eS5jcmVhdGVNZXRob2RzLnB1c2goJ19jcmVhdGVEcmFnJyk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGRyYWcgcHJvdG90eXBlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnZhciBwcm90byA9IEZsaWNraXR5LnByb3RvdHlwZTtcbnV0aWxzLmV4dGVuZCggcHJvdG8sIFVuaWRyYWdnZXIucHJvdG90eXBlICk7XG5wcm90by5fdG91Y2hBY3Rpb25WYWx1ZSA9ICdwYW4teSc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5wcm90by5fY3JlYXRlRHJhZyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLm9uKCAnYWN0aXZhdGUnLCB0aGlzLm9uQWN0aXZhdGVEcmFnICk7XG4gIHRoaXMub24oICd1aUNoYW5nZScsIHRoaXMuX3VpQ2hhbmdlRHJhZyApO1xuICB0aGlzLm9uKCAnZGVhY3RpdmF0ZScsIHRoaXMub25EZWFjdGl2YXRlRHJhZyApO1xuICB0aGlzLm9uKCAnY2VsbENoYW5nZScsIHRoaXMudXBkYXRlRHJhZ2dhYmxlICk7XG4gIC8vIFRPRE8gdXBkYXRlRHJhZ2dhYmxlIG9uIHJlc2l6ZT8gaWYgZ3JvdXBDZWxscyAmIHNsaWRlcyBjaGFuZ2Vcbn07XG5cbnByb3RvLm9uQWN0aXZhdGVEcmFnID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaGFuZGxlcyA9IFsgdGhpcy52aWV3cG9ydCBdO1xuICB0aGlzLmJpbmRIYW5kbGVzKCk7XG4gIHRoaXMudXBkYXRlRHJhZ2dhYmxlKCk7XG59O1xuXG5wcm90by5vbkRlYWN0aXZhdGVEcmFnID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMudW5iaW5kSGFuZGxlcygpO1xuICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZHJhZ2dhYmxlJyk7XG59O1xuXG5wcm90by51cGRhdGVEcmFnZ2FibGUgPSBmdW5jdGlvbigpIHtcbiAgLy8gZGlzYWJsZSBkcmFnZ2luZyBpZiBsZXNzIHRoYW4gMiBzbGlkZXMuICMyNzhcbiAgaWYgKCB0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlID09ICc+MScgKSB7XG4gICAgdGhpcy5pc0RyYWdnYWJsZSA9IHRoaXMuc2xpZGVzLmxlbmd0aCA+IDE7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5pc0RyYWdnYWJsZSA9IHRoaXMub3B0aW9ucy5kcmFnZ2FibGU7XG4gIH1cbiAgaWYgKCB0aGlzLmlzRHJhZ2dhYmxlICkge1xuICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1kcmFnZ2FibGUnKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZHJhZ2dhYmxlJyk7XG4gIH1cbn07XG5cbi8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5wcm90by5iaW5kRHJhZyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlID0gdHJ1ZTtcbiAgdGhpcy51cGRhdGVEcmFnZ2FibGUoKTtcbn07XG5cbnByb3RvLnVuYmluZERyYWcgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5vcHRpb25zLmRyYWdnYWJsZSA9IGZhbHNlO1xuICB0aGlzLnVwZGF0ZURyYWdnYWJsZSgpO1xufTtcblxucHJvdG8uX3VpQ2hhbmdlRHJhZyA9IGZ1bmN0aW9uKCkge1xuICBkZWxldGUgdGhpcy5pc0ZyZWVTY3JvbGxpbmc7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBwb2ludGVyIGV2ZW50cyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5wcm90by5wb2ludGVyRG93biA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgaWYgKCAhdGhpcy5pc0RyYWdnYWJsZSApIHtcbiAgICB0aGlzLl9wb2ludGVyRG93bkRlZmF1bHQoIGV2ZW50LCBwb2ludGVyICk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBpc09rYXkgPSB0aGlzLm9rYXlQb2ludGVyRG93biggZXZlbnQgKTtcbiAgaWYgKCAhaXNPa2F5ICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuX3BvaW50ZXJEb3duUHJldmVudERlZmF1bHQoIGV2ZW50ICk7XG4gIHRoaXMucG9pbnRlckRvd25Gb2N1cyggZXZlbnQgKTtcbiAgLy8gYmx1clxuICBpZiAoIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT0gdGhpcy5lbGVtZW50ICkge1xuICAgIC8vIGRvIG5vdCBibHVyIGlmIGFscmVhZHkgZm9jdXNlZFxuICAgIHRoaXMucG9pbnRlckRvd25CbHVyKCk7XG4gIH1cblxuICAvLyBzdG9wIGlmIGl0IHdhcyBtb3ZpbmdcbiAgdGhpcy5kcmFnWCA9IHRoaXMueDtcbiAgdGhpcy52aWV3cG9ydC5jbGFzc0xpc3QuYWRkKCdpcy1wb2ludGVyLWRvd24nKTtcbiAgLy8gdHJhY2sgc2Nyb2xsaW5nXG4gIHRoaXMucG9pbnRlckRvd25TY3JvbGwgPSBnZXRTY3JvbGxQb3NpdGlvbigpO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggJ3Njcm9sbCcsIHRoaXMgKTtcblxuICB0aGlzLl9wb2ludGVyRG93bkRlZmF1bHQoIGV2ZW50LCBwb2ludGVyICk7XG59O1xuXG4vLyBkZWZhdWx0IHBvaW50ZXJEb3duIGxvZ2ljLCB1c2VkIGZvciBzdGF0aWNDbGlja1xucHJvdG8uX3BvaW50ZXJEb3duRGVmYXVsdCA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgLy8gdHJhY2sgc3RhcnQgZXZlbnQgcG9zaXRpb25cbiAgLy8gU2FmYXJpIDkgb3ZlcnJpZGVzIHBhZ2VYIGFuZCBwYWdlWS4gVGhlc2UgdmFsdWVzIG5lZWRzIHRvIGJlIGNvcGllZC4gIzc3OVxuICB0aGlzLnBvaW50ZXJEb3duUG9pbnRlciA9IHtcbiAgICBwYWdlWDogcG9pbnRlci5wYWdlWCxcbiAgICBwYWdlWTogcG9pbnRlci5wYWdlWSxcbiAgfTtcbiAgLy8gYmluZCBtb3ZlIGFuZCBlbmQgZXZlbnRzXG4gIHRoaXMuX2JpbmRQb3N0U3RhcnRFdmVudHMoIGV2ZW50ICk7XG4gIHRoaXMuZGlzcGF0Y2hFdmVudCggJ3BvaW50ZXJEb3duJywgZXZlbnQsIFsgcG9pbnRlciBdICk7XG59O1xuXG52YXIgZm9jdXNOb2RlcyA9IHtcbiAgSU5QVVQ6IHRydWUsXG4gIFRFWFRBUkVBOiB0cnVlLFxuICBTRUxFQ1Q6IHRydWUsXG59O1xuXG5wcm90by5wb2ludGVyRG93bkZvY3VzID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB2YXIgaXNGb2N1c05vZGUgPSBmb2N1c05vZGVzWyBldmVudC50YXJnZXQubm9kZU5hbWUgXTtcbiAgaWYgKCAhaXNGb2N1c05vZGUgKSB7XG4gICAgdGhpcy5mb2N1cygpO1xuICB9XG59O1xuXG5wcm90by5fcG9pbnRlckRvd25QcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdmFyIGlzVG91Y2hTdGFydCA9IGV2ZW50LnR5cGUgPT0gJ3RvdWNoc3RhcnQnO1xuICB2YXIgaXNUb3VjaFBvaW50ZXIgPSBldmVudC5wb2ludGVyVHlwZSA9PSAndG91Y2gnO1xuICB2YXIgaXNGb2N1c05vZGUgPSBmb2N1c05vZGVzWyBldmVudC50YXJnZXQubm9kZU5hbWUgXTtcbiAgaWYgKCAhaXNUb3VjaFN0YXJ0ICYmICFpc1RvdWNoUG9pbnRlciAmJiAhaXNGb2N1c05vZGUgKSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfVxufTtcblxuLy8gLS0tLS0gbW92ZSAtLS0tLSAvL1xuXG5wcm90by5oYXNEcmFnU3RhcnRlZCA9IGZ1bmN0aW9uKCBtb3ZlVmVjdG9yICkge1xuICByZXR1cm4gTWF0aC5hYnMoIG1vdmVWZWN0b3IueCApID4gdGhpcy5vcHRpb25zLmRyYWdUaHJlc2hvbGQ7XG59O1xuXG4vLyAtLS0tLSB1cCAtLS0tLSAvL1xuXG5wcm90by5wb2ludGVyVXAgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIGRlbGV0ZSB0aGlzLmlzVG91Y2hTY3JvbGxpbmc7XG4gIHRoaXMudmlld3BvcnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtcG9pbnRlci1kb3duJyk7XG4gIHRoaXMuZGlzcGF0Y2hFdmVudCggJ3BvaW50ZXJVcCcsIGV2ZW50LCBbIHBvaW50ZXIgXSApO1xuICB0aGlzLl9kcmFnUG9pbnRlclVwKCBldmVudCwgcG9pbnRlciApO1xufTtcblxucHJvdG8ucG9pbnRlckRvbmUgPSBmdW5jdGlvbigpIHtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdzY3JvbGwnLCB0aGlzICk7XG4gIGRlbGV0ZSB0aGlzLnBvaW50ZXJEb3duU2Nyb2xsO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZHJhZ2dpbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxucHJvdG8uZHJhZ1N0YXJ0ID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICBpZiAoICF0aGlzLmlzRHJhZ2dhYmxlICkge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLmRyYWdTdGFydFBvc2l0aW9uID0gdGhpcy54O1xuICB0aGlzLnN0YXJ0QW5pbWF0aW9uKCk7XG4gIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCAnc2Nyb2xsJywgdGhpcyApO1xuICB0aGlzLmRpc3BhdGNoRXZlbnQoICdkcmFnU3RhcnQnLCBldmVudCwgWyBwb2ludGVyIF0gKTtcbn07XG5cbnByb3RvLnBvaW50ZXJNb3ZlID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB2YXIgbW92ZVZlY3RvciA9IHRoaXMuX2RyYWdQb2ludGVyTW92ZSggZXZlbnQsIHBvaW50ZXIgKTtcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KCAncG9pbnRlck1vdmUnLCBldmVudCwgWyBwb2ludGVyLCBtb3ZlVmVjdG9yIF0gKTtcbiAgdGhpcy5fZHJhZ01vdmUoIGV2ZW50LCBwb2ludGVyLCBtb3ZlVmVjdG9yICk7XG59O1xuXG5wcm90by5kcmFnTW92ZSA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciApIHtcbiAgaWYgKCAhdGhpcy5pc0RyYWdnYWJsZSApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICB0aGlzLnByZXZpb3VzRHJhZ1ggPSB0aGlzLmRyYWdYO1xuICAvLyByZXZlcnNlIGlmIHJpZ2h0LXRvLWxlZnRcbiAgdmFyIGRpcmVjdGlvbiA9IHRoaXMub3B0aW9ucy5yaWdodFRvTGVmdCA/IC0xIDogMTtcbiAgaWYgKCB0aGlzLm9wdGlvbnMud3JhcEFyb3VuZCApIHtcbiAgICAvLyB3cmFwIGFyb3VuZCBtb3ZlLiAjNTg5XG4gICAgbW92ZVZlY3Rvci54ICU9IHRoaXMuc2xpZGVhYmxlV2lkdGg7XG4gIH1cbiAgdmFyIGRyYWdYID0gdGhpcy5kcmFnU3RhcnRQb3NpdGlvbiArIG1vdmVWZWN0b3IueCAqIGRpcmVjdGlvbjtcblxuICBpZiAoICF0aGlzLm9wdGlvbnMud3JhcEFyb3VuZCAmJiB0aGlzLnNsaWRlcy5sZW5ndGggKSB7XG4gICAgLy8gc2xvdyBkcmFnXG4gICAgdmFyIG9yaWdpbkJvdW5kID0gTWF0aC5tYXgoIC10aGlzLnNsaWRlc1swXS50YXJnZXQsIHRoaXMuZHJhZ1N0YXJ0UG9zaXRpb24gKTtcbiAgICBkcmFnWCA9IGRyYWdYID4gb3JpZ2luQm91bmQgPyAoIGRyYWdYICsgb3JpZ2luQm91bmQgKSAqIDAuNSA6IGRyYWdYO1xuICAgIHZhciBlbmRCb3VuZCA9IE1hdGgubWluKCAtdGhpcy5nZXRMYXN0U2xpZGUoKS50YXJnZXQsIHRoaXMuZHJhZ1N0YXJ0UG9zaXRpb24gKTtcbiAgICBkcmFnWCA9IGRyYWdYIDwgZW5kQm91bmQgPyAoIGRyYWdYICsgZW5kQm91bmQgKSAqIDAuNSA6IGRyYWdYO1xuICB9XG5cbiAgdGhpcy5kcmFnWCA9IGRyYWdYO1xuXG4gIHRoaXMuZHJhZ01vdmVUaW1lID0gbmV3IERhdGUoKTtcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KCAnZHJhZ01vdmUnLCBldmVudCwgWyBwb2ludGVyLCBtb3ZlVmVjdG9yIF0gKTtcbn07XG5cbnByb3RvLmRyYWdFbmQgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIGlmICggIXRoaXMuaXNEcmFnZ2FibGUgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICggdGhpcy5vcHRpb25zLmZyZWVTY3JvbGwgKSB7XG4gICAgdGhpcy5pc0ZyZWVTY3JvbGxpbmcgPSB0cnVlO1xuICB9XG4gIC8vIHNldCBzZWxlY3RlZEluZGV4IGJhc2VkIG9uIHdoZXJlIGZsaWNrIHdpbGwgZW5kIHVwXG4gIHZhciBpbmRleCA9IHRoaXMuZHJhZ0VuZFJlc3RpbmdTZWxlY3QoKTtcblxuICBpZiAoIHRoaXMub3B0aW9ucy5mcmVlU2Nyb2xsICYmICF0aGlzLm9wdGlvbnMud3JhcEFyb3VuZCApIHtcbiAgICAvLyBpZiBmcmVlLXNjcm9sbCAmIG5vdCB3cmFwIGFyb3VuZFxuICAgIC8vIGRvIG5vdCBmcmVlLXNjcm9sbCBpZiBnb2luZyBvdXRzaWRlIG9mIGJvdW5kaW5nIHNsaWRlc1xuICAgIC8vIHNvIGJvdW5kaW5nIHNsaWRlcyBjYW4gYXR0cmFjdCBzbGlkZXIsIGFuZCBrZWVwIGl0IGluIGJvdW5kc1xuICAgIHZhciByZXN0aW5nWCA9IHRoaXMuZ2V0UmVzdGluZ1Bvc2l0aW9uKCk7XG4gICAgdGhpcy5pc0ZyZWVTY3JvbGxpbmcgPSAtcmVzdGluZ1ggPiB0aGlzLnNsaWRlc1swXS50YXJnZXQgJiZcbiAgICAgIC1yZXN0aW5nWCA8IHRoaXMuZ2V0TGFzdFNsaWRlKCkudGFyZ2V0O1xuICB9IGVsc2UgaWYgKCAhdGhpcy5vcHRpb25zLmZyZWVTY3JvbGwgJiYgaW5kZXggPT0gdGhpcy5zZWxlY3RlZEluZGV4ICkge1xuICAgIC8vIGJvb3N0IHNlbGVjdGlvbiBpZiBzZWxlY3RlZCBpbmRleCBoYXMgbm90IGNoYW5nZWRcbiAgICBpbmRleCArPSB0aGlzLmRyYWdFbmRCb29zdFNlbGVjdCgpO1xuICB9XG4gIGRlbGV0ZSB0aGlzLnByZXZpb3VzRHJhZ1g7XG4gIC8vIGFwcGx5IHNlbGVjdGlvblxuICAvLyBUT0RPIHJlZmFjdG9yIHRoaXMsIHNlbGVjdGluZyBoZXJlIGZlZWxzIHdlaXJkXG4gIC8vIEhBQ0ssIHNldCBmbGFnIHNvIGRyYWdnaW5nIHN0YXlzIGluIGNvcnJlY3QgZGlyZWN0aW9uXG4gIHRoaXMuaXNEcmFnU2VsZWN0ID0gdGhpcy5vcHRpb25zLndyYXBBcm91bmQ7XG4gIHRoaXMuc2VsZWN0KCBpbmRleCApO1xuICBkZWxldGUgdGhpcy5pc0RyYWdTZWxlY3Q7XG4gIHRoaXMuZGlzcGF0Y2hFdmVudCggJ2RyYWdFbmQnLCBldmVudCwgWyBwb2ludGVyIF0gKTtcbn07XG5cbnByb3RvLmRyYWdFbmRSZXN0aW5nU2VsZWN0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciByZXN0aW5nWCA9IHRoaXMuZ2V0UmVzdGluZ1Bvc2l0aW9uKCk7XG4gIC8vIGhvdyBmYXIgYXdheSBmcm9tIHNlbGVjdGVkIHNsaWRlXG4gIHZhciBkaXN0YW5jZSA9IE1hdGguYWJzKCB0aGlzLmdldFNsaWRlRGlzdGFuY2UoIC1yZXN0aW5nWCwgdGhpcy5zZWxlY3RlZEluZGV4ICkgKTtcbiAgLy8gZ2V0IGNsb3NldCByZXN0aW5nIGdvaW5nIHVwIGFuZCBnb2luZyBkb3duXG4gIHZhciBwb3NpdGl2ZVJlc3RpbmcgPSB0aGlzLl9nZXRDbG9zZXN0UmVzdGluZyggcmVzdGluZ1gsIGRpc3RhbmNlLCAxICk7XG4gIHZhciBuZWdhdGl2ZVJlc3RpbmcgPSB0aGlzLl9nZXRDbG9zZXN0UmVzdGluZyggcmVzdGluZ1gsIGRpc3RhbmNlLCAtMSApO1xuICAvLyB1c2UgY2xvc2VyIHJlc3RpbmcgZm9yIHdyYXAtYXJvdW5kXG4gIHZhciBpbmRleCA9IHBvc2l0aXZlUmVzdGluZy5kaXN0YW5jZSA8IG5lZ2F0aXZlUmVzdGluZy5kaXN0YW5jZSA/XG4gICAgcG9zaXRpdmVSZXN0aW5nLmluZGV4IDogbmVnYXRpdmVSZXN0aW5nLmluZGV4O1xuICByZXR1cm4gaW5kZXg7XG59O1xuXG4vKipcbiAqIGdpdmVuIHJlc3RpbmcgWCBhbmQgZGlzdGFuY2UgdG8gc2VsZWN0ZWQgY2VsbFxuICogZ2V0IHRoZSBkaXN0YW5jZSBhbmQgaW5kZXggb2YgdGhlIGNsb3Nlc3QgY2VsbFxuICogQHBhcmFtIHtOdW1iZXJ9IHJlc3RpbmdYIC0gZXN0aW1hdGVkIHBvc3QtZmxpY2sgcmVzdGluZyBwb3NpdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IGRpc3RhbmNlIC0gZGlzdGFuY2UgdG8gc2VsZWN0ZWQgY2VsbFxuICogQHBhcmFtIHtJbnRlZ2VyfSBpbmNyZW1lbnQgLSArMSBvciAtMSwgZ29pbmcgdXAgb3IgZG93blxuICogQHJldHVybnMge09iamVjdH0gLSB7IGRpc3RhbmNlOiB7TnVtYmVyfSwgaW5kZXg6IHtJbnRlZ2VyfSB9XG4gKi9cbnByb3RvLl9nZXRDbG9zZXN0UmVzdGluZyA9IGZ1bmN0aW9uKCByZXN0aW5nWCwgZGlzdGFuY2UsIGluY3JlbWVudCApIHtcbiAgdmFyIGluZGV4ID0gdGhpcy5zZWxlY3RlZEluZGV4O1xuICB2YXIgbWluRGlzdGFuY2UgPSBJbmZpbml0eTtcbiAgdmFyIGNvbmRpdGlvbiA9IHRoaXMub3B0aW9ucy5jb250YWluICYmICF0aGlzLm9wdGlvbnMud3JhcEFyb3VuZCA/XG4gICAgLy8gaWYgY29udGFpbiwga2VlcCBnb2luZyBpZiBkaXN0YW5jZSBpcyBlcXVhbCB0byBtaW5EaXN0YW5jZVxuICAgIGZ1bmN0aW9uKCBkaXN0LCBtaW5EaXN0ICkge1xuICAgICAgcmV0dXJuIGRpc3QgPD0gbWluRGlzdDtcbiAgICB9IDogZnVuY3Rpb24oIGRpc3QsIG1pbkRpc3QgKSB7XG4gICAgICByZXR1cm4gZGlzdCA8IG1pbkRpc3Q7XG4gICAgfTtcbiAgd2hpbGUgKCBjb25kaXRpb24oIGRpc3RhbmNlLCBtaW5EaXN0YW5jZSApICkge1xuICAgIC8vIG1lYXN1cmUgZGlzdGFuY2UgdG8gbmV4dCBjZWxsXG4gICAgaW5kZXggKz0gaW5jcmVtZW50O1xuICAgIG1pbkRpc3RhbmNlID0gZGlzdGFuY2U7XG4gICAgZGlzdGFuY2UgPSB0aGlzLmdldFNsaWRlRGlzdGFuY2UoIC1yZXN0aW5nWCwgaW5kZXggKTtcbiAgICBpZiAoIGRpc3RhbmNlID09PSBudWxsICkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGRpc3RhbmNlID0gTWF0aC5hYnMoIGRpc3RhbmNlICk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBkaXN0YW5jZTogbWluRGlzdGFuY2UsXG4gICAgLy8gc2VsZWN0ZWQgd2FzIHByZXZpb3VzIGluZGV4XG4gICAgaW5kZXg6IGluZGV4IC0gaW5jcmVtZW50LFxuICB9O1xufTtcblxuLyoqXG4gKiBtZWFzdXJlIGRpc3RhbmNlIGJldHdlZW4geCBhbmQgYSBzbGlkZSB0YXJnZXRcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IC0gaG9yaXpvbnRhbCBwb3NpdGlvblxuICogQHBhcmFtIHtJbnRlZ2VyfSBpbmRleCAtIHNsaWRlIGluZGV4XG4gKiBAcmV0dXJucyB7TnVtYmVyfSAtIHNsaWRlIGRpc3RhbmNlXG4gKi9cbnByb3RvLmdldFNsaWRlRGlzdGFuY2UgPSBmdW5jdGlvbiggeCwgaW5kZXggKSB7XG4gIHZhciBsZW4gPSB0aGlzLnNsaWRlcy5sZW5ndGg7XG4gIC8vIHdyYXAgYXJvdW5kIGlmIGF0IGxlYXN0IDIgc2xpZGVzXG4gIHZhciBpc1dyYXBBcm91bmQgPSB0aGlzLm9wdGlvbnMud3JhcEFyb3VuZCAmJiBsZW4gPiAxO1xuICB2YXIgc2xpZGVJbmRleCA9IGlzV3JhcEFyb3VuZCA/IHV0aWxzLm1vZHVsbyggaW5kZXgsIGxlbiApIDogaW5kZXg7XG4gIHZhciBzbGlkZSA9IHRoaXMuc2xpZGVzWyBzbGlkZUluZGV4IF07XG4gIGlmICggIXNsaWRlICkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIC8vIGFkZCBkaXN0YW5jZSBmb3Igd3JhcC1hcm91bmQgc2xpZGVzXG4gIHZhciB3cmFwID0gaXNXcmFwQXJvdW5kID8gdGhpcy5zbGlkZWFibGVXaWR0aCAqIE1hdGguZmxvb3IoIGluZGV4L2xlbiApIDogMDtcbiAgcmV0dXJuIHggLSAoIHNsaWRlLnRhcmdldCArIHdyYXAgKTtcbn07XG5cbnByb3RvLmRyYWdFbmRCb29zdFNlbGVjdCA9IGZ1bmN0aW9uKCkge1xuICAvLyBkbyBub3QgYm9vc3QgaWYgbm8gcHJldmlvdXNEcmFnWCBvciBkcmFnTW92ZVRpbWVcbiAgaWYgKCB0aGlzLnByZXZpb3VzRHJhZ1ggPT09IHVuZGVmaW5lZCB8fCAhdGhpcy5kcmFnTW92ZVRpbWUgfHxcbiAgICAvLyBvciBpZiBkcmFnIHdhcyBoZWxkIGZvciAxMDAgbXNcbiAgICBuZXcgRGF0ZSgpIC0gdGhpcy5kcmFnTW92ZVRpbWUgPiAxMDAgKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICB2YXIgZGlzdGFuY2UgPSB0aGlzLmdldFNsaWRlRGlzdGFuY2UoIC10aGlzLmRyYWdYLCB0aGlzLnNlbGVjdGVkSW5kZXggKTtcbiAgdmFyIGRlbHRhID0gdGhpcy5wcmV2aW91c0RyYWdYIC0gdGhpcy5kcmFnWDtcbiAgaWYgKCBkaXN0YW5jZSA+IDAgJiYgZGVsdGEgPiAwICkge1xuICAgIC8vIGJvb3N0IHRvIG5leHQgaWYgbW92aW5nIHRvd2FyZHMgdGhlIHJpZ2h0LCBhbmQgcG9zaXRpdmUgdmVsb2NpdHlcbiAgICByZXR1cm4gMTtcbiAgfSBlbHNlIGlmICggZGlzdGFuY2UgPCAwICYmIGRlbHRhIDwgMCApIHtcbiAgICAvLyBib29zdCB0byBwcmV2aW91cyBpZiBtb3ZpbmcgdG93YXJkcyB0aGUgbGVmdCwgYW5kIG5lZ2F0aXZlIHZlbG9jaXR5XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIHJldHVybiAwO1xufTtcblxuLy8gLS0tLS0gc3RhdGljQ2xpY2sgLS0tLS0gLy9cblxucHJvdG8uc3RhdGljQ2xpY2sgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIC8vIGdldCBjbGlja2VkQ2VsbCwgaWYgY2VsbCB3YXMgY2xpY2tlZFxuICB2YXIgY2xpY2tlZENlbGwgPSB0aGlzLmdldFBhcmVudENlbGwoIGV2ZW50LnRhcmdldCApO1xuICB2YXIgY2VsbEVsZW0gPSBjbGlja2VkQ2VsbCAmJiBjbGlja2VkQ2VsbC5lbGVtZW50O1xuICB2YXIgY2VsbEluZGV4ID0gY2xpY2tlZENlbGwgJiYgdGhpcy5jZWxscy5pbmRleE9mKCBjbGlja2VkQ2VsbCApO1xuICB0aGlzLmRpc3BhdGNoRXZlbnQoICdzdGF0aWNDbGljaycsIGV2ZW50LCBbIHBvaW50ZXIsIGNlbGxFbGVtLCBjZWxsSW5kZXggXSApO1xufTtcblxuLy8gLS0tLS0gc2Nyb2xsIC0tLS0tIC8vXG5cbnByb3RvLm9uc2Nyb2xsID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzY3JvbGwgPSBnZXRTY3JvbGxQb3NpdGlvbigpO1xuICB2YXIgc2Nyb2xsTW92ZVggPSB0aGlzLnBvaW50ZXJEb3duU2Nyb2xsLnggLSBzY3JvbGwueDtcbiAgdmFyIHNjcm9sbE1vdmVZID0gdGhpcy5wb2ludGVyRG93blNjcm9sbC55IC0gc2Nyb2xsLnk7XG4gIC8vIGNhbmNlbCBjbGljay90YXAgaWYgc2Nyb2xsIGlzIHRvbyBtdWNoXG4gIGlmICggTWF0aC5hYnMoIHNjcm9sbE1vdmVYICkgPiAzIHx8IE1hdGguYWJzKCBzY3JvbGxNb3ZlWSApID4gMyApIHtcbiAgICB0aGlzLl9wb2ludGVyRG9uZSgpO1xuICB9XG59O1xuXG4vLyAtLS0tLSB1dGlscyAtLS0tLSAvL1xuXG5mdW5jdGlvbiBnZXRTY3JvbGxQb3NpdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiB3aW5kb3cucGFnZVhPZmZzZXQsXG4gICAgeTogd2luZG93LnBhZ2VZT2Zmc2V0LFxuICB9O1xufVxuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxucmV0dXJuIEZsaWNraXR5O1xuXG59ICkgKTtcbiIsIi8vIEZsaWNraXR5IG1haW5cbi8qIGVzbGludC1kaXNhYmxlIG1heC1wYXJhbXMgKi9cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCBbXG4gICAgICAnZXYtZW1pdHRlci9ldi1lbWl0dGVyJyxcbiAgICAgICdnZXQtc2l6ZS9nZXQtc2l6ZScsXG4gICAgICAnZml6enktdWktdXRpbHMvdXRpbHMnLFxuICAgICAgJy4vY2VsbCcsXG4gICAgICAnLi9zbGlkZScsXG4gICAgICAnLi9hbmltYXRlJyxcbiAgICBdLCBmdW5jdGlvbiggRXZFbWl0dGVyLCBnZXRTaXplLCB1dGlscywgQ2VsbCwgU2xpZGUsIGFuaW1hdGVQcm90b3R5cGUgKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBFdkVtaXR0ZXIsIGdldFNpemUsIHV0aWxzLCBDZWxsLCBTbGlkZSwgYW5pbWF0ZVByb3RvdHlwZSApO1xuICAgIH0gKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgICAgd2luZG93LFxuICAgICAgICByZXF1aXJlKCdldi1lbWl0dGVyJyksXG4gICAgICAgIHJlcXVpcmUoJ2dldC1zaXplJyksXG4gICAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJyksXG4gICAgICAgIHJlcXVpcmUoJy4vY2VsbCcpLFxuICAgICAgICByZXF1aXJlKCcuL3NsaWRlJyksXG4gICAgICAgIHJlcXVpcmUoJy4vYW5pbWF0ZScpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHZhciBfRmxpY2tpdHkgPSB3aW5kb3cuRmxpY2tpdHk7XG5cbiAgICB3aW5kb3cuRmxpY2tpdHkgPSBmYWN0b3J5KFxuICAgICAgICB3aW5kb3csXG4gICAgICAgIHdpbmRvdy5FdkVtaXR0ZXIsXG4gICAgICAgIHdpbmRvdy5nZXRTaXplLFxuICAgICAgICB3aW5kb3cuZml6enlVSVV0aWxzLFxuICAgICAgICBfRmxpY2tpdHkuQ2VsbCxcbiAgICAgICAgX0ZsaWNraXR5LlNsaWRlLFxuICAgICAgICBfRmxpY2tpdHkuYW5pbWF0ZVByb3RvdHlwZVxuICAgICk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIEV2RW1pdHRlciwgZ2V0U2l6ZSxcbiAgICB1dGlscywgQ2VsbCwgU2xpZGUsIGFuaW1hdGVQcm90b3R5cGUgKSB7XG5cbi8qIGVzbGludC1lbmFibGUgbWF4LXBhcmFtcyAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyB2YXJzXG52YXIgalF1ZXJ5ID0gd2luZG93LmpRdWVyeTtcbnZhciBnZXRDb21wdXRlZFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGU7XG52YXIgY29uc29sZSA9IHdpbmRvdy5jb25zb2xlO1xuXG5mdW5jdGlvbiBtb3ZlRWxlbWVudHMoIGVsZW1zLCB0b0VsZW0gKSB7XG4gIGVsZW1zID0gdXRpbHMubWFrZUFycmF5KCBlbGVtcyApO1xuICB3aGlsZSAoIGVsZW1zLmxlbmd0aCApIHtcbiAgICB0b0VsZW0uYXBwZW5kQ2hpbGQoIGVsZW1zLnNoaWZ0KCkgKTtcbiAgfVxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBGbGlja2l0eSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vLyBnbG9iYWxseSB1bmlxdWUgaWRlbnRpZmllcnNcbnZhciBHVUlEID0gMDtcbi8vIGludGVybmFsIHN0b3JlIG9mIGFsbCBGbGlja2l0eSBpbnRhbmNlc1xudmFyIGluc3RhbmNlcyA9IHt9O1xuXG5mdW5jdGlvbiBGbGlja2l0eSggZWxlbWVudCwgb3B0aW9ucyApIHtcbiAgdmFyIHF1ZXJ5RWxlbWVudCA9IHV0aWxzLmdldFF1ZXJ5RWxlbWVudCggZWxlbWVudCApO1xuICBpZiAoICFxdWVyeUVsZW1lbnQgKSB7XG4gICAgaWYgKCBjb25zb2xlICkge1xuICAgICAgY29uc29sZS5lcnJvciggJ0JhZCBlbGVtZW50IGZvciBGbGlja2l0eTogJyArICggcXVlcnlFbGVtZW50IHx8IGVsZW1lbnQgKSApO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5lbGVtZW50ID0gcXVlcnlFbGVtZW50O1xuICAvLyBkbyBub3QgaW5pdGlhbGl6ZSB0d2ljZSBvbiBzYW1lIGVsZW1lbnRcbiAgaWYgKCB0aGlzLmVsZW1lbnQuZmxpY2tpdHlHVUlEICkge1xuICAgIHZhciBpbnN0YW5jZSA9IGluc3RhbmNlc1sgdGhpcy5lbGVtZW50LmZsaWNraXR5R1VJRCBdO1xuICAgIGlmICggaW5zdGFuY2UgKSBpbnN0YW5jZS5vcHRpb24oIG9wdGlvbnMgKTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH1cblxuICAvLyBhZGQgalF1ZXJ5XG4gIGlmICggalF1ZXJ5ICkge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBqUXVlcnkoIHRoaXMuZWxlbWVudCApO1xuICB9XG4gIC8vIG9wdGlvbnNcbiAgdGhpcy5vcHRpb25zID0gdXRpbHMuZXh0ZW5kKCB7fSwgdGhpcy5jb25zdHJ1Y3Rvci5kZWZhdWx0cyApO1xuICB0aGlzLm9wdGlvbiggb3B0aW9ucyApO1xuXG4gIC8vIGtpY2sgdGhpbmdzIG9mZlxuICB0aGlzLl9jcmVhdGUoKTtcbn1cblxuRmxpY2tpdHkuZGVmYXVsdHMgPSB7XG4gIGFjY2Vzc2liaWxpdHk6IHRydWUsXG4gIC8vIGFkYXB0aXZlSGVpZ2h0OiBmYWxzZSxcbiAgY2VsbEFsaWduOiAnY2VudGVyJyxcbiAgLy8gY2VsbFNlbGVjdG9yOiB1bmRlZmluZWQsXG4gIC8vIGNvbnRhaW46IGZhbHNlLFxuICBmcmVlU2Nyb2xsRnJpY3Rpb246IDAuMDc1LCAvLyBmcmljdGlvbiB3aGVuIGZyZWUtc2Nyb2xsaW5nXG4gIGZyaWN0aW9uOiAwLjI4LCAvLyBmcmljdGlvbiB3aGVuIHNlbGVjdGluZ1xuICBuYW1lc3BhY2VKUXVlcnlFdmVudHM6IHRydWUsXG4gIC8vIGluaXRpYWxJbmRleDogMCxcbiAgcGVyY2VudFBvc2l0aW9uOiB0cnVlLFxuICByZXNpemU6IHRydWUsXG4gIHNlbGVjdGVkQXR0cmFjdGlvbjogMC4wMjUsXG4gIHNldEdhbGxlcnlTaXplOiB0cnVlLFxuICAvLyB3YXRjaENTUzogZmFsc2UsXG4gIC8vIHdyYXBBcm91bmQ6IGZhbHNlXG59O1xuXG4vLyBoYXNoIG9mIG1ldGhvZHMgdHJpZ2dlcmVkIG9uIF9jcmVhdGUoKVxuRmxpY2tpdHkuY3JlYXRlTWV0aG9kcyA9IFtdO1xuXG52YXIgcHJvdG8gPSBGbGlja2l0eS5wcm90b3R5cGU7XG4vLyBpbmhlcml0IEV2ZW50RW1pdHRlclxudXRpbHMuZXh0ZW5kKCBwcm90bywgRXZFbWl0dGVyLnByb3RvdHlwZSApO1xuXG5wcm90by5fY3JlYXRlID0gZnVuY3Rpb24oKSB7XG4gIC8vIGFkZCBpZCBmb3IgRmxpY2tpdHkuZGF0YVxuICB2YXIgaWQgPSB0aGlzLmd1aWQgPSArK0dVSUQ7XG4gIHRoaXMuZWxlbWVudC5mbGlja2l0eUdVSUQgPSBpZDsgLy8gZXhwYW5kb1xuICBpbnN0YW5jZXNbIGlkIF0gPSB0aGlzOyAvLyBhc3NvY2lhdGUgdmlhIGlkXG4gIC8vIGluaXRpYWwgcHJvcGVydGllc1xuICB0aGlzLnNlbGVjdGVkSW5kZXggPSAwO1xuICAvLyBob3cgbWFueSBmcmFtZXMgc2xpZGVyIGhhcyBiZWVuIGluIHNhbWUgcG9zaXRpb25cbiAgdGhpcy5yZXN0aW5nRnJhbWVzID0gMDtcbiAgLy8gaW5pdGlhbCBwaHlzaWNzIHByb3BlcnRpZXNcbiAgdGhpcy54ID0gMDtcbiAgdGhpcy52ZWxvY2l0eSA9IDA7XG4gIHRoaXMub3JpZ2luU2lkZSA9IHRoaXMub3B0aW9ucy5yaWdodFRvTGVmdCA/ICdyaWdodCcgOiAnbGVmdCc7XG4gIC8vIGNyZWF0ZSB2aWV3cG9ydCAmIHNsaWRlclxuICB0aGlzLnZpZXdwb3J0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHRoaXMudmlld3BvcnQuY2xhc3NOYW1lID0gJ2ZsaWNraXR5LXZpZXdwb3J0JztcbiAgdGhpcy5fY3JlYXRlU2xpZGVyKCk7XG5cbiAgaWYgKCB0aGlzLm9wdGlvbnMucmVzaXplIHx8IHRoaXMub3B0aW9ucy53YXRjaENTUyApIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggJ3Jlc2l6ZScsIHRoaXMgKTtcbiAgfVxuXG4gIC8vIGFkZCBsaXN0ZW5lcnMgZnJvbSBvbiBvcHRpb25cbiAgZm9yICggdmFyIGV2ZW50TmFtZSBpbiB0aGlzLm9wdGlvbnMub24gKSB7XG4gICAgdmFyIGxpc3RlbmVyID0gdGhpcy5vcHRpb25zLm9uWyBldmVudE5hbWUgXTtcbiAgICB0aGlzLm9uKCBldmVudE5hbWUsIGxpc3RlbmVyICk7XG4gIH1cblxuICBGbGlja2l0eS5jcmVhdGVNZXRob2RzLmZvckVhY2goIGZ1bmN0aW9uKCBtZXRob2QgKSB7XG4gICAgdGhpc1sgbWV0aG9kIF0oKTtcbiAgfSwgdGhpcyApO1xuXG4gIGlmICggdGhpcy5vcHRpb25zLndhdGNoQ1NTICkge1xuICAgIHRoaXMud2F0Y2hDU1MoKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmFjdGl2YXRlKCk7XG4gIH1cblxufTtcblxuLyoqXG4gKiBzZXQgb3B0aW9uc1xuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIHRvIGV4dGVuZFxuICovXG5wcm90by5vcHRpb24gPSBmdW5jdGlvbiggb3B0cyApIHtcbiAgdXRpbHMuZXh0ZW5kKCB0aGlzLm9wdGlvbnMsIG9wdHMgKTtcbn07XG5cbnByb3RvLmFjdGl2YXRlID0gZnVuY3Rpb24oKSB7XG4gIGlmICggdGhpcy5pc0FjdGl2ZSApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5pc0FjdGl2ZSA9IHRydWU7XG4gIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdmbGlja2l0eS1lbmFibGVkJyk7XG4gIGlmICggdGhpcy5vcHRpb25zLnJpZ2h0VG9MZWZ0ICkge1xuICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdmbGlja2l0eS1ydGwnKTtcbiAgfVxuXG4gIHRoaXMuZ2V0U2l6ZSgpO1xuICAvLyBtb3ZlIGluaXRpYWwgY2VsbCBlbGVtZW50cyBzbyB0aGV5IGNhbiBiZSBsb2FkZWQgYXMgY2VsbHNcbiAgdmFyIGNlbGxFbGVtcyA9IHRoaXMuX2ZpbHRlckZpbmRDZWxsRWxlbWVudHMoIHRoaXMuZWxlbWVudC5jaGlsZHJlbiApO1xuICBtb3ZlRWxlbWVudHMoIGNlbGxFbGVtcywgdGhpcy5zbGlkZXIgKTtcbiAgdGhpcy52aWV3cG9ydC5hcHBlbmRDaGlsZCggdGhpcy5zbGlkZXIgKTtcbiAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKCB0aGlzLnZpZXdwb3J0ICk7XG4gIC8vIGdldCBjZWxscyBmcm9tIGNoaWxkcmVuXG4gIHRoaXMucmVsb2FkQ2VsbHMoKTtcblxuICBpZiAoIHRoaXMub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ICkge1xuICAgIC8vIGFsbG93IGVsZW1lbnQgdG8gZm9jdXNhYmxlXG4gICAgdGhpcy5lbGVtZW50LnRhYkluZGV4ID0gMDtcbiAgICAvLyBsaXN0ZW4gZm9yIGtleSBwcmVzc2VzXG4gICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdrZXlkb3duJywgdGhpcyApO1xuICB9XG5cbiAgdGhpcy5lbWl0RXZlbnQoJ2FjdGl2YXRlJyk7XG4gIHRoaXMuc2VsZWN0SW5pdGlhbEluZGV4KCk7XG4gIC8vIGZsYWcgZm9yIGluaXRpYWwgYWN0aXZhdGlvbiwgZm9yIHVzaW5nIGluaXRpYWxJbmRleFxuICB0aGlzLmlzSW5pdEFjdGl2YXRlZCA9IHRydWU7XG4gIC8vIHJlYWR5IGV2ZW50LiAjNDkzXG4gIHRoaXMuZGlzcGF0Y2hFdmVudCgncmVhZHknKTtcbn07XG5cbi8vIHNsaWRlciBwb3NpdGlvbnMgdGhlIGNlbGxzXG5wcm90by5fY3JlYXRlU2xpZGVyID0gZnVuY3Rpb24oKSB7XG4gIC8vIHNsaWRlciBlbGVtZW50IGRvZXMgYWxsIHRoZSBwb3NpdGlvbmluZ1xuICB2YXIgc2xpZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHNsaWRlci5jbGFzc05hbWUgPSAnZmxpY2tpdHktc2xpZGVyJztcbiAgc2xpZGVyLnN0eWxlWyB0aGlzLm9yaWdpblNpZGUgXSA9IDA7XG4gIHRoaXMuc2xpZGVyID0gc2xpZGVyO1xufTtcblxucHJvdG8uX2ZpbHRlckZpbmRDZWxsRWxlbWVudHMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIHJldHVybiB1dGlscy5maWx0ZXJGaW5kRWxlbWVudHMoIGVsZW1zLCB0aGlzLm9wdGlvbnMuY2VsbFNlbGVjdG9yICk7XG59O1xuXG4vLyBnb2VzIHRocm91Z2ggYWxsIGNoaWxkcmVuXG5wcm90by5yZWxvYWRDZWxscyA9IGZ1bmN0aW9uKCkge1xuICAvLyBjb2xsZWN0aW9uIG9mIGl0ZW0gZWxlbWVudHNcbiAgdGhpcy5jZWxscyA9IHRoaXMuX21ha2VDZWxscyggdGhpcy5zbGlkZXIuY2hpbGRyZW4gKTtcbiAgdGhpcy5wb3NpdGlvbkNlbGxzKCk7XG4gIHRoaXMuX2dldFdyYXBTaGlmdENlbGxzKCk7XG4gIHRoaXMuc2V0R2FsbGVyeVNpemUoKTtcbn07XG5cbi8qKlxuICogdHVybiBlbGVtZW50cyBpbnRvIEZsaWNraXR5LkNlbGxzXG4gKiBAcGFyYW0ge1tBcnJheSwgTm9kZUxpc3QsIEhUTUxFbGVtZW50XX0gZWxlbXMgLSBlbGVtZW50cyB0byBtYWtlIGludG8gY2VsbHNcbiAqIEByZXR1cm5zIHtBcnJheX0gaXRlbXMgLSBjb2xsZWN0aW9uIG9mIG5ldyBGbGlja2l0eSBDZWxsc1xuICovXG5wcm90by5fbWFrZUNlbGxzID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICB2YXIgY2VsbEVsZW1zID0gdGhpcy5fZmlsdGVyRmluZENlbGxFbGVtZW50cyggZWxlbXMgKTtcblxuICAvLyBjcmVhdGUgbmV3IEZsaWNraXR5IGZvciBjb2xsZWN0aW9uXG4gIHZhciBjZWxscyA9IGNlbGxFbGVtcy5tYXAoIGZ1bmN0aW9uKCBjZWxsRWxlbSApIHtcbiAgICByZXR1cm4gbmV3IENlbGwoIGNlbGxFbGVtLCB0aGlzICk7XG4gIH0sIHRoaXMgKTtcblxuICByZXR1cm4gY2VsbHM7XG59O1xuXG5wcm90by5nZXRMYXN0Q2VsbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5jZWxsc1sgdGhpcy5jZWxscy5sZW5ndGggLSAxIF07XG59O1xuXG5wcm90by5nZXRMYXN0U2xpZGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2xpZGVzWyB0aGlzLnNsaWRlcy5sZW5ndGggLSAxIF07XG59O1xuXG4vLyBwb3NpdGlvbnMgYWxsIGNlbGxzXG5wcm90by5wb3NpdGlvbkNlbGxzID0gZnVuY3Rpb24oKSB7XG4gIC8vIHNpemUgYWxsIGNlbGxzXG4gIHRoaXMuX3NpemVDZWxscyggdGhpcy5jZWxscyApO1xuICAvLyBwb3NpdGlvbiBhbGwgY2VsbHNcbiAgdGhpcy5fcG9zaXRpb25DZWxscyggMCApO1xufTtcblxuLyoqXG4gKiBwb3NpdGlvbiBjZXJ0YWluIGNlbGxzXG4gKiBAcGFyYW0ge0ludGVnZXJ9IGluZGV4IC0gd2hpY2ggY2VsbCB0byBzdGFydCB3aXRoXG4gKi9cbnByb3RvLl9wb3NpdGlvbkNlbGxzID0gZnVuY3Rpb24oIGluZGV4ICkge1xuICBpbmRleCA9IGluZGV4IHx8IDA7XG4gIC8vIGFsc28gbWVhc3VyZSBtYXhDZWxsSGVpZ2h0XG4gIC8vIHN0YXJ0IDAgaWYgcG9zaXRpb25pbmcgYWxsIGNlbGxzXG4gIHRoaXMubWF4Q2VsbEhlaWdodCA9IGluZGV4ID8gdGhpcy5tYXhDZWxsSGVpZ2h0IHx8IDAgOiAwO1xuICB2YXIgY2VsbFggPSAwO1xuICAvLyBnZXQgY2VsbFhcbiAgaWYgKCBpbmRleCA+IDAgKSB7XG4gICAgdmFyIHN0YXJ0Q2VsbCA9IHRoaXMuY2VsbHNbIGluZGV4IC0gMSBdO1xuICAgIGNlbGxYID0gc3RhcnRDZWxsLnggKyBzdGFydENlbGwuc2l6ZS5vdXRlcldpZHRoO1xuICB9XG4gIHZhciBsZW4gPSB0aGlzLmNlbGxzLmxlbmd0aDtcbiAgZm9yICggdmFyIGkgPSBpbmRleDsgaSA8IGxlbjsgaSsrICkge1xuICAgIHZhciBjZWxsID0gdGhpcy5jZWxsc1tpXTtcbiAgICBjZWxsLnNldFBvc2l0aW9uKCBjZWxsWCApO1xuICAgIGNlbGxYICs9IGNlbGwuc2l6ZS5vdXRlcldpZHRoO1xuICAgIHRoaXMubWF4Q2VsbEhlaWdodCA9IE1hdGgubWF4KCBjZWxsLnNpemUub3V0ZXJIZWlnaHQsIHRoaXMubWF4Q2VsbEhlaWdodCApO1xuICB9XG4gIC8vIGtlZXAgdHJhY2sgb2YgY2VsbFggZm9yIHdyYXAtYXJvdW5kXG4gIHRoaXMuc2xpZGVhYmxlV2lkdGggPSBjZWxsWDtcbiAgLy8gc2xpZGVzXG4gIHRoaXMudXBkYXRlU2xpZGVzKCk7XG4gIC8vIGNvbnRhaW4gc2xpZGVzIHRhcmdldFxuICB0aGlzLl9jb250YWluU2xpZGVzKCk7XG4gIC8vIHVwZGF0ZSBzbGlkZXNXaWR0aFxuICB0aGlzLnNsaWRlc1dpZHRoID0gbGVuID8gdGhpcy5nZXRMYXN0U2xpZGUoKS50YXJnZXQgLSB0aGlzLnNsaWRlc1swXS50YXJnZXQgOiAwO1xufTtcblxuLyoqXG4gKiBjZWxsLmdldFNpemUoKSBvbiBtdWx0aXBsZSBjZWxsc1xuICogQHBhcmFtIHtBcnJheX0gY2VsbHMgLSBjZWxscyB0byBzaXplXG4gKi9cbnByb3RvLl9zaXplQ2VsbHMgPSBmdW5jdGlvbiggY2VsbHMgKSB7XG4gIGNlbGxzLmZvckVhY2goIGZ1bmN0aW9uKCBjZWxsICkge1xuICAgIGNlbGwuZ2V0U2l6ZSgpO1xuICB9ICk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxucHJvdG8udXBkYXRlU2xpZGVzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc2xpZGVzID0gW107XG4gIGlmICggIXRoaXMuY2VsbHMubGVuZ3RoICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzbGlkZSA9IG5ldyBTbGlkZSggdGhpcyApO1xuICB0aGlzLnNsaWRlcy5wdXNoKCBzbGlkZSApO1xuICB2YXIgaXNPcmlnaW5MZWZ0ID0gdGhpcy5vcmlnaW5TaWRlID09ICdsZWZ0JztcbiAgdmFyIG5leHRNYXJnaW4gPSBpc09yaWdpbkxlZnQgPyAnbWFyZ2luUmlnaHQnIDogJ21hcmdpbkxlZnQnO1xuXG4gIHZhciBjYW5DZWxsRml0ID0gdGhpcy5fZ2V0Q2FuQ2VsbEZpdCgpO1xuXG4gIHRoaXMuY2VsbHMuZm9yRWFjaCggZnVuY3Rpb24oIGNlbGwsIGkgKSB7XG4gICAgLy8ganVzdCBhZGQgY2VsbCBpZiBmaXJzdCBjZWxsIGluIHNsaWRlXG4gICAgaWYgKCAhc2xpZGUuY2VsbHMubGVuZ3RoICkge1xuICAgICAgc2xpZGUuYWRkQ2VsbCggY2VsbCApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzbGlkZVdpZHRoID0gKCBzbGlkZS5vdXRlcldpZHRoIC0gc2xpZGUuZmlyc3RNYXJnaW4gKSArXG4gICAgICAoIGNlbGwuc2l6ZS5vdXRlcldpZHRoIC0gY2VsbC5zaXplWyBuZXh0TWFyZ2luIF0gKTtcblxuICAgIGlmICggY2FuQ2VsbEZpdC5jYWxsKCB0aGlzLCBpLCBzbGlkZVdpZHRoICkgKSB7XG4gICAgICBzbGlkZS5hZGRDZWxsKCBjZWxsICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGRvZXNuJ3QgZml0LCBuZXcgc2xpZGVcbiAgICAgIHNsaWRlLnVwZGF0ZVRhcmdldCgpO1xuXG4gICAgICBzbGlkZSA9IG5ldyBTbGlkZSggdGhpcyApO1xuICAgICAgdGhpcy5zbGlkZXMucHVzaCggc2xpZGUgKTtcbiAgICAgIHNsaWRlLmFkZENlbGwoIGNlbGwgKTtcbiAgICB9XG4gIH0sIHRoaXMgKTtcbiAgLy8gbGFzdCBzbGlkZVxuICBzbGlkZS51cGRhdGVUYXJnZXQoKTtcbiAgLy8gdXBkYXRlIC5zZWxlY3RlZFNsaWRlXG4gIHRoaXMudXBkYXRlU2VsZWN0ZWRTbGlkZSgpO1xufTtcblxucHJvdG8uX2dldENhbkNlbGxGaXQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGdyb3VwQ2VsbHMgPSB0aGlzLm9wdGlvbnMuZ3JvdXBDZWxscztcbiAgaWYgKCAhZ3JvdXBDZWxscyApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIGdyb3VwQ2VsbHMgPT0gJ251bWJlcicgKSB7XG4gICAgLy8gZ3JvdXAgYnkgbnVtYmVyLiAzIC0+IFswLDEsMl0sIFszLDQsNV0sIC4uLlxuICAgIHZhciBudW1iZXIgPSBwYXJzZUludCggZ3JvdXBDZWxscywgMTAgKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oIGkgKSB7XG4gICAgICByZXR1cm4gKCBpICUgbnVtYmVyICkgIT09IDA7XG4gICAgfTtcbiAgfVxuICAvLyBkZWZhdWx0LCBncm91cCBieSB3aWR0aCBvZiBzbGlkZVxuICAvLyBwYXJzZSAnNzUlXG4gIHZhciBwZXJjZW50TWF0Y2ggPSB0eXBlb2YgZ3JvdXBDZWxscyA9PSAnc3RyaW5nJyAmJlxuICAgIGdyb3VwQ2VsbHMubWF0Y2goIC9eKFxcZCspJSQvICk7XG4gIHZhciBwZXJjZW50ID0gcGVyY2VudE1hdGNoID8gcGFyc2VJbnQoIHBlcmNlbnRNYXRjaFsxXSwgMTAgKSAvIDEwMCA6IDE7XG4gIHJldHVybiBmdW5jdGlvbiggaSwgc2xpZGVXaWR0aCApIHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8taW52YWxpZC10aGlzICovXG4gICAgcmV0dXJuIHNsaWRlV2lkdGggPD0gKCB0aGlzLnNpemUuaW5uZXJXaWR0aCArIDEgKSAqIHBlcmNlbnQ7XG4gIH07XG59O1xuXG4vLyBhbGlhcyBfaW5pdCBmb3IgalF1ZXJ5IHBsdWdpbiAuZmxpY2tpdHkoKVxucHJvdG8uX2luaXQgPVxucHJvdG8ucmVwb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBvc2l0aW9uQ2VsbHMoKTtcbiAgdGhpcy5wb3NpdGlvblNsaWRlckF0U2VsZWN0ZWQoKTtcbn07XG5cbnByb3RvLmdldFNpemUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zaXplID0gZ2V0U2l6ZSggdGhpcy5lbGVtZW50ICk7XG4gIHRoaXMuc2V0Q2VsbEFsaWduKCk7XG4gIHRoaXMuY3Vyc29yUG9zaXRpb24gPSB0aGlzLnNpemUuaW5uZXJXaWR0aCAqIHRoaXMuY2VsbEFsaWduO1xufTtcblxudmFyIGNlbGxBbGlnblNob3J0aGFuZHMgPSB7XG4gIC8vIGNlbGwgYWxpZ24sIHRoZW4gYmFzZWQgb24gb3JpZ2luIHNpZGVcbiAgY2VudGVyOiB7XG4gICAgbGVmdDogMC41LFxuICAgIHJpZ2h0OiAwLjUsXG4gIH0sXG4gIGxlZnQ6IHtcbiAgICBsZWZ0OiAwLFxuICAgIHJpZ2h0OiAxLFxuICB9LFxuICByaWdodDoge1xuICAgIHJpZ2h0OiAwLFxuICAgIGxlZnQ6IDEsXG4gIH0sXG59O1xuXG5wcm90by5zZXRDZWxsQWxpZ24gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNob3J0aGFuZCA9IGNlbGxBbGlnblNob3J0aGFuZHNbIHRoaXMub3B0aW9ucy5jZWxsQWxpZ24gXTtcbiAgdGhpcy5jZWxsQWxpZ24gPSBzaG9ydGhhbmQgPyBzaG9ydGhhbmRbIHRoaXMub3JpZ2luU2lkZSBdIDogdGhpcy5vcHRpb25zLmNlbGxBbGlnbjtcbn07XG5cbnByb3RvLnNldEdhbGxlcnlTaXplID0gZnVuY3Rpb24oKSB7XG4gIGlmICggdGhpcy5vcHRpb25zLnNldEdhbGxlcnlTaXplICkge1xuICAgIHZhciBoZWlnaHQgPSB0aGlzLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQgJiYgdGhpcy5zZWxlY3RlZFNsaWRlID9cbiAgICAgIHRoaXMuc2VsZWN0ZWRTbGlkZS5oZWlnaHQgOiB0aGlzLm1heENlbGxIZWlnaHQ7XG4gICAgdGhpcy52aWV3cG9ydC5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyAncHgnO1xuICB9XG59O1xuXG5wcm90by5fZ2V0V3JhcFNoaWZ0Q2VsbHMgPSBmdW5jdGlvbigpIHtcbiAgLy8gb25seSBmb3Igd3JhcC1hcm91bmRcbiAgaWYgKCAhdGhpcy5vcHRpb25zLndyYXBBcm91bmQgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIHVuc2hpZnQgcHJldmlvdXMgY2VsbHNcbiAgdGhpcy5fdW5zaGlmdENlbGxzKCB0aGlzLmJlZm9yZVNoaWZ0Q2VsbHMgKTtcbiAgdGhpcy5fdW5zaGlmdENlbGxzKCB0aGlzLmFmdGVyU2hpZnRDZWxscyApO1xuICAvLyBnZXQgYmVmb3JlIGNlbGxzXG4gIC8vIGluaXRpYWwgZ2FwXG4gIHZhciBnYXBYID0gdGhpcy5jdXJzb3JQb3NpdGlvbjtcbiAgdmFyIGNlbGxJbmRleCA9IHRoaXMuY2VsbHMubGVuZ3RoIC0gMTtcbiAgdGhpcy5iZWZvcmVTaGlmdENlbGxzID0gdGhpcy5fZ2V0R2FwQ2VsbHMoIGdhcFgsIGNlbGxJbmRleCwgLTEgKTtcbiAgLy8gZ2V0IGFmdGVyIGNlbGxzXG4gIC8vIGVuZGluZyBnYXAgYmV0d2VlbiBsYXN0IGNlbGwgYW5kIGVuZCBvZiBnYWxsZXJ5IHZpZXdwb3J0XG4gIGdhcFggPSB0aGlzLnNpemUuaW5uZXJXaWR0aCAtIHRoaXMuY3Vyc29yUG9zaXRpb247XG4gIC8vIHN0YXJ0IGNsb25pbmcgYXQgZmlyc3QgY2VsbCwgd29ya2luZyBmb3J3YXJkc1xuICB0aGlzLmFmdGVyU2hpZnRDZWxscyA9IHRoaXMuX2dldEdhcENlbGxzKCBnYXBYLCAwLCAxICk7XG59O1xuXG5wcm90by5fZ2V0R2FwQ2VsbHMgPSBmdW5jdGlvbiggZ2FwWCwgY2VsbEluZGV4LCBpbmNyZW1lbnQgKSB7XG4gIC8vIGtlZXAgYWRkaW5nIGNlbGxzIHVudGlsIHRoZSBjb3ZlciB0aGUgaW5pdGlhbCBnYXBcbiAgdmFyIGNlbGxzID0gW107XG4gIHdoaWxlICggZ2FwWCA+IDAgKSB7XG4gICAgdmFyIGNlbGwgPSB0aGlzLmNlbGxzWyBjZWxsSW5kZXggXTtcbiAgICBpZiAoICFjZWxsICkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNlbGxzLnB1c2goIGNlbGwgKTtcbiAgICBjZWxsSW5kZXggKz0gaW5jcmVtZW50O1xuICAgIGdhcFggLT0gY2VsbC5zaXplLm91dGVyV2lkdGg7XG4gIH1cbiAgcmV0dXJuIGNlbGxzO1xufTtcblxuLy8gLS0tLS0gY29udGFpbiAtLS0tLSAvL1xuXG4vLyBjb250YWluIGNlbGwgdGFyZ2V0cyBzbyBubyBleGNlc3Mgc2xpZGluZ1xucHJvdG8uX2NvbnRhaW5TbGlkZXMgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5vcHRpb25zLmNvbnRhaW4gfHwgdGhpcy5vcHRpb25zLndyYXBBcm91bmQgfHwgIXRoaXMuY2VsbHMubGVuZ3RoICkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgaXNSaWdodFRvTGVmdCA9IHRoaXMub3B0aW9ucy5yaWdodFRvTGVmdDtcbiAgdmFyIGJlZ2luTWFyZ2luID0gaXNSaWdodFRvTGVmdCA/ICdtYXJnaW5SaWdodCcgOiAnbWFyZ2luTGVmdCc7XG4gIHZhciBlbmRNYXJnaW4gPSBpc1JpZ2h0VG9MZWZ0ID8gJ21hcmdpbkxlZnQnIDogJ21hcmdpblJpZ2h0JztcbiAgdmFyIGNvbnRlbnRXaWR0aCA9IHRoaXMuc2xpZGVhYmxlV2lkdGggLSB0aGlzLmdldExhc3RDZWxsKCkuc2l6ZVsgZW5kTWFyZ2luIF07XG4gIC8vIGNvbnRlbnQgaXMgbGVzcyB0aGFuIGdhbGxlcnkgc2l6ZVxuICB2YXIgaXNDb250ZW50U21hbGxlciA9IGNvbnRlbnRXaWR0aCA8IHRoaXMuc2l6ZS5pbm5lcldpZHRoO1xuICAvLyBib3VuZHNcbiAgdmFyIGJlZ2luQm91bmQgPSB0aGlzLmN1cnNvclBvc2l0aW9uICsgdGhpcy5jZWxsc1swXS5zaXplWyBiZWdpbk1hcmdpbiBdO1xuICB2YXIgZW5kQm91bmQgPSBjb250ZW50V2lkdGggLSB0aGlzLnNpemUuaW5uZXJXaWR0aCAqICggMSAtIHRoaXMuY2VsbEFsaWduICk7XG4gIC8vIGNvbnRhaW4gZWFjaCBjZWxsIHRhcmdldFxuICB0aGlzLnNsaWRlcy5mb3JFYWNoKCBmdW5jdGlvbiggc2xpZGUgKSB7XG4gICAgaWYgKCBpc0NvbnRlbnRTbWFsbGVyICkge1xuICAgICAgLy8gYWxsIGNlbGxzIGZpdCBpbnNpZGUgZ2FsbGVyeVxuICAgICAgc2xpZGUudGFyZ2V0ID0gY29udGVudFdpZHRoICogdGhpcy5jZWxsQWxpZ247XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGNvbnRhaW4gdG8gYm91bmRzXG4gICAgICBzbGlkZS50YXJnZXQgPSBNYXRoLm1heCggc2xpZGUudGFyZ2V0LCBiZWdpbkJvdW5kICk7XG4gICAgICBzbGlkZS50YXJnZXQgPSBNYXRoLm1pbiggc2xpZGUudGFyZ2V0LCBlbmRCb3VuZCApO1xuICAgIH1cbiAgfSwgdGhpcyApO1xufTtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbi8qKlxuICogZW1pdHMgZXZlbnRzIHZpYSBldmVudEVtaXR0ZXIgYW5kIGpRdWVyeSBldmVudHNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIC0gbmFtZSBvZiBldmVudFxuICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSBvcmlnaW5hbCBldmVudFxuICogQHBhcmFtIHtBcnJheX0gYXJncyAtIGV4dHJhIGFyZ3VtZW50c1xuICovXG5wcm90by5kaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24oIHR5cGUsIGV2ZW50LCBhcmdzICkge1xuICB2YXIgZW1pdEFyZ3MgPSBldmVudCA/IFsgZXZlbnQgXS5jb25jYXQoIGFyZ3MgKSA6IGFyZ3M7XG4gIHRoaXMuZW1pdEV2ZW50KCB0eXBlLCBlbWl0QXJncyApO1xuXG4gIGlmICggalF1ZXJ5ICYmIHRoaXMuJGVsZW1lbnQgKSB7XG4gICAgLy8gZGVmYXVsdCB0cmlnZ2VyIHdpdGggdHlwZSBpZiBubyBldmVudFxuICAgIHR5cGUgKz0gdGhpcy5vcHRpb25zLm5hbWVzcGFjZUpRdWVyeUV2ZW50cyA/ICcuZmxpY2tpdHknIDogJyc7XG4gICAgdmFyICRldmVudCA9IHR5cGU7XG4gICAgaWYgKCBldmVudCApIHtcbiAgICAgIC8vIGNyZWF0ZSBqUXVlcnkgZXZlbnRcbiAgICAgIHZhciBqUUV2ZW50ID0gbmV3IGpRdWVyeS5FdmVudCggZXZlbnQgKTtcbiAgICAgIGpRRXZlbnQudHlwZSA9IHR5cGU7XG4gICAgICAkZXZlbnQgPSBqUUV2ZW50O1xuICAgIH1cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoICRldmVudCwgYXJncyApO1xuICB9XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBzZWxlY3QgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLyoqXG4gKiBAcGFyYW0ge0ludGVnZXJ9IGluZGV4IC0gaW5kZXggb2YgdGhlIHNsaWRlXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzV3JhcCAtIHdpbGwgd3JhcC1hcm91bmQgdG8gbGFzdC9maXJzdCBpZiBhdCB0aGUgZW5kXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzSW5zdGFudCAtIHdpbGwgaW1tZWRpYXRlbHkgc2V0IHBvc2l0aW9uIGF0IHNlbGVjdGVkIGNlbGxcbiAqL1xucHJvdG8uc2VsZWN0ID0gZnVuY3Rpb24oIGluZGV4LCBpc1dyYXAsIGlzSW5zdGFudCApIHtcbiAgaWYgKCAhdGhpcy5pc0FjdGl2ZSApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaW5kZXggPSBwYXJzZUludCggaW5kZXgsIDEwICk7XG4gIHRoaXMuX3dyYXBTZWxlY3QoIGluZGV4ICk7XG5cbiAgaWYgKCB0aGlzLm9wdGlvbnMud3JhcEFyb3VuZCB8fCBpc1dyYXAgKSB7XG4gICAgaW5kZXggPSB1dGlscy5tb2R1bG8oIGluZGV4LCB0aGlzLnNsaWRlcy5sZW5ndGggKTtcbiAgfVxuICAvLyBiYWlsIGlmIGludmFsaWQgaW5kZXhcbiAgaWYgKCAhdGhpcy5zbGlkZXNbIGluZGV4IF0gKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBwcmV2SW5kZXggPSB0aGlzLnNlbGVjdGVkSW5kZXg7XG4gIHRoaXMuc2VsZWN0ZWRJbmRleCA9IGluZGV4O1xuICB0aGlzLnVwZGF0ZVNlbGVjdGVkU2xpZGUoKTtcbiAgaWYgKCBpc0luc3RhbnQgKSB7XG4gICAgdGhpcy5wb3NpdGlvblNsaWRlckF0U2VsZWN0ZWQoKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnN0YXJ0QW5pbWF0aW9uKCk7XG4gIH1cbiAgaWYgKCB0aGlzLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQgKSB7XG4gICAgdGhpcy5zZXRHYWxsZXJ5U2l6ZSgpO1xuICB9XG4gIC8vIGV2ZW50c1xuICB0aGlzLmRpc3BhdGNoRXZlbnQoICdzZWxlY3QnLCBudWxsLCBbIGluZGV4IF0gKTtcbiAgLy8gY2hhbmdlIGV2ZW50IGlmIG5ldyBpbmRleFxuICBpZiAoIGluZGV4ICE9IHByZXZJbmRleCApIHtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoICdjaGFuZ2UnLCBudWxsLCBbIGluZGV4IF0gKTtcbiAgfVxuICAvLyBvbGQgdjEgZXZlbnQgbmFtZSwgcmVtb3ZlIGluIHYzXG4gIHRoaXMuZGlzcGF0Y2hFdmVudCgnY2VsbFNlbGVjdCcpO1xufTtcblxuLy8gd3JhcHMgcG9zaXRpb24gZm9yIHdyYXBBcm91bmQsIHRvIG1vdmUgdG8gY2xvc2VzdCBzbGlkZS4gIzExM1xucHJvdG8uX3dyYXBTZWxlY3QgPSBmdW5jdGlvbiggaW5kZXggKSB7XG4gIHZhciBsZW4gPSB0aGlzLnNsaWRlcy5sZW5ndGg7XG4gIHZhciBpc1dyYXBwaW5nID0gdGhpcy5vcHRpb25zLndyYXBBcm91bmQgJiYgbGVuID4gMTtcbiAgaWYgKCAhaXNXcmFwcGluZyApIHtcbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cbiAgdmFyIHdyYXBJbmRleCA9IHV0aWxzLm1vZHVsbyggaW5kZXgsIGxlbiApO1xuICAvLyBnbyB0byBzaG9ydGVzdFxuICB2YXIgZGVsdGEgPSBNYXRoLmFicyggd3JhcEluZGV4IC0gdGhpcy5zZWxlY3RlZEluZGV4ICk7XG4gIHZhciBiYWNrV3JhcERlbHRhID0gTWF0aC5hYnMoICggd3JhcEluZGV4ICsgbGVuICkgLSB0aGlzLnNlbGVjdGVkSW5kZXggKTtcbiAgdmFyIGZvcmV3YXJkV3JhcERlbHRhID0gTWF0aC5hYnMoICggd3JhcEluZGV4IC0gbGVuICkgLSB0aGlzLnNlbGVjdGVkSW5kZXggKTtcbiAgaWYgKCAhdGhpcy5pc0RyYWdTZWxlY3QgJiYgYmFja1dyYXBEZWx0YSA8IGRlbHRhICkge1xuICAgIGluZGV4ICs9IGxlbjtcbiAgfSBlbHNlIGlmICggIXRoaXMuaXNEcmFnU2VsZWN0ICYmIGZvcmV3YXJkV3JhcERlbHRhIDwgZGVsdGEgKSB7XG4gICAgaW5kZXggLT0gbGVuO1xuICB9XG4gIC8vIHdyYXAgcG9zaXRpb24gc28gc2xpZGVyIGlzIHdpdGhpbiBub3JtYWwgYXJlYVxuICBpZiAoIGluZGV4IDwgMCApIHtcbiAgICB0aGlzLnggLT0gdGhpcy5zbGlkZWFibGVXaWR0aDtcbiAgfSBlbHNlIGlmICggaW5kZXggPj0gbGVuICkge1xuICAgIHRoaXMueCArPSB0aGlzLnNsaWRlYWJsZVdpZHRoO1xuICB9XG59O1xuXG5wcm90by5wcmV2aW91cyA9IGZ1bmN0aW9uKCBpc1dyYXAsIGlzSW5zdGFudCApIHtcbiAgdGhpcy5zZWxlY3QoIHRoaXMuc2VsZWN0ZWRJbmRleCAtIDEsIGlzV3JhcCwgaXNJbnN0YW50ICk7XG59O1xuXG5wcm90by5uZXh0ID0gZnVuY3Rpb24oIGlzV3JhcCwgaXNJbnN0YW50ICkge1xuICB0aGlzLnNlbGVjdCggdGhpcy5zZWxlY3RlZEluZGV4ICsgMSwgaXNXcmFwLCBpc0luc3RhbnQgKTtcbn07XG5cbnByb3RvLnVwZGF0ZVNlbGVjdGVkU2xpZGUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNsaWRlID0gdGhpcy5zbGlkZXNbIHRoaXMuc2VsZWN0ZWRJbmRleCBdO1xuICAvLyBzZWxlY3RlZEluZGV4IGNvdWxkIGJlIG91dHNpZGUgb2Ygc2xpZGVzLCBpZiB0cmlnZ2VyZWQgYmVmb3JlIHJlc2l6ZSgpXG4gIGlmICggIXNsaWRlICkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyB1bnNlbGVjdCBwcmV2aW91cyBzZWxlY3RlZCBzbGlkZVxuICB0aGlzLnVuc2VsZWN0U2VsZWN0ZWRTbGlkZSgpO1xuICAvLyB1cGRhdGUgbmV3IHNlbGVjdGVkIHNsaWRlXG4gIHRoaXMuc2VsZWN0ZWRTbGlkZSA9IHNsaWRlO1xuICBzbGlkZS5zZWxlY3QoKTtcbiAgdGhpcy5zZWxlY3RlZENlbGxzID0gc2xpZGUuY2VsbHM7XG4gIHRoaXMuc2VsZWN0ZWRFbGVtZW50cyA9IHNsaWRlLmdldENlbGxFbGVtZW50cygpO1xuICAvLyBIQUNLOiBzZWxlY3RlZENlbGwgJiBzZWxlY3RlZEVsZW1lbnQgaXMgZmlyc3QgY2VsbCBpbiBzbGlkZSwgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgLy8gUmVtb3ZlIGluIHYzP1xuICB0aGlzLnNlbGVjdGVkQ2VsbCA9IHNsaWRlLmNlbGxzWzBdO1xuICB0aGlzLnNlbGVjdGVkRWxlbWVudCA9IHRoaXMuc2VsZWN0ZWRFbGVtZW50c1swXTtcbn07XG5cbnByb3RvLnVuc2VsZWN0U2VsZWN0ZWRTbGlkZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIHRoaXMuc2VsZWN0ZWRTbGlkZSApIHtcbiAgICB0aGlzLnNlbGVjdGVkU2xpZGUudW5zZWxlY3QoKTtcbiAgfVxufTtcblxucHJvdG8uc2VsZWN0SW5pdGlhbEluZGV4ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpbml0aWFsSW5kZXggPSB0aGlzLm9wdGlvbnMuaW5pdGlhbEluZGV4O1xuICAvLyBhbHJlYWR5IGFjdGl2YXRlZCwgc2VsZWN0IHByZXZpb3VzIHNlbGVjdGVkSW5kZXhcbiAgaWYgKCB0aGlzLmlzSW5pdEFjdGl2YXRlZCApIHtcbiAgICB0aGlzLnNlbGVjdCggdGhpcy5zZWxlY3RlZEluZGV4LCBmYWxzZSwgdHJ1ZSApO1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBzZWxlY3Qgd2l0aCBzZWxlY3RvciBzdHJpbmdcbiAgaWYgKCBpbml0aWFsSW5kZXggJiYgdHlwZW9mIGluaXRpYWxJbmRleCA9PSAnc3RyaW5nJyApIHtcbiAgICB2YXIgY2VsbCA9IHRoaXMucXVlcnlDZWxsKCBpbml0aWFsSW5kZXggKTtcbiAgICBpZiAoIGNlbGwgKSB7XG4gICAgICB0aGlzLnNlbGVjdENlbGwoIGluaXRpYWxJbmRleCwgZmFsc2UsIHRydWUgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5kZXggPSAwO1xuICAvLyBzZWxlY3Qgd2l0aCBudW1iZXJcbiAgaWYgKCBpbml0aWFsSW5kZXggJiYgdGhpcy5zbGlkZXNbIGluaXRpYWxJbmRleCBdICkge1xuICAgIGluZGV4ID0gaW5pdGlhbEluZGV4O1xuICB9XG4gIC8vIHNlbGVjdCBpbnN0YW50bHlcbiAgdGhpcy5zZWxlY3QoIGluZGV4LCBmYWxzZSwgdHJ1ZSApO1xufTtcblxuLyoqXG4gKiBzZWxlY3Qgc2xpZGUgZnJvbSBudW1iZXIgb3IgY2VsbCBlbGVtZW50XG4gKiBAcGFyYW0ge1tFbGVtZW50LCBOdW1iZXJdfSB2YWx1ZSAtIHplcm8tYmFzZWQgaW5kZXggb3IgZWxlbWVudCB0byBzZWxlY3RcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNXcmFwIC0gZW5hYmxlcyB3cmFwcGluZyBhcm91bmQgZm9yIGV4dHJhIGluZGV4XG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzSW5zdGFudCAtIGRpc2FibGVzIHNsaWRlIGFuaW1hdGlvblxuICovXG5wcm90by5zZWxlY3RDZWxsID0gZnVuY3Rpb24oIHZhbHVlLCBpc1dyYXAsIGlzSW5zdGFudCApIHtcbiAgLy8gZ2V0IGNlbGxcbiAgdmFyIGNlbGwgPSB0aGlzLnF1ZXJ5Q2VsbCggdmFsdWUgKTtcbiAgaWYgKCAhY2VsbCApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgaW5kZXggPSB0aGlzLmdldENlbGxTbGlkZUluZGV4KCBjZWxsICk7XG4gIHRoaXMuc2VsZWN0KCBpbmRleCwgaXNXcmFwLCBpc0luc3RhbnQgKTtcbn07XG5cbnByb3RvLmdldENlbGxTbGlkZUluZGV4ID0gZnVuY3Rpb24oIGNlbGwgKSB7XG4gIC8vIGdldCBpbmRleCBvZiBzbGlkZXMgdGhhdCBoYXMgY2VsbFxuICBmb3IgKCB2YXIgaSA9IDA7IGkgPCB0aGlzLnNsaWRlcy5sZW5ndGg7IGkrKyApIHtcbiAgICB2YXIgc2xpZGUgPSB0aGlzLnNsaWRlc1tpXTtcbiAgICB2YXIgaW5kZXggPSBzbGlkZS5jZWxscy5pbmRleE9mKCBjZWxsICk7XG4gICAgaWYgKCBpbmRleCAhPSAtMSApIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZ2V0IGNlbGxzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8qKlxuICogZ2V0IEZsaWNraXR5LkNlbGwsIGdpdmVuIGFuIEVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbSAtIG1hdGNoaW5nIGNlbGwgZWxlbWVudFxuICogQHJldHVybnMge0ZsaWNraXR5LkNlbGx9IGNlbGwgLSBtYXRjaGluZyBjZWxsXG4gKi9cbnByb3RvLmdldENlbGwgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgLy8gbG9vcCB0aHJvdWdoIGNlbGxzIHRvIGdldCB0aGUgb25lIHRoYXQgbWF0Y2hlc1xuICBmb3IgKCB2YXIgaSA9IDA7IGkgPCB0aGlzLmNlbGxzLmxlbmd0aDsgaSsrICkge1xuICAgIHZhciBjZWxsID0gdGhpcy5jZWxsc1tpXTtcbiAgICBpZiAoIGNlbGwuZWxlbWVudCA9PSBlbGVtICkge1xuICAgICAgcmV0dXJuIGNlbGw7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIGdldCBjb2xsZWN0aW9uIG9mIEZsaWNraXR5LkNlbGxzLCBnaXZlbiBFbGVtZW50c1xuICogQHBhcmFtIHtbRWxlbWVudCwgQXJyYXksIE5vZGVMaXN0XX0gZWxlbXMgLSBtdWx0aXBsZSBlbGVtZW50c1xuICogQHJldHVybnMge0FycmF5fSBjZWxscyAtIEZsaWNraXR5LkNlbGxzXG4gKi9cbnByb3RvLmdldENlbGxzID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICBlbGVtcyA9IHV0aWxzLm1ha2VBcnJheSggZWxlbXMgKTtcbiAgdmFyIGNlbGxzID0gW107XG4gIGVsZW1zLmZvckVhY2goIGZ1bmN0aW9uKCBlbGVtICkge1xuICAgIHZhciBjZWxsID0gdGhpcy5nZXRDZWxsKCBlbGVtICk7XG4gICAgaWYgKCBjZWxsICkge1xuICAgICAgY2VsbHMucHVzaCggY2VsbCApO1xuICAgIH1cbiAgfSwgdGhpcyApO1xuICByZXR1cm4gY2VsbHM7XG59O1xuXG4vKipcbiAqIGdldCBjZWxsIGVsZW1lbnRzXG4gKiBAcmV0dXJucyB7QXJyYXl9IGNlbGxFbGVtc1xuICovXG5wcm90by5nZXRDZWxsRWxlbWVudHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuY2VsbHMubWFwKCBmdW5jdGlvbiggY2VsbCApIHtcbiAgICByZXR1cm4gY2VsbC5lbGVtZW50O1xuICB9ICk7XG59O1xuXG4vKipcbiAqIGdldCBwYXJlbnQgY2VsbCBmcm9tIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbSAtIGNoaWxkIGVsZW1lbnRcbiAqIEByZXR1cm5zIHtGbGlja2l0LkNlbGx9IGNlbGwgLSBwYXJlbnQgY2VsbFxuICovXG5wcm90by5nZXRQYXJlbnRDZWxsID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIC8vIGZpcnN0IGNoZWNrIGlmIGVsZW0gaXMgY2VsbFxuICB2YXIgY2VsbCA9IHRoaXMuZ2V0Q2VsbCggZWxlbSApO1xuICBpZiAoIGNlbGwgKSB7XG4gICAgcmV0dXJuIGNlbGw7XG4gIH1cbiAgLy8gdHJ5IHRvIGdldCBwYXJlbnQgY2VsbCBlbGVtXG4gIGVsZW0gPSB1dGlscy5nZXRQYXJlbnQoIGVsZW0sICcuZmxpY2tpdHktc2xpZGVyID4gKicgKTtcbiAgcmV0dXJuIHRoaXMuZ2V0Q2VsbCggZWxlbSApO1xufTtcblxuLyoqXG4gKiBnZXQgY2VsbHMgYWRqYWNlbnQgdG8gYSBzbGlkZVxuICogQHBhcmFtIHtJbnRlZ2VyfSBhZGpDb3VudCAtIG51bWJlciBvZiBhZGphY2VudCBzbGlkZXNcbiAqIEBwYXJhbSB7SW50ZWdlcn0gaW5kZXggLSBpbmRleCBvZiBzbGlkZSB0byBzdGFydFxuICogQHJldHVybnMge0FycmF5fSBjZWxscyAtIGFycmF5IG9mIEZsaWNraXR5LkNlbGxzXG4gKi9cbnByb3RvLmdldEFkamFjZW50Q2VsbEVsZW1lbnRzID0gZnVuY3Rpb24oIGFkakNvdW50LCBpbmRleCApIHtcbiAgaWYgKCAhYWRqQ291bnQgKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWRTbGlkZS5nZXRDZWxsRWxlbWVudHMoKTtcbiAgfVxuICBpbmRleCA9IGluZGV4ID09PSB1bmRlZmluZWQgPyB0aGlzLnNlbGVjdGVkSW5kZXggOiBpbmRleDtcblxuICB2YXIgbGVuID0gdGhpcy5zbGlkZXMubGVuZ3RoO1xuICBpZiAoIDEgKyAoIGFkakNvdW50ICogMiApID49IGxlbiApIHtcbiAgICByZXR1cm4gdGhpcy5nZXRDZWxsRWxlbWVudHMoKTtcbiAgfVxuXG4gIHZhciBjZWxsRWxlbXMgPSBbXTtcbiAgZm9yICggdmFyIGkgPSBpbmRleCAtIGFkakNvdW50OyBpIDw9IGluZGV4ICsgYWRqQ291bnQ7IGkrKyApIHtcbiAgICB2YXIgc2xpZGVJbmRleCA9IHRoaXMub3B0aW9ucy53cmFwQXJvdW5kID8gdXRpbHMubW9kdWxvKCBpLCBsZW4gKSA6IGk7XG4gICAgdmFyIHNsaWRlID0gdGhpcy5zbGlkZXNbIHNsaWRlSW5kZXggXTtcbiAgICBpZiAoIHNsaWRlICkge1xuICAgICAgY2VsbEVsZW1zID0gY2VsbEVsZW1zLmNvbmNhdCggc2xpZGUuZ2V0Q2VsbEVsZW1lbnRzKCkgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNlbGxFbGVtcztcbn07XG5cbi8qKlxuICogc2VsZWN0IHNsaWRlIGZyb20gbnVtYmVyIG9yIGNlbGwgZWxlbWVudFxuICogQHBhcmFtIHtbRWxlbWVudCwgU3RyaW5nLCBOdW1iZXJdfSBzZWxlY3RvciAtIGVsZW1lbnQsIHNlbGVjdG9yIHN0cmluZywgb3IgaW5kZXhcbiAqIEByZXR1cm5zIHtGbGlja2l0eS5DZWxsfSAtIG1hdGNoaW5nIGNlbGxcbiAqL1xucHJvdG8ucXVlcnlDZWxsID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuICBpZiAoIHR5cGVvZiBzZWxlY3RvciA9PSAnbnVtYmVyJyApIHtcbiAgICAvLyB1c2UgbnVtYmVyIGFzIGluZGV4XG4gICAgcmV0dXJuIHRoaXMuY2VsbHNbIHNlbGVjdG9yIF07XG4gIH1cbiAgaWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT0gJ3N0cmluZycgKSB7XG4gICAgLy8gZG8gbm90IHNlbGVjdCBpbnZhbGlkIHNlbGVjdG9ycyBmcm9tIGhhc2g6ICMxMjMsICMvLiAjNzkxXG4gICAgaWYgKCBzZWxlY3Rvci5tYXRjaCggL15bIy5dP1tcXGQvXS8gKSApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gdXNlIHN0cmluZyBhcyBzZWxlY3RvciwgZ2V0IGVsZW1lbnRcbiAgICBzZWxlY3RvciA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKCBzZWxlY3RvciApO1xuICB9XG4gIC8vIGdldCBjZWxsIGZyb20gZWxlbWVudFxuICByZXR1cm4gdGhpcy5nZXRDZWxsKCBzZWxlY3RvciApO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZXZlbnRzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnByb3RvLnVpQ2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZW1pdEV2ZW50KCd1aUNoYW5nZScpO1xufTtcblxuLy8ga2VlcCBmb2N1cyBvbiBlbGVtZW50IHdoZW4gY2hpbGQgVUkgZWxlbWVudHMgYXJlIGNsaWNrZWRcbnByb3RvLmNoaWxkVUlQb2ludGVyRG93biA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgLy8gSEFDSyBpT1MgZG9lcyBub3QgYWxsb3cgdG91Y2ggZXZlbnRzIHRvIGJ1YmJsZSB1cD8hXG4gIGlmICggZXZlbnQudHlwZSAhPSAndG91Y2hzdGFydCcgKSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfVxuICB0aGlzLmZvY3VzKCk7XG59O1xuXG4vLyAtLS0tLSByZXNpemUgLS0tLS0gLy9cblxucHJvdG8ub25yZXNpemUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy53YXRjaENTUygpO1xuICB0aGlzLnJlc2l6ZSgpO1xufTtcblxudXRpbHMuZGVib3VuY2VNZXRob2QoIEZsaWNraXR5LCAnb25yZXNpemUnLCAxNTAgKTtcblxucHJvdG8ucmVzaXplID0gZnVuY3Rpb24oKSB7XG4gIC8vICMxMTc3IGRpc2FibGUgcmVzaXplIGJlaGF2aW9yIHdoZW4gYW5pbWF0aW5nIG9yIGRyYWdnaW5nIGZvciBpT1MgMTVcbiAgaWYgKCAhdGhpcy5pc0FjdGl2ZSB8fCB0aGlzLmlzQW5pbWF0aW5nIHx8IHRoaXMuaXNEcmFnZ2luZyApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5nZXRTaXplKCk7XG4gIC8vIHdyYXAgdmFsdWVzXG4gIGlmICggdGhpcy5vcHRpb25zLndyYXBBcm91bmQgKSB7XG4gICAgdGhpcy54ID0gdXRpbHMubW9kdWxvKCB0aGlzLngsIHRoaXMuc2xpZGVhYmxlV2lkdGggKTtcbiAgfVxuICB0aGlzLnBvc2l0aW9uQ2VsbHMoKTtcbiAgdGhpcy5fZ2V0V3JhcFNoaWZ0Q2VsbHMoKTtcbiAgdGhpcy5zZXRHYWxsZXJ5U2l6ZSgpO1xuICB0aGlzLmVtaXRFdmVudCgncmVzaXplJyk7XG4gIC8vIHVwZGF0ZSBzZWxlY3RlZCBpbmRleCBmb3IgZ3JvdXAgc2xpZGVzLCBpbnN0YW50XG4gIC8vIFRPRE86IHBvc2l0aW9uIGNhbiBiZSBsb3N0IGJldHdlZW4gZ3JvdXBzIG9mIHZhcmlvdXMgbnVtYmVyc1xuICB2YXIgc2VsZWN0ZWRFbGVtZW50ID0gdGhpcy5zZWxlY3RlZEVsZW1lbnRzICYmIHRoaXMuc2VsZWN0ZWRFbGVtZW50c1swXTtcbiAgdGhpcy5zZWxlY3RDZWxsKCBzZWxlY3RlZEVsZW1lbnQsIGZhbHNlLCB0cnVlICk7XG59O1xuXG4vLyB3YXRjaGVzIHRoZSA6YWZ0ZXIgcHJvcGVydHksIGFjdGl2YXRlcy9kZWFjdGl2YXRlc1xucHJvdG8ud2F0Y2hDU1MgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHdhdGNoT3B0aW9uID0gdGhpcy5vcHRpb25zLndhdGNoQ1NTO1xuICBpZiAoICF3YXRjaE9wdGlvbiApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgYWZ0ZXJDb250ZW50ID0gZ2V0Q29tcHV0ZWRTdHlsZSggdGhpcy5lbGVtZW50LCAnOmFmdGVyJyApLmNvbnRlbnQ7XG4gIC8vIGFjdGl2YXRlIGlmIDphZnRlciB7IGNvbnRlbnQ6ICdmbGlja2l0eScgfVxuICBpZiAoIGFmdGVyQ29udGVudC5pbmRleE9mKCdmbGlja2l0eScpICE9IC0xICkge1xuICAgIHRoaXMuYWN0aXZhdGUoKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmRlYWN0aXZhdGUoKTtcbiAgfVxufTtcblxuLy8gLS0tLS0ga2V5ZG93biAtLS0tLSAvL1xuXG4vLyBnbyBwcmV2aW91cy9uZXh0IGlmIGxlZnQvcmlnaHQga2V5cyBwcmVzc2VkXG5wcm90by5vbmtleWRvd24gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIC8vIG9ubHkgd29yayBpZiBlbGVtZW50IGlzIGluIGZvY3VzXG4gIHZhciBpc05vdEZvY3VzZWQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT0gdGhpcy5lbGVtZW50O1xuICBpZiAoICF0aGlzLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSB8fCBpc05vdEZvY3VzZWQgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGhhbmRsZXIgPSBGbGlja2l0eS5rZXlib2FyZEhhbmRsZXJzWyBldmVudC5rZXlDb2RlIF07XG4gIGlmICggaGFuZGxlciApIHtcbiAgICBoYW5kbGVyLmNhbGwoIHRoaXMgKTtcbiAgfVxufTtcblxuRmxpY2tpdHkua2V5Ym9hcmRIYW5kbGVycyA9IHtcbiAgLy8gbGVmdCBhcnJvd1xuICAzNzogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlZnRNZXRob2QgPSB0aGlzLm9wdGlvbnMucmlnaHRUb0xlZnQgPyAnbmV4dCcgOiAncHJldmlvdXMnO1xuICAgIHRoaXMudWlDaGFuZ2UoKTtcbiAgICB0aGlzWyBsZWZ0TWV0aG9kIF0oKTtcbiAgfSxcbiAgLy8gcmlnaHQgYXJyb3dcbiAgMzk6IGZ1bmN0aW9uKCkge1xuICAgIHZhciByaWdodE1ldGhvZCA9IHRoaXMub3B0aW9ucy5yaWdodFRvTGVmdCA/ICdwcmV2aW91cycgOiAnbmV4dCc7XG4gICAgdGhpcy51aUNoYW5nZSgpO1xuICAgIHRoaXNbIHJpZ2h0TWV0aG9kIF0oKTtcbiAgfSxcbn07XG5cbi8vIC0tLS0tIGZvY3VzIC0tLS0tIC8vXG5cbnByb3RvLmZvY3VzID0gZnVuY3Rpb24oKSB7XG4gIC8vIFRPRE8gcmVtb3ZlIHNjcm9sbFRvIG9uY2UgZm9jdXMgb3B0aW9ucyBnZXRzIG1vcmUgc3VwcG9ydFxuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSFRNTEVsZW1lbnQvZm9jdXMgLi4uXG4gIC8vICAgICNCcm93c2VyX2NvbXBhdGliaWxpdHlcbiAgdmFyIHByZXZTY3JvbGxZID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuICB0aGlzLmVsZW1lbnQuZm9jdXMoeyBwcmV2ZW50U2Nyb2xsOiB0cnVlIH0pO1xuICAvLyBoYWNrIHRvIGZpeCBzY3JvbGwganVtcCBhZnRlciBmb2N1cywgIzc2XG4gIGlmICggd2luZG93LnBhZ2VZT2Zmc2V0ICE9IHByZXZTY3JvbGxZICkge1xuICAgIHdpbmRvdy5zY3JvbGxUbyggd2luZG93LnBhZ2VYT2Zmc2V0LCBwcmV2U2Nyb2xsWSApO1xuICB9XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBkZXN0cm95IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8vIGRlYWN0aXZhdGUgYWxsIEZsaWNraXR5IGZ1bmN0aW9uYWxpdHksIGJ1dCBrZWVwIHN0dWZmIGF2YWlsYWJsZVxucHJvdG8uZGVhY3RpdmF0ZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLmlzQWN0aXZlICkge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnZmxpY2tpdHktZW5hYmxlZCcpO1xuICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnZmxpY2tpdHktcnRsJyk7XG4gIHRoaXMudW5zZWxlY3RTZWxlY3RlZFNsaWRlKCk7XG4gIC8vIGRlc3Ryb3kgY2VsbHNcbiAgdGhpcy5jZWxscy5mb3JFYWNoKCBmdW5jdGlvbiggY2VsbCApIHtcbiAgICBjZWxsLmRlc3Ryb3koKTtcbiAgfSApO1xuICB0aGlzLmVsZW1lbnQucmVtb3ZlQ2hpbGQoIHRoaXMudmlld3BvcnQgKTtcbiAgLy8gbW92ZSBjaGlsZCBlbGVtZW50cyBiYWNrIGludG8gZWxlbWVudFxuICBtb3ZlRWxlbWVudHMoIHRoaXMuc2xpZGVyLmNoaWxkcmVuLCB0aGlzLmVsZW1lbnQgKTtcbiAgaWYgKCB0aGlzLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSApIHtcbiAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCd0YWJJbmRleCcpO1xuICAgIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAna2V5ZG93bicsIHRoaXMgKTtcbiAgfVxuICAvLyBzZXQgZmxhZ3NcbiAgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xuICB0aGlzLmVtaXRFdmVudCgnZGVhY3RpdmF0ZScpO1xufTtcblxucHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmRlYWN0aXZhdGUoKTtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdyZXNpemUnLCB0aGlzICk7XG4gIHRoaXMuYWxsT2ZmKCk7XG4gIHRoaXMuZW1pdEV2ZW50KCdkZXN0cm95Jyk7XG4gIGlmICggalF1ZXJ5ICYmIHRoaXMuJGVsZW1lbnQgKSB7XG4gICAgalF1ZXJ5LnJlbW92ZURhdGEoIHRoaXMuZWxlbWVudCwgJ2ZsaWNraXR5JyApO1xuICB9XG4gIGRlbGV0ZSB0aGlzLmVsZW1lbnQuZmxpY2tpdHlHVUlEO1xuICBkZWxldGUgaW5zdGFuY2VzWyB0aGlzLmd1aWQgXTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHByb3RvdHlwZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG51dGlscy5leHRlbmQoIHByb3RvLCBhbmltYXRlUHJvdG90eXBlICk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGV4dHJhcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vKipcbiAqIGdldCBGbGlja2l0eSBpbnN0YW5jZSBmcm9tIGVsZW1lbnRcbiAqIEBwYXJhbSB7W0VsZW1lbnQsIFN0cmluZ119IGVsZW0gLSBlbGVtZW50IG9yIHNlbGVjdG9yIHN0cmluZ1xuICogQHJldHVybnMge0ZsaWNraXR5fSAtIEZsaWNraXR5IGluc3RhbmNlXG4gKi9cbkZsaWNraXR5LmRhdGEgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgZWxlbSA9IHV0aWxzLmdldFF1ZXJ5RWxlbWVudCggZWxlbSApO1xuICB2YXIgaWQgPSBlbGVtICYmIGVsZW0uZmxpY2tpdHlHVUlEO1xuICByZXR1cm4gaWQgJiYgaW5zdGFuY2VzWyBpZCBdO1xufTtcblxudXRpbHMuaHRtbEluaXQoIEZsaWNraXR5LCAnZmxpY2tpdHknICk7XG5cbmlmICggalF1ZXJ5ICYmIGpRdWVyeS5icmlkZ2V0ICkge1xuICBqUXVlcnkuYnJpZGdldCggJ2ZsaWNraXR5JywgRmxpY2tpdHkgKTtcbn1cblxuLy8gc2V0IGludGVybmFsIGpRdWVyeSwgZm9yIFdlYnBhY2sgKyBqUXVlcnkgdjMsICM0NzhcbkZsaWNraXR5LnNldEpRdWVyeSA9IGZ1bmN0aW9uKCBqcSApIHtcbiAgalF1ZXJ5ID0ganE7XG59O1xuXG5GbGlja2l0eS5DZWxsID0gQ2VsbDtcbkZsaWNraXR5LlNsaWRlID0gU2xpZGU7XG5cbnJldHVybiBGbGlja2l0eTtcblxufSApICk7XG4iLCIvLyBwYWdlIGRvdHNcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCBbXG4gICAgICAnLi9mbGlja2l0eScsXG4gICAgICAndW5pcG9pbnRlci91bmlwb2ludGVyJyxcbiAgICAgICdmaXp6eS11aS11dGlscy91dGlscycsXG4gICAgXSwgZnVuY3Rpb24oIEZsaWNraXR5LCBVbmlwb2ludGVyLCB1dGlscyApIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIEZsaWNraXR5LCBVbmlwb2ludGVyLCB1dGlscyApO1xuICAgIH0gKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgICAgd2luZG93LFxuICAgICAgICByZXF1aXJlKCcuL2ZsaWNraXR5JyksXG4gICAgICAgIHJlcXVpcmUoJ3VuaXBvaW50ZXInKSxcbiAgICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICBmYWN0b3J5KFxuICAgICAgICB3aW5kb3csXG4gICAgICAgIHdpbmRvdy5GbGlja2l0eSxcbiAgICAgICAgd2luZG93LlVuaXBvaW50ZXIsXG4gICAgICAgIHdpbmRvdy5maXp6eVVJVXRpbHNcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBGbGlja2l0eSwgVW5pcG9pbnRlciwgdXRpbHMgKSB7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFBhZ2VEb3RzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gUGFnZURvdHMoIHBhcmVudCApIHtcbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMuX2NyZWF0ZSgpO1xufVxuXG5QYWdlRG90cy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBVbmlwb2ludGVyLnByb3RvdHlwZSApO1xuXG5QYWdlRG90cy5wcm90b3R5cGUuX2NyZWF0ZSA9IGZ1bmN0aW9uKCkge1xuICAvLyBjcmVhdGUgaG9sZGVyIGVsZW1lbnRcbiAgdGhpcy5ob2xkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvbCcpO1xuICB0aGlzLmhvbGRlci5jbGFzc05hbWUgPSAnZmxpY2tpdHktcGFnZS1kb3RzJztcbiAgLy8gY3JlYXRlIGRvdHMsIGFycmF5IG9mIGVsZW1lbnRzXG4gIHRoaXMuZG90cyA9IFtdO1xuICAvLyBldmVudHNcbiAgdGhpcy5oYW5kbGVDbGljayA9IHRoaXMub25DbGljay5iaW5kKCB0aGlzICk7XG4gIHRoaXMub24oICdwb2ludGVyRG93bicsIHRoaXMucGFyZW50LmNoaWxkVUlQb2ludGVyRG93bi5iaW5kKCB0aGlzLnBhcmVudCApICk7XG59O1xuXG5QYWdlRG90cy5wcm90b3R5cGUuYWN0aXZhdGUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zZXREb3RzKCk7XG4gIHRoaXMuaG9sZGVyLmFkZEV2ZW50TGlzdGVuZXIoICdjbGljaycsIHRoaXMuaGFuZGxlQ2xpY2sgKTtcbiAgdGhpcy5iaW5kU3RhcnRFdmVudCggdGhpcy5ob2xkZXIgKTtcbiAgLy8gYWRkIHRvIERPTVxuICB0aGlzLnBhcmVudC5lbGVtZW50LmFwcGVuZENoaWxkKCB0aGlzLmhvbGRlciApO1xufTtcblxuUGFnZURvdHMucHJvdG90eXBlLmRlYWN0aXZhdGUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5ob2xkZXIucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGljayApO1xuICB0aGlzLnVuYmluZFN0YXJ0RXZlbnQoIHRoaXMuaG9sZGVyICk7XG4gIC8vIHJlbW92ZSBmcm9tIERPTVxuICB0aGlzLnBhcmVudC5lbGVtZW50LnJlbW92ZUNoaWxkKCB0aGlzLmhvbGRlciApO1xufTtcblxuUGFnZURvdHMucHJvdG90eXBlLnNldERvdHMgPSBmdW5jdGlvbigpIHtcbiAgLy8gZ2V0IGRpZmZlcmVuY2UgYmV0d2VlbiBudW1iZXIgb2Ygc2xpZGVzIGFuZCBudW1iZXIgb2YgZG90c1xuICB2YXIgZGVsdGEgPSB0aGlzLnBhcmVudC5zbGlkZXMubGVuZ3RoIC0gdGhpcy5kb3RzLmxlbmd0aDtcbiAgaWYgKCBkZWx0YSA+IDAgKSB7XG4gICAgdGhpcy5hZGREb3RzKCBkZWx0YSApO1xuICB9IGVsc2UgaWYgKCBkZWx0YSA8IDAgKSB7XG4gICAgdGhpcy5yZW1vdmVEb3RzKCAtZGVsdGEgKTtcbiAgfVxufTtcblxuUGFnZURvdHMucHJvdG90eXBlLmFkZERvdHMgPSBmdW5jdGlvbiggY291bnQgKSB7XG4gIHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgdmFyIG5ld0RvdHMgPSBbXTtcbiAgdmFyIGxlbmd0aCA9IHRoaXMuZG90cy5sZW5ndGg7XG4gIHZhciBtYXggPSBsZW5ndGggKyBjb3VudDtcblxuICBmb3IgKCB2YXIgaSA9IGxlbmd0aDsgaSA8IG1heDsgaSsrICkge1xuICAgIHZhciBkb3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgIGRvdC5jbGFzc05hbWUgPSAnZG90JztcbiAgICBkb3Quc2V0QXR0cmlidXRlKCAnYXJpYS1sYWJlbCcsICdQYWdlIGRvdCAnICsgKCBpICsgMSApICk7XG4gICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvdCApO1xuICAgIG5ld0RvdHMucHVzaCggZG90ICk7XG4gIH1cblxuICB0aGlzLmhvbGRlci5hcHBlbmRDaGlsZCggZnJhZ21lbnQgKTtcbiAgdGhpcy5kb3RzID0gdGhpcy5kb3RzLmNvbmNhdCggbmV3RG90cyApO1xufTtcblxuUGFnZURvdHMucHJvdG90eXBlLnJlbW92ZURvdHMgPSBmdW5jdGlvbiggY291bnQgKSB7XG4gIC8vIHJlbW92ZSBmcm9tIHRoaXMuZG90cyBjb2xsZWN0aW9uXG4gIHZhciByZW1vdmVEb3RzID0gdGhpcy5kb3RzLnNwbGljZSggdGhpcy5kb3RzLmxlbmd0aCAtIGNvdW50LCBjb3VudCApO1xuICAvLyByZW1vdmUgZnJvbSBET01cbiAgcmVtb3ZlRG90cy5mb3JFYWNoKCBmdW5jdGlvbiggZG90ICkge1xuICAgIHRoaXMuaG9sZGVyLnJlbW92ZUNoaWxkKCBkb3QgKTtcbiAgfSwgdGhpcyApO1xufTtcblxuUGFnZURvdHMucHJvdG90eXBlLnVwZGF0ZVNlbGVjdGVkID0gZnVuY3Rpb24oKSB7XG4gIC8vIHJlbW92ZSBzZWxlY3RlZCBjbGFzcyBvbiBwcmV2aW91c1xuICBpZiAoIHRoaXMuc2VsZWN0ZWREb3QgKSB7XG4gICAgdGhpcy5zZWxlY3RlZERvdC5jbGFzc05hbWUgPSAnZG90JztcbiAgICB0aGlzLnNlbGVjdGVkRG90LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1jdXJyZW50Jyk7XG4gIH1cbiAgLy8gZG9uJ3QgcHJvY2VlZCBpZiBubyBkb3RzXG4gIGlmICggIXRoaXMuZG90cy5sZW5ndGggKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMuc2VsZWN0ZWREb3QgPSB0aGlzLmRvdHNbIHRoaXMucGFyZW50LnNlbGVjdGVkSW5kZXggXTtcbiAgdGhpcy5zZWxlY3RlZERvdC5jbGFzc05hbWUgPSAnZG90IGlzLXNlbGVjdGVkJztcbiAgdGhpcy5zZWxlY3RlZERvdC5zZXRBdHRyaWJ1dGUoICdhcmlhLWN1cnJlbnQnLCAnc3RlcCcgKTtcbn07XG5cblBhZ2VEb3RzLnByb3RvdHlwZS5vblRhcCA9IC8vIG9sZCBtZXRob2QgbmFtZSwgYmFja3dhcmRzLWNvbXBhdGlibGVcblBhZ2VEb3RzLnByb3RvdHlwZS5vbkNsaWNrID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuICAvLyBvbmx5IGNhcmUgYWJvdXQgZG90IGNsaWNrc1xuICBpZiAoIHRhcmdldC5ub2RlTmFtZSAhPSAnTEknICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMucGFyZW50LnVpQ2hhbmdlKCk7XG4gIHZhciBpbmRleCA9IHRoaXMuZG90cy5pbmRleE9mKCB0YXJnZXQgKTtcbiAgdGhpcy5wYXJlbnQuc2VsZWN0KCBpbmRleCApO1xufTtcblxuUGFnZURvdHMucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5kZWFjdGl2YXRlKCk7XG4gIHRoaXMuYWxsT2ZmKCk7XG59O1xuXG5GbGlja2l0eS5QYWdlRG90cyA9IFBhZ2VEb3RzO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBGbGlja2l0eSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG51dGlscy5leHRlbmQoIEZsaWNraXR5LmRlZmF1bHRzLCB7XG4gIHBhZ2VEb3RzOiB0cnVlLFxufSApO1xuXG5GbGlja2l0eS5jcmVhdGVNZXRob2RzLnB1c2goJ19jcmVhdGVQYWdlRG90cycpO1xuXG52YXIgcHJvdG8gPSBGbGlja2l0eS5wcm90b3R5cGU7XG5cbnByb3RvLl9jcmVhdGVQYWdlRG90cyA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLm9wdGlvbnMucGFnZURvdHMgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMucGFnZURvdHMgPSBuZXcgUGFnZURvdHMoIHRoaXMgKTtcbiAgLy8gZXZlbnRzXG4gIHRoaXMub24oICdhY3RpdmF0ZScsIHRoaXMuYWN0aXZhdGVQYWdlRG90cyApO1xuICB0aGlzLm9uKCAnc2VsZWN0JywgdGhpcy51cGRhdGVTZWxlY3RlZFBhZ2VEb3RzICk7XG4gIHRoaXMub24oICdjZWxsQ2hhbmdlJywgdGhpcy51cGRhdGVQYWdlRG90cyApO1xuICB0aGlzLm9uKCAncmVzaXplJywgdGhpcy51cGRhdGVQYWdlRG90cyApO1xuICB0aGlzLm9uKCAnZGVhY3RpdmF0ZScsIHRoaXMuZGVhY3RpdmF0ZVBhZ2VEb3RzICk7XG59O1xuXG5wcm90by5hY3RpdmF0ZVBhZ2VEb3RzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGFnZURvdHMuYWN0aXZhdGUoKTtcbn07XG5cbnByb3RvLnVwZGF0ZVNlbGVjdGVkUGFnZURvdHMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wYWdlRG90cy51cGRhdGVTZWxlY3RlZCgpO1xufTtcblxucHJvdG8udXBkYXRlUGFnZURvdHMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wYWdlRG90cy5zZXREb3RzKCk7XG59O1xuXG5wcm90by5kZWFjdGl2YXRlUGFnZURvdHMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wYWdlRG90cy5kZWFjdGl2YXRlKCk7XG59O1xuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxuRmxpY2tpdHkuUGFnZURvdHMgPSBQYWdlRG90cztcblxucmV0dXJuIEZsaWNraXR5O1xuXG59ICkgKTtcbiIsIi8qIVxuICogRmxpY2tpdHkgdjIuMy4wXG4gKiBUb3VjaCwgcmVzcG9uc2l2ZSwgZmxpY2thYmxlIGNhcm91c2Vsc1xuICpcbiAqIExpY2Vuc2VkIEdQTHYzIGZvciBvcGVuIHNvdXJjZSB1c2VcbiAqIG9yIEZsaWNraXR5IENvbW1lcmNpYWwgTGljZW5zZSBmb3IgY29tbWVyY2lhbCB1c2VcbiAqXG4gKiBodHRwczovL2ZsaWNraXR5Lm1ldGFmaXp6eS5jb1xuICogQ29weXJpZ2h0IDIwMTUtMjAyMSBNZXRhZml6enlcbiAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggW1xuICAgICAgJy4vZmxpY2tpdHknLFxuICAgICAgJy4vZHJhZycsXG4gICAgICAnLi9wcmV2LW5leHQtYnV0dG9uJyxcbiAgICAgICcuL3BhZ2UtZG90cycsXG4gICAgICAnLi9wbGF5ZXInLFxuICAgICAgJy4vYWRkLXJlbW92ZS1jZWxsJyxcbiAgICAgICcuL2xhenlsb2FkJyxcbiAgICBdLCBmYWN0b3J5ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICAgIHJlcXVpcmUoJy4vZmxpY2tpdHknKSxcbiAgICAgICAgcmVxdWlyZSgnLi9kcmFnJyksXG4gICAgICAgIHJlcXVpcmUoJy4vcHJldi1uZXh0LWJ1dHRvbicpLFxuICAgICAgICByZXF1aXJlKCcuL3BhZ2UtZG90cycpLFxuICAgICAgICByZXF1aXJlKCcuL3BsYXllcicpLFxuICAgICAgICByZXF1aXJlKCcuL2FkZC1yZW1vdmUtY2VsbCcpLFxuICAgICAgICByZXF1aXJlKCcuL2xhenlsb2FkJylcbiAgICApO1xuICB9XG5cbn0gKSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCBGbGlja2l0eSApIHtcbiAgcmV0dXJuIEZsaWNraXR5O1xufSApO1xuIiwiLy8gbGF6eWxvYWRcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCBbXG4gICAgICAnLi9mbGlja2l0eScsXG4gICAgICAnZml6enktdWktdXRpbHMvdXRpbHMnLFxuICAgIF0sIGZ1bmN0aW9uKCBGbGlja2l0eSwgdXRpbHMgKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBGbGlja2l0eSwgdXRpbHMgKTtcbiAgICB9ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdyxcbiAgICAgICAgcmVxdWlyZSgnLi9mbGlja2l0eScpLFxuICAgICAgICByZXF1aXJlKCdmaXp6eS11aS11dGlscycpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdyxcbiAgICAgICAgd2luZG93LkZsaWNraXR5LFxuICAgICAgICB3aW5kb3cuZml6enlVSVV0aWxzXG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgRmxpY2tpdHksIHV0aWxzICkge1xuJ3VzZSBzdHJpY3QnO1xuXG5GbGlja2l0eS5jcmVhdGVNZXRob2RzLnB1c2goJ19jcmVhdGVMYXp5bG9hZCcpO1xudmFyIHByb3RvID0gRmxpY2tpdHkucHJvdG90eXBlO1xuXG5wcm90by5fY3JlYXRlTGF6eWxvYWQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5vbiggJ3NlbGVjdCcsIHRoaXMubGF6eUxvYWQgKTtcbn07XG5cbnByb3RvLmxhenlMb2FkID0gZnVuY3Rpb24oKSB7XG4gIHZhciBsYXp5TG9hZCA9IHRoaXMub3B0aW9ucy5sYXp5TG9hZDtcbiAgaWYgKCAhbGF6eUxvYWQgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGdldCBhZGphY2VudCBjZWxscywgdXNlIGxhenlMb2FkIG9wdGlvbiBmb3IgYWRqYWNlbnQgY291bnRcbiAgdmFyIGFkakNvdW50ID0gdHlwZW9mIGxhenlMb2FkID09ICdudW1iZXInID8gbGF6eUxvYWQgOiAwO1xuICB2YXIgY2VsbEVsZW1zID0gdGhpcy5nZXRBZGphY2VudENlbGxFbGVtZW50cyggYWRqQ291bnQgKTtcbiAgLy8gZ2V0IGxhenkgaW1hZ2VzIGluIHRob3NlIGNlbGxzXG4gIHZhciBsYXp5SW1hZ2VzID0gW107XG4gIGNlbGxFbGVtcy5mb3JFYWNoKCBmdW5jdGlvbiggY2VsbEVsZW0gKSB7XG4gICAgdmFyIGxhenlDZWxsSW1hZ2VzID0gZ2V0Q2VsbExhenlJbWFnZXMoIGNlbGxFbGVtICk7XG4gICAgbGF6eUltYWdlcyA9IGxhenlJbWFnZXMuY29uY2F0KCBsYXp5Q2VsbEltYWdlcyApO1xuICB9ICk7XG4gIC8vIGxvYWQgbGF6eSBpbWFnZXNcbiAgbGF6eUltYWdlcy5mb3JFYWNoKCBmdW5jdGlvbiggaW1nICkge1xuICAgIG5ldyBMYXp5TG9hZGVyKCBpbWcsIHRoaXMgKTtcbiAgfSwgdGhpcyApO1xufTtcblxuZnVuY3Rpb24gZ2V0Q2VsbExhenlJbWFnZXMoIGNlbGxFbGVtICkge1xuICAvLyBjaGVjayBpZiBjZWxsIGVsZW1lbnQgaXMgbGF6eSBpbWFnZVxuICBpZiAoIGNlbGxFbGVtLm5vZGVOYW1lID09ICdJTUcnICkge1xuICAgIHZhciBsYXp5bG9hZEF0dHIgPSBjZWxsRWxlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtZmxpY2tpdHktbGF6eWxvYWQnKTtcbiAgICB2YXIgc3JjQXR0ciA9IGNlbGxFbGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1mbGlja2l0eS1sYXp5bG9hZC1zcmMnKTtcbiAgICB2YXIgc3Jjc2V0QXR0ciA9IGNlbGxFbGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1mbGlja2l0eS1sYXp5bG9hZC1zcmNzZXQnKTtcbiAgICBpZiAoIGxhenlsb2FkQXR0ciB8fCBzcmNBdHRyIHx8IHNyY3NldEF0dHIgKSB7XG4gICAgICByZXR1cm4gWyBjZWxsRWxlbSBdO1xuICAgIH1cbiAgfVxuICAvLyBzZWxlY3QgbGF6eSBpbWFnZXMgaW4gY2VsbFxuICB2YXIgbGF6eVNlbGVjdG9yID0gJ2ltZ1tkYXRhLWZsaWNraXR5LWxhenlsb2FkXSwgJyArXG4gICAgJ2ltZ1tkYXRhLWZsaWNraXR5LWxhenlsb2FkLXNyY10sIGltZ1tkYXRhLWZsaWNraXR5LWxhenlsb2FkLXNyY3NldF0nO1xuICB2YXIgaW1ncyA9IGNlbGxFbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoIGxhenlTZWxlY3RvciApO1xuICByZXR1cm4gdXRpbHMubWFrZUFycmF5KCBpbWdzICk7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIExhenlMb2FkZXIgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLyoqXG4gKiBjbGFzcyB0byBoYW5kbGUgbG9hZGluZyBpbWFnZXNcbiAqIEBwYXJhbSB7SW1hZ2V9IGltZyAtIEltYWdlIGVsZW1lbnRcbiAqIEBwYXJhbSB7RmxpY2tpdHl9IGZsaWNraXR5IC0gRmxpY2tpdHkgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gTGF6eUxvYWRlciggaW1nLCBmbGlja2l0eSApIHtcbiAgdGhpcy5pbWcgPSBpbWc7XG4gIHRoaXMuZmxpY2tpdHkgPSBmbGlja2l0eTtcbiAgdGhpcy5sb2FkKCk7XG59XG5cbkxhenlMb2FkZXIucHJvdG90eXBlLmhhbmRsZUV2ZW50ID0gdXRpbHMuaGFuZGxlRXZlbnQ7XG5cbkxhenlMb2FkZXIucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5pbWcuYWRkRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCB0aGlzICk7XG4gIHRoaXMuaW1nLmFkZEV2ZW50TGlzdGVuZXIoICdlcnJvcicsIHRoaXMgKTtcbiAgLy8gZ2V0IHNyYyAmIHNyY3NldFxuICB2YXIgc3JjID0gdGhpcy5pbWcuZ2V0QXR0cmlidXRlKCdkYXRhLWZsaWNraXR5LWxhenlsb2FkJykgfHxcbiAgICB0aGlzLmltZy5nZXRBdHRyaWJ1dGUoJ2RhdGEtZmxpY2tpdHktbGF6eWxvYWQtc3JjJyk7XG4gIHZhciBzcmNzZXQgPSB0aGlzLmltZy5nZXRBdHRyaWJ1dGUoJ2RhdGEtZmxpY2tpdHktbGF6eWxvYWQtc3Jjc2V0Jyk7XG4gIC8vIHNldCBzcmMgJiBzZXJzZXRcbiAgdGhpcy5pbWcuc3JjID0gc3JjO1xuICBpZiAoIHNyY3NldCApIHtcbiAgICB0aGlzLmltZy5zZXRBdHRyaWJ1dGUoICdzcmNzZXQnLCBzcmNzZXQgKTtcbiAgfVxuICAvLyByZW1vdmUgYXR0clxuICB0aGlzLmltZy5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtZmxpY2tpdHktbGF6eWxvYWQnKTtcbiAgdGhpcy5pbWcucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWZsaWNraXR5LWxhenlsb2FkLXNyYycpO1xuICB0aGlzLmltZy5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtZmxpY2tpdHktbGF6eWxvYWQtc3Jjc2V0Jyk7XG59O1xuXG5MYXp5TG9hZGVyLnByb3RvdHlwZS5vbmxvYWQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMuY29tcGxldGUoIGV2ZW50LCAnZmxpY2tpdHktbGF6eWxvYWRlZCcgKTtcbn07XG5cbkxhenlMb2FkZXIucHJvdG90eXBlLm9uZXJyb3IgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMuY29tcGxldGUoIGV2ZW50LCAnZmxpY2tpdHktbGF6eWVycm9yJyApO1xufTtcblxuTGF6eUxvYWRlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiggZXZlbnQsIGNsYXNzTmFtZSApIHtcbiAgLy8gdW5iaW5kIGV2ZW50c1xuICB0aGlzLmltZy5yZW1vdmVFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5pbWcucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xuXG4gIHZhciBjZWxsID0gdGhpcy5mbGlja2l0eS5nZXRQYXJlbnRDZWxsKCB0aGlzLmltZyApO1xuICB2YXIgY2VsbEVsZW0gPSBjZWxsICYmIGNlbGwuZWxlbWVudDtcbiAgdGhpcy5mbGlja2l0eS5jZWxsU2l6ZUNoYW5nZSggY2VsbEVsZW0gKTtcblxuICB0aGlzLmltZy5jbGFzc0xpc3QuYWRkKCBjbGFzc05hbWUgKTtcbiAgdGhpcy5mbGlja2l0eS5kaXNwYXRjaEV2ZW50KCAnbGF6eUxvYWQnLCBldmVudCwgY2VsbEVsZW0gKTtcbn07XG5cbi8vIC0tLS0tICAtLS0tLSAvL1xuXG5GbGlja2l0eS5MYXp5TG9hZGVyID0gTGF6eUxvYWRlcjtcblxucmV0dXJuIEZsaWNraXR5O1xuXG59ICkgKTtcbiIsIi8vIHBsYXllciAmIGF1dG9QbGF5XG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggW1xuICAgICAgJ2V2LWVtaXR0ZXIvZXYtZW1pdHRlcicsXG4gICAgICAnZml6enktdWktdXRpbHMvdXRpbHMnLFxuICAgICAgJy4vZmxpY2tpdHknLFxuICAgIF0sIGZ1bmN0aW9uKCBFdkVtaXR0ZXIsIHV0aWxzLCBGbGlja2l0eSApIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KCBFdkVtaXR0ZXIsIHV0aWxzLCBGbGlja2l0eSApO1xuICAgIH0gKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgICAgcmVxdWlyZSgnZXYtZW1pdHRlcicpLFxuICAgICAgICByZXF1aXJlKCdmaXp6eS11aS11dGlscycpLFxuICAgICAgICByZXF1aXJlKCcuL2ZsaWNraXR5JylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgZmFjdG9yeShcbiAgICAgICAgd2luZG93LkV2RW1pdHRlcixcbiAgICAgICAgd2luZG93LmZpenp5VUlVdGlscyxcbiAgICAgICAgd2luZG93LkZsaWNraXR5XG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIEV2RW1pdHRlciwgdXRpbHMsIEZsaWNraXR5ICkge1xuXG4ndXNlIHN0cmljdCc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFBsYXllciAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5mdW5jdGlvbiBQbGF5ZXIoIHBhcmVudCApIHtcbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMuc3RhdGUgPSAnc3RvcHBlZCc7XG4gIC8vIHZpc2liaWxpdHkgY2hhbmdlIGV2ZW50IGhhbmRsZXJcbiAgdGhpcy5vblZpc2liaWxpdHlDaGFuZ2UgPSB0aGlzLnZpc2liaWxpdHlDaGFuZ2UuYmluZCggdGhpcyApO1xuICB0aGlzLm9uVmlzaWJpbGl0eVBsYXkgPSB0aGlzLnZpc2liaWxpdHlQbGF5LmJpbmQoIHRoaXMgKTtcbn1cblxuUGxheWVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEV2RW1pdHRlci5wcm90b3R5cGUgKTtcblxuLy8gc3RhcnQgcGxheVxuUGxheWVyLnByb3RvdHlwZS5wbGF5ID0gZnVuY3Rpb24oKSB7XG4gIGlmICggdGhpcy5zdGF0ZSA9PSAncGxheWluZycgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGRvIG5vdCBwbGF5IGlmIHBhZ2UgaXMgaGlkZGVuLCBzdGFydCBwbGF5aW5nIHdoZW4gcGFnZSBpcyB2aXNpYmxlXG4gIHZhciBpc1BhZ2VIaWRkZW4gPSBkb2N1bWVudC5oaWRkZW47XG4gIGlmICggaXNQYWdlSGlkZGVuICkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoICd2aXNpYmlsaXR5Y2hhbmdlJywgdGhpcy5vblZpc2liaWxpdHlQbGF5ICk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5zdGF0ZSA9ICdwbGF5aW5nJztcbiAgLy8gbGlzdGVuIHRvIHZpc2liaWxpdHkgY2hhbmdlXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoICd2aXNpYmlsaXR5Y2hhbmdlJywgdGhpcy5vblZpc2liaWxpdHlDaGFuZ2UgKTtcbiAgLy8gc3RhcnQgdGlja2luZ1xuICB0aGlzLnRpY2soKTtcbn07XG5cblBsYXllci5wcm90b3R5cGUudGljayA9IGZ1bmN0aW9uKCkge1xuICAvLyBkbyBub3QgdGljayBpZiBub3QgcGxheWluZ1xuICBpZiAoIHRoaXMuc3RhdGUgIT0gJ3BsYXlpbmcnICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB0aW1lID0gdGhpcy5wYXJlbnQub3B0aW9ucy5hdXRvUGxheTtcbiAgLy8gZGVmYXVsdCB0byAzIHNlY29uZHNcbiAgdGltZSA9IHR5cGVvZiB0aW1lID09ICdudW1iZXInID8gdGltZSA6IDMwMDA7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG4gIC8vIEhBQ0s6IHJlc2V0IHRpY2tzIGlmIHN0b3BwZWQgYW5kIHN0YXJ0ZWQgd2l0aGluIGludGVydmFsXG4gIHRoaXMuY2xlYXIoKTtcbiAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgX3RoaXMucGFyZW50Lm5leHQoIHRydWUgKTtcbiAgICBfdGhpcy50aWNrKCk7XG4gIH0sIHRpbWUgKTtcbn07XG5cblBsYXllci5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnN0YXRlID0gJ3N0b3BwZWQnO1xuICB0aGlzLmNsZWFyKCk7XG4gIC8vIHJlbW92ZSB2aXNpYmlsaXR5IGNoYW5nZSBldmVudFxuICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAndmlzaWJpbGl0eWNoYW5nZScsIHRoaXMub25WaXNpYmlsaXR5Q2hhbmdlICk7XG59O1xuXG5QbGF5ZXIucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gIGNsZWFyVGltZW91dCggdGhpcy50aW1lb3V0ICk7XG59O1xuXG5QbGF5ZXIucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gIGlmICggdGhpcy5zdGF0ZSA9PSAncGxheWluZycgKSB7XG4gICAgdGhpcy5zdGF0ZSA9ICdwYXVzZWQnO1xuICAgIHRoaXMuY2xlYXIoKTtcbiAgfVxufTtcblxuUGxheWVyLnByb3RvdHlwZS51bnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gIC8vIHJlLXN0YXJ0IHBsYXkgaWYgcGF1c2VkXG4gIGlmICggdGhpcy5zdGF0ZSA9PSAncGF1c2VkJyApIHtcbiAgICB0aGlzLnBsYXkoKTtcbiAgfVxufTtcblxuLy8gcGF1c2UgaWYgcGFnZSB2aXNpYmlsaXR5IGlzIGhpZGRlbiwgdW5wYXVzZSBpZiB2aXNpYmxlXG5QbGF5ZXIucHJvdG90eXBlLnZpc2liaWxpdHlDaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGlzUGFnZUhpZGRlbiA9IGRvY3VtZW50LmhpZGRlbjtcbiAgdGhpc1sgaXNQYWdlSGlkZGVuID8gJ3BhdXNlJyA6ICd1bnBhdXNlJyBdKCk7XG59O1xuXG5QbGF5ZXIucHJvdG90eXBlLnZpc2liaWxpdHlQbGF5ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGxheSgpO1xuICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAndmlzaWJpbGl0eWNoYW5nZScsIHRoaXMub25WaXNpYmlsaXR5UGxheSApO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRmxpY2tpdHkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxudXRpbHMuZXh0ZW5kKCBGbGlja2l0eS5kZWZhdWx0cywge1xuICBwYXVzZUF1dG9QbGF5T25Ib3ZlcjogdHJ1ZSxcbn0gKTtcblxuRmxpY2tpdHkuY3JlYXRlTWV0aG9kcy5wdXNoKCdfY3JlYXRlUGxheWVyJyk7XG52YXIgcHJvdG8gPSBGbGlja2l0eS5wcm90b3R5cGU7XG5cbnByb3RvLl9jcmVhdGVQbGF5ZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wbGF5ZXIgPSBuZXcgUGxheWVyKCB0aGlzICk7XG5cbiAgdGhpcy5vbiggJ2FjdGl2YXRlJywgdGhpcy5hY3RpdmF0ZVBsYXllciApO1xuICB0aGlzLm9uKCAndWlDaGFuZ2UnLCB0aGlzLnN0b3BQbGF5ZXIgKTtcbiAgdGhpcy5vbiggJ3BvaW50ZXJEb3duJywgdGhpcy5zdG9wUGxheWVyICk7XG4gIHRoaXMub24oICdkZWFjdGl2YXRlJywgdGhpcy5kZWFjdGl2YXRlUGxheWVyICk7XG59O1xuXG5wcm90by5hY3RpdmF0ZVBsYXllciA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLm9wdGlvbnMuYXV0b1BsYXkgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMucGxheWVyLnBsYXkoKTtcbiAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdtb3VzZWVudGVyJywgdGhpcyApO1xufTtcblxuLy8gUGxheWVyIEFQSSwgZG9uJ3QgaGF0ZSB0aGUgLi4uIHRoYW5rcyBJIGtub3cgd2hlcmUgdGhlIGRvb3IgaXNcblxucHJvdG8ucGxheVBsYXllciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBsYXllci5wbGF5KCk7XG59O1xuXG5wcm90by5zdG9wUGxheWVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGxheWVyLnN0b3AoKTtcbn07XG5cbnByb3RvLnBhdXNlUGxheWVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGxheWVyLnBhdXNlKCk7XG59O1xuXG5wcm90by51bnBhdXNlUGxheWVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGxheWVyLnVucGF1c2UoKTtcbn07XG5cbnByb3RvLmRlYWN0aXZhdGVQbGF5ZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wbGF5ZXIuc3RvcCgpO1xuICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ21vdXNlZW50ZXInLCB0aGlzICk7XG59O1xuXG4vLyAtLS0tLSBtb3VzZWVudGVyL2xlYXZlIC0tLS0tIC8vXG5cbi8vIHBhdXNlIGF1dG8tcGxheSBvbiBob3ZlclxucHJvdG8ub25tb3VzZWVudGVyID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMub3B0aW9ucy5wYXVzZUF1dG9QbGF5T25Ib3ZlciApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5wbGF5ZXIucGF1c2UoKTtcbiAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdtb3VzZWxlYXZlJywgdGhpcyApO1xufTtcblxuLy8gcmVzdW1lIGF1dG8tcGxheSBvbiBob3ZlciBvZmZcbnByb3RvLm9ubW91c2VsZWF2ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBsYXllci51bnBhdXNlKCk7XG4gIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAnbW91c2VsZWF2ZScsIHRoaXMgKTtcbn07XG5cbi8vIC0tLS0tICAtLS0tLSAvL1xuXG5GbGlja2l0eS5QbGF5ZXIgPSBQbGF5ZXI7XG5cbnJldHVybiBGbGlja2l0eTtcblxufSApICk7XG4iLCIvLyBwcmV2L25leHQgYnV0dG9uc1xuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIFtcbiAgICAgICcuL2ZsaWNraXR5JyxcbiAgICAgICd1bmlwb2ludGVyL3VuaXBvaW50ZXInLFxuICAgICAgJ2Zpenp5LXVpLXV0aWxzL3V0aWxzJyxcbiAgICBdLCBmdW5jdGlvbiggRmxpY2tpdHksIFVuaXBvaW50ZXIsIHV0aWxzICkge1xuICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgRmxpY2tpdHksIFVuaXBvaW50ZXIsIHV0aWxzICk7XG4gICAgfSApO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgICB3aW5kb3csXG4gICAgICAgIHJlcXVpcmUoJy4vZmxpY2tpdHknKSxcbiAgICAgICAgcmVxdWlyZSgndW5pcG9pbnRlcicpLFxuICAgICAgICByZXF1aXJlKCdmaXp6eS11aS11dGlscycpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdyxcbiAgICAgICAgd2luZG93LkZsaWNraXR5LFxuICAgICAgICB3aW5kb3cuVW5pcG9pbnRlcixcbiAgICAgICAgd2luZG93LmZpenp5VUlVdGlsc1xuICAgICk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIEZsaWNraXR5LCBVbmlwb2ludGVyLCB1dGlscyApIHtcbid1c2Ugc3RyaWN0JztcblxudmFyIHN2Z1VSSSA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFByZXZOZXh0QnV0dG9uIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmZ1bmN0aW9uIFByZXZOZXh0QnV0dG9uKCBkaXJlY3Rpb24sIHBhcmVudCApIHtcbiAgdGhpcy5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICB0aGlzLl9jcmVhdGUoKTtcbn1cblxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggVW5pcG9pbnRlci5wcm90b3R5cGUgKTtcblxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlLl9jcmVhdGUgPSBmdW5jdGlvbigpIHtcbiAgLy8gcHJvcGVydGllc1xuICB0aGlzLmlzRW5hYmxlZCA9IHRydWU7XG4gIHRoaXMuaXNQcmV2aW91cyA9IHRoaXMuZGlyZWN0aW9uID09IC0xO1xuICB2YXIgbGVmdERpcmVjdGlvbiA9IHRoaXMucGFyZW50Lm9wdGlvbnMucmlnaHRUb0xlZnQgPyAxIDogLTE7XG4gIHRoaXMuaXNMZWZ0ID0gdGhpcy5kaXJlY3Rpb24gPT0gbGVmdERpcmVjdGlvbjtcblxuICB2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICBlbGVtZW50LmNsYXNzTmFtZSA9ICdmbGlja2l0eS1idXR0b24gZmxpY2tpdHktcHJldi1uZXh0LWJ1dHRvbic7XG4gIGVsZW1lbnQuY2xhc3NOYW1lICs9IHRoaXMuaXNQcmV2aW91cyA/ICcgcHJldmlvdXMnIDogJyBuZXh0JztcbiAgLy8gcHJldmVudCBidXR0b24gZnJvbSBzdWJtaXR0aW5nIGZvcm0gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTA4MzYwNzYvMTgyMTgzXG4gIGVsZW1lbnQuc2V0QXR0cmlidXRlKCAndHlwZScsICdidXR0b24nICk7XG4gIC8vIGluaXQgYXMgZGlzYWJsZWRcbiAgdGhpcy5kaXNhYmxlKCk7XG5cbiAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoICdhcmlhLWxhYmVsJywgdGhpcy5pc1ByZXZpb3VzID8gJ1ByZXZpb3VzJyA6ICdOZXh0JyApO1xuXG4gIC8vIGNyZWF0ZSBhcnJvd1xuICB2YXIgc3ZnID0gdGhpcy5jcmVhdGVTVkcoKTtcbiAgZWxlbWVudC5hcHBlbmRDaGlsZCggc3ZnICk7XG4gIC8vIGV2ZW50c1xuICB0aGlzLnBhcmVudC5vbiggJ3NlbGVjdCcsIHRoaXMudXBkYXRlLmJpbmQoIHRoaXMgKSApO1xuICB0aGlzLm9uKCAncG9pbnRlckRvd24nLCB0aGlzLnBhcmVudC5jaGlsZFVJUG9pbnRlckRvd24uYmluZCggdGhpcy5wYXJlbnQgKSApO1xufTtcblxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuYmluZFN0YXJ0RXZlbnQoIHRoaXMuZWxlbWVudCApO1xuICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgdGhpcyApO1xuICAvLyBhZGQgdG8gRE9NXG4gIHRoaXMucGFyZW50LmVsZW1lbnQuYXBwZW5kQ2hpbGQoIHRoaXMuZWxlbWVudCApO1xufTtcblxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlLmRlYWN0aXZhdGUgPSBmdW5jdGlvbigpIHtcbiAgLy8gcmVtb3ZlIGZyb20gRE9NXG4gIHRoaXMucGFyZW50LmVsZW1lbnQucmVtb3ZlQ2hpbGQoIHRoaXMuZWxlbWVudCApO1xuICAvLyBjbGljayBldmVudHNcbiAgdGhpcy51bmJpbmRTdGFydEV2ZW50KCB0aGlzLmVsZW1lbnQgKTtcbiAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdjbGljaycsIHRoaXMgKTtcbn07XG5cblByZXZOZXh0QnV0dG9uLnByb3RvdHlwZS5jcmVhdGVTVkcgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyggc3ZnVVJJLCAnc3ZnJyApO1xuICBzdmcuc2V0QXR0cmlidXRlKCAnY2xhc3MnLCAnZmxpY2tpdHktYnV0dG9uLWljb24nICk7XG4gIHN2Zy5zZXRBdHRyaWJ1dGUoICd2aWV3Qm94JywgJzAgMCAxMDAgMTAwJyApO1xuICB2YXIgcGF0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyggc3ZnVVJJLCAncGF0aCcgKTtcbiAgdmFyIHBhdGhNb3ZlbWVudHMgPSBnZXRBcnJvd01vdmVtZW50cyggdGhpcy5wYXJlbnQub3B0aW9ucy5hcnJvd1NoYXBlICk7XG4gIHBhdGguc2V0QXR0cmlidXRlKCAnZCcsIHBhdGhNb3ZlbWVudHMgKTtcbiAgcGF0aC5zZXRBdHRyaWJ1dGUoICdjbGFzcycsICdhcnJvdycgKTtcbiAgLy8gcm90YXRlIGFycm93XG4gIGlmICggIXRoaXMuaXNMZWZ0ICkge1xuICAgIHBhdGguc2V0QXR0cmlidXRlKCAndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgxMDAsIDEwMCkgcm90YXRlKDE4MCkgJyApO1xuICB9XG4gIHN2Zy5hcHBlbmRDaGlsZCggcGF0aCApO1xuICByZXR1cm4gc3ZnO1xufTtcblxuLy8gZ2V0IFNWRyBwYXRoIG1vdm1lbWVudFxuZnVuY3Rpb24gZ2V0QXJyb3dNb3ZlbWVudHMoIHNoYXBlICkge1xuICAvLyB1c2Ugc2hhcGUgYXMgbW92ZW1lbnQgaWYgc3RyaW5nXG4gIGlmICggdHlwZW9mIHNoYXBlID09ICdzdHJpbmcnICkge1xuICAgIHJldHVybiBzaGFwZTtcbiAgfVxuICAvLyBjcmVhdGUgbW92ZW1lbnQgc3RyaW5nXG4gIHJldHVybiAnTSAnICsgc2hhcGUueDAgKyAnLDUwJyArXG4gICAgJyBMICcgKyBzaGFwZS54MSArICcsJyArICggc2hhcGUueTEgKyA1MCApICtcbiAgICAnIEwgJyArIHNoYXBlLngyICsgJywnICsgKCBzaGFwZS55MiArIDUwICkgK1xuICAgICcgTCAnICsgc2hhcGUueDMgKyAnLDUwICcgK1xuICAgICcgTCAnICsgc2hhcGUueDIgKyAnLCcgKyAoIDUwIC0gc2hhcGUueTIgKSArXG4gICAgJyBMICcgKyBzaGFwZS54MSArICcsJyArICggNTAgLSBzaGFwZS55MSApICtcbiAgICAnIFonO1xufVxuXG5QcmV2TmV4dEJ1dHRvbi5wcm90b3R5cGUuaGFuZGxlRXZlbnQgPSB1dGlscy5oYW5kbGVFdmVudDtcblxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlLm9uY2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5pc0VuYWJsZWQgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMucGFyZW50LnVpQ2hhbmdlKCk7XG4gIHZhciBtZXRob2QgPSB0aGlzLmlzUHJldmlvdXMgPyAncHJldmlvdXMnIDogJ25leHQnO1xuICB0aGlzLnBhcmVudFsgbWV0aG9kIF0oKTtcbn07XG5cbi8vIC0tLS0tICAtLS0tLSAvL1xuXG5QcmV2TmV4dEJ1dHRvbi5wcm90b3R5cGUuZW5hYmxlID0gZnVuY3Rpb24oKSB7XG4gIGlmICggdGhpcy5pc0VuYWJsZWQgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMuZWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlO1xuICB0aGlzLmlzRW5hYmxlZCA9IHRydWU7XG59O1xuXG5QcmV2TmV4dEJ1dHRvbi5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLmlzRW5hYmxlZCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5lbGVtZW50LmRpc2FibGVkID0gdHJ1ZTtcbiAgdGhpcy5pc0VuYWJsZWQgPSBmYWxzZTtcbn07XG5cblByZXZOZXh0QnV0dG9uLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcbiAgLy8gaW5kZXggb2YgZmlyc3Qgb3IgbGFzdCBzbGlkZSwgaWYgcHJldmlvdXMgb3IgbmV4dFxuICB2YXIgc2xpZGVzID0gdGhpcy5wYXJlbnQuc2xpZGVzO1xuICAvLyBlbmFibGUgaXMgd3JhcEFyb3VuZCBhbmQgYXQgbGVhc3QgMiBzbGlkZXNcbiAgaWYgKCB0aGlzLnBhcmVudC5vcHRpb25zLndyYXBBcm91bmQgJiYgc2xpZGVzLmxlbmd0aCA+IDEgKSB7XG4gICAgdGhpcy5lbmFibGUoKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IHNsaWRlcy5sZW5ndGggPyBzbGlkZXMubGVuZ3RoIC0gMSA6IDA7XG4gIHZhciBib3VuZEluZGV4ID0gdGhpcy5pc1ByZXZpb3VzID8gMCA6IGxhc3RJbmRleDtcbiAgdmFyIG1ldGhvZCA9IHRoaXMucGFyZW50LnNlbGVjdGVkSW5kZXggPT0gYm91bmRJbmRleCA/ICdkaXNhYmxlJyA6ICdlbmFibGUnO1xuICB0aGlzWyBtZXRob2QgXSgpO1xufTtcblxuUHJldk5leHRCdXR0b24ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5kZWFjdGl2YXRlKCk7XG4gIHRoaXMuYWxsT2ZmKCk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBGbGlja2l0eSBwcm90b3R5cGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxudXRpbHMuZXh0ZW5kKCBGbGlja2l0eS5kZWZhdWx0cywge1xuICBwcmV2TmV4dEJ1dHRvbnM6IHRydWUsXG4gIGFycm93U2hhcGU6IHtcbiAgICB4MDogMTAsXG4gICAgeDE6IDYwLCB5MTogNTAsXG4gICAgeDI6IDcwLCB5MjogNDAsXG4gICAgeDM6IDMwLFxuICB9LFxufSApO1xuXG5GbGlja2l0eS5jcmVhdGVNZXRob2RzLnB1c2goJ19jcmVhdGVQcmV2TmV4dEJ1dHRvbnMnKTtcbnZhciBwcm90byA9IEZsaWNraXR5LnByb3RvdHlwZTtcblxucHJvdG8uX2NyZWF0ZVByZXZOZXh0QnV0dG9ucyA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLm9wdGlvbnMucHJldk5leHRCdXR0b25zICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMucHJldkJ1dHRvbiA9IG5ldyBQcmV2TmV4dEJ1dHRvbiggLTEsIHRoaXMgKTtcbiAgdGhpcy5uZXh0QnV0dG9uID0gbmV3IFByZXZOZXh0QnV0dG9uKCAxLCB0aGlzICk7XG5cbiAgdGhpcy5vbiggJ2FjdGl2YXRlJywgdGhpcy5hY3RpdmF0ZVByZXZOZXh0QnV0dG9ucyApO1xufTtcblxucHJvdG8uYWN0aXZhdGVQcmV2TmV4dEJ1dHRvbnMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wcmV2QnV0dG9uLmFjdGl2YXRlKCk7XG4gIHRoaXMubmV4dEJ1dHRvbi5hY3RpdmF0ZSgpO1xuICB0aGlzLm9uKCAnZGVhY3RpdmF0ZScsIHRoaXMuZGVhY3RpdmF0ZVByZXZOZXh0QnV0dG9ucyApO1xufTtcblxucHJvdG8uZGVhY3RpdmF0ZVByZXZOZXh0QnV0dG9ucyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnByZXZCdXR0b24uZGVhY3RpdmF0ZSgpO1xuICB0aGlzLm5leHRCdXR0b24uZGVhY3RpdmF0ZSgpO1xuICB0aGlzLm9mZiggJ2RlYWN0aXZhdGUnLCB0aGlzLmRlYWN0aXZhdGVQcmV2TmV4dEJ1dHRvbnMgKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5GbGlja2l0eS5QcmV2TmV4dEJ1dHRvbiA9IFByZXZOZXh0QnV0dG9uO1xuXG5yZXR1cm4gRmxpY2tpdHk7XG5cbn0gKSApO1xuIiwiLyohXG4gKiBnZXRTaXplIHYyLjAuM1xuICogbWVhc3VyZSBzaXplIG9mIGVsZW1lbnRzXG4gKiBNSVQgbGljZW5zZVxuICovXG5cbi8qIGpzaGludCBicm93c2VyOiB0cnVlLCBzdHJpY3Q6IHRydWUsIHVuZGVmOiB0cnVlLCB1bnVzZWQ6IHRydWUgKi9cbi8qIGdsb2JhbHMgY29uc29sZTogZmFsc2UgKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKiBnbG9iYWxzIGRlZmluZSwgbW9kdWxlICovXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCBmYWN0b3J5ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5nZXRTaXplID0gZmFjdG9yeSgpO1xuICB9XG5cbn0pKCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoKSB7XG4ndXNlIHN0cmljdCc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGhlbHBlcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLy8gZ2V0IGEgbnVtYmVyIGZyb20gYSBzdHJpbmcsIG5vdCBhIHBlcmNlbnRhZ2VcbmZ1bmN0aW9uIGdldFN0eWxlU2l6ZSggdmFsdWUgKSB7XG4gIHZhciBudW0gPSBwYXJzZUZsb2F0KCB2YWx1ZSApO1xuICAvLyBub3QgYSBwZXJjZW50IGxpa2UgJzEwMCUnLCBhbmQgYSBudW1iZXJcbiAgdmFyIGlzVmFsaWQgPSB2YWx1ZS5pbmRleE9mKCclJykgPT0gLTEgJiYgIWlzTmFOKCBudW0gKTtcbiAgcmV0dXJuIGlzVmFsaWQgJiYgbnVtO1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cblxudmFyIGxvZ0Vycm9yID0gdHlwZW9mIGNvbnNvbGUgPT0gJ3VuZGVmaW5lZCcgPyBub29wIDpcbiAgZnVuY3Rpb24oIG1lc3NhZ2UgKSB7XG4gICAgY29uc29sZS5lcnJvciggbWVzc2FnZSApO1xuICB9O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBtZWFzdXJlbWVudHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxudmFyIG1lYXN1cmVtZW50cyA9IFtcbiAgJ3BhZGRpbmdMZWZ0JyxcbiAgJ3BhZGRpbmdSaWdodCcsXG4gICdwYWRkaW5nVG9wJyxcbiAgJ3BhZGRpbmdCb3R0b20nLFxuICAnbWFyZ2luTGVmdCcsXG4gICdtYXJnaW5SaWdodCcsXG4gICdtYXJnaW5Ub3AnLFxuICAnbWFyZ2luQm90dG9tJyxcbiAgJ2JvcmRlckxlZnRXaWR0aCcsXG4gICdib3JkZXJSaWdodFdpZHRoJyxcbiAgJ2JvcmRlclRvcFdpZHRoJyxcbiAgJ2JvcmRlckJvdHRvbVdpZHRoJ1xuXTtcblxudmFyIG1lYXN1cmVtZW50c0xlbmd0aCA9IG1lYXN1cmVtZW50cy5sZW5ndGg7XG5cbmZ1bmN0aW9uIGdldFplcm9TaXplKCkge1xuICB2YXIgc2l6ZSA9IHtcbiAgICB3aWR0aDogMCxcbiAgICBoZWlnaHQ6IDAsXG4gICAgaW5uZXJXaWR0aDogMCxcbiAgICBpbm5lckhlaWdodDogMCxcbiAgICBvdXRlcldpZHRoOiAwLFxuICAgIG91dGVySGVpZ2h0OiAwXG4gIH07XG4gIGZvciAoIHZhciBpPTA7IGkgPCBtZWFzdXJlbWVudHNMZW5ndGg7IGkrKyApIHtcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSBtZWFzdXJlbWVudHNbaV07XG4gICAgc2l6ZVsgbWVhc3VyZW1lbnQgXSA9IDA7XG4gIH1cbiAgcmV0dXJuIHNpemU7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGdldFN0eWxlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8qKlxuICogZ2V0U3R5bGUsIGdldCBzdHlsZSBvZiBlbGVtZW50LCBjaGVjayBmb3IgRmlyZWZveCBidWdcbiAqIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTU0ODM5N1xuICovXG5mdW5jdGlvbiBnZXRTdHlsZSggZWxlbSApIHtcbiAgdmFyIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuICBpZiAoICFzdHlsZSApIHtcbiAgICBsb2dFcnJvciggJ1N0eWxlIHJldHVybmVkICcgKyBzdHlsZSArXG4gICAgICAnLiBBcmUgeW91IHJ1bm5pbmcgdGhpcyBjb2RlIGluIGEgaGlkZGVuIGlmcmFtZSBvbiBGaXJlZm94PyAnICtcbiAgICAgICdTZWUgaHR0cHM6Ly9iaXQubHkvZ2V0c2l6ZWJ1ZzEnICk7XG4gIH1cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBzZXR1cCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG52YXIgaXNTZXR1cCA9IGZhbHNlO1xuXG52YXIgaXNCb3hTaXplT3V0ZXI7XG5cbi8qKlxuICogc2V0dXBcbiAqIGNoZWNrIGlzQm94U2l6ZXJPdXRlclxuICogZG8gb24gZmlyc3QgZ2V0U2l6ZSgpIHJhdGhlciB0aGFuIG9uIHBhZ2UgbG9hZCBmb3IgRmlyZWZveCBidWdcbiAqL1xuZnVuY3Rpb24gc2V0dXAoKSB7XG4gIC8vIHNldHVwIG9uY2VcbiAgaWYgKCBpc1NldHVwICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpc1NldHVwID0gdHJ1ZTtcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBib3ggc2l6aW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgLyoqXG4gICAqIENocm9tZSAmIFNhZmFyaSBtZWFzdXJlIHRoZSBvdXRlci13aWR0aCBvbiBzdHlsZS53aWR0aCBvbiBib3JkZXItYm94IGVsZW1zXG4gICAqIElFMTEgJiBGaXJlZm94PDI5IG1lYXN1cmVzIHRoZSBpbm5lci13aWR0aFxuICAgKi9cbiAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXYuc3R5bGUud2lkdGggPSAnMjAwcHgnO1xuICBkaXYuc3R5bGUucGFkZGluZyA9ICcxcHggMnB4IDNweCA0cHgnO1xuICBkaXYuc3R5bGUuYm9yZGVyU3R5bGUgPSAnc29saWQnO1xuICBkaXYuc3R5bGUuYm9yZGVyV2lkdGggPSAnMXB4IDJweCAzcHggNHB4JztcbiAgZGl2LnN0eWxlLmJveFNpemluZyA9ICdib3JkZXItYm94JztcblxuICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHkgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICBib2R5LmFwcGVuZENoaWxkKCBkaXYgKTtcbiAgdmFyIHN0eWxlID0gZ2V0U3R5bGUoIGRpdiApO1xuICAvLyByb3VuZCB2YWx1ZSBmb3IgYnJvd3NlciB6b29tLiBkZXNhbmRyby9tYXNvbnJ5IzkyOFxuICBpc0JveFNpemVPdXRlciA9IE1hdGgucm91bmQoIGdldFN0eWxlU2l6ZSggc3R5bGUud2lkdGggKSApID09IDIwMDtcbiAgZ2V0U2l6ZS5pc0JveFNpemVPdXRlciA9IGlzQm94U2l6ZU91dGVyO1xuXG4gIGJvZHkucmVtb3ZlQ2hpbGQoIGRpdiApO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBnZXRTaXplIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmZ1bmN0aW9uIGdldFNpemUoIGVsZW0gKSB7XG4gIHNldHVwKCk7XG5cbiAgLy8gdXNlIHF1ZXJ5U2VsZXRvciBpZiBlbGVtIGlzIHN0cmluZ1xuICBpZiAoIHR5cGVvZiBlbGVtID09ICdzdHJpbmcnICkge1xuICAgIGVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBlbGVtICk7XG4gIH1cblxuICAvLyBkbyBub3QgcHJvY2VlZCBvbiBub24tb2JqZWN0c1xuICBpZiAoICFlbGVtIHx8IHR5cGVvZiBlbGVtICE9ICdvYmplY3QnIHx8ICFlbGVtLm5vZGVUeXBlICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzdHlsZSA9IGdldFN0eWxlKCBlbGVtICk7XG5cbiAgLy8gaWYgaGlkZGVuLCBldmVyeXRoaW5nIGlzIDBcbiAgaWYgKCBzdHlsZS5kaXNwbGF5ID09ICdub25lJyApIHtcbiAgICByZXR1cm4gZ2V0WmVyb1NpemUoKTtcbiAgfVxuXG4gIHZhciBzaXplID0ge307XG4gIHNpemUud2lkdGggPSBlbGVtLm9mZnNldFdpZHRoO1xuICBzaXplLmhlaWdodCA9IGVsZW0ub2Zmc2V0SGVpZ2h0O1xuXG4gIHZhciBpc0JvcmRlckJveCA9IHNpemUuaXNCb3JkZXJCb3ggPSBzdHlsZS5ib3hTaXppbmcgPT0gJ2JvcmRlci1ib3gnO1xuXG4gIC8vIGdldCBhbGwgbWVhc3VyZW1lbnRzXG4gIGZvciAoIHZhciBpPTA7IGkgPCBtZWFzdXJlbWVudHNMZW5ndGg7IGkrKyApIHtcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSBtZWFzdXJlbWVudHNbaV07XG4gICAgdmFyIHZhbHVlID0gc3R5bGVbIG1lYXN1cmVtZW50IF07XG4gICAgdmFyIG51bSA9IHBhcnNlRmxvYXQoIHZhbHVlICk7XG4gICAgLy8gYW55ICdhdXRvJywgJ21lZGl1bScgdmFsdWUgd2lsbCBiZSAwXG4gICAgc2l6ZVsgbWVhc3VyZW1lbnQgXSA9ICFpc05hTiggbnVtICkgPyBudW0gOiAwO1xuICB9XG5cbiAgdmFyIHBhZGRpbmdXaWR0aCA9IHNpemUucGFkZGluZ0xlZnQgKyBzaXplLnBhZGRpbmdSaWdodDtcbiAgdmFyIHBhZGRpbmdIZWlnaHQgPSBzaXplLnBhZGRpbmdUb3AgKyBzaXplLnBhZGRpbmdCb3R0b207XG4gIHZhciBtYXJnaW5XaWR0aCA9IHNpemUubWFyZ2luTGVmdCArIHNpemUubWFyZ2luUmlnaHQ7XG4gIHZhciBtYXJnaW5IZWlnaHQgPSBzaXplLm1hcmdpblRvcCArIHNpemUubWFyZ2luQm90dG9tO1xuICB2YXIgYm9yZGVyV2lkdGggPSBzaXplLmJvcmRlckxlZnRXaWR0aCArIHNpemUuYm9yZGVyUmlnaHRXaWR0aDtcbiAgdmFyIGJvcmRlckhlaWdodCA9IHNpemUuYm9yZGVyVG9wV2lkdGggKyBzaXplLmJvcmRlckJvdHRvbVdpZHRoO1xuXG4gIHZhciBpc0JvcmRlckJveFNpemVPdXRlciA9IGlzQm9yZGVyQm94ICYmIGlzQm94U2l6ZU91dGVyO1xuXG4gIC8vIG92ZXJ3cml0ZSB3aWR0aCBhbmQgaGVpZ2h0IGlmIHdlIGNhbiBnZXQgaXQgZnJvbSBzdHlsZVxuICB2YXIgc3R5bGVXaWR0aCA9IGdldFN0eWxlU2l6ZSggc3R5bGUud2lkdGggKTtcbiAgaWYgKCBzdHlsZVdpZHRoICE9PSBmYWxzZSApIHtcbiAgICBzaXplLndpZHRoID0gc3R5bGVXaWR0aCArXG4gICAgICAvLyBhZGQgcGFkZGluZyBhbmQgYm9yZGVyIHVubGVzcyBpdCdzIGFscmVhZHkgaW5jbHVkaW5nIGl0XG4gICAgICAoIGlzQm9yZGVyQm94U2l6ZU91dGVyID8gMCA6IHBhZGRpbmdXaWR0aCArIGJvcmRlcldpZHRoICk7XG4gIH1cblxuICB2YXIgc3R5bGVIZWlnaHQgPSBnZXRTdHlsZVNpemUoIHN0eWxlLmhlaWdodCApO1xuICBpZiAoIHN0eWxlSGVpZ2h0ICE9PSBmYWxzZSApIHtcbiAgICBzaXplLmhlaWdodCA9IHN0eWxlSGVpZ2h0ICtcbiAgICAgIC8vIGFkZCBwYWRkaW5nIGFuZCBib3JkZXIgdW5sZXNzIGl0J3MgYWxyZWFkeSBpbmNsdWRpbmcgaXRcbiAgICAgICggaXNCb3JkZXJCb3hTaXplT3V0ZXIgPyAwIDogcGFkZGluZ0hlaWdodCArIGJvcmRlckhlaWdodCApO1xuICB9XG5cbiAgc2l6ZS5pbm5lcldpZHRoID0gc2l6ZS53aWR0aCAtICggcGFkZGluZ1dpZHRoICsgYm9yZGVyV2lkdGggKTtcbiAgc2l6ZS5pbm5lckhlaWdodCA9IHNpemUuaGVpZ2h0IC0gKCBwYWRkaW5nSGVpZ2h0ICsgYm9yZGVySGVpZ2h0ICk7XG5cbiAgc2l6ZS5vdXRlcldpZHRoID0gc2l6ZS53aWR0aCArIG1hcmdpbldpZHRoO1xuICBzaXplLm91dGVySGVpZ2h0ID0gc2l6ZS5oZWlnaHQgKyBtYXJnaW5IZWlnaHQ7XG5cbiAgcmV0dXJuIHNpemU7XG59XG5cbnJldHVybiBnZXRTaXplO1xuXG59KTtcbiIsIi8qIVxuICogaW1hZ2VzTG9hZGVkIHY0LjEuNFxuICogSmF2YVNjcmlwdCBpcyBhbGwgbGlrZSBcIllvdSBpbWFnZXMgYXJlIGRvbmUgeWV0IG9yIHdoYXQ/XCJcbiAqIE1JVCBMaWNlbnNlXG4gKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkgeyAndXNlIHN0cmljdCc7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuXG4gIC8qZ2xvYmFsIGRlZmluZTogZmFsc2UsIG1vZHVsZTogZmFsc2UsIHJlcXVpcmU6IGZhbHNlICovXG5cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIFtcbiAgICAgICdldi1lbWl0dGVyL2V2LWVtaXR0ZXInXG4gICAgXSwgZnVuY3Rpb24oIEV2RW1pdHRlciApIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIEV2RW1pdHRlciApO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgcmVxdWlyZSgnZXYtZW1pdHRlcicpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5pbWFnZXNMb2FkZWQgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgd2luZG93LkV2RW1pdHRlclxuICAgICk7XG4gIH1cblxufSkoIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcyxcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIGZhY3RvcnkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBFdkVtaXR0ZXIgKSB7XG5cbid1c2Ugc3RyaWN0JztcblxudmFyICQgPSB3aW5kb3cualF1ZXJ5O1xudmFyIGNvbnNvbGUgPSB3aW5kb3cuY29uc29sZTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaGVscGVycyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vLyBleHRlbmQgb2JqZWN0c1xuZnVuY3Rpb24gZXh0ZW5kKCBhLCBiICkge1xuICBmb3IgKCB2YXIgcHJvcCBpbiBiICkge1xuICAgIGFbIHByb3AgXSA9IGJbIHByb3AgXTtcbiAgfVxuICByZXR1cm4gYTtcbn1cblxudmFyIGFycmF5U2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cbi8vIHR1cm4gZWxlbWVudCBvciBub2RlTGlzdCBpbnRvIGFuIGFycmF5XG5mdW5jdGlvbiBtYWtlQXJyYXkoIG9iaiApIHtcbiAgaWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcbiAgICAvLyB1c2Ugb2JqZWN0IGlmIGFscmVhZHkgYW4gYXJyYXlcbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgdmFyIGlzQXJyYXlMaWtlID0gdHlwZW9mIG9iaiA9PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqLmxlbmd0aCA9PSAnbnVtYmVyJztcbiAgaWYgKCBpc0FycmF5TGlrZSApIHtcbiAgICAvLyBjb252ZXJ0IG5vZGVMaXN0IHRvIGFycmF5XG4gICAgcmV0dXJuIGFycmF5U2xpY2UuY2FsbCggb2JqICk7XG4gIH1cblxuICAvLyBhcnJheSBvZiBzaW5nbGUgaW5kZXhcbiAgcmV0dXJuIFsgb2JqIF07XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGltYWdlc0xvYWRlZCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXksIEVsZW1lbnQsIE5vZGVMaXN0LCBTdHJpbmd9IGVsZW1cbiAqIEBwYXJhbSB7T2JqZWN0IG9yIEZ1bmN0aW9ufSBvcHRpb25zIC0gaWYgZnVuY3Rpb24sIHVzZSBhcyBjYWxsYmFja1xuICogQHBhcmFtIHtGdW5jdGlvbn0gb25BbHdheXMgLSBjYWxsYmFjayBmdW5jdGlvblxuICovXG5mdW5jdGlvbiBJbWFnZXNMb2FkZWQoIGVsZW0sIG9wdGlvbnMsIG9uQWx3YXlzICkge1xuICAvLyBjb2VyY2UgSW1hZ2VzTG9hZGVkKCkgd2l0aG91dCBuZXcsIHRvIGJlIG5ldyBJbWFnZXNMb2FkZWQoKVxuICBpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBJbWFnZXNMb2FkZWQgKSApIHtcbiAgICByZXR1cm4gbmV3IEltYWdlc0xvYWRlZCggZWxlbSwgb3B0aW9ucywgb25BbHdheXMgKTtcbiAgfVxuICAvLyB1c2UgZWxlbSBhcyBzZWxlY3RvciBzdHJpbmdcbiAgdmFyIHF1ZXJ5RWxlbSA9IGVsZW07XG4gIGlmICggdHlwZW9mIGVsZW0gPT0gJ3N0cmluZycgKSB7XG4gICAgcXVlcnlFbGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggZWxlbSApO1xuICB9XG4gIC8vIGJhaWwgaWYgYmFkIGVsZW1lbnRcbiAgaWYgKCAhcXVlcnlFbGVtICkge1xuICAgIGNvbnNvbGUuZXJyb3IoICdCYWQgZWxlbWVudCBmb3IgaW1hZ2VzTG9hZGVkICcgKyAoIHF1ZXJ5RWxlbSB8fCBlbGVtICkgKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLmVsZW1lbnRzID0gbWFrZUFycmF5KCBxdWVyeUVsZW0gKTtcbiAgdGhpcy5vcHRpb25zID0gZXh0ZW5kKCB7fSwgdGhpcy5vcHRpb25zICk7XG4gIC8vIHNoaWZ0IGFyZ3VtZW50cyBpZiBubyBvcHRpb25zIHNldFxuICBpZiAoIHR5cGVvZiBvcHRpb25zID09ICdmdW5jdGlvbicgKSB7XG4gICAgb25BbHdheXMgPSBvcHRpb25zO1xuICB9IGVsc2Uge1xuICAgIGV4dGVuZCggdGhpcy5vcHRpb25zLCBvcHRpb25zICk7XG4gIH1cblxuICBpZiAoIG9uQWx3YXlzICkge1xuICAgIHRoaXMub24oICdhbHdheXMnLCBvbkFsd2F5cyApO1xuICB9XG5cbiAgdGhpcy5nZXRJbWFnZXMoKTtcblxuICBpZiAoICQgKSB7XG4gICAgLy8gYWRkIGpRdWVyeSBEZWZlcnJlZCBvYmplY3RcbiAgICB0aGlzLmpxRGVmZXJyZWQgPSBuZXcgJC5EZWZlcnJlZCgpO1xuICB9XG5cbiAgLy8gSEFDSyBjaGVjayBhc3luYyB0byBhbGxvdyB0aW1lIHRvIGJpbmQgbGlzdGVuZXJzXG4gIHNldFRpbWVvdXQoIHRoaXMuY2hlY2suYmluZCggdGhpcyApICk7XG59XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBFdkVtaXR0ZXIucHJvdG90eXBlICk7XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUub3B0aW9ucyA9IHt9O1xuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLmdldEltYWdlcyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmltYWdlcyA9IFtdO1xuXG4gIC8vIGZpbHRlciAmIGZpbmQgaXRlbXMgaWYgd2UgaGF2ZSBhbiBpdGVtIHNlbGVjdG9yXG4gIHRoaXMuZWxlbWVudHMuZm9yRWFjaCggdGhpcy5hZGRFbGVtZW50SW1hZ2VzLCB0aGlzICk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZX0gZWxlbWVudFxuICovXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLmFkZEVsZW1lbnRJbWFnZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgLy8gZmlsdGVyIHNpYmxpbmdzXG4gIGlmICggZWxlbS5ub2RlTmFtZSA9PSAnSU1HJyApIHtcbiAgICB0aGlzLmFkZEltYWdlKCBlbGVtICk7XG4gIH1cbiAgLy8gZ2V0IGJhY2tncm91bmQgaW1hZ2Ugb24gZWxlbWVudFxuICBpZiAoIHRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kID09PSB0cnVlICkge1xuICAgIHRoaXMuYWRkRWxlbWVudEJhY2tncm91bmRJbWFnZXMoIGVsZW0gKTtcbiAgfVxuXG4gIC8vIGZpbmQgY2hpbGRyZW5cbiAgLy8gbm8gbm9uLWVsZW1lbnQgbm9kZXMsICMxNDNcbiAgdmFyIG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcbiAgaWYgKCAhbm9kZVR5cGUgfHwgIWVsZW1lbnROb2RlVHlwZXNbIG5vZGVUeXBlIF0gKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBjaGlsZEltZ3MgPSBlbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoJ2ltZycpO1xuICAvLyBjb25jYXQgY2hpbGRFbGVtcyB0byBmaWx0ZXJGb3VuZCBhcnJheVxuICBmb3IgKCB2YXIgaT0wOyBpIDwgY2hpbGRJbWdzLmxlbmd0aDsgaSsrICkge1xuICAgIHZhciBpbWcgPSBjaGlsZEltZ3NbaV07XG4gICAgdGhpcy5hZGRJbWFnZSggaW1nICk7XG4gIH1cblxuICAvLyBnZXQgY2hpbGQgYmFja2dyb3VuZCBpbWFnZXNcbiAgaWYgKCB0eXBlb2YgdGhpcy5vcHRpb25zLmJhY2tncm91bmQgPT0gJ3N0cmluZycgKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gZWxlbS5xdWVyeVNlbGVjdG9yQWxsKCB0aGlzLm9wdGlvbnMuYmFja2dyb3VuZCApO1xuICAgIGZvciAoIGk9MDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrICkge1xuICAgICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICB0aGlzLmFkZEVsZW1lbnRCYWNrZ3JvdW5kSW1hZ2VzKCBjaGlsZCApO1xuICAgIH1cbiAgfVxufTtcblxudmFyIGVsZW1lbnROb2RlVHlwZXMgPSB7XG4gIDE6IHRydWUsXG4gIDk6IHRydWUsXG4gIDExOiB0cnVlXG59O1xuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLmFkZEVsZW1lbnRCYWNrZ3JvdW5kSW1hZ2VzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIHZhciBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcbiAgaWYgKCAhc3R5bGUgKSB7XG4gICAgLy8gRmlyZWZveCByZXR1cm5zIG51bGwgaWYgaW4gYSBoaWRkZW4gaWZyYW1lIGh0dHBzOi8vYnVnemlsLmxhLzU0ODM5N1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBnZXQgdXJsIGluc2lkZSB1cmwoXCIuLi5cIilcbiAgdmFyIHJlVVJMID0gL3VybFxcKChbJ1wiXSk/KC4qPylcXDFcXCkvZ2k7XG4gIHZhciBtYXRjaGVzID0gcmVVUkwuZXhlYyggc3R5bGUuYmFja2dyb3VuZEltYWdlICk7XG4gIHdoaWxlICggbWF0Y2hlcyAhPT0gbnVsbCApIHtcbiAgICB2YXIgdXJsID0gbWF0Y2hlcyAmJiBtYXRjaGVzWzJdO1xuICAgIGlmICggdXJsICkge1xuICAgICAgdGhpcy5hZGRCYWNrZ3JvdW5kKCB1cmwsIGVsZW0gKTtcbiAgICB9XG4gICAgbWF0Y2hlcyA9IHJlVVJMLmV4ZWMoIHN0eWxlLmJhY2tncm91bmRJbWFnZSApO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7SW1hZ2V9IGltZ1xuICovXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLmFkZEltYWdlID0gZnVuY3Rpb24oIGltZyApIHtcbiAgdmFyIGxvYWRpbmdJbWFnZSA9IG5ldyBMb2FkaW5nSW1hZ2UoIGltZyApO1xuICB0aGlzLmltYWdlcy5wdXNoKCBsb2FkaW5nSW1hZ2UgKTtcbn07XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuYWRkQmFja2dyb3VuZCA9IGZ1bmN0aW9uKCB1cmwsIGVsZW0gKSB7XG4gIHZhciBiYWNrZ3JvdW5kID0gbmV3IEJhY2tncm91bmQoIHVybCwgZWxlbSApO1xuICB0aGlzLmltYWdlcy5wdXNoKCBiYWNrZ3JvdW5kICk7XG59O1xuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG4gIHRoaXMucHJvZ3Jlc3NlZENvdW50ID0gMDtcbiAgdGhpcy5oYXNBbnlCcm9rZW4gPSBmYWxzZTtcbiAgLy8gY29tcGxldGUgaWYgbm8gaW1hZ2VzXG4gIGlmICggIXRoaXMuaW1hZ2VzLmxlbmd0aCApIHtcbiAgICB0aGlzLmNvbXBsZXRlKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Qcm9ncmVzcyggaW1hZ2UsIGVsZW0sIG1lc3NhZ2UgKSB7XG4gICAgLy8gSEFDSyAtIENocm9tZSB0cmlnZ2VycyBldmVudCBiZWZvcmUgb2JqZWN0IHByb3BlcnRpZXMgaGF2ZSBjaGFuZ2VkLiAjODNcbiAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcbiAgICAgIF90aGlzLnByb2dyZXNzKCBpbWFnZSwgZWxlbSwgbWVzc2FnZSApO1xuICAgIH0pO1xuICB9XG5cbiAgdGhpcy5pbWFnZXMuZm9yRWFjaCggZnVuY3Rpb24oIGxvYWRpbmdJbWFnZSApIHtcbiAgICBsb2FkaW5nSW1hZ2Uub25jZSggJ3Byb2dyZXNzJywgb25Qcm9ncmVzcyApO1xuICAgIGxvYWRpbmdJbWFnZS5jaGVjaygpO1xuICB9KTtcbn07XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUucHJvZ3Jlc3MgPSBmdW5jdGlvbiggaW1hZ2UsIGVsZW0sIG1lc3NhZ2UgKSB7XG4gIHRoaXMucHJvZ3Jlc3NlZENvdW50Kys7XG4gIHRoaXMuaGFzQW55QnJva2VuID0gdGhpcy5oYXNBbnlCcm9rZW4gfHwgIWltYWdlLmlzTG9hZGVkO1xuICAvLyBwcm9ncmVzcyBldmVudFxuICB0aGlzLmVtaXRFdmVudCggJ3Byb2dyZXNzJywgWyB0aGlzLCBpbWFnZSwgZWxlbSBdICk7XG4gIGlmICggdGhpcy5qcURlZmVycmVkICYmIHRoaXMuanFEZWZlcnJlZC5ub3RpZnkgKSB7XG4gICAgdGhpcy5qcURlZmVycmVkLm5vdGlmeSggdGhpcywgaW1hZ2UgKTtcbiAgfVxuICAvLyBjaGVjayBpZiBjb21wbGV0ZWRcbiAgaWYgKCB0aGlzLnByb2dyZXNzZWRDb3VudCA9PSB0aGlzLmltYWdlcy5sZW5ndGggKSB7XG4gICAgdGhpcy5jb21wbGV0ZSgpO1xuICB9XG5cbiAgaWYgKCB0aGlzLm9wdGlvbnMuZGVidWcgJiYgY29uc29sZSApIHtcbiAgICBjb25zb2xlLmxvZyggJ3Byb2dyZXNzOiAnICsgbWVzc2FnZSwgaW1hZ2UsIGVsZW0gKTtcbiAgfVxufTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZXZlbnROYW1lID0gdGhpcy5oYXNBbnlCcm9rZW4gPyAnZmFpbCcgOiAnZG9uZSc7XG4gIHRoaXMuaXNDb21wbGV0ZSA9IHRydWU7XG4gIHRoaXMuZW1pdEV2ZW50KCBldmVudE5hbWUsIFsgdGhpcyBdICk7XG4gIHRoaXMuZW1pdEV2ZW50KCAnYWx3YXlzJywgWyB0aGlzIF0gKTtcbiAgaWYgKCB0aGlzLmpxRGVmZXJyZWQgKSB7XG4gICAgdmFyIGpxTWV0aG9kID0gdGhpcy5oYXNBbnlCcm9rZW4gPyAncmVqZWN0JyA6ICdyZXNvbHZlJztcbiAgICB0aGlzLmpxRGVmZXJyZWRbIGpxTWV0aG9kIF0oIHRoaXMgKTtcbiAgfVxufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmZ1bmN0aW9uIExvYWRpbmdJbWFnZSggaW1nICkge1xuICB0aGlzLmltZyA9IGltZztcbn1cblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEV2RW1pdHRlci5wcm90b3R5cGUgKTtcblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uKCkge1xuICAvLyBJZiBjb21wbGV0ZSBpcyB0cnVlIGFuZCBicm93c2VyIHN1cHBvcnRzIG5hdHVyYWwgc2l6ZXMsXG4gIC8vIHRyeSB0byBjaGVjayBmb3IgaW1hZ2Ugc3RhdHVzIG1hbnVhbGx5LlxuICB2YXIgaXNDb21wbGV0ZSA9IHRoaXMuZ2V0SXNJbWFnZUNvbXBsZXRlKCk7XG4gIGlmICggaXNDb21wbGV0ZSApIHtcbiAgICAvLyByZXBvcnQgYmFzZWQgb24gbmF0dXJhbFdpZHRoXG4gICAgdGhpcy5jb25maXJtKCB0aGlzLmltZy5uYXR1cmFsV2lkdGggIT09IDAsICduYXR1cmFsV2lkdGgnICk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gSWYgbm9uZSBvZiB0aGUgY2hlY2tzIGFib3ZlIG1hdGNoZWQsIHNpbXVsYXRlIGxvYWRpbmcgb24gZGV0YWNoZWQgZWxlbWVudC5cbiAgdGhpcy5wcm94eUltYWdlID0gbmV3IEltYWdlKCk7XG4gIHRoaXMucHJveHlJbWFnZS5hZGRFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5wcm94eUltYWdlLmFkZEV2ZW50TGlzdGVuZXIoICdlcnJvcicsIHRoaXMgKTtcbiAgLy8gYmluZCB0byBpbWFnZSBhcyB3ZWxsIGZvciBGaXJlZm94LiAjMTkxXG4gIHRoaXMuaW1nLmFkZEV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG4gIHRoaXMucHJveHlJbWFnZS5zcmMgPSB0aGlzLmltZy5zcmM7XG59O1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLmdldElzSW1hZ2VDb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICAvLyBjaGVjayBmb3Igbm9uLXplcm8sIG5vbi11bmRlZmluZWQgbmF0dXJhbFdpZHRoXG4gIC8vIGZpeGVzIFNhZmFyaStJbmZpbml0ZVNjcm9sbCtNYXNvbnJ5IGJ1ZyBpbmZpbml0ZS1zY3JvbGwjNjcxXG4gIHJldHVybiB0aGlzLmltZy5jb21wbGV0ZSAmJiB0aGlzLmltZy5uYXR1cmFsV2lkdGg7XG59O1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLmNvbmZpcm0gPSBmdW5jdGlvbiggaXNMb2FkZWQsIG1lc3NhZ2UgKSB7XG4gIHRoaXMuaXNMb2FkZWQgPSBpc0xvYWRlZDtcbiAgdGhpcy5lbWl0RXZlbnQoICdwcm9ncmVzcycsIFsgdGhpcywgdGhpcy5pbWcsIG1lc3NhZ2UgXSApO1xufTtcblxuLy8gLS0tLS0gZXZlbnRzIC0tLS0tIC8vXG5cbi8vIHRyaWdnZXIgc3BlY2lmaWVkIGhhbmRsZXIgZm9yIGV2ZW50IHR5cGVcbkxvYWRpbmdJbWFnZS5wcm90b3R5cGUuaGFuZGxlRXZlbnQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHZhciBtZXRob2QgPSAnb24nICsgZXZlbnQudHlwZTtcbiAgaWYgKCB0aGlzWyBtZXRob2QgXSApIHtcbiAgICB0aGlzWyBtZXRob2QgXSggZXZlbnQgKTtcbiAgfVxufTtcblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5jb25maXJtKCB0cnVlLCAnb25sb2FkJyApO1xuICB0aGlzLnVuYmluZEV2ZW50cygpO1xufTtcblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY29uZmlybSggZmFsc2UsICdvbmVycm9yJyApO1xuICB0aGlzLnVuYmluZEV2ZW50cygpO1xufTtcblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS51bmJpbmRFdmVudHMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wcm94eUltYWdlLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLnByb3h5SW1hZ2UucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xuICB0aGlzLmltZy5yZW1vdmVFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5pbWcucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQmFja2dyb3VuZCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5mdW5jdGlvbiBCYWNrZ3JvdW5kKCB1cmwsIGVsZW1lbnQgKSB7XG4gIHRoaXMudXJsID0gdXJsO1xuICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICB0aGlzLmltZyA9IG5ldyBJbWFnZSgpO1xufVxuXG4vLyBpbmhlcml0IExvYWRpbmdJbWFnZSBwcm90b3R5cGVcbkJhY2tncm91bmQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTG9hZGluZ0ltYWdlLnByb3RvdHlwZSApO1xuXG5CYWNrZ3JvdW5kLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5pbWcuYWRkRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xuICB0aGlzLmltZy5zcmMgPSB0aGlzLnVybDtcbiAgLy8gY2hlY2sgaWYgaW1hZ2UgaXMgYWxyZWFkeSBjb21wbGV0ZVxuICB2YXIgaXNDb21wbGV0ZSA9IHRoaXMuZ2V0SXNJbWFnZUNvbXBsZXRlKCk7XG4gIGlmICggaXNDb21wbGV0ZSApIHtcbiAgICB0aGlzLmNvbmZpcm0oIHRoaXMuaW1nLm5hdHVyYWxXaWR0aCAhPT0gMCwgJ25hdHVyYWxXaWR0aCcgKTtcbiAgICB0aGlzLnVuYmluZEV2ZW50cygpO1xuICB9XG59O1xuXG5CYWNrZ3JvdW5kLnByb3RvdHlwZS51bmJpbmRFdmVudHMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5pbWcucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCB0aGlzICk7XG4gIHRoaXMuaW1nLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdlcnJvcicsIHRoaXMgKTtcbn07XG5cbkJhY2tncm91bmQucHJvdG90eXBlLmNvbmZpcm0gPSBmdW5jdGlvbiggaXNMb2FkZWQsIG1lc3NhZ2UgKSB7XG4gIHRoaXMuaXNMb2FkZWQgPSBpc0xvYWRlZDtcbiAgdGhpcy5lbWl0RXZlbnQoICdwcm9ncmVzcycsIFsgdGhpcywgdGhpcy5lbGVtZW50LCBtZXNzYWdlIF0gKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGpRdWVyeSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5JbWFnZXNMb2FkZWQubWFrZUpRdWVyeVBsdWdpbiA9IGZ1bmN0aW9uKCBqUXVlcnkgKSB7XG4gIGpRdWVyeSA9IGpRdWVyeSB8fCB3aW5kb3cualF1ZXJ5O1xuICBpZiAoICFqUXVlcnkgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIHNldCBsb2NhbCB2YXJpYWJsZVxuICAkID0galF1ZXJ5O1xuICAvLyAkKCkuaW1hZ2VzTG9hZGVkKClcbiAgJC5mbi5pbWFnZXNMb2FkZWQgPSBmdW5jdGlvbiggb3B0aW9ucywgY2FsbGJhY2sgKSB7XG4gICAgdmFyIGluc3RhbmNlID0gbmV3IEltYWdlc0xvYWRlZCggdGhpcywgb3B0aW9ucywgY2FsbGJhY2sgKTtcbiAgICByZXR1cm4gaW5zdGFuY2UuanFEZWZlcnJlZC5wcm9taXNlKCAkKHRoaXMpICk7XG4gIH07XG59O1xuLy8gdHJ5IG1ha2luZyBwbHVnaW5cbkltYWdlc0xvYWRlZC5tYWtlSlF1ZXJ5UGx1Z2luKCk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5yZXR1cm4gSW1hZ2VzTG9hZGVkO1xuXG59KTtcbiIsIi8vIHNsaWRlXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggZmFjdG9yeSApO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuRmxpY2tpdHkgPSB3aW5kb3cuRmxpY2tpdHkgfHwge307XG4gICAgd2luZG93LkZsaWNraXR5LlNsaWRlID0gZmFjdG9yeSgpO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSgpIHtcbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gU2xpZGUoIHBhcmVudCApIHtcbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMuaXNPcmlnaW5MZWZ0ID0gcGFyZW50Lm9yaWdpblNpZGUgPT0gJ2xlZnQnO1xuICB0aGlzLmNlbGxzID0gW107XG4gIHRoaXMub3V0ZXJXaWR0aCA9IDA7XG4gIHRoaXMuaGVpZ2h0ID0gMDtcbn1cblxudmFyIHByb3RvID0gU2xpZGUucHJvdG90eXBlO1xuXG5wcm90by5hZGRDZWxsID0gZnVuY3Rpb24oIGNlbGwgKSB7XG4gIHRoaXMuY2VsbHMucHVzaCggY2VsbCApO1xuICB0aGlzLm91dGVyV2lkdGggKz0gY2VsbC5zaXplLm91dGVyV2lkdGg7XG4gIHRoaXMuaGVpZ2h0ID0gTWF0aC5tYXgoIGNlbGwuc2l6ZS5vdXRlckhlaWdodCwgdGhpcy5oZWlnaHQgKTtcbiAgLy8gZmlyc3QgY2VsbCBzdHVmZlxuICBpZiAoIHRoaXMuY2VsbHMubGVuZ3RoID09IDEgKSB7XG4gICAgdGhpcy54ID0gY2VsbC54OyAvLyB4IGNvbWVzIGZyb20gZmlyc3QgY2VsbFxuICAgIHZhciBiZWdpbk1hcmdpbiA9IHRoaXMuaXNPcmlnaW5MZWZ0ID8gJ21hcmdpbkxlZnQnIDogJ21hcmdpblJpZ2h0JztcbiAgICB0aGlzLmZpcnN0TWFyZ2luID0gY2VsbC5zaXplWyBiZWdpbk1hcmdpbiBdO1xuICB9XG59O1xuXG5wcm90by51cGRhdGVUYXJnZXQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGVuZE1hcmdpbiA9IHRoaXMuaXNPcmlnaW5MZWZ0ID8gJ21hcmdpblJpZ2h0JyA6ICdtYXJnaW5MZWZ0JztcbiAgdmFyIGxhc3RDZWxsID0gdGhpcy5nZXRMYXN0Q2VsbCgpO1xuICB2YXIgbGFzdE1hcmdpbiA9IGxhc3RDZWxsID8gbGFzdENlbGwuc2l6ZVsgZW5kTWFyZ2luIF0gOiAwO1xuICB2YXIgc2xpZGVXaWR0aCA9IHRoaXMub3V0ZXJXaWR0aCAtICggdGhpcy5maXJzdE1hcmdpbiArIGxhc3RNYXJnaW4gKTtcbiAgdGhpcy50YXJnZXQgPSB0aGlzLnggKyB0aGlzLmZpcnN0TWFyZ2luICsgc2xpZGVXaWR0aCAqIHRoaXMucGFyZW50LmNlbGxBbGlnbjtcbn07XG5cbnByb3RvLmdldExhc3RDZWxsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmNlbGxzWyB0aGlzLmNlbGxzLmxlbmd0aCAtIDEgXTtcbn07XG5cbnByb3RvLnNlbGVjdCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmNlbGxzLmZvckVhY2goIGZ1bmN0aW9uKCBjZWxsICkge1xuICAgIGNlbGwuc2VsZWN0KCk7XG4gIH0gKTtcbn07XG5cbnByb3RvLnVuc2VsZWN0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY2VsbHMuZm9yRWFjaCggZnVuY3Rpb24oIGNlbGwgKSB7XG4gICAgY2VsbC51bnNlbGVjdCgpO1xuICB9ICk7XG59O1xuXG5wcm90by5nZXRDZWxsRWxlbWVudHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuY2VsbHMubWFwKCBmdW5jdGlvbiggY2VsbCApIHtcbiAgICByZXR1cm4gY2VsbC5lbGVtZW50O1xuICB9ICk7XG59O1xuXG5yZXR1cm4gU2xpZGU7XG5cbn0gKSApO1xuIiwiLyohXG4gKiBVbmlkcmFnZ2VyIHYyLjQuMFxuICogRHJhZ2dhYmxlIGJhc2UgY2xhc3NcbiAqIE1JVCBsaWNlbnNlXG4gKi9cblxuLypqc2hpbnQgYnJvd3NlcjogdHJ1ZSwgdW51c2VkOiB0cnVlLCB1bmRlZjogdHJ1ZSwgc3RyaWN0OiB0cnVlICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIC8qanNoaW50IHN0cmljdDogZmFsc2UgKi8gLypnbG9iYWxzIGRlZmluZSwgbW9kdWxlLCByZXF1aXJlICovXG5cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIFtcbiAgICAgICd1bmlwb2ludGVyL3VuaXBvaW50ZXInXG4gICAgXSwgZnVuY3Rpb24oIFVuaXBvaW50ZXIgKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeSggd2luZG93LCBVbmlwb2ludGVyICk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3csXG4gICAgICByZXF1aXJlKCd1bmlwb2ludGVyJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LlVuaWRyYWdnZXIgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgd2luZG93LlVuaXBvaW50ZXJcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBVbmlwb2ludGVyICkge1xuXG4ndXNlIHN0cmljdCc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFVuaWRyYWdnZXIgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gVW5pZHJhZ2dlcigpIHt9XG5cbi8vIGluaGVyaXQgVW5pcG9pbnRlciAmIEV2RW1pdHRlclxudmFyIHByb3RvID0gVW5pZHJhZ2dlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBVbmlwb2ludGVyLnByb3RvdHlwZSApO1xuXG4vLyAtLS0tLSBiaW5kIHN0YXJ0IC0tLS0tIC8vXG5cbnByb3RvLmJpbmRIYW5kbGVzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2JpbmRIYW5kbGVzKCB0cnVlICk7XG59O1xuXG5wcm90by51bmJpbmRIYW5kbGVzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2JpbmRIYW5kbGVzKCBmYWxzZSApO1xufTtcblxuLyoqXG4gKiBBZGQgb3IgcmVtb3ZlIHN0YXJ0IGV2ZW50XG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzQWRkXG4gKi9cbnByb3RvLl9iaW5kSGFuZGxlcyA9IGZ1bmN0aW9uKCBpc0FkZCApIHtcbiAgLy8gbXVuZ2UgaXNBZGQsIGRlZmF1bHQgdG8gdHJ1ZVxuICBpc0FkZCA9IGlzQWRkID09PSB1bmRlZmluZWQgPyB0cnVlIDogaXNBZGQ7XG4gIC8vIGJpbmQgZWFjaCBoYW5kbGVcbiAgdmFyIGJpbmRNZXRob2QgPSBpc0FkZCA/ICdhZGRFdmVudExpc3RlbmVyJyA6ICdyZW1vdmVFdmVudExpc3RlbmVyJztcbiAgdmFyIHRvdWNoQWN0aW9uID0gaXNBZGQgPyB0aGlzLl90b3VjaEFjdGlvblZhbHVlIDogJyc7XG4gIGZvciAoIHZhciBpPTA7IGkgPCB0aGlzLmhhbmRsZXMubGVuZ3RoOyBpKysgKSB7XG4gICAgdmFyIGhhbmRsZSA9IHRoaXMuaGFuZGxlc1tpXTtcbiAgICB0aGlzLl9iaW5kU3RhcnRFdmVudCggaGFuZGxlLCBpc0FkZCApO1xuICAgIGhhbmRsZVsgYmluZE1ldGhvZCBdKCAnY2xpY2snLCB0aGlzICk7XG4gICAgLy8gdG91Y2gtYWN0aW9uOiBub25lIHRvIG92ZXJyaWRlIGJyb3dzZXIgdG91Y2ggZ2VzdHVyZXMuIG1ldGFmaXp6eS9mbGlja2l0eSM1NDBcbiAgICBpZiAoIHdpbmRvdy5Qb2ludGVyRXZlbnQgKSB7XG4gICAgICBoYW5kbGUuc3R5bGUudG91Y2hBY3Rpb24gPSB0b3VjaEFjdGlvbjtcbiAgICB9XG4gIH1cbn07XG5cbi8vIHByb3RvdHlwZSBzbyBpdCBjYW4gYmUgb3ZlcndyaXRlYWJsZSBieSBGbGlja2l0eVxucHJvdG8uX3RvdWNoQWN0aW9uVmFsdWUgPSAnbm9uZSc7XG5cbi8vIC0tLS0tIHN0YXJ0IGV2ZW50IC0tLS0tIC8vXG5cbi8qKlxuICogcG9pbnRlciBzdGFydFxuICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAqIEBwYXJhbSB7RXZlbnQgb3IgVG91Y2h9IHBvaW50ZXJcbiAqL1xucHJvdG8ucG9pbnRlckRvd24gPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHZhciBpc09rYXkgPSB0aGlzLm9rYXlQb2ludGVyRG93biggZXZlbnQgKTtcbiAgaWYgKCAhaXNPa2F5ICkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyB0cmFjayBzdGFydCBldmVudCBwb3NpdGlvblxuICAvLyBTYWZhcmkgOSBvdmVycmlkZXMgcGFnZVggYW5kIHBhZ2VZLiBUaGVzZSB2YWx1ZXMgbmVlZHMgdG8gYmUgY29waWVkLiBmbGlja2l0eSM4NDJcbiAgdGhpcy5wb2ludGVyRG93blBvaW50ZXIgPSB7XG4gICAgcGFnZVg6IHBvaW50ZXIucGFnZVgsXG4gICAgcGFnZVk6IHBvaW50ZXIucGFnZVksXG4gIH07XG5cbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgdGhpcy5wb2ludGVyRG93bkJsdXIoKTtcbiAgLy8gYmluZCBtb3ZlIGFuZCBlbmQgZXZlbnRzXG4gIHRoaXMuX2JpbmRQb3N0U3RhcnRFdmVudHMoIGV2ZW50ICk7XG4gIHRoaXMuZW1pdEV2ZW50KCAncG9pbnRlckRvd24nLCBbIGV2ZW50LCBwb2ludGVyIF0gKTtcbn07XG5cbi8vIG5vZGVzIHRoYXQgaGF2ZSB0ZXh0IGZpZWxkc1xudmFyIGN1cnNvck5vZGVzID0ge1xuICBURVhUQVJFQTogdHJ1ZSxcbiAgSU5QVVQ6IHRydWUsXG4gIFNFTEVDVDogdHJ1ZSxcbiAgT1BUSU9OOiB0cnVlLFxufTtcblxuLy8gaW5wdXQgdHlwZXMgdGhhdCBkbyBub3QgaGF2ZSB0ZXh0IGZpZWxkc1xudmFyIGNsaWNrVHlwZXMgPSB7XG4gIHJhZGlvOiB0cnVlLFxuICBjaGVja2JveDogdHJ1ZSxcbiAgYnV0dG9uOiB0cnVlLFxuICBzdWJtaXQ6IHRydWUsXG4gIGltYWdlOiB0cnVlLFxuICBmaWxlOiB0cnVlLFxufTtcblxuLy8gZGlzbWlzcyBpbnB1dHMgd2l0aCB0ZXh0IGZpZWxkcy4gZmxpY2tpdHkjNDAzLCBmbGlja2l0eSM0MDRcbnByb3RvLm9rYXlQb2ludGVyRG93biA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdmFyIGlzQ3Vyc29yTm9kZSA9IGN1cnNvck5vZGVzWyBldmVudC50YXJnZXQubm9kZU5hbWUgXTtcbiAgdmFyIGlzQ2xpY2tUeXBlID0gY2xpY2tUeXBlc1sgZXZlbnQudGFyZ2V0LnR5cGUgXTtcbiAgdmFyIGlzT2theSA9ICFpc0N1cnNvck5vZGUgfHwgaXNDbGlja1R5cGU7XG4gIGlmICggIWlzT2theSApIHtcbiAgICB0aGlzLl9wb2ludGVyUmVzZXQoKTtcbiAgfVxuICByZXR1cm4gaXNPa2F5O1xufTtcblxuLy8ga2x1ZGdlIHRvIGJsdXIgcHJldmlvdXNseSBmb2N1c2VkIGlucHV0XG5wcm90by5wb2ludGVyRG93bkJsdXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGZvY3VzZWQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAvLyBkbyBub3QgYmx1ciBib2R5IGZvciBJRTEwLCBtZXRhZml6enkvZmxpY2tpdHkjMTE3XG4gIHZhciBjYW5CbHVyID0gZm9jdXNlZCAmJiBmb2N1c2VkLmJsdXIgJiYgZm9jdXNlZCAhPSBkb2N1bWVudC5ib2R5O1xuICBpZiAoIGNhbkJsdXIgKSB7XG4gICAgZm9jdXNlZC5ibHVyKCk7XG4gIH1cbn07XG5cbi8vIC0tLS0tIG1vdmUgZXZlbnQgLS0tLS0gLy9cblxuLyoqXG4gKiBkcmFnIG1vdmVcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gKiBAcGFyYW0ge0V2ZW50IG9yIFRvdWNofSBwb2ludGVyXG4gKi9cbnByb3RvLnBvaW50ZXJNb3ZlID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB2YXIgbW92ZVZlY3RvciA9IHRoaXMuX2RyYWdQb2ludGVyTW92ZSggZXZlbnQsIHBvaW50ZXIgKTtcbiAgdGhpcy5lbWl0RXZlbnQoICdwb2ludGVyTW92ZScsIFsgZXZlbnQsIHBvaW50ZXIsIG1vdmVWZWN0b3IgXSApO1xuICB0aGlzLl9kcmFnTW92ZSggZXZlbnQsIHBvaW50ZXIsIG1vdmVWZWN0b3IgKTtcbn07XG5cbi8vIGJhc2UgcG9pbnRlciBtb3ZlIGxvZ2ljXG5wcm90by5fZHJhZ1BvaW50ZXJNb3ZlID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB2YXIgbW92ZVZlY3RvciA9IHtcbiAgICB4OiBwb2ludGVyLnBhZ2VYIC0gdGhpcy5wb2ludGVyRG93blBvaW50ZXIucGFnZVgsXG4gICAgeTogcG9pbnRlci5wYWdlWSAtIHRoaXMucG9pbnRlckRvd25Qb2ludGVyLnBhZ2VZXG4gIH07XG4gIC8vIHN0YXJ0IGRyYWcgaWYgcG9pbnRlciBoYXMgbW92ZWQgZmFyIGVub3VnaCB0byBzdGFydCBkcmFnXG4gIGlmICggIXRoaXMuaXNEcmFnZ2luZyAmJiB0aGlzLmhhc0RyYWdTdGFydGVkKCBtb3ZlVmVjdG9yICkgKSB7XG4gICAgdGhpcy5fZHJhZ1N0YXJ0KCBldmVudCwgcG9pbnRlciApO1xuICB9XG4gIHJldHVybiBtb3ZlVmVjdG9yO1xufTtcblxuLy8gY29uZGl0aW9uIGlmIHBvaW50ZXIgaGFzIG1vdmVkIGZhciBlbm91Z2ggdG8gc3RhcnQgZHJhZ1xucHJvdG8uaGFzRHJhZ1N0YXJ0ZWQgPSBmdW5jdGlvbiggbW92ZVZlY3RvciApIHtcbiAgcmV0dXJuIE1hdGguYWJzKCBtb3ZlVmVjdG9yLnggKSA+IDMgfHwgTWF0aC5hYnMoIG1vdmVWZWN0b3IueSApID4gMztcbn07XG5cbi8vIC0tLS0tIGVuZCBldmVudCAtLS0tLSAvL1xuXG4vKipcbiAqIHBvaW50ZXIgdXBcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gKiBAcGFyYW0ge0V2ZW50IG9yIFRvdWNofSBwb2ludGVyXG4gKi9cbnByb3RvLnBvaW50ZXJVcCA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgdGhpcy5lbWl0RXZlbnQoICdwb2ludGVyVXAnLCBbIGV2ZW50LCBwb2ludGVyIF0gKTtcbiAgdGhpcy5fZHJhZ1BvaW50ZXJVcCggZXZlbnQsIHBvaW50ZXIgKTtcbn07XG5cbnByb3RvLl9kcmFnUG9pbnRlclVwID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICBpZiAoIHRoaXMuaXNEcmFnZ2luZyApIHtcbiAgICB0aGlzLl9kcmFnRW5kKCBldmVudCwgcG9pbnRlciApO1xuICB9IGVsc2Uge1xuICAgIC8vIHBvaW50ZXIgZGlkbid0IG1vdmUgZW5vdWdoIGZvciBkcmFnIHRvIHN0YXJ0XG4gICAgdGhpcy5fc3RhdGljQ2xpY2soIGV2ZW50LCBwb2ludGVyICk7XG4gIH1cbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGRyYWcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLy8gZHJhZ1N0YXJ0XG5wcm90by5fZHJhZ1N0YXJ0ID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB0aGlzLmlzRHJhZ2dpbmcgPSB0cnVlO1xuICAvLyBwcmV2ZW50IGNsaWNrc1xuICB0aGlzLmlzUHJldmVudGluZ0NsaWNrcyA9IHRydWU7XG4gIHRoaXMuZHJhZ1N0YXJ0KCBldmVudCwgcG9pbnRlciApO1xufTtcblxucHJvdG8uZHJhZ1N0YXJ0ID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB0aGlzLmVtaXRFdmVudCggJ2RyYWdTdGFydCcsIFsgZXZlbnQsIHBvaW50ZXIgXSApO1xufTtcblxuLy8gZHJhZ01vdmVcbnByb3RvLl9kcmFnTW92ZSA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciApIHtcbiAgLy8gZG8gbm90IGRyYWcgaWYgbm90IGRyYWdnaW5nIHlldFxuICBpZiAoICF0aGlzLmlzRHJhZ2dpbmcgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5kcmFnTW92ZSggZXZlbnQsIHBvaW50ZXIsIG1vdmVWZWN0b3IgKTtcbn07XG5cbnByb3RvLmRyYWdNb3ZlID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyLCBtb3ZlVmVjdG9yICkge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB0aGlzLmVtaXRFdmVudCggJ2RyYWdNb3ZlJywgWyBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciBdICk7XG59O1xuXG4vLyBkcmFnRW5kXG5wcm90by5fZHJhZ0VuZCA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgLy8gc2V0IGZsYWdzXG4gIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAvLyByZS1lbmFibGUgY2xpY2tpbmcgYXN5bmNcbiAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgZGVsZXRlIHRoaXMuaXNQcmV2ZW50aW5nQ2xpY2tzO1xuICB9LmJpbmQoIHRoaXMgKSApO1xuXG4gIHRoaXMuZHJhZ0VuZCggZXZlbnQsIHBvaW50ZXIgKTtcbn07XG5cbnByb3RvLmRyYWdFbmQgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHRoaXMuZW1pdEV2ZW50KCAnZHJhZ0VuZCcsIFsgZXZlbnQsIHBvaW50ZXIgXSApO1xufTtcblxuLy8gLS0tLS0gb25jbGljayAtLS0tLSAvL1xuXG4vLyBoYW5kbGUgYWxsIGNsaWNrcyBhbmQgcHJldmVudCBjbGlja3Mgd2hlbiBkcmFnZ2luZ1xucHJvdG8ub25jbGljayA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgaWYgKCB0aGlzLmlzUHJldmVudGluZ0NsaWNrcyApIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG59O1xuXG4vLyAtLS0tLSBzdGF0aWNDbGljayAtLS0tLSAvL1xuXG4vLyB0cmlnZ2VyZWQgYWZ0ZXIgcG9pbnRlciBkb3duICYgdXAgd2l0aCBuby90aW55IG1vdmVtZW50XG5wcm90by5fc3RhdGljQ2xpY2sgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIC8vIGlnbm9yZSBlbXVsYXRlZCBtb3VzZSB1cCBjbGlja3NcbiAgaWYgKCB0aGlzLmlzSWdub3JpbmdNb3VzZVVwICYmIGV2ZW50LnR5cGUgPT0gJ21vdXNldXAnICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuc3RhdGljQ2xpY2soIGV2ZW50LCBwb2ludGVyICk7XG5cbiAgLy8gc2V0IGZsYWcgZm9yIGVtdWxhdGVkIGNsaWNrcyAzMDBtcyBhZnRlciB0b3VjaGVuZFxuICBpZiAoIGV2ZW50LnR5cGUgIT0gJ21vdXNldXAnICkge1xuICAgIHRoaXMuaXNJZ25vcmluZ01vdXNlVXAgPSB0cnVlO1xuICAgIC8vIHJlc2V0IGZsYWcgYWZ0ZXIgMzAwbXNcbiAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmlzSWdub3JpbmdNb3VzZVVwO1xuICAgIH0uYmluZCggdGhpcyApLCA0MDAgKTtcbiAgfVxufTtcblxucHJvdG8uc3RhdGljQ2xpY2sgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHRoaXMuZW1pdEV2ZW50KCAnc3RhdGljQ2xpY2snLCBbIGV2ZW50LCBwb2ludGVyIF0gKTtcbn07XG5cbi8vIC0tLS0tIHV0aWxzIC0tLS0tIC8vXG5cblVuaWRyYWdnZXIuZ2V0UG9pbnRlclBvaW50ID0gVW5pcG9pbnRlci5nZXRQb2ludGVyUG9pbnQ7XG5cbi8vIC0tLS0tICAtLS0tLSAvL1xuXG5yZXR1cm4gVW5pZHJhZ2dlcjtcblxufSkpO1xuIiwiLy8gYW5pbWF0ZVxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCByZXF1aXJlKCdmaXp6eS11aS11dGlscycpICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuRmxpY2tpdHkgPSB3aW5kb3cuRmxpY2tpdHkgfHwge307XG4gICAgd2luZG93LkZsaWNraXR5LmFuaW1hdGVQcm90b3R5cGUgPSBmYWN0b3J5KCB3aW5kb3cuZml6enlVSVV0aWxzICk7XG4gIH1cblxufSggdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uIGZhY3RvcnkoIHV0aWxzICkge1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBhbmltYXRlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmxldCBwcm90byA9IHt9O1xuXG5wcm90by5zdGFydEFuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIHRoaXMuaXNBbmltYXRpbmcgKSByZXR1cm47XG5cbiAgdGhpcy5pc0FuaW1hdGluZyA9IHRydWU7XG4gIHRoaXMucmVzdGluZ0ZyYW1lcyA9IDA7XG4gIHRoaXMuYW5pbWF0ZSgpO1xufTtcblxucHJvdG8uYW5pbWF0ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmFwcGx5RHJhZ0ZvcmNlKCk7XG4gIHRoaXMuYXBwbHlTZWxlY3RlZEF0dHJhY3Rpb24oKTtcblxuICBsZXQgcHJldmlvdXNYID0gdGhpcy54O1xuXG4gIHRoaXMuaW50ZWdyYXRlUGh5c2ljcygpO1xuICB0aGlzLnBvc2l0aW9uU2xpZGVyKCk7XG4gIHRoaXMuc2V0dGxlKCBwcmV2aW91c1ggKTtcbiAgLy8gYW5pbWF0ZSBuZXh0IGZyYW1lXG4gIGlmICggdGhpcy5pc0FuaW1hdGluZyApIHJlcXVlc3RBbmltYXRpb25GcmFtZSggKCkgPT4gdGhpcy5hbmltYXRlKCkgKTtcbn07XG5cbnByb3RvLnBvc2l0aW9uU2xpZGVyID0gZnVuY3Rpb24oKSB7XG4gIGxldCB4ID0gdGhpcy54O1xuICAvLyB3cmFwIHBvc2l0aW9uIGFyb3VuZFxuICBpZiAoIHRoaXMuaXNXcmFwcGluZyApIHtcbiAgICB4ID0gdXRpbHMubW9kdWxvKCB4LCB0aGlzLnNsaWRlYWJsZVdpZHRoICkgLSB0aGlzLnNsaWRlYWJsZVdpZHRoO1xuICAgIHRoaXMuc2hpZnRXcmFwQ2VsbHMoIHggKTtcbiAgfVxuXG4gIHRoaXMuc2V0VHJhbnNsYXRlWCggeCwgdGhpcy5pc0FuaW1hdGluZyApO1xuICB0aGlzLmRpc3BhdGNoU2Nyb2xsRXZlbnQoKTtcbn07XG5cbnByb3RvLnNldFRyYW5zbGF0ZVggPSBmdW5jdGlvbiggeCwgaXMzZCApIHtcbiAgeCArPSB0aGlzLmN1cnNvclBvc2l0aW9uO1xuICAvLyByZXZlcnNlIGlmIHJpZ2h0LXRvLWxlZnQgYW5kIHVzaW5nIHRyYW5zZm9ybVxuICBpZiAoIHRoaXMub3B0aW9ucy5yaWdodFRvTGVmdCApIHggPSAteDtcbiAgbGV0IHRyYW5zbGF0ZVggPSB0aGlzLmdldFBvc2l0aW9uVmFsdWUoIHggKTtcbiAgLy8gdXNlIDNEIHRyYW5zZm9ybXMgZm9yIGhhcmR3YXJlIGFjY2VsZXJhdGlvbiBvbiBpT1NcbiAgLy8gYnV0IHVzZSAyRCB3aGVuIHNldHRsZWQsIGZvciBiZXR0ZXIgZm9udC1yZW5kZXJpbmdcbiAgdGhpcy5zbGlkZXIuc3R5bGUudHJhbnNmb3JtID0gaXMzZCA/XG4gICAgYHRyYW5zbGF0ZTNkKCR7dHJhbnNsYXRlWH0sMCwwKWAgOiBgdHJhbnNsYXRlWCgke3RyYW5zbGF0ZVh9KWA7XG59O1xuXG5wcm90by5kaXNwYXRjaFNjcm9sbEV2ZW50ID0gZnVuY3Rpb24oKSB7XG4gIGxldCBmaXJzdFNsaWRlID0gdGhpcy5zbGlkZXNbMF07XG4gIGlmICggIWZpcnN0U2xpZGUgKSByZXR1cm47XG5cbiAgbGV0IHBvc2l0aW9uWCA9IC10aGlzLnggLSBmaXJzdFNsaWRlLnRhcmdldDtcbiAgbGV0IHByb2dyZXNzID0gcG9zaXRpb25YIC8gdGhpcy5zbGlkZXNXaWR0aDtcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KCAnc2Nyb2xsJywgbnVsbCwgWyBwcm9ncmVzcywgcG9zaXRpb25YIF0gKTtcbn07XG5cbnByb3RvLnBvc2l0aW9uU2xpZGVyQXRTZWxlY3RlZCA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLmNlbGxzLmxlbmd0aCApIHJldHVybjtcblxuICB0aGlzLnggPSAtdGhpcy5zZWxlY3RlZFNsaWRlLnRhcmdldDtcbiAgdGhpcy52ZWxvY2l0eSA9IDA7IC8vIHN0b3Agd29iYmxlXG4gIHRoaXMucG9zaXRpb25TbGlkZXIoKTtcbn07XG5cbnByb3RvLmdldFBvc2l0aW9uVmFsdWUgPSBmdW5jdGlvbiggcG9zaXRpb24gKSB7XG4gIGlmICggdGhpcy5vcHRpb25zLnBlcmNlbnRQb3NpdGlvbiApIHtcbiAgICAvLyBwZXJjZW50IHBvc2l0aW9uLCByb3VuZCB0byAyIGRpZ2l0cywgbGlrZSAxMi4zNCVcbiAgICByZXR1cm4gKCBNYXRoLnJvdW5kKCAoIHBvc2l0aW9uIC8gdGhpcy5zaXplLmlubmVyV2lkdGggKSAqIDEwMDAwICkgKiAwLjAxICkgKyAnJSc7XG4gIH0gZWxzZSB7XG4gICAgLy8gcGl4ZWwgcG9zaXRpb25pbmdcbiAgICByZXR1cm4gTWF0aC5yb3VuZCggcG9zaXRpb24gKSArICdweCc7XG4gIH1cbn07XG5cbnByb3RvLnNldHRsZSA9IGZ1bmN0aW9uKCBwcmV2aW91c1ggKSB7XG4gIC8vIGtlZXAgdHJhY2sgb2YgZnJhbWVzIHdoZXJlIHggaGFzbid0IG1vdmVkXG4gIGxldCBpc1Jlc3RpbmcgPSAhdGhpcy5pc1BvaW50ZXJEb3duICYmXG4gICAgICBNYXRoLnJvdW5kKCB0aGlzLnggKiAxMDAgKSA9PT0gTWF0aC5yb3VuZCggcHJldmlvdXNYICogMTAwICk7XG4gIGlmICggaXNSZXN0aW5nICkgdGhpcy5yZXN0aW5nRnJhbWVzKys7XG4gIC8vIHN0b3AgYW5pbWF0aW5nIGlmIHJlc3RpbmcgZm9yIDMgb3IgbW9yZSBmcmFtZXNcbiAgaWYgKCB0aGlzLnJlc3RpbmdGcmFtZXMgPiAyICkge1xuICAgIHRoaXMuaXNBbmltYXRpbmcgPSBmYWxzZTtcbiAgICBkZWxldGUgdGhpcy5pc0ZyZWVTY3JvbGxpbmc7XG4gICAgLy8gcmVuZGVyIHBvc2l0aW9uIHdpdGggdHJhbnNsYXRlWCB3aGVuIHNldHRsZWRcbiAgICB0aGlzLnBvc2l0aW9uU2xpZGVyKCk7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KCAnc2V0dGxlJywgbnVsbCwgWyB0aGlzLnNlbGVjdGVkSW5kZXggXSApO1xuICB9XG59O1xuXG5wcm90by5zaGlmdFdyYXBDZWxscyA9IGZ1bmN0aW9uKCB4ICkge1xuICAvLyBzaGlmdCBiZWZvcmUgY2VsbHNcbiAgbGV0IGJlZm9yZUdhcCA9IHRoaXMuY3Vyc29yUG9zaXRpb24gKyB4O1xuICB0aGlzLl9zaGlmdENlbGxzKCB0aGlzLmJlZm9yZVNoaWZ0Q2VsbHMsIGJlZm9yZUdhcCwgLTEgKTtcbiAgLy8gc2hpZnQgYWZ0ZXIgY2VsbHNcbiAgbGV0IGFmdGVyR2FwID0gdGhpcy5zaXplLmlubmVyV2lkdGggLSAoIHggKyB0aGlzLnNsaWRlYWJsZVdpZHRoICsgdGhpcy5jdXJzb3JQb3NpdGlvbiApO1xuICB0aGlzLl9zaGlmdENlbGxzKCB0aGlzLmFmdGVyU2hpZnRDZWxscywgYWZ0ZXJHYXAsIDEgKTtcbn07XG5cbnByb3RvLl9zaGlmdENlbGxzID0gZnVuY3Rpb24oIGNlbGxzLCBnYXAsIHNoaWZ0ICkge1xuICBjZWxscy5mb3JFYWNoKCAoIGNlbGwgKSA9PiB7XG4gICAgbGV0IGNlbGxTaGlmdCA9IGdhcCA+IDAgPyBzaGlmdCA6IDA7XG4gICAgdGhpcy5fd3JhcFNoaWZ0Q2VsbCggY2VsbCwgY2VsbFNoaWZ0ICk7XG4gICAgZ2FwIC09IGNlbGwuc2l6ZS5vdXRlcldpZHRoO1xuICB9ICk7XG59O1xuXG5wcm90by5fdW5zaGlmdENlbGxzID0gZnVuY3Rpb24oIGNlbGxzICkge1xuICBpZiAoICFjZWxscyB8fCAhY2VsbHMubGVuZ3RoICkgcmV0dXJuO1xuXG4gIGNlbGxzLmZvckVhY2goICggY2VsbCApID0+IHRoaXMuX3dyYXBTaGlmdENlbGwoIGNlbGwsIDAgKSApO1xufTtcblxuLy8gQHBhcmFtIHtJbnRlZ2VyfSBzaGlmdCAtIDAsIDEsIG9yIC0xXG5wcm90by5fd3JhcFNoaWZ0Q2VsbCA9IGZ1bmN0aW9uKCBjZWxsLCBzaGlmdCApIHtcbiAgdGhpcy5fcmVuZGVyQ2VsbFBvc2l0aW9uKCBjZWxsLCBjZWxsLnggKyB0aGlzLnNsaWRlYWJsZVdpZHRoICogc2hpZnQgKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHBoeXNpY3MgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxucHJvdG8uaW50ZWdyYXRlUGh5c2ljcyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnggKz0gdGhpcy52ZWxvY2l0eTtcbiAgdGhpcy52ZWxvY2l0eSAqPSB0aGlzLmdldEZyaWN0aW9uRmFjdG9yKCk7XG59O1xuXG5wcm90by5hcHBseUZvcmNlID0gZnVuY3Rpb24oIGZvcmNlICkge1xuICB0aGlzLnZlbG9jaXR5ICs9IGZvcmNlO1xufTtcblxucHJvdG8uZ2V0RnJpY3Rpb25GYWN0b3IgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIDEgLSB0aGlzLm9wdGlvbnNbIHRoaXMuaXNGcmVlU2Nyb2xsaW5nID8gJ2ZyZWVTY3JvbGxGcmljdGlvbicgOiAnZnJpY3Rpb24nIF07XG59O1xuXG5wcm90by5nZXRSZXN0aW5nUG9zaXRpb24gPSBmdW5jdGlvbigpIHtcbiAgLy8gbXkgdGhhbmtzIHRvIFN0ZXZlbiBXaXR0ZW5zLCB3aG8gc2ltcGxpZmllZCB0aGlzIG1hdGggZ3JlYXRseVxuICByZXR1cm4gdGhpcy54ICsgdGhpcy52ZWxvY2l0eSAvICggMSAtIHRoaXMuZ2V0RnJpY3Rpb25GYWN0b3IoKSApO1xufTtcblxucHJvdG8uYXBwbHlEcmFnRm9yY2UgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5pc0RyYWdnYWJsZSB8fCAhdGhpcy5pc1BvaW50ZXJEb3duICkgcmV0dXJuO1xuXG4gIC8vIGNoYW5nZSB0aGUgcG9zaXRpb24gdG8gZHJhZyBwb3NpdGlvbiBieSBhcHBseWluZyBmb3JjZVxuICBsZXQgZHJhZ1ZlbG9jaXR5ID0gdGhpcy5kcmFnWCAtIHRoaXMueDtcbiAgbGV0IGRyYWdGb3JjZSA9IGRyYWdWZWxvY2l0eSAtIHRoaXMudmVsb2NpdHk7XG4gIHRoaXMuYXBwbHlGb3JjZSggZHJhZ0ZvcmNlICk7XG59O1xuXG5wcm90by5hcHBseVNlbGVjdGVkQXR0cmFjdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAvLyBkbyBub3QgYXR0cmFjdCBpZiBwb2ludGVyIGRvd24gb3Igbm8gc2xpZGVzXG4gIGxldCBkcmFnRG93biA9IHRoaXMuaXNEcmFnZ2FibGUgJiYgdGhpcy5pc1BvaW50ZXJEb3duO1xuICBpZiAoIGRyYWdEb3duIHx8IHRoaXMuaXNGcmVlU2Nyb2xsaW5nIHx8ICF0aGlzLnNsaWRlcy5sZW5ndGggKSByZXR1cm47XG5cbiAgbGV0IGRpc3RhbmNlID0gdGhpcy5zZWxlY3RlZFNsaWRlLnRhcmdldCAqIC0xIC0gdGhpcy54O1xuICBsZXQgZm9yY2UgPSBkaXN0YW5jZSAqIHRoaXMub3B0aW9ucy5zZWxlY3RlZEF0dHJhY3Rpb247XG4gIHRoaXMuYXBwbHlGb3JjZSggZm9yY2UgKTtcbn07XG5cbnJldHVybiBwcm90bztcblxufSApICk7XG4iLCIvLyBGbGlja2l0eSBtYWluXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtcGFyYW1zICovXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdyxcbiAgICAgICAgcmVxdWlyZSgnZXYtZW1pdHRlcicpLFxuICAgICAgICByZXF1aXJlKCdnZXQtc2l6ZScpLFxuICAgICAgICByZXF1aXJlKCdmaXp6eS11aS11dGlscycpLFxuICAgICAgICByZXF1aXJlKCcuL2NlbGwnKSxcbiAgICAgICAgcmVxdWlyZSgnLi9zbGlkZScpLFxuICAgICAgICByZXF1aXJlKCcuL2FuaW1hdGUnKSxcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgbGV0IF9GbGlja2l0eSA9IHdpbmRvdy5GbGlja2l0eTtcblxuICAgIHdpbmRvdy5GbGlja2l0eSA9IGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdyxcbiAgICAgICAgd2luZG93LkV2RW1pdHRlcixcbiAgICAgICAgd2luZG93LmdldFNpemUsXG4gICAgICAgIHdpbmRvdy5maXp6eVVJVXRpbHMsXG4gICAgICAgIF9GbGlja2l0eS5DZWxsLFxuICAgICAgICBfRmxpY2tpdHkuU2xpZGUsXG4gICAgICAgIF9GbGlja2l0eS5hbmltYXRlUHJvdG90eXBlLFxuICAgICk7XG4gIH1cblxufSggdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsXG4gICAgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBFdkVtaXR0ZXIsIGdldFNpemUsIHV0aWxzLCBDZWxsLCBTbGlkZSwgYW5pbWF0ZVByb3RvdHlwZSApIHtcbi8qIGVzbGludC1lbmFibGUgbWF4LXBhcmFtcyAqL1xuXG4vLyB2YXJzXG5jb25zdCB7IGdldENvbXB1dGVkU3R5bGUsIGNvbnNvbGUgfSA9IHdpbmRvdztcbmxldCB7IGpRdWVyeSB9ID0gd2luZG93O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBGbGlja2l0eSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vLyBnbG9iYWxseSB1bmlxdWUgaWRlbnRpZmllcnNcbmxldCBHVUlEID0gMDtcbi8vIGludGVybmFsIHN0b3JlIG9mIGFsbCBGbGlja2l0eSBpbnRhbmNlc1xubGV0IGluc3RhbmNlcyA9IHt9O1xuXG5mdW5jdGlvbiBGbGlja2l0eSggZWxlbWVudCwgb3B0aW9ucyApIHtcbiAgbGV0IHF1ZXJ5RWxlbWVudCA9IHV0aWxzLmdldFF1ZXJ5RWxlbWVudCggZWxlbWVudCApO1xuICBpZiAoICFxdWVyeUVsZW1lbnQgKSB7XG4gICAgaWYgKCBjb25zb2xlICkgY29uc29sZS5lcnJvcihgQmFkIGVsZW1lbnQgZm9yIEZsaWNraXR5OiAke3F1ZXJ5RWxlbWVudCB8fCBlbGVtZW50fWApO1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLmVsZW1lbnQgPSBxdWVyeUVsZW1lbnQ7XG4gIC8vIGRvIG5vdCBpbml0aWFsaXplIHR3aWNlIG9uIHNhbWUgZWxlbWVudFxuICBpZiAoIHRoaXMuZWxlbWVudC5mbGlja2l0eUdVSUQgKSB7XG4gICAgbGV0IGluc3RhbmNlID0gaW5zdGFuY2VzWyB0aGlzLmVsZW1lbnQuZmxpY2tpdHlHVUlEIF07XG4gICAgaWYgKCBpbnN0YW5jZSApIGluc3RhbmNlLm9wdGlvbiggb3B0aW9ucyApO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfVxuXG4gIC8vIGFkZCBqUXVlcnlcbiAgaWYgKCBqUXVlcnkgKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGpRdWVyeSggdGhpcy5lbGVtZW50ICk7XG4gIH1cbiAgLy8gb3B0aW9uc1xuICB0aGlzLm9wdGlvbnMgPSB7IC4uLnRoaXMuY29uc3RydWN0b3IuZGVmYXVsdHMgfTtcbiAgdGhpcy5vcHRpb24oIG9wdGlvbnMgKTtcblxuICAvLyBraWNrIHRoaW5ncyBvZmZcbiAgdGhpcy5fY3JlYXRlKCk7XG59XG5cbkZsaWNraXR5LmRlZmF1bHRzID0ge1xuICBhY2Nlc3NpYmlsaXR5OiB0cnVlLFxuICAvLyBhZGFwdGl2ZUhlaWdodDogZmFsc2UsXG4gIGNlbGxBbGlnbjogJ2NlbnRlcicsXG4gIC8vIGNlbGxTZWxlY3RvcjogdW5kZWZpbmVkLFxuICAvLyBjb250YWluOiBmYWxzZSxcbiAgZnJlZVNjcm9sbEZyaWN0aW9uOiAwLjA3NSwgLy8gZnJpY3Rpb24gd2hlbiBmcmVlLXNjcm9sbGluZ1xuICBmcmljdGlvbjogMC4yOCwgLy8gZnJpY3Rpb24gd2hlbiBzZWxlY3RpbmdcbiAgbmFtZXNwYWNlSlF1ZXJ5RXZlbnRzOiB0cnVlLFxuICAvLyBpbml0aWFsSW5kZXg6IDAsXG4gIHBlcmNlbnRQb3NpdGlvbjogdHJ1ZSxcbiAgcmVzaXplOiB0cnVlLFxuICBzZWxlY3RlZEF0dHJhY3Rpb246IDAuMDI1LFxuICBzZXRHYWxsZXJ5U2l6ZTogdHJ1ZSxcbiAgLy8gd2F0Y2hDU1M6IGZhbHNlLFxuICAvLyB3cmFwQXJvdW5kOiBmYWxzZVxufTtcblxuLy8gaGFzaCBvZiBtZXRob2RzIHRyaWdnZXJlZCBvbiBfY3JlYXRlKClcbkZsaWNraXR5LmNyZWF0ZSA9IHt9O1xuXG5sZXQgcHJvdG8gPSBGbGlja2l0eS5wcm90b3R5cGU7XG4vLyBpbmhlcml0IEV2ZW50RW1pdHRlclxuT2JqZWN0LmFzc2lnbiggcHJvdG8sIEV2RW1pdHRlci5wcm90b3R5cGUgKTtcblxucHJvdG8uX2NyZWF0ZSA9IGZ1bmN0aW9uKCkge1xuICBsZXQgeyByZXNpemUsIHdhdGNoQ1NTLCByaWdodFRvTGVmdCB9ID0gdGhpcy5vcHRpb25zO1xuICAvLyBhZGQgaWQgZm9yIEZsaWNraXR5LmRhdGFcbiAgbGV0IGlkID0gdGhpcy5ndWlkID0gKytHVUlEO1xuICB0aGlzLmVsZW1lbnQuZmxpY2tpdHlHVUlEID0gaWQ7IC8vIGV4cGFuZG9cbiAgaW5zdGFuY2VzWyBpZCBdID0gdGhpczsgLy8gYXNzb2NpYXRlIHZpYSBpZFxuICAvLyBpbml0aWFsIHByb3BlcnRpZXNcbiAgdGhpcy5zZWxlY3RlZEluZGV4ID0gMDtcbiAgLy8gaG93IG1hbnkgZnJhbWVzIHNsaWRlciBoYXMgYmVlbiBpbiBzYW1lIHBvc2l0aW9uXG4gIHRoaXMucmVzdGluZ0ZyYW1lcyA9IDA7XG4gIC8vIGluaXRpYWwgcGh5c2ljcyBwcm9wZXJ0aWVzXG4gIHRoaXMueCA9IDA7XG4gIHRoaXMudmVsb2NpdHkgPSAwO1xuICB0aGlzLmJlZ2luTWFyZ2luID0gcmlnaHRUb0xlZnQgPyAnbWFyZ2luUmlnaHQnIDogJ21hcmdpbkxlZnQnO1xuICB0aGlzLmVuZE1hcmdpbiA9IHJpZ2h0VG9MZWZ0ID8gJ21hcmdpbkxlZnQnIDogJ21hcmdpblJpZ2h0JztcbiAgLy8gY3JlYXRlIHZpZXdwb3J0ICYgc2xpZGVyXG4gIHRoaXMudmlld3BvcnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgdGhpcy52aWV3cG9ydC5jbGFzc05hbWUgPSAnZmxpY2tpdHktdmlld3BvcnQnO1xuICB0aGlzLl9jcmVhdGVTbGlkZXIoKTtcbiAgLy8gdXNlZCBmb3Iga2V5Ym9hcmQgbmF2aWdhdGlvblxuICB0aGlzLmZvY3VzYWJsZUVsZW1zID0gWyB0aGlzLmVsZW1lbnQgXTtcblxuICBpZiAoIHJlc2l6ZSB8fCB3YXRjaENTUyApIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggJ3Jlc2l6ZScsIHRoaXMgKTtcbiAgfVxuXG4gIC8vIGFkZCBsaXN0ZW5lcnMgZnJvbSBvbiBvcHRpb25cbiAgZm9yICggbGV0IGV2ZW50TmFtZSBpbiB0aGlzLm9wdGlvbnMub24gKSB7XG4gICAgbGV0IGxpc3RlbmVyID0gdGhpcy5vcHRpb25zLm9uWyBldmVudE5hbWUgXTtcbiAgICB0aGlzLm9uKCBldmVudE5hbWUsIGxpc3RlbmVyICk7XG4gIH1cblxuICBmb3IgKCBsZXQgbWV0aG9kIGluIEZsaWNraXR5LmNyZWF0ZSApIHtcbiAgICBGbGlja2l0eS5jcmVhdGVbIG1ldGhvZCBdLmNhbGwoIHRoaXMgKTtcbiAgfVxuXG4gIGlmICggd2F0Y2hDU1MgKSB7XG4gICAgdGhpcy53YXRjaENTUygpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuYWN0aXZhdGUoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBzZXQgb3B0aW9uc1xuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIHRvIGV4dGVuZFxuICovXG5wcm90by5vcHRpb24gPSBmdW5jdGlvbiggb3B0cyApIHtcbiAgT2JqZWN0LmFzc2lnbiggdGhpcy5vcHRpb25zLCBvcHRzICk7XG59O1xuXG5wcm90by5hY3RpdmF0ZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIHRoaXMuaXNBY3RpdmUgKSByZXR1cm47XG5cbiAgdGhpcy5pc0FjdGl2ZSA9IHRydWU7XG4gIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdmbGlja2l0eS1lbmFibGVkJyk7XG4gIGlmICggdGhpcy5vcHRpb25zLnJpZ2h0VG9MZWZ0ICkge1xuICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdmbGlja2l0eS1ydGwnKTtcbiAgfVxuXG4gIHRoaXMuZ2V0U2l6ZSgpO1xuICAvLyBtb3ZlIGluaXRpYWwgY2VsbCBlbGVtZW50cyBzbyB0aGV5IGNhbiBiZSBsb2FkZWQgYXMgY2VsbHNcbiAgbGV0IGNlbGxFbGVtcyA9IHRoaXMuX2ZpbHRlckZpbmRDZWxsRWxlbWVudHMoIHRoaXMuZWxlbWVudC5jaGlsZHJlbiApO1xuICB0aGlzLnNsaWRlci5hcHBlbmQoIC4uLmNlbGxFbGVtcyApO1xuICB0aGlzLnZpZXdwb3J0LmFwcGVuZCggdGhpcy5zbGlkZXIgKTtcbiAgdGhpcy5lbGVtZW50LmFwcGVuZCggdGhpcy52aWV3cG9ydCApO1xuICAvLyBnZXQgY2VsbHMgZnJvbSBjaGlsZHJlblxuICB0aGlzLnJlbG9hZENlbGxzKCk7XG5cbiAgaWYgKCB0aGlzLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSApIHtcbiAgICAvLyBhbGxvdyBlbGVtZW50IHRvIGZvY3VzYWJsZVxuICAgIHRoaXMuZWxlbWVudC50YWJJbmRleCA9IDA7XG4gICAgLy8gbGlzdGVuIGZvciBrZXkgcHJlc3Nlc1xuICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAna2V5ZG93bicsIHRoaXMgKTtcbiAgfVxuXG4gIHRoaXMuZW1pdEV2ZW50KCdhY3RpdmF0ZScpO1xuICB0aGlzLnNlbGVjdEluaXRpYWxJbmRleCgpO1xuICAvLyBmbGFnIGZvciBpbml0aWFsIGFjdGl2YXRpb24sIGZvciB1c2luZyBpbml0aWFsSW5kZXhcbiAgdGhpcy5pc0luaXRBY3RpdmF0ZWQgPSB0cnVlO1xuICAvLyByZWFkeSBldmVudC4gIzQ5M1xuICB0aGlzLmRpc3BhdGNoRXZlbnQoJ3JlYWR5Jyk7XG59O1xuXG4vLyBzbGlkZXIgcG9zaXRpb25zIHRoZSBjZWxsc1xucHJvdG8uX2NyZWF0ZVNsaWRlciA9IGZ1bmN0aW9uKCkge1xuICAvLyBzbGlkZXIgZWxlbWVudCBkb2VzIGFsbCB0aGUgcG9zaXRpb25pbmdcbiAgbGV0IHNsaWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBzbGlkZXIuY2xhc3NOYW1lID0gJ2ZsaWNraXR5LXNsaWRlcic7XG4gIHRoaXMuc2xpZGVyID0gc2xpZGVyO1xufTtcblxucHJvdG8uX2ZpbHRlckZpbmRDZWxsRWxlbWVudHMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIHJldHVybiB1dGlscy5maWx0ZXJGaW5kRWxlbWVudHMoIGVsZW1zLCB0aGlzLm9wdGlvbnMuY2VsbFNlbGVjdG9yICk7XG59O1xuXG4vLyBnb2VzIHRocm91Z2ggYWxsIGNoaWxkcmVuXG5wcm90by5yZWxvYWRDZWxscyA9IGZ1bmN0aW9uKCkge1xuICAvLyBjb2xsZWN0aW9uIG9mIGl0ZW0gZWxlbWVudHNcbiAgdGhpcy5jZWxscyA9IHRoaXMuX21ha2VDZWxscyggdGhpcy5zbGlkZXIuY2hpbGRyZW4gKTtcbiAgdGhpcy5wb3NpdGlvbkNlbGxzKCk7XG4gIHRoaXMuX3VwZGF0ZVdyYXBTaGlmdENlbGxzKCk7XG4gIHRoaXMuc2V0R2FsbGVyeVNpemUoKTtcbn07XG5cbi8qKlxuICogdHVybiBlbGVtZW50cyBpbnRvIEZsaWNraXR5LkNlbGxzXG4gKiBAcGFyYW0ge1tBcnJheSwgTm9kZUxpc3QsIEhUTUxFbGVtZW50XX0gZWxlbXMgLSBlbGVtZW50cyB0byBtYWtlIGludG8gY2VsbHNcbiAqIEByZXR1cm5zIHtBcnJheX0gaXRlbXMgLSBjb2xsZWN0aW9uIG9mIG5ldyBGbGlja2l0eSBDZWxsc1xuICovXG5wcm90by5fbWFrZUNlbGxzID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICBsZXQgY2VsbEVsZW1zID0gdGhpcy5fZmlsdGVyRmluZENlbGxFbGVtZW50cyggZWxlbXMgKTtcblxuICAvLyBjcmVhdGUgbmV3IENlbGxzIGZvciBjb2xsZWN0aW9uXG4gIHJldHVybiBjZWxsRWxlbXMubWFwKCAoIGNlbGxFbGVtICkgPT4gbmV3IENlbGwoIGNlbGxFbGVtICkgKTtcbn07XG5cbnByb3RvLmdldExhc3RDZWxsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmNlbGxzWyB0aGlzLmNlbGxzLmxlbmd0aCAtIDEgXTtcbn07XG5cbnByb3RvLmdldExhc3RTbGlkZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zbGlkZXNbIHRoaXMuc2xpZGVzLmxlbmd0aCAtIDEgXTtcbn07XG5cbi8vIHBvc2l0aW9ucyBhbGwgY2VsbHNcbnByb3RvLnBvc2l0aW9uQ2VsbHMgPSBmdW5jdGlvbigpIHtcbiAgLy8gc2l6ZSBhbGwgY2VsbHNcbiAgdGhpcy5fc2l6ZUNlbGxzKCB0aGlzLmNlbGxzICk7XG4gIC8vIHBvc2l0aW9uIGFsbCBjZWxsc1xuICB0aGlzLl9wb3NpdGlvbkNlbGxzKCAwICk7XG59O1xuXG4vKipcbiAqIHBvc2l0aW9uIGNlcnRhaW4gY2VsbHNcbiAqIEBwYXJhbSB7SW50ZWdlcn0gaW5kZXggLSB3aGljaCBjZWxsIHRvIHN0YXJ0IHdpdGhcbiAqL1xucHJvdG8uX3Bvc2l0aW9uQ2VsbHMgPSBmdW5jdGlvbiggaW5kZXggKSB7XG4gIGluZGV4ID0gaW5kZXggfHwgMDtcbiAgLy8gYWxzbyBtZWFzdXJlIG1heENlbGxIZWlnaHRcbiAgLy8gc3RhcnQgMCBpZiBwb3NpdGlvbmluZyBhbGwgY2VsbHNcbiAgdGhpcy5tYXhDZWxsSGVpZ2h0ID0gaW5kZXggPyB0aGlzLm1heENlbGxIZWlnaHQgfHwgMCA6IDA7XG4gIGxldCBjZWxsWCA9IDA7XG4gIC8vIGdldCBjZWxsWFxuICBpZiAoIGluZGV4ID4gMCApIHtcbiAgICBsZXQgc3RhcnRDZWxsID0gdGhpcy5jZWxsc1sgaW5kZXggLSAxIF07XG4gICAgY2VsbFggPSBzdGFydENlbGwueCArIHN0YXJ0Q2VsbC5zaXplLm91dGVyV2lkdGg7XG4gIH1cblxuICB0aGlzLmNlbGxzLnNsaWNlKCBpbmRleCApLmZvckVhY2goICggY2VsbCApID0+IHtcbiAgICBjZWxsLnggPSBjZWxsWDtcbiAgICB0aGlzLl9yZW5kZXJDZWxsUG9zaXRpb24oIGNlbGwsIGNlbGxYICk7XG4gICAgY2VsbFggKz0gY2VsbC5zaXplLm91dGVyV2lkdGg7XG4gICAgdGhpcy5tYXhDZWxsSGVpZ2h0ID0gTWF0aC5tYXgoIGNlbGwuc2l6ZS5vdXRlckhlaWdodCwgdGhpcy5tYXhDZWxsSGVpZ2h0ICk7XG4gIH0gKTtcbiAgLy8ga2VlcCB0cmFjayBvZiBjZWxsWCBmb3Igd3JhcC1hcm91bmRcbiAgdGhpcy5zbGlkZWFibGVXaWR0aCA9IGNlbGxYO1xuICAvLyBzbGlkZXNcbiAgdGhpcy51cGRhdGVTbGlkZXMoKTtcbiAgLy8gY29udGFpbiBzbGlkZXMgdGFyZ2V0XG4gIHRoaXMuX2NvbnRhaW5TbGlkZXMoKTtcbiAgLy8gdXBkYXRlIHNsaWRlc1dpZHRoXG4gIHRoaXMuc2xpZGVzV2lkdGggPSB0aGlzLmNlbGxzLmxlbmd0aCA/XG4gICAgdGhpcy5nZXRMYXN0U2xpZGUoKS50YXJnZXQgLSB0aGlzLnNsaWRlc1swXS50YXJnZXQgOiAwO1xufTtcblxucHJvdG8uX3JlbmRlckNlbGxQb3NpdGlvbiA9IGZ1bmN0aW9uKCBjZWxsLCB4ICkge1xuICAvLyByZW5kZXIgcG9zaXRpb24gb2YgY2VsbCB3aXRoIGluIHNsaWRlclxuICBsZXQgc2lkZU9mZnNldCA9IHRoaXMub3B0aW9ucy5yaWdodFRvTGVmdCA/IC0xIDogMTtcbiAgbGV0IHJlbmRlclggPSB4ICogc2lkZU9mZnNldDtcbiAgaWYgKCB0aGlzLm9wdGlvbnMucGVyY2VudFBvc2l0aW9uICkgcmVuZGVyWCAqPSB0aGlzLnNpemUuaW5uZXJXaWR0aCAvIGNlbGwuc2l6ZS53aWR0aDtcbiAgbGV0IHBvc2l0aW9uVmFsdWUgPSB0aGlzLmdldFBvc2l0aW9uVmFsdWUoIHJlbmRlclggKTtcbiAgY2VsbC5lbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKCAke3Bvc2l0aW9uVmFsdWV9IClgO1xufTtcblxuLyoqXG4gKiBjZWxsLmdldFNpemUoKSBvbiBtdWx0aXBsZSBjZWxsc1xuICogQHBhcmFtIHtBcnJheX0gY2VsbHMgLSBjZWxscyB0byBzaXplXG4gKi9cbnByb3RvLl9zaXplQ2VsbHMgPSBmdW5jdGlvbiggY2VsbHMgKSB7XG4gIGNlbGxzLmZvckVhY2goICggY2VsbCApID0+IGNlbGwuZ2V0U2l6ZSgpICk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxucHJvdG8udXBkYXRlU2xpZGVzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc2xpZGVzID0gW107XG4gIGlmICggIXRoaXMuY2VsbHMubGVuZ3RoICkgcmV0dXJuO1xuXG4gIGxldCB7IGJlZ2luTWFyZ2luLCBlbmRNYXJnaW4gfSA9IHRoaXM7XG4gIGxldCBzbGlkZSA9IG5ldyBTbGlkZSggYmVnaW5NYXJnaW4sIGVuZE1hcmdpbiwgdGhpcy5jZWxsQWxpZ24gKTtcbiAgdGhpcy5zbGlkZXMucHVzaCggc2xpZGUgKTtcblxuICBsZXQgY2FuQ2VsbEZpdCA9IHRoaXMuX2dldENhbkNlbGxGaXQoKTtcblxuICB0aGlzLmNlbGxzLmZvckVhY2goICggY2VsbCwgaSApID0+IHtcbiAgICAvLyBqdXN0IGFkZCBjZWxsIGlmIGZpcnN0IGNlbGwgaW4gc2xpZGVcbiAgICBpZiAoICFzbGlkZS5jZWxscy5sZW5ndGggKSB7XG4gICAgICBzbGlkZS5hZGRDZWxsKCBjZWxsICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHNsaWRlV2lkdGggPSAoIHNsaWRlLm91dGVyV2lkdGggLSBzbGlkZS5maXJzdE1hcmdpbiApICtcbiAgICAgICggY2VsbC5zaXplLm91dGVyV2lkdGggLSBjZWxsLnNpemVbIGVuZE1hcmdpbiBdICk7XG5cbiAgICBpZiAoIGNhbkNlbGxGaXQoIGksIHNsaWRlV2lkdGggKSApIHtcbiAgICAgIHNsaWRlLmFkZENlbGwoIGNlbGwgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZG9lc24ndCBmaXQsIG5ldyBzbGlkZVxuICAgICAgc2xpZGUudXBkYXRlVGFyZ2V0KCk7XG5cbiAgICAgIHNsaWRlID0gbmV3IFNsaWRlKCBiZWdpbk1hcmdpbiwgZW5kTWFyZ2luLCB0aGlzLmNlbGxBbGlnbiApO1xuICAgICAgdGhpcy5zbGlkZXMucHVzaCggc2xpZGUgKTtcbiAgICAgIHNsaWRlLmFkZENlbGwoIGNlbGwgKTtcbiAgICB9XG4gIH0gKTtcbiAgLy8gbGFzdCBzbGlkZVxuICBzbGlkZS51cGRhdGVUYXJnZXQoKTtcbiAgLy8gdXBkYXRlIC5zZWxlY3RlZFNsaWRlXG4gIHRoaXMudXBkYXRlU2VsZWN0ZWRTbGlkZSgpO1xufTtcblxucHJvdG8uX2dldENhbkNlbGxGaXQgPSBmdW5jdGlvbigpIHtcbiAgbGV0IHsgZ3JvdXBDZWxscyB9ID0gdGhpcy5vcHRpb25zO1xuICBpZiAoICFncm91cENlbGxzICkgcmV0dXJuICgpID0+IGZhbHNlO1xuXG4gIGlmICggdHlwZW9mIGdyb3VwQ2VsbHMgPT0gJ251bWJlcicgKSB7XG4gICAgLy8gZ3JvdXAgYnkgbnVtYmVyLiAzIC0+IFswLDEsMl0sIFszLDQsNV0sIC4uLlxuICAgIGxldCBudW1iZXIgPSBwYXJzZUludCggZ3JvdXBDZWxscywgMTAgKTtcbiAgICByZXR1cm4gKCBpICkgPT4gKCBpICUgbnVtYmVyICkgIT09IDA7XG4gIH1cbiAgLy8gZGVmYXVsdCwgZ3JvdXAgYnkgd2lkdGggb2Ygc2xpZGVcbiAgbGV0IHBlcmNlbnQgPSAxO1xuICAvLyBwYXJzZSAnNzUlXG4gIGxldCBwZXJjZW50TWF0Y2ggPSB0eXBlb2YgZ3JvdXBDZWxscyA9PSAnc3RyaW5nJyAmJiBncm91cENlbGxzLm1hdGNoKCAvXihcXGQrKSUkLyApO1xuICBpZiAoIHBlcmNlbnRNYXRjaCApIHBlcmNlbnQgPSBwYXJzZUludCggcGVyY2VudE1hdGNoWzFdLCAxMCApIC8gMTAwO1xuICBsZXQgZ3JvdXBXaWR0aCA9ICggdGhpcy5zaXplLmlubmVyV2lkdGggKyAxICkgKiBwZXJjZW50O1xuICByZXR1cm4gKCBpLCBzbGlkZVdpZHRoICkgPT4gc2xpZGVXaWR0aCA8PSBncm91cFdpZHRoO1xufTtcblxuLy8gYWxpYXMgX2luaXQgZm9yIGpRdWVyeSBwbHVnaW4gLmZsaWNraXR5KClcbnByb3RvLl9pbml0ID1cbnByb3RvLnJlcG9zaXRpb24gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wb3NpdGlvbkNlbGxzKCk7XG4gIHRoaXMucG9zaXRpb25TbGlkZXJBdFNlbGVjdGVkKCk7XG59O1xuXG5wcm90by5nZXRTaXplID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc2l6ZSA9IGdldFNpemUoIHRoaXMuZWxlbWVudCApO1xuICB0aGlzLnNldENlbGxBbGlnbigpO1xuICB0aGlzLmN1cnNvclBvc2l0aW9uID0gdGhpcy5zaXplLmlubmVyV2lkdGggKiB0aGlzLmNlbGxBbGlnbjtcbn07XG5cbmxldCBjZWxsQWxpZ25TaG9ydGhhbmRzID0ge1xuICBsZWZ0OiAwLFxuICBjZW50ZXI6IDAuNSxcbiAgcmlnaHQ6IDEsXG59O1xuXG5wcm90by5zZXRDZWxsQWxpZ24gPSBmdW5jdGlvbigpIHtcbiAgbGV0IHsgY2VsbEFsaWduLCByaWdodFRvTGVmdCB9ID0gdGhpcy5vcHRpb25zO1xuICBsZXQgc2hvcnRoYW5kID0gY2VsbEFsaWduU2hvcnRoYW5kc1sgY2VsbEFsaWduIF07XG4gIHRoaXMuY2VsbEFsaWduID0gc2hvcnRoYW5kICE9PSB1bmRlZmluZWQgPyBzaG9ydGhhbmQgOiBjZWxsQWxpZ247XG4gIGlmICggcmlnaHRUb0xlZnQgKSB0aGlzLmNlbGxBbGlnbiA9IDEgLSB0aGlzLmNlbGxBbGlnbjtcbn07XG5cbnByb3RvLnNldEdhbGxlcnlTaXplID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMub3B0aW9ucy5zZXRHYWxsZXJ5U2l6ZSApIHJldHVybjtcblxuICBsZXQgaGVpZ2h0ID0gdGhpcy5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0ICYmIHRoaXMuc2VsZWN0ZWRTbGlkZSA/XG4gICAgdGhpcy5zZWxlY3RlZFNsaWRlLmhlaWdodCA6IHRoaXMubWF4Q2VsbEhlaWdodDtcbiAgdGhpcy52aWV3cG9ydC5zdHlsZS5oZWlnaHQgPSBgJHtoZWlnaHR9cHhgO1xufTtcblxucHJvdG8uX3VwZGF0ZVdyYXBTaGlmdENlbGxzID0gZnVuY3Rpb24oKSB7XG4gIC8vIHVwZGF0ZSBpc1dyYXBwaW5nXG4gIHRoaXMuaXNXcmFwcGluZyA9IHRoaXMuZ2V0SXNXcmFwcGluZygpO1xuICAvLyBvbmx5IGZvciB3cmFwLWFyb3VuZFxuICBpZiAoICF0aGlzLmlzV3JhcHBpbmcgKSByZXR1cm47XG5cbiAgLy8gdW5zaGlmdCBwcmV2aW91cyBjZWxsc1xuICB0aGlzLl91bnNoaWZ0Q2VsbHMoIHRoaXMuYmVmb3JlU2hpZnRDZWxscyApO1xuICB0aGlzLl91bnNoaWZ0Q2VsbHMoIHRoaXMuYWZ0ZXJTaGlmdENlbGxzICk7XG4gIC8vIGdldCBiZWZvcmUgY2VsbHNcbiAgLy8gaW5pdGlhbCBnYXBcbiAgbGV0IGJlZm9yZUdhcFggPSB0aGlzLmN1cnNvclBvc2l0aW9uO1xuICBsZXQgbGFzdEluZGV4ID0gdGhpcy5jZWxscy5sZW5ndGggLSAxO1xuICB0aGlzLmJlZm9yZVNoaWZ0Q2VsbHMgPSB0aGlzLl9nZXRHYXBDZWxscyggYmVmb3JlR2FwWCwgbGFzdEluZGV4LCAtMSApO1xuICAvLyBnZXQgYWZ0ZXIgY2VsbHNcbiAgLy8gZW5kaW5nIGdhcCBiZXR3ZWVuIGxhc3QgY2VsbCBhbmQgZW5kIG9mIGdhbGxlcnkgdmlld3BvcnRcbiAgbGV0IGFmdGVyR2FwWCA9IHRoaXMuc2l6ZS5pbm5lcldpZHRoIC0gdGhpcy5jdXJzb3JQb3NpdGlvbjtcbiAgLy8gc3RhcnQgY2xvbmluZyBhdCBmaXJzdCBjZWxsLCB3b3JraW5nIGZvcndhcmRzXG4gIHRoaXMuYWZ0ZXJTaGlmdENlbGxzID0gdGhpcy5fZ2V0R2FwQ2VsbHMoIGFmdGVyR2FwWCwgMCwgMSApO1xufTtcblxucHJvdG8uZ2V0SXNXcmFwcGluZyA9IGZ1bmN0aW9uKCkge1xuICBsZXQgeyB3cmFwQXJvdW5kIH0gPSB0aGlzLm9wdGlvbnM7XG4gIGlmICggIXdyYXBBcm91bmQgfHwgdGhpcy5zbGlkZXMubGVuZ3RoIDwgMiApIHJldHVybiBmYWxzZTtcblxuICBpZiAoIHdyYXBBcm91bmQgIT09ICdmaWxsJyApIHJldHVybiB0cnVlO1xuICAvLyBjaGVjayB0aGF0IHNsaWRlcyBjYW4gZml0XG5cbiAgbGV0IGdhcFdpZHRoID0gdGhpcy5zbGlkZWFibGVXaWR0aCAtIHRoaXMuc2l6ZS5pbm5lcldpZHRoO1xuICBpZiAoIGdhcFdpZHRoID4gdGhpcy5zaXplLmlubmVyV2lkdGggKSByZXR1cm4gdHJ1ZTsgLy8gZ2FwICogMnggYmlnLCBhbGwgZ29vZFxuICAvLyBjaGVjayB0aGF0IGNvbnRlbnQgd2lkdGggLSBzaGlmdGluZyBjZWxsIGlzIGJpZ2dlciB0aGFuIHZpZXdwb3J0IHdpZHRoXG4gIGZvciAoIGxldCBjZWxsIG9mIHRoaXMuY2VsbHMgKSB7XG4gICAgaWYgKCBjZWxsLnNpemUub3V0ZXJXaWR0aCA+IGdhcFdpZHRoICkgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufTtcblxucHJvdG8uX2dldEdhcENlbGxzID0gZnVuY3Rpb24oIGdhcFgsIGNlbGxJbmRleCwgaW5jcmVtZW50ICkge1xuICAvLyBrZWVwIGFkZGluZyBjZWxscyB1bnRpbCB0aGUgY292ZXIgdGhlIGluaXRpYWwgZ2FwXG4gIGxldCBjZWxscyA9IFtdO1xuICB3aGlsZSAoIGdhcFggPiAwICkge1xuICAgIGxldCBjZWxsID0gdGhpcy5jZWxsc1sgY2VsbEluZGV4IF07XG4gICAgaWYgKCAhY2VsbCApIGJyZWFrO1xuXG4gICAgY2VsbHMucHVzaCggY2VsbCApO1xuICAgIGNlbGxJbmRleCArPSBpbmNyZW1lbnQ7XG4gICAgZ2FwWCAtPSBjZWxsLnNpemUub3V0ZXJXaWR0aDtcbiAgfVxuICByZXR1cm4gY2VsbHM7XG59O1xuXG4vLyAtLS0tLSBjb250YWluICYgd3JhcCAtLS0tLSAvL1xuXG4vLyBjb250YWluIGNlbGwgdGFyZ2V0cyBzbyBubyBleGNlc3Mgc2xpZGluZ1xucHJvdG8uX2NvbnRhaW5TbGlkZXMgPSBmdW5jdGlvbigpIHtcbiAgbGV0IGlzQ29udGFpbmluZyA9IHRoaXMub3B0aW9ucy5jb250YWluICYmICF0aGlzLmlzV3JhcHBpbmcgJiZcbiAgICAgIHRoaXMuY2VsbHMubGVuZ3RoO1xuICBpZiAoICFpc0NvbnRhaW5pbmcgKSByZXR1cm47XG5cbiAgbGV0IGNvbnRlbnRXaWR0aCA9IHRoaXMuc2xpZGVhYmxlV2lkdGggLSB0aGlzLmdldExhc3RDZWxsKCkuc2l6ZVsgdGhpcy5lbmRNYXJnaW4gXTtcbiAgLy8gY29udGVudCBpcyBsZXNzIHRoYW4gZ2FsbGVyeSBzaXplXG4gIGxldCBpc0NvbnRlbnRTbWFsbGVyID0gY29udGVudFdpZHRoIDwgdGhpcy5zaXplLmlubmVyV2lkdGg7XG4gIGlmICggaXNDb250ZW50U21hbGxlciApIHtcbiAgICAvLyBhbGwgY2VsbHMgZml0IGluc2lkZSBnYWxsZXJ5XG4gICAgdGhpcy5zbGlkZXMuZm9yRWFjaCggKCBzbGlkZSApID0+IHtcbiAgICAgIHNsaWRlLnRhcmdldCA9IGNvbnRlbnRXaWR0aCAqIHRoaXMuY2VsbEFsaWduO1xuICAgIH0gKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBjb250YWluIHRvIGJvdW5kc1xuICAgIGxldCBiZWdpbkJvdW5kID0gdGhpcy5jdXJzb3JQb3NpdGlvbiArIHRoaXMuY2VsbHNbMF0uc2l6ZVsgdGhpcy5iZWdpbk1hcmdpbiBdO1xuICAgIGxldCBlbmRCb3VuZCA9IGNvbnRlbnRXaWR0aCAtIHRoaXMuc2l6ZS5pbm5lcldpZHRoICogKCAxIC0gdGhpcy5jZWxsQWxpZ24gKTtcbiAgICB0aGlzLnNsaWRlcy5mb3JFYWNoKCAoIHNsaWRlICkgPT4ge1xuICAgICAgc2xpZGUudGFyZ2V0ID0gTWF0aC5tYXgoIHNsaWRlLnRhcmdldCwgYmVnaW5Cb3VuZCApO1xuICAgICAgc2xpZGUudGFyZ2V0ID0gTWF0aC5taW4oIHNsaWRlLnRhcmdldCwgZW5kQm91bmQgKTtcbiAgICB9ICk7XG4gIH1cbn07XG5cbi8vIC0tLS0tIGV2ZW50cyAtLS0tLSAvL1xuXG4vKipcbiAqIGVtaXRzIGV2ZW50cyB2aWEgZXZlbnRFbWl0dGVyIGFuZCBqUXVlcnkgZXZlbnRzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZSAtIG5hbWUgb2YgZXZlbnRcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gb3JpZ2luYWwgZXZlbnRcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgLSBleHRyYSBhcmd1bWVudHNcbiAqL1xucHJvdG8uZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uKCB0eXBlLCBldmVudCwgYXJncyApIHtcbiAgbGV0IGVtaXRBcmdzID0gZXZlbnQgPyBbIGV2ZW50IF0uY29uY2F0KCBhcmdzICkgOiBhcmdzO1xuICB0aGlzLmVtaXRFdmVudCggdHlwZSwgZW1pdEFyZ3MgKTtcblxuICBpZiAoIGpRdWVyeSAmJiB0aGlzLiRlbGVtZW50ICkge1xuICAgIC8vIGRlZmF1bHQgdHJpZ2dlciB3aXRoIHR5cGUgaWYgbm8gZXZlbnRcbiAgICB0eXBlICs9IHRoaXMub3B0aW9ucy5uYW1lc3BhY2VKUXVlcnlFdmVudHMgPyAnLmZsaWNraXR5JyA6ICcnO1xuICAgIGxldCAkZXZlbnQgPSB0eXBlO1xuICAgIGlmICggZXZlbnQgKSB7XG4gICAgICAvLyBjcmVhdGUgalF1ZXJ5IGV2ZW50XG4gICAgICBsZXQgalFFdmVudCA9IG5ldyBqUXVlcnkuRXZlbnQoIGV2ZW50ICk7XG4gICAgICBqUUV2ZW50LnR5cGUgPSB0eXBlO1xuICAgICAgJGV2ZW50ID0galFFdmVudDtcbiAgICB9XG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCAkZXZlbnQsIGFyZ3MgKTtcbiAgfVxufTtcblxuY29uc3QgdW5pZHJhZ2dlckV2ZW50cyA9IFtcbiAgJ2RyYWdTdGFydCcsXG4gICdkcmFnTW92ZScsXG4gICdkcmFnRW5kJyxcbiAgJ3BvaW50ZXJEb3duJyxcbiAgJ3BvaW50ZXJNb3ZlJyxcbiAgJ3BvaW50ZXJFbmQnLFxuICAnc3RhdGljQ2xpY2snLFxuXTtcblxubGV0IF9lbWl0RXZlbnQgPSBwcm90by5lbWl0RXZlbnQ7XG5wcm90by5lbWl0RXZlbnQgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBhcmdzICkge1xuICBpZiAoIGV2ZW50TmFtZSA9PT0gJ3N0YXRpY0NsaWNrJyApIHtcbiAgICAvLyBhZGQgY2VsbEVsZW0gYW5kIGNlbGxJbmRleCBhcmdzIHRvIHN0YXRpY0NsaWNrXG4gICAgbGV0IGNsaWNrZWRDZWxsID0gdGhpcy5nZXRQYXJlbnRDZWxsKCBhcmdzWzBdLnRhcmdldCApO1xuICAgIGxldCBjZWxsRWxlbSA9IGNsaWNrZWRDZWxsICYmIGNsaWNrZWRDZWxsLmVsZW1lbnQ7XG4gICAgbGV0IGNlbGxJbmRleCA9IGNsaWNrZWRDZWxsICYmIHRoaXMuY2VsbHMuaW5kZXhPZiggY2xpY2tlZENlbGwgKTtcbiAgICBhcmdzID0gYXJncy5jb25jYXQoIGNlbGxFbGVtLCBjZWxsSW5kZXggKTtcbiAgfVxuICAvLyBkbyByZWd1bGFyIHRoaW5nXG4gIF9lbWl0RXZlbnQuY2FsbCggdGhpcywgZXZlbnROYW1lLCBhcmdzICk7XG4gIC8vIGR1Y2stcHVuY2ggaW4galF1ZXJ5IGV2ZW50cyBmb3IgVW5pZHJhZ2dlciBldmVudHNcbiAgbGV0IGlzVW5pZHJhZ2dlckV2ZW50ID0gdW5pZHJhZ2dlckV2ZW50cy5pbmNsdWRlcyggZXZlbnROYW1lICk7XG4gIGlmICggIWlzVW5pZHJhZ2dlckV2ZW50IHx8ICFqUXVlcnkgfHwgIXRoaXMuJGVsZW1lbnQgKSByZXR1cm47XG5cbiAgZXZlbnROYW1lICs9IHRoaXMub3B0aW9ucy5uYW1lc3BhY2VKUXVlcnlFdmVudHMgPyAnLmZsaWNraXR5JyA6ICcnO1xuICBsZXQgZXZlbnQgPSBhcmdzLnNoaWZ0KCAwICk7XG4gIGxldCBqUUV2ZW50ID0gbmV3IGpRdWVyeS5FdmVudCggZXZlbnQgKTtcbiAgalFFdmVudC50eXBlID0gZXZlbnROYW1lO1xuICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoIGpRRXZlbnQsIGFyZ3MgKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHNlbGVjdCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vKipcbiAqIEBwYXJhbSB7SW50ZWdlcn0gaW5kZXggLSBpbmRleCBvZiB0aGUgc2xpZGVcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNXcmFwIC0gd2lsbCB3cmFwLWFyb3VuZCB0byBsYXN0L2ZpcnN0IGlmIGF0IHRoZSBlbmRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNJbnN0YW50IC0gd2lsbCBpbW1lZGlhdGVseSBzZXQgcG9zaXRpb24gYXQgc2VsZWN0ZWQgY2VsbFxuICovXG5wcm90by5zZWxlY3QgPSBmdW5jdGlvbiggaW5kZXgsIGlzV3JhcCwgaXNJbnN0YW50ICkge1xuICBpZiAoICF0aGlzLmlzQWN0aXZlICkgcmV0dXJuO1xuXG4gIGluZGV4ID0gcGFyc2VJbnQoIGluZGV4LCAxMCApO1xuICB0aGlzLl93cmFwU2VsZWN0KCBpbmRleCApO1xuXG4gIGlmICggdGhpcy5pc1dyYXBwaW5nIHx8IGlzV3JhcCApIHtcbiAgICBpbmRleCA9IHV0aWxzLm1vZHVsbyggaW5kZXgsIHRoaXMuc2xpZGVzLmxlbmd0aCApO1xuICB9XG4gIC8vIGJhaWwgaWYgaW52YWxpZCBpbmRleFxuICBpZiAoICF0aGlzLnNsaWRlc1sgaW5kZXggXSApIHJldHVybjtcblxuICBsZXQgcHJldkluZGV4ID0gdGhpcy5zZWxlY3RlZEluZGV4O1xuICB0aGlzLnNlbGVjdGVkSW5kZXggPSBpbmRleDtcbiAgdGhpcy51cGRhdGVTZWxlY3RlZFNsaWRlKCk7XG4gIGlmICggaXNJbnN0YW50ICkge1xuICAgIHRoaXMucG9zaXRpb25TbGlkZXJBdFNlbGVjdGVkKCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zdGFydEFuaW1hdGlvbigpO1xuICB9XG4gIGlmICggdGhpcy5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0ICkge1xuICAgIHRoaXMuc2V0R2FsbGVyeVNpemUoKTtcbiAgfVxuICAvLyBldmVudHNcbiAgdGhpcy5kaXNwYXRjaEV2ZW50KCAnc2VsZWN0JywgbnVsbCwgWyBpbmRleCBdICk7XG4gIC8vIGNoYW5nZSBldmVudCBpZiBuZXcgaW5kZXhcbiAgaWYgKCBpbmRleCAhPT0gcHJldkluZGV4ICkge1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudCggJ2NoYW5nZScsIG51bGwsIFsgaW5kZXggXSApO1xuICB9XG59O1xuXG4vLyB3cmFwcyBwb3NpdGlvbiBmb3Igd3JhcEFyb3VuZCwgdG8gbW92ZSB0byBjbG9zZXN0IHNsaWRlLiAjMTEzXG5wcm90by5fd3JhcFNlbGVjdCA9IGZ1bmN0aW9uKCBpbmRleCApIHtcbiAgaWYgKCAhdGhpcy5pc1dyYXBwaW5nICkgcmV0dXJuO1xuXG4gIGNvbnN0IHsgc2VsZWN0ZWRJbmRleCwgc2xpZGVhYmxlV2lkdGgsIHNsaWRlczogeyBsZW5ndGggfSB9ID0gdGhpcztcbiAgLy8gc2hpZnQgaW5kZXggZm9yIHdyYXAsIGRvIG5vdCB3cmFwIGRyYWdTZWxlY3RcbiAgaWYgKCAhdGhpcy5pc0RyYWdTZWxlY3QgKSB7XG4gICAgbGV0IHdyYXBJbmRleCA9IHV0aWxzLm1vZHVsbyggaW5kZXgsIGxlbmd0aCApO1xuICAgIC8vIGdvIHRvIHNob3J0ZXN0XG4gICAgbGV0IGRlbHRhID0gTWF0aC5hYnMoIHdyYXBJbmRleCAtIHNlbGVjdGVkSW5kZXggKTtcbiAgICBsZXQgYmFja1dyYXBEZWx0YSA9IE1hdGguYWJzKCAoIHdyYXBJbmRleCArIGxlbmd0aCApIC0gc2VsZWN0ZWRJbmRleCApO1xuICAgIGxldCBmb3Jld2FyZFdyYXBEZWx0YSA9IE1hdGguYWJzKCAoIHdyYXBJbmRleCAtIGxlbmd0aCApIC0gc2VsZWN0ZWRJbmRleCApO1xuICAgIGlmICggYmFja1dyYXBEZWx0YSA8IGRlbHRhICkge1xuICAgICAgaW5kZXggKz0gbGVuZ3RoO1xuICAgIH0gZWxzZSBpZiAoIGZvcmV3YXJkV3JhcERlbHRhIDwgZGVsdGEgKSB7XG4gICAgICBpbmRleCAtPSBsZW5ndGg7XG4gICAgfVxuICB9XG5cbiAgLy8gd3JhcCBwb3NpdGlvbiBzbyBzbGlkZXIgaXMgd2l0aGluIG5vcm1hbCBhcmVhXG4gIGlmICggaW5kZXggPCAwICkge1xuICAgIHRoaXMueCAtPSBzbGlkZWFibGVXaWR0aDtcbiAgfSBlbHNlIGlmICggaW5kZXggPj0gbGVuZ3RoICkge1xuICAgIHRoaXMueCArPSBzbGlkZWFibGVXaWR0aDtcbiAgfVxufTtcblxucHJvdG8ucHJldmlvdXMgPSBmdW5jdGlvbiggaXNXcmFwLCBpc0luc3RhbnQgKSB7XG4gIHRoaXMuc2VsZWN0KCB0aGlzLnNlbGVjdGVkSW5kZXggLSAxLCBpc1dyYXAsIGlzSW5zdGFudCApO1xufTtcblxucHJvdG8ubmV4dCA9IGZ1bmN0aW9uKCBpc1dyYXAsIGlzSW5zdGFudCApIHtcbiAgdGhpcy5zZWxlY3QoIHRoaXMuc2VsZWN0ZWRJbmRleCArIDEsIGlzV3JhcCwgaXNJbnN0YW50ICk7XG59O1xuXG5wcm90by51cGRhdGVTZWxlY3RlZFNsaWRlID0gZnVuY3Rpb24oKSB7XG4gIGxldCBzbGlkZSA9IHRoaXMuc2xpZGVzWyB0aGlzLnNlbGVjdGVkSW5kZXggXTtcbiAgLy8gc2VsZWN0ZWRJbmRleCBjb3VsZCBiZSBvdXRzaWRlIG9mIHNsaWRlcywgaWYgdHJpZ2dlcmVkIGJlZm9yZSByZXNpemUoKVxuICBpZiAoICFzbGlkZSApIHJldHVybjtcblxuICAvLyB1bnNlbGVjdCBwcmV2aW91cyBzZWxlY3RlZCBzbGlkZVxuICB0aGlzLnVuc2VsZWN0U2VsZWN0ZWRTbGlkZSgpO1xuICAvLyB1cGRhdGUgbmV3IHNlbGVjdGVkIHNsaWRlXG4gIHRoaXMuc2VsZWN0ZWRTbGlkZSA9IHNsaWRlO1xuICBzbGlkZS5zZWxlY3QoKTtcbiAgdGhpcy5zZWxlY3RlZENlbGxzID0gc2xpZGUuY2VsbHM7XG4gIHRoaXMuc2VsZWN0ZWRFbGVtZW50cyA9IHNsaWRlLmdldENlbGxFbGVtZW50cygpO1xuICAvLyBIQUNLOiBzZWxlY3RlZENlbGwgJiBzZWxlY3RlZEVsZW1lbnQgaXMgZmlyc3QgY2VsbCBpbiBzbGlkZSwgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgdGhpcy5zZWxlY3RlZENlbGwgPSBzbGlkZS5jZWxsc1swXTtcbiAgdGhpcy5zZWxlY3RlZEVsZW1lbnQgPSB0aGlzLnNlbGVjdGVkRWxlbWVudHNbMF07XG59O1xuXG5wcm90by51bnNlbGVjdFNlbGVjdGVkU2xpZGUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCB0aGlzLnNlbGVjdGVkU2xpZGUgKSB0aGlzLnNlbGVjdGVkU2xpZGUudW5zZWxlY3QoKTtcbn07XG5cbnByb3RvLnNlbGVjdEluaXRpYWxJbmRleCA9IGZ1bmN0aW9uKCkge1xuICBsZXQgaW5pdGlhbEluZGV4ID0gdGhpcy5vcHRpb25zLmluaXRpYWxJbmRleDtcbiAgLy8gYWxyZWFkeSBhY3RpdmF0ZWQsIHNlbGVjdCBwcmV2aW91cyBzZWxlY3RlZEluZGV4XG4gIGlmICggdGhpcy5pc0luaXRBY3RpdmF0ZWQgKSB7XG4gICAgdGhpcy5zZWxlY3QoIHRoaXMuc2VsZWN0ZWRJbmRleCwgZmFsc2UsIHRydWUgKTtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gc2VsZWN0IHdpdGggc2VsZWN0b3Igc3RyaW5nXG4gIGlmICggaW5pdGlhbEluZGV4ICYmIHR5cGVvZiBpbml0aWFsSW5kZXggPT0gJ3N0cmluZycgKSB7XG4gICAgbGV0IGNlbGwgPSB0aGlzLnF1ZXJ5Q2VsbCggaW5pdGlhbEluZGV4ICk7XG4gICAgaWYgKCBjZWxsICkge1xuICAgICAgdGhpcy5zZWxlY3RDZWxsKCBpbml0aWFsSW5kZXgsIGZhbHNlLCB0cnVlICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgbGV0IGluZGV4ID0gMDtcbiAgLy8gc2VsZWN0IHdpdGggbnVtYmVyXG4gIGlmICggaW5pdGlhbEluZGV4ICYmIHRoaXMuc2xpZGVzWyBpbml0aWFsSW5kZXggXSApIHtcbiAgICBpbmRleCA9IGluaXRpYWxJbmRleDtcbiAgfVxuICAvLyBzZWxlY3QgaW5zdGFudGx5XG4gIHRoaXMuc2VsZWN0KCBpbmRleCwgZmFsc2UsIHRydWUgKTtcbn07XG5cbi8qKlxuICogc2VsZWN0IHNsaWRlIGZyb20gbnVtYmVyIG9yIGNlbGwgZWxlbWVudFxuICogQHBhcmFtIHtbRWxlbWVudCwgTnVtYmVyXX0gdmFsdWUgLSB6ZXJvLWJhc2VkIGluZGV4IG9yIGVsZW1lbnQgdG8gc2VsZWN0XG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzV3JhcCAtIGVuYWJsZXMgd3JhcHBpbmcgYXJvdW5kIGZvciBleHRyYSBpbmRleFxuICogQHBhcmFtIHtCb29sZWFufSBpc0luc3RhbnQgLSBkaXNhYmxlcyBzbGlkZSBhbmltYXRpb25cbiAqL1xucHJvdG8uc2VsZWN0Q2VsbCA9IGZ1bmN0aW9uKCB2YWx1ZSwgaXNXcmFwLCBpc0luc3RhbnQgKSB7XG4gIC8vIGdldCBjZWxsXG4gIGxldCBjZWxsID0gdGhpcy5xdWVyeUNlbGwoIHZhbHVlICk7XG4gIGlmICggIWNlbGwgKSByZXR1cm47XG5cbiAgbGV0IGluZGV4ID0gdGhpcy5nZXRDZWxsU2xpZGVJbmRleCggY2VsbCApO1xuICB0aGlzLnNlbGVjdCggaW5kZXgsIGlzV3JhcCwgaXNJbnN0YW50ICk7XG59O1xuXG5wcm90by5nZXRDZWxsU2xpZGVJbmRleCA9IGZ1bmN0aW9uKCBjZWxsICkge1xuICAvLyBnZXQgaW5kZXggb2Ygc2xpZGUgdGhhdCBoYXMgY2VsbFxuICBsZXQgY2VsbFNsaWRlID0gdGhpcy5zbGlkZXMuZmluZCggKCBzbGlkZSApID0+IHNsaWRlLmNlbGxzLmluY2x1ZGVzKCBjZWxsICkgKTtcbiAgcmV0dXJuIHRoaXMuc2xpZGVzLmluZGV4T2YoIGNlbGxTbGlkZSApO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZ2V0IGNlbGxzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8qKlxuICogZ2V0IEZsaWNraXR5LkNlbGwsIGdpdmVuIGFuIEVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbSAtIG1hdGNoaW5nIGNlbGwgZWxlbWVudFxuICogQHJldHVybnMge0ZsaWNraXR5LkNlbGx9IGNlbGwgLSBtYXRjaGluZyBjZWxsXG4gKi9cbnByb3RvLmdldENlbGwgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgLy8gbG9vcCB0aHJvdWdoIGNlbGxzIHRvIGdldCB0aGUgb25lIHRoYXQgbWF0Y2hlc1xuICBmb3IgKCBsZXQgY2VsbCBvZiB0aGlzLmNlbGxzICkge1xuICAgIGlmICggY2VsbC5lbGVtZW50ID09PSBlbGVtICkgcmV0dXJuIGNlbGw7XG4gIH1cbn07XG5cbi8qKlxuICogZ2V0IGNvbGxlY3Rpb24gb2YgRmxpY2tpdHkuQ2VsbHMsIGdpdmVuIEVsZW1lbnRzXG4gKiBAcGFyYW0ge1tFbGVtZW50LCBBcnJheSwgTm9kZUxpc3RdfSBlbGVtcyAtIG11bHRpcGxlIGVsZW1lbnRzXG4gKiBAcmV0dXJucyB7QXJyYXl9IGNlbGxzIC0gRmxpY2tpdHkuQ2VsbHNcbiAqL1xucHJvdG8uZ2V0Q2VsbHMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIGVsZW1zID0gdXRpbHMubWFrZUFycmF5KCBlbGVtcyApO1xuICByZXR1cm4gZWxlbXMubWFwKCAoIGVsZW0gKSA9PiB0aGlzLmdldENlbGwoIGVsZW0gKSApLmZpbHRlciggQm9vbGVhbiApO1xufTtcblxuLyoqXG4gKiBnZXQgY2VsbCBlbGVtZW50c1xuICogQHJldHVybnMge0FycmF5fSBjZWxsRWxlbXNcbiAqL1xucHJvdG8uZ2V0Q2VsbEVsZW1lbnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmNlbGxzLm1hcCggKCBjZWxsICkgPT4gY2VsbC5lbGVtZW50ICk7XG59O1xuXG4vKipcbiAqIGdldCBwYXJlbnQgY2VsbCBmcm9tIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbSAtIGNoaWxkIGVsZW1lbnRcbiAqIEByZXR1cm5zIHtGbGlja2l0LkNlbGx9IGNlbGwgLSBwYXJlbnQgY2VsbFxuICovXG5wcm90by5nZXRQYXJlbnRDZWxsID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIC8vIGZpcnN0IGNoZWNrIGlmIGVsZW0gaXMgY2VsbFxuICBsZXQgY2VsbCA9IHRoaXMuZ2V0Q2VsbCggZWxlbSApO1xuICBpZiAoIGNlbGwgKSByZXR1cm4gY2VsbDtcblxuICAvLyB0cnkgdG8gZ2V0IHBhcmVudCBjZWxsIGVsZW1cbiAgbGV0IGNsb3Nlc3QgPSBlbGVtLmNsb3Nlc3QoJy5mbGlja2l0eS1zbGlkZXIgPiAqJyk7XG4gIHJldHVybiB0aGlzLmdldENlbGwoIGNsb3Nlc3QgKTtcbn07XG5cbi8qKlxuICogZ2V0IGNlbGxzIGFkamFjZW50IHRvIGEgc2xpZGVcbiAqIEBwYXJhbSB7SW50ZWdlcn0gYWRqQ291bnQgLSBudW1iZXIgb2YgYWRqYWNlbnQgc2xpZGVzXG4gKiBAcGFyYW0ge0ludGVnZXJ9IGluZGV4IC0gaW5kZXggb2Ygc2xpZGUgdG8gc3RhcnRcbiAqIEByZXR1cm5zIHtBcnJheX0gY2VsbHMgLSBhcnJheSBvZiBGbGlja2l0eS5DZWxsc1xuICovXG5wcm90by5nZXRBZGphY2VudENlbGxFbGVtZW50cyA9IGZ1bmN0aW9uKCBhZGpDb3VudCwgaW5kZXggKSB7XG4gIGlmICggIWFkakNvdW50ICkgcmV0dXJuIHRoaXMuc2VsZWN0ZWRTbGlkZS5nZXRDZWxsRWxlbWVudHMoKTtcblxuICBpbmRleCA9IGluZGV4ID09PSB1bmRlZmluZWQgPyB0aGlzLnNlbGVjdGVkSW5kZXggOiBpbmRleDtcblxuICBsZXQgbGVuID0gdGhpcy5zbGlkZXMubGVuZ3RoO1xuICBpZiAoIDEgKyAoIGFkakNvdW50ICogMiApID49IGxlbiApIHtcbiAgICByZXR1cm4gdGhpcy5nZXRDZWxsRWxlbWVudHMoKTsgLy8gZ2V0IGFsbFxuICB9XG5cbiAgbGV0IGNlbGxFbGVtcyA9IFtdO1xuICBmb3IgKCBsZXQgaSA9IGluZGV4IC0gYWRqQ291bnQ7IGkgPD0gaW5kZXggKyBhZGpDb3VudDsgaSsrICkge1xuICAgIGxldCBzbGlkZUluZGV4ID0gdGhpcy5pc1dyYXBwaW5nID8gdXRpbHMubW9kdWxvKCBpLCBsZW4gKSA6IGk7XG4gICAgbGV0IHNsaWRlID0gdGhpcy5zbGlkZXNbIHNsaWRlSW5kZXggXTtcbiAgICBpZiAoIHNsaWRlICkge1xuICAgICAgY2VsbEVsZW1zID0gY2VsbEVsZW1zLmNvbmNhdCggc2xpZGUuZ2V0Q2VsbEVsZW1lbnRzKCkgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNlbGxFbGVtcztcbn07XG5cbi8qKlxuICogc2VsZWN0IHNsaWRlIGZyb20gbnVtYmVyIG9yIGNlbGwgZWxlbWVudFxuICogQHBhcmFtIHtbRWxlbWVudCwgU3RyaW5nLCBOdW1iZXJdfSBzZWxlY3RvciAtIGVsZW1lbnQsIHNlbGVjdG9yIHN0cmluZywgb3IgaW5kZXhcbiAqIEByZXR1cm5zIHtGbGlja2l0eS5DZWxsfSAtIG1hdGNoaW5nIGNlbGxcbiAqL1xucHJvdG8ucXVlcnlDZWxsID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuICBpZiAoIHR5cGVvZiBzZWxlY3RvciA9PSAnbnVtYmVyJyApIHtcbiAgICAvLyB1c2UgbnVtYmVyIGFzIGluZGV4XG4gICAgcmV0dXJuIHRoaXMuY2VsbHNbIHNlbGVjdG9yIF07XG4gIH1cbiAgLy8gZG8gbm90IHNlbGVjdCBpbnZhbGlkIHNlbGVjdG9ycyBmcm9tIGhhc2g6ICMxMjMsICMvLiAjNzkxXG4gIGxldCBpc1NlbGVjdG9yU3RyaW5nID0gdHlwZW9mIHNlbGVjdG9yID09ICdzdHJpbmcnICYmICFzZWxlY3Rvci5tYXRjaCggL15bIy5dP1tcXGQvXS8gKTtcbiAgaWYgKCBpc1NlbGVjdG9yU3RyaW5nICkge1xuICAgIC8vIHVzZSBzdHJpbmcgYXMgc2VsZWN0b3IsIGdldCBlbGVtZW50XG4gICAgc2VsZWN0b3IgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3Rvciggc2VsZWN0b3IgKTtcbiAgfVxuICAvLyBnZXQgY2VsbCBmcm9tIGVsZW1lbnRcbiAgcmV0dXJuIHRoaXMuZ2V0Q2VsbCggc2VsZWN0b3IgKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGV2ZW50cyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5wcm90by51aUNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVtaXRFdmVudCgndWlDaGFuZ2UnKTtcbn07XG5cbi8vIC0tLS0tIHJlc2l6ZSAtLS0tLSAvL1xuXG5wcm90by5vbnJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLndhdGNoQ1NTKCk7XG4gIHRoaXMucmVzaXplKCk7XG59O1xuXG51dGlscy5kZWJvdW5jZU1ldGhvZCggRmxpY2tpdHksICdvbnJlc2l6ZScsIDE1MCApO1xuXG5wcm90by5yZXNpemUgPSBmdW5jdGlvbigpIHtcbiAgLy8gIzExNzcgZGlzYWJsZSByZXNpemUgYmVoYXZpb3Igd2hlbiBhbmltYXRpbmcgb3IgZHJhZ2dpbmcgZm9yIGlPUyAxNVxuICBpZiAoICF0aGlzLmlzQWN0aXZlIHx8IHRoaXMuaXNBbmltYXRpbmcgfHwgdGhpcy5pc0RyYWdnaW5nICkgcmV0dXJuO1xuICB0aGlzLmdldFNpemUoKTtcbiAgLy8gd3JhcCB2YWx1ZXNcbiAgaWYgKCB0aGlzLmlzV3JhcHBpbmcgKSB7XG4gICAgdGhpcy54ID0gdXRpbHMubW9kdWxvKCB0aGlzLngsIHRoaXMuc2xpZGVhYmxlV2lkdGggKTtcbiAgfVxuICB0aGlzLnBvc2l0aW9uQ2VsbHMoKTtcbiAgdGhpcy5fdXBkYXRlV3JhcFNoaWZ0Q2VsbHMoKTtcbiAgdGhpcy5zZXRHYWxsZXJ5U2l6ZSgpO1xuICB0aGlzLmVtaXRFdmVudCgncmVzaXplJyk7XG4gIC8vIHVwZGF0ZSBzZWxlY3RlZCBpbmRleCBmb3IgZ3JvdXAgc2xpZGVzLCBpbnN0YW50XG4gIC8vIFRPRE86IHBvc2l0aW9uIGNhbiBiZSBsb3N0IGJldHdlZW4gZ3JvdXBzIG9mIHZhcmlvdXMgbnVtYmVyc1xuICBsZXQgc2VsZWN0ZWRFbGVtZW50ID0gdGhpcy5zZWxlY3RlZEVsZW1lbnRzICYmIHRoaXMuc2VsZWN0ZWRFbGVtZW50c1swXTtcbiAgdGhpcy5zZWxlY3RDZWxsKCBzZWxlY3RlZEVsZW1lbnQsIGZhbHNlLCB0cnVlICk7XG59O1xuXG4vLyB3YXRjaGVzIHRoZSA6YWZ0ZXIgcHJvcGVydHksIGFjdGl2YXRlcy9kZWFjdGl2YXRlc1xucHJvdG8ud2F0Y2hDU1MgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5vcHRpb25zLndhdGNoQ1NTICkgcmV0dXJuO1xuXG4gIGxldCBhZnRlckNvbnRlbnQgPSBnZXRDb21wdXRlZFN0eWxlKCB0aGlzLmVsZW1lbnQsICc6YWZ0ZXInICkuY29udGVudDtcbiAgLy8gYWN0aXZhdGUgaWYgOmFmdGVyIHsgY29udGVudDogJ2ZsaWNraXR5JyB9XG4gIGlmICggYWZ0ZXJDb250ZW50LmluY2x1ZGVzKCdmbGlja2l0eScpICkge1xuICAgIHRoaXMuYWN0aXZhdGUoKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmRlYWN0aXZhdGUoKTtcbiAgfVxufTtcblxuLy8gLS0tLS0ga2V5ZG93biAtLS0tLSAvL1xuXG4vLyBnbyBwcmV2aW91cy9uZXh0IGlmIGxlZnQvcmlnaHQga2V5cyBwcmVzc2VkXG5wcm90by5vbmtleWRvd24gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIGxldCB7IGFjdGl2ZUVsZW1lbnQgfSA9IGRvY3VtZW50O1xuICBsZXQgaGFuZGxlciA9IEZsaWNraXR5LmtleWJvYXJkSGFuZGxlcnNbIGV2ZW50LmtleSBdO1xuICAvLyBvbmx5IHdvcmsgaWYgZWxlbWVudCBpcyBpbiBmb2N1c1xuICBpZiAoICF0aGlzLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSB8fCAhYWN0aXZlRWxlbWVudCB8fCAhaGFuZGxlciApIHJldHVybjtcblxuICBsZXQgaXNGb2N1c2VkID0gdGhpcy5mb2N1c2FibGVFbGVtcy5zb21lKCAoIGVsZW0gKSA9PiBhY3RpdmVFbGVtZW50ID09PSBlbGVtICk7XG4gIGlmICggaXNGb2N1c2VkICkgaGFuZGxlci5jYWxsKCB0aGlzICk7XG59O1xuXG5GbGlja2l0eS5rZXlib2FyZEhhbmRsZXJzID0ge1xuICBBcnJvd0xlZnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudWlDaGFuZ2UoKTtcbiAgICBsZXQgbGVmdE1ldGhvZCA9IHRoaXMub3B0aW9ucy5yaWdodFRvTGVmdCA/ICduZXh0JyA6ICdwcmV2aW91cyc7XG4gICAgdGhpc1sgbGVmdE1ldGhvZCBdKCk7XG4gIH0sXG4gIEFycm93UmlnaHQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudWlDaGFuZ2UoKTtcbiAgICBsZXQgcmlnaHRNZXRob2QgPSB0aGlzLm9wdGlvbnMucmlnaHRUb0xlZnQgPyAncHJldmlvdXMnIDogJ25leHQnO1xuICAgIHRoaXNbIHJpZ2h0TWV0aG9kIF0oKTtcbiAgfSxcbn07XG5cbi8vIC0tLS0tIGZvY3VzIC0tLS0tIC8vXG5cbnByb3RvLmZvY3VzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZWxlbWVudC5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBkZXN0cm95IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8vIGRlYWN0aXZhdGUgYWxsIEZsaWNraXR5IGZ1bmN0aW9uYWxpdHksIGJ1dCBrZWVwIHN0dWZmIGF2YWlsYWJsZVxucHJvdG8uZGVhY3RpdmF0ZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLmlzQWN0aXZlICkgcmV0dXJuO1xuXG4gIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdmbGlja2l0eS1lbmFibGVkJyk7XG4gIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdmbGlja2l0eS1ydGwnKTtcbiAgdGhpcy51bnNlbGVjdFNlbGVjdGVkU2xpZGUoKTtcbiAgLy8gZGVzdHJveSBjZWxsc1xuICB0aGlzLmNlbGxzLmZvckVhY2goICggY2VsbCApID0+IGNlbGwuZGVzdHJveSgpICk7XG4gIHRoaXMudmlld3BvcnQucmVtb3ZlKCk7XG4gIC8vIG1vdmUgY2hpbGQgZWxlbWVudHMgYmFjayBpbnRvIGVsZW1lbnRcbiAgdGhpcy5lbGVtZW50LmFwcGVuZCggLi4udGhpcy5zbGlkZXIuY2hpbGRyZW4gKTtcbiAgaWYgKCB0aGlzLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSApIHtcbiAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCd0YWJJbmRleCcpO1xuICAgIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAna2V5ZG93bicsIHRoaXMgKTtcbiAgfVxuICAvLyBzZXQgZmxhZ3NcbiAgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xuICB0aGlzLmVtaXRFdmVudCgnZGVhY3RpdmF0ZScpO1xufTtcblxucHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmRlYWN0aXZhdGUoKTtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdyZXNpemUnLCB0aGlzICk7XG4gIHRoaXMuYWxsT2ZmKCk7XG4gIHRoaXMuZW1pdEV2ZW50KCdkZXN0cm95Jyk7XG4gIGlmICggalF1ZXJ5ICYmIHRoaXMuJGVsZW1lbnQgKSB7XG4gICAgalF1ZXJ5LnJlbW92ZURhdGEoIHRoaXMuZWxlbWVudCwgJ2ZsaWNraXR5JyApO1xuICB9XG4gIGRlbGV0ZSB0aGlzLmVsZW1lbnQuZmxpY2tpdHlHVUlEO1xuICBkZWxldGUgaW5zdGFuY2VzWyB0aGlzLmd1aWQgXTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHByb3RvdHlwZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5PYmplY3QuYXNzaWduKCBwcm90bywgYW5pbWF0ZVByb3RvdHlwZSApO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBleHRyYXMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLyoqXG4gKiBnZXQgRmxpY2tpdHkgaW5zdGFuY2UgZnJvbSBlbGVtZW50XG4gKiBAcGFyYW0ge1tFbGVtZW50LCBTdHJpbmddfSBlbGVtIC0gZWxlbWVudCBvciBzZWxlY3RvciBzdHJpbmdcbiAqIEByZXR1cm5zIHtGbGlja2l0eX0gLSBGbGlja2l0eSBpbnN0YW5jZVxuICovXG5GbGlja2l0eS5kYXRhID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIGVsZW0gPSB1dGlscy5nZXRRdWVyeUVsZW1lbnQoIGVsZW0gKTtcbiAgaWYgKCBlbGVtICkgcmV0dXJuIGluc3RhbmNlc1sgZWxlbS5mbGlja2l0eUdVSUQgXTtcbn07XG5cbnV0aWxzLmh0bWxJbml0KCBGbGlja2l0eSwgJ2ZsaWNraXR5JyApO1xuXG5sZXQgeyBqUXVlcnlCcmlkZ2V0IH0gPSB3aW5kb3c7XG5pZiAoIGpRdWVyeSAmJiBqUXVlcnlCcmlkZ2V0ICkge1xuICBqUXVlcnlCcmlkZ2V0KCAnZmxpY2tpdHknLCBGbGlja2l0eSwgalF1ZXJ5ICk7XG59XG5cbi8vIHNldCBpbnRlcm5hbCBqUXVlcnksIGZvciBXZWJwYWNrICsgalF1ZXJ5IHYzLCAjNDc4XG5GbGlja2l0eS5zZXRKUXVlcnkgPSBmdW5jdGlvbigganEgKSB7XG4gIGpRdWVyeSA9IGpxO1xufTtcblxuRmxpY2tpdHkuQ2VsbCA9IENlbGw7XG5GbGlja2l0eS5TbGlkZSA9IFNsaWRlO1xuXG5yZXR1cm4gRmxpY2tpdHk7XG5cbn0gKSApO1xuIiwiLy8gYWRkLCByZW1vdmUgY2VsbFxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgICByZXF1aXJlKCcuL2NvcmUnKSxcbiAgICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKSxcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgZmFjdG9yeShcbiAgICAgICAgd2luZG93LkZsaWNraXR5LFxuICAgICAgICB3aW5kb3cuZml6enlVSVV0aWxzLFxuICAgICk7XG4gIH1cblxufSggdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uIGZhY3RvcnkoIEZsaWNraXR5LCB1dGlscyApIHtcblxuLy8gYXBwZW5kIGNlbGxzIHRvIGEgZG9jdW1lbnQgZnJhZ21lbnRcbmZ1bmN0aW9uIGdldENlbGxzRnJhZ21lbnQoIGNlbGxzICkge1xuICBsZXQgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gIGNlbGxzLmZvckVhY2goICggY2VsbCApID0+IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjZWxsLmVsZW1lbnQgKSApO1xuICByZXR1cm4gZnJhZ21lbnQ7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGFkZC9yZW1vdmUgY2VsbCBwcm90b3R5cGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxubGV0IHByb3RvID0gRmxpY2tpdHkucHJvdG90eXBlO1xuXG4vKipcbiAqIEluc2VydCwgcHJlcGVuZCwgb3IgYXBwZW5kIGNlbGxzXG4gKiBAcGFyYW0ge1tFbGVtZW50LCBBcnJheSwgTm9kZUxpc3RdfSBlbGVtcyAtIEVsZW1lbnRzIHRvIGluc2VydFxuICogQHBhcmFtIHtJbnRlZ2VyfSBpbmRleCAtIFplcm8tYmFzZWQgbnVtYmVyIHRvIGluc2VydFxuICovXG5wcm90by5pbnNlcnQgPSBmdW5jdGlvbiggZWxlbXMsIGluZGV4ICkge1xuICBsZXQgY2VsbHMgPSB0aGlzLl9tYWtlQ2VsbHMoIGVsZW1zICk7XG4gIGlmICggIWNlbGxzIHx8ICFjZWxscy5sZW5ndGggKSByZXR1cm47XG5cbiAgbGV0IGxlbiA9IHRoaXMuY2VsbHMubGVuZ3RoO1xuICAvLyBkZWZhdWx0IHRvIGFwcGVuZFxuICBpbmRleCA9IGluZGV4ID09PSB1bmRlZmluZWQgPyBsZW4gOiBpbmRleDtcbiAgLy8gYWRkIGNlbGxzIHdpdGggZG9jdW1lbnQgZnJhZ21lbnRcbiAgbGV0IGZyYWdtZW50ID0gZ2V0Q2VsbHNGcmFnbWVudCggY2VsbHMgKTtcbiAgLy8gYXBwZW5kIHRvIHNsaWRlclxuICBsZXQgaXNBcHBlbmQgPSBpbmRleCA9PT0gbGVuO1xuICBpZiAoIGlzQXBwZW5kICkge1xuICAgIHRoaXMuc2xpZGVyLmFwcGVuZENoaWxkKCBmcmFnbWVudCApO1xuICB9IGVsc2Uge1xuICAgIGxldCBpbnNlcnRDZWxsRWxlbWVudCA9IHRoaXMuY2VsbHNbIGluZGV4IF0uZWxlbWVudDtcbiAgICB0aGlzLnNsaWRlci5pbnNlcnRCZWZvcmUoIGZyYWdtZW50LCBpbnNlcnRDZWxsRWxlbWVudCApO1xuICB9XG4gIC8vIGFkZCB0byB0aGlzLmNlbGxzXG4gIGlmICggaW5kZXggPT09IDAgKSB7XG4gICAgLy8gcHJlcGVuZCwgYWRkIHRvIHN0YXJ0XG4gICAgdGhpcy5jZWxscyA9IGNlbGxzLmNvbmNhdCggdGhpcy5jZWxscyApO1xuICB9IGVsc2UgaWYgKCBpc0FwcGVuZCApIHtcbiAgICAvLyBhcHBlbmQsIGFkZCB0byBlbmRcbiAgICB0aGlzLmNlbGxzID0gdGhpcy5jZWxscy5jb25jYXQoIGNlbGxzICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gaW5zZXJ0IGluIHRoaXMuY2VsbHNcbiAgICBsZXQgZW5kQ2VsbHMgPSB0aGlzLmNlbGxzLnNwbGljZSggaW5kZXgsIGxlbiAtIGluZGV4ICk7XG4gICAgdGhpcy5jZWxscyA9IHRoaXMuY2VsbHMuY29uY2F0KCBjZWxscyApLmNvbmNhdCggZW5kQ2VsbHMgKTtcbiAgfVxuXG4gIHRoaXMuX3NpemVDZWxscyggY2VsbHMgKTtcbiAgdGhpcy5jZWxsQ2hhbmdlKCBpbmRleCApO1xuICB0aGlzLnBvc2l0aW9uU2xpZGVyQXRTZWxlY3RlZCgpO1xufTtcblxucHJvdG8uYXBwZW5kID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICB0aGlzLmluc2VydCggZWxlbXMsIHRoaXMuY2VsbHMubGVuZ3RoICk7XG59O1xuXG5wcm90by5wcmVwZW5kID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICB0aGlzLmluc2VydCggZWxlbXMsIDAgKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGNlbGxzXG4gKiBAcGFyYW0ge1tFbGVtZW50LCBBcnJheSwgTm9kZUxpc3RdfSBlbGVtcyAtIEVMZW1lbnRzIHRvIHJlbW92ZVxuICovXG5wcm90by5yZW1vdmUgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIGxldCBjZWxscyA9IHRoaXMuZ2V0Q2VsbHMoIGVsZW1zICk7XG4gIGlmICggIWNlbGxzIHx8ICFjZWxscy5sZW5ndGggKSByZXR1cm47XG5cbiAgbGV0IG1pbkNlbGxJbmRleCA9IHRoaXMuY2VsbHMubGVuZ3RoIC0gMTtcbiAgLy8gcmVtb3ZlIGNlbGxzIGZyb20gY29sbGVjdGlvbiAmIERPTVxuICBjZWxscy5mb3JFYWNoKCAoIGNlbGwgKSA9PiB7XG4gICAgY2VsbC5yZW1vdmUoKTtcbiAgICBsZXQgaW5kZXggPSB0aGlzLmNlbGxzLmluZGV4T2YoIGNlbGwgKTtcbiAgICBtaW5DZWxsSW5kZXggPSBNYXRoLm1pbiggaW5kZXgsIG1pbkNlbGxJbmRleCApO1xuICAgIHV0aWxzLnJlbW92ZUZyb20oIHRoaXMuY2VsbHMsIGNlbGwgKTtcbiAgfSApO1xuXG4gIHRoaXMuY2VsbENoYW5nZSggbWluQ2VsbEluZGV4ICk7XG4gIHRoaXMucG9zaXRpb25TbGlkZXJBdFNlbGVjdGVkKCk7XG59O1xuXG4vKipcbiAqIGxvZ2ljIHRvIGJlIHJ1biBhZnRlciBhIGNlbGwncyBzaXplIGNoYW5nZXNcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbSAtIGNlbGwncyBlbGVtZW50XG4gKi9cbnByb3RvLmNlbGxTaXplQ2hhbmdlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIGxldCBjZWxsID0gdGhpcy5nZXRDZWxsKCBlbGVtICk7XG4gIGlmICggIWNlbGwgKSByZXR1cm47XG5cbiAgY2VsbC5nZXRTaXplKCk7XG5cbiAgbGV0IGluZGV4ID0gdGhpcy5jZWxscy5pbmRleE9mKCBjZWxsICk7XG4gIHRoaXMuY2VsbENoYW5nZSggaW5kZXggKTtcbiAgLy8gZG8gbm90IHBvc2l0aW9uIHNsaWRlciBhZnRlciBsYXp5IGxvYWRcbn07XG5cbi8qKlxuICogbG9naWMgYW55IHRpbWUgYSBjZWxsIGlzIGNoYW5nZWQ6IGFkZGVkLCByZW1vdmVkLCBvciBzaXplIGNoYW5nZWRcbiAqIEBwYXJhbSB7SW50ZWdlcn0gY2hhbmdlZENlbGxJbmRleCAtIGluZGV4IG9mIHRoZSBjaGFuZ2VkIGNlbGwsIG9wdGlvbmFsXG4gKi9cbnByb3RvLmNlbGxDaGFuZ2UgPSBmdW5jdGlvbiggY2hhbmdlZENlbGxJbmRleCApIHtcbiAgbGV0IHByZXZTZWxlY3RlZEVsZW0gPSB0aGlzLnNlbGVjdGVkRWxlbWVudDtcbiAgdGhpcy5fcG9zaXRpb25DZWxscyggY2hhbmdlZENlbGxJbmRleCApO1xuICB0aGlzLl91cGRhdGVXcmFwU2hpZnRDZWxscygpO1xuICB0aGlzLnNldEdhbGxlcnlTaXplKCk7XG4gIC8vIHVwZGF0ZSBzZWxlY3RlZEluZGV4LCB0cnkgdG8gbWFpbnRhaW4gcG9zaXRpb24gJiBzZWxlY3QgcHJldmlvdXMgc2VsZWN0ZWQgZWxlbWVudFxuICBsZXQgY2VsbCA9IHRoaXMuZ2V0Q2VsbCggcHJldlNlbGVjdGVkRWxlbSApO1xuICBpZiAoIGNlbGwgKSB0aGlzLnNlbGVjdGVkSW5kZXggPSB0aGlzLmdldENlbGxTbGlkZUluZGV4KCBjZWxsICk7XG4gIHRoaXMuc2VsZWN0ZWRJbmRleCA9IE1hdGgubWluKCB0aGlzLnNsaWRlcy5sZW5ndGggLSAxLCB0aGlzLnNlbGVjdGVkSW5kZXggKTtcblxuICB0aGlzLmVtaXRFdmVudCggJ2NlbGxDaGFuZ2UnLCBbIGNoYW5nZWRDZWxsSW5kZXggXSApO1xuICAvLyBwb3NpdGlvbiBzbGlkZXJcbiAgdGhpcy5zZWxlY3QoIHRoaXMuc2VsZWN0ZWRJbmRleCApO1xufTtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbnJldHVybiBGbGlja2l0eTtcblxufSApICk7XG4iLCIvLyBGbGlja2l0eS5DZWxsXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoIHJlcXVpcmUoJ2dldC1zaXplJykgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5GbGlja2l0eSA9IHdpbmRvdy5GbGlja2l0eSB8fCB7fTtcbiAgICB3aW5kb3cuRmxpY2tpdHkuQ2VsbCA9IGZhY3RvcnkoIHdpbmRvdy5nZXRTaXplICk7XG4gIH1cblxufSggdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uIGZhY3RvcnkoIGdldFNpemUgKSB7XG5cbmNvbnN0IGNlbGxDbGFzc05hbWUgPSAnZmxpY2tpdHktY2VsbCc7XG5cbmZ1bmN0aW9uIENlbGwoIGVsZW0gKSB7XG4gIHRoaXMuZWxlbWVudCA9IGVsZW07XG4gIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCBjZWxsQ2xhc3NOYW1lICk7XG5cbiAgdGhpcy54ID0gMDtcbiAgdGhpcy51bnNlbGVjdCgpO1xufVxuXG5sZXQgcHJvdG8gPSBDZWxsLnByb3RvdHlwZTtcblxucHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICAvLyByZXNldCBzdHlsZVxuICB0aGlzLnVuc2VsZWN0KCk7XG4gIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCBjZWxsQ2xhc3NOYW1lICk7XG4gIHRoaXMuZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSAnJztcbiAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcbn07XG5cbnByb3RvLmdldFNpemUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zaXplID0gZ2V0U2l6ZSggdGhpcy5lbGVtZW50ICk7XG59O1xuXG5wcm90by5zZWxlY3QgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLXNlbGVjdGVkJyk7XG4gIHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7XG59O1xuXG5wcm90by51bnNlbGVjdCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtc2VsZWN0ZWQnKTtcbiAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSggJ2FyaWEtaGlkZGVuJywgJ3RydWUnICk7XG59O1xuXG5wcm90by5yZW1vdmUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5lbGVtZW50LnJlbW92ZSgpO1xufTtcblxucmV0dXJuIENlbGw7XG5cbn0gKSApO1xuIiwiLy8gZHJhZ1xuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgICB3aW5kb3csXG4gICAgICAgIHJlcXVpcmUoJy4vY29yZScpLFxuICAgICAgICByZXF1aXJlKCd1bmlkcmFnZ2VyJyksXG4gICAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJyksXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5GbGlja2l0eSA9IGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdyxcbiAgICAgICAgd2luZG93LkZsaWNraXR5LFxuICAgICAgICB3aW5kb3cuVW5pZHJhZ2dlcixcbiAgICAgICAgd2luZG93LmZpenp5VUlVdGlscyxcbiAgICApO1xuICB9XG5cbn0oIHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLFxuICAgIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgRmxpY2tpdHksIFVuaWRyYWdnZXIsIHV0aWxzICkge1xuXG4vLyAtLS0tLSBkZWZhdWx0cyAtLS0tLSAvL1xuXG5PYmplY3QuYXNzaWduKCBGbGlja2l0eS5kZWZhdWx0cywge1xuICBkcmFnZ2FibGU6ICc+MScsXG4gIGRyYWdUaHJlc2hvbGQ6IDMsXG59ICk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGRyYWcgcHJvdG90eXBlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmxldCBwcm90byA9IEZsaWNraXR5LnByb3RvdHlwZTtcbk9iamVjdC5hc3NpZ24oIHByb3RvLCBVbmlkcmFnZ2VyLnByb3RvdHlwZSApOyAvLyBpbmhlcml0IFVuaWRyYWdnZXJcbnByb3RvLnRvdWNoQWN0aW9uVmFsdWUgPSAnJztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbkZsaWNraXR5LmNyZWF0ZS5kcmFnID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMub24oICdhY3RpdmF0ZScsIHRoaXMub25BY3RpdmF0ZURyYWcgKTtcbiAgdGhpcy5vbiggJ3VpQ2hhbmdlJywgdGhpcy5fdWlDaGFuZ2VEcmFnICk7XG4gIHRoaXMub24oICdkZWFjdGl2YXRlJywgdGhpcy5vbkRlYWN0aXZhdGVEcmFnICk7XG4gIHRoaXMub24oICdjZWxsQ2hhbmdlJywgdGhpcy51cGRhdGVEcmFnZ2FibGUgKTtcbiAgdGhpcy5vbiggJ3BvaW50ZXJEb3duJywgdGhpcy5oYW5kbGVQb2ludGVyRG93biApO1xuICB0aGlzLm9uKCAncG9pbnRlclVwJywgdGhpcy5oYW5kbGVQb2ludGVyVXAgKTtcbiAgdGhpcy5vbiggJ3BvaW50ZXJEb3duJywgdGhpcy5oYW5kbGVQb2ludGVyRG9uZSApO1xuICB0aGlzLm9uKCAnZHJhZ1N0YXJ0JywgdGhpcy5oYW5kbGVEcmFnU3RhcnQgKTtcbiAgdGhpcy5vbiggJ2RyYWdNb3ZlJywgdGhpcy5oYW5kbGVEcmFnTW92ZSApO1xuICB0aGlzLm9uKCAnZHJhZ0VuZCcsIHRoaXMuaGFuZGxlRHJhZ0VuZCApO1xuICB0aGlzLm9uKCAnc3RhdGljQ2xpY2snLCB0aGlzLmhhbmRsZVN0YXRpY0NsaWNrICk7XG4gIC8vIFRPRE8gdXBkYXRlRHJhZ2dhYmxlIG9uIHJlc2l6ZT8gaWYgZ3JvdXBDZWxscyAmIHNsaWRlcyBjaGFuZ2Vcbn07XG5cbnByb3RvLm9uQWN0aXZhdGVEcmFnID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaGFuZGxlcyA9IFsgdGhpcy52aWV3cG9ydCBdO1xuICB0aGlzLmJpbmRIYW5kbGVzKCk7XG4gIHRoaXMudXBkYXRlRHJhZ2dhYmxlKCk7XG59O1xuXG5wcm90by5vbkRlYWN0aXZhdGVEcmFnID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMudW5iaW5kSGFuZGxlcygpO1xuICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZHJhZ2dhYmxlJyk7XG59O1xuXG5wcm90by51cGRhdGVEcmFnZ2FibGUgPSBmdW5jdGlvbigpIHtcbiAgLy8gZGlzYWJsZSBkcmFnZ2luZyBpZiBsZXNzIHRoYW4gMiBzbGlkZXMuICMyNzhcbiAgaWYgKCB0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlID09PSAnPjEnICkge1xuICAgIHRoaXMuaXNEcmFnZ2FibGUgPSB0aGlzLnNsaWRlcy5sZW5ndGggPiAxO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuaXNEcmFnZ2FibGUgPSB0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlO1xuICB9XG4gIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCAnaXMtZHJhZ2dhYmxlJywgdGhpcy5pc0RyYWdnYWJsZSApO1xufTtcblxucHJvdG8uX3VpQ2hhbmdlRHJhZyA9IGZ1bmN0aW9uKCkge1xuICBkZWxldGUgdGhpcy5pc0ZyZWVTY3JvbGxpbmc7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBwb2ludGVyIGV2ZW50cyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5wcm90by5oYW5kbGVQb2ludGVyRG93biA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgaWYgKCAhdGhpcy5pc0RyYWdnYWJsZSApIHtcbiAgICAvLyBwcm9jZWVkIGZvciBzdGF0aWNDbGlja1xuICAgIHRoaXMuYmluZEFjdGl2ZVBvaW50ZXJFdmVudHMoIGV2ZW50ICk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGlzVG91Y2hTdGFydCA9IGV2ZW50LnR5cGUgPT09ICd0b3VjaHN0YXJ0JztcbiAgbGV0IGlzVG91Y2hQb2ludGVyID0gZXZlbnQucG9pbnRlclR5cGUgPT09ICd0b3VjaCc7XG4gIGxldCBpc0ZvY3VzTm9kZSA9IGV2ZW50LnRhcmdldC5tYXRjaGVzKCdpbnB1dCwgdGV4dGFyZWEsIHNlbGVjdCcpO1xuICBpZiAoICFpc1RvdWNoU3RhcnQgJiYgIWlzVG91Y2hQb2ludGVyICYmICFpc0ZvY3VzTm9kZSApIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGlmICggIWlzRm9jdXNOb2RlICkgdGhpcy5mb2N1cygpO1xuICAvLyBibHVyXG4gIGlmICggZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gdGhpcy5lbGVtZW50ICkgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gIC8vIHN0b3AgaWYgaXQgd2FzIG1vdmluZ1xuICB0aGlzLmRyYWdYID0gdGhpcy54O1xuICB0aGlzLnZpZXdwb3J0LmNsYXNzTGlzdC5hZGQoJ2lzLXBvaW50ZXItZG93bicpO1xuICAvLyB0cmFjayBzY3JvbGxpbmdcbiAgdGhpcy5wb2ludGVyRG93blNjcm9sbCA9IGdldFNjcm9sbFBvc2l0aW9uKCk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCAnc2Nyb2xsJywgdGhpcyApO1xuICB0aGlzLmJpbmRBY3RpdmVQb2ludGVyRXZlbnRzKCBldmVudCApO1xufTtcblxuLy8gLS0tLS0gbW92ZSAtLS0tLSAvL1xuXG5wcm90by5oYXNEcmFnU3RhcnRlZCA9IGZ1bmN0aW9uKCBtb3ZlVmVjdG9yICkge1xuICByZXR1cm4gTWF0aC5hYnMoIG1vdmVWZWN0b3IueCApID4gdGhpcy5vcHRpb25zLmRyYWdUaHJlc2hvbGQ7XG59O1xuXG4vLyAtLS0tLSB1cCAtLS0tLSAvL1xuXG5wcm90by5oYW5kbGVQb2ludGVyVXAgPSBmdW5jdGlvbigpIHtcbiAgZGVsZXRlIHRoaXMuaXNUb3VjaFNjcm9sbGluZztcbiAgdGhpcy52aWV3cG9ydC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1wb2ludGVyLWRvd24nKTtcbn07XG5cbnByb3RvLmhhbmRsZVBvaW50ZXJEb25lID0gZnVuY3Rpb24oKSB7XG4gIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCAnc2Nyb2xsJywgdGhpcyApO1xuICBkZWxldGUgdGhpcy5wb2ludGVyRG93blNjcm9sbDtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGRyYWdnaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnByb3RvLmhhbmRsZURyYWdTdGFydCA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLmlzRHJhZ2dhYmxlICkgcmV0dXJuO1xuXG4gIHRoaXMuZHJhZ1N0YXJ0UG9zaXRpb24gPSB0aGlzLng7XG4gIHRoaXMuc3RhcnRBbmltYXRpb24oKTtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdzY3JvbGwnLCB0aGlzICk7XG59O1xuXG5wcm90by5oYW5kbGVEcmFnTW92ZSA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciApIHtcbiAgaWYgKCAhdGhpcy5pc0RyYWdnYWJsZSApIHJldHVybjtcblxuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gIHRoaXMucHJldmlvdXNEcmFnWCA9IHRoaXMuZHJhZ1g7XG4gIC8vIHJldmVyc2UgaWYgcmlnaHQtdG8tbGVmdFxuICBsZXQgZGlyZWN0aW9uID0gdGhpcy5vcHRpb25zLnJpZ2h0VG9MZWZ0ID8gLTEgOiAxO1xuICAvLyB3cmFwIGFyb3VuZCBtb3ZlLiAjNTg5XG4gIGlmICggdGhpcy5pc1dyYXBwaW5nICkgbW92ZVZlY3Rvci54ICU9IHRoaXMuc2xpZGVhYmxlV2lkdGg7XG4gIGxldCBkcmFnWCA9IHRoaXMuZHJhZ1N0YXJ0UG9zaXRpb24gKyBtb3ZlVmVjdG9yLnggKiBkaXJlY3Rpb247XG5cbiAgaWYgKCAhdGhpcy5pc1dyYXBwaW5nICkge1xuICAgIC8vIHNsb3cgZHJhZ1xuICAgIGxldCBvcmlnaW5Cb3VuZCA9IE1hdGgubWF4KCAtdGhpcy5zbGlkZXNbMF0udGFyZ2V0LCB0aGlzLmRyYWdTdGFydFBvc2l0aW9uICk7XG4gICAgZHJhZ1ggPSBkcmFnWCA+IG9yaWdpbkJvdW5kID8gKCBkcmFnWCArIG9yaWdpbkJvdW5kICkgKiAwLjUgOiBkcmFnWDtcbiAgICBsZXQgZW5kQm91bmQgPSBNYXRoLm1pbiggLXRoaXMuZ2V0TGFzdFNsaWRlKCkudGFyZ2V0LCB0aGlzLmRyYWdTdGFydFBvc2l0aW9uICk7XG4gICAgZHJhZ1ggPSBkcmFnWCA8IGVuZEJvdW5kID8gKCBkcmFnWCArIGVuZEJvdW5kICkgKiAwLjUgOiBkcmFnWDtcbiAgfVxuXG4gIHRoaXMuZHJhZ1ggPSBkcmFnWDtcbiAgdGhpcy5kcmFnTW92ZVRpbWUgPSBuZXcgRGF0ZSgpO1xufTtcblxucHJvdG8uaGFuZGxlRHJhZ0VuZCA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLmlzRHJhZ2dhYmxlICkgcmV0dXJuO1xuXG4gIGxldCB7IGZyZWVTY3JvbGwgfSA9IHRoaXMub3B0aW9ucztcbiAgaWYgKCBmcmVlU2Nyb2xsICkgdGhpcy5pc0ZyZWVTY3JvbGxpbmcgPSB0cnVlO1xuICAvLyBzZXQgc2VsZWN0ZWRJbmRleCBiYXNlZCBvbiB3aGVyZSBmbGljayB3aWxsIGVuZCB1cFxuICBsZXQgaW5kZXggPSB0aGlzLmRyYWdFbmRSZXN0aW5nU2VsZWN0KCk7XG5cbiAgaWYgKCBmcmVlU2Nyb2xsICYmICF0aGlzLmlzV3JhcHBpbmcgKSB7XG4gICAgLy8gaWYgZnJlZS1zY3JvbGwgJiBub3Qgd3JhcCBhcm91bmRcbiAgICAvLyBkbyBub3QgZnJlZS1zY3JvbGwgaWYgZ29pbmcgb3V0c2lkZSBvZiBib3VuZGluZyBzbGlkZXNcbiAgICAvLyBzbyBib3VuZGluZyBzbGlkZXMgY2FuIGF0dHJhY3Qgc2xpZGVyLCBhbmQga2VlcCBpdCBpbiBib3VuZHNcbiAgICBsZXQgcmVzdGluZ1ggPSB0aGlzLmdldFJlc3RpbmdQb3NpdGlvbigpO1xuICAgIHRoaXMuaXNGcmVlU2Nyb2xsaW5nID0gLXJlc3RpbmdYID4gdGhpcy5zbGlkZXNbMF0udGFyZ2V0ICYmXG4gICAgICAtcmVzdGluZ1ggPCB0aGlzLmdldExhc3RTbGlkZSgpLnRhcmdldDtcbiAgfSBlbHNlIGlmICggIWZyZWVTY3JvbGwgJiYgaW5kZXggPT09IHRoaXMuc2VsZWN0ZWRJbmRleCApIHtcbiAgICAvLyBib29zdCBzZWxlY3Rpb24gaWYgc2VsZWN0ZWQgaW5kZXggaGFzIG5vdCBjaGFuZ2VkXG4gICAgaW5kZXggKz0gdGhpcy5kcmFnRW5kQm9vc3RTZWxlY3QoKTtcbiAgfVxuICBkZWxldGUgdGhpcy5wcmV2aW91c0RyYWdYO1xuICAvLyBhcHBseSBzZWxlY3Rpb25cbiAgLy8gSEFDSywgc2V0IGZsYWcgc28gZHJhZ2dpbmcgc3RheXMgaW4gY29ycmVjdCBkaXJlY3Rpb25cbiAgdGhpcy5pc0RyYWdTZWxlY3QgPSB0aGlzLmlzV3JhcHBpbmc7XG4gIHRoaXMuc2VsZWN0KCBpbmRleCApO1xuICBkZWxldGUgdGhpcy5pc0RyYWdTZWxlY3Q7XG59O1xuXG5wcm90by5kcmFnRW5kUmVzdGluZ1NlbGVjdCA9IGZ1bmN0aW9uKCkge1xuICBsZXQgcmVzdGluZ1ggPSB0aGlzLmdldFJlc3RpbmdQb3NpdGlvbigpO1xuICAvLyBob3cgZmFyIGF3YXkgZnJvbSBzZWxlY3RlZCBzbGlkZVxuICBsZXQgZGlzdGFuY2UgPSBNYXRoLmFicyggdGhpcy5nZXRTbGlkZURpc3RhbmNlKCAtcmVzdGluZ1gsIHRoaXMuc2VsZWN0ZWRJbmRleCApICk7XG4gIC8vIGdldCBjbG9zZXQgcmVzdGluZyBnb2luZyB1cCBhbmQgZ29pbmcgZG93blxuICBsZXQgcG9zaXRpdmVSZXN0aW5nID0gdGhpcy5fZ2V0Q2xvc2VzdFJlc3RpbmcoIHJlc3RpbmdYLCBkaXN0YW5jZSwgMSApO1xuICBsZXQgbmVnYXRpdmVSZXN0aW5nID0gdGhpcy5fZ2V0Q2xvc2VzdFJlc3RpbmcoIHJlc3RpbmdYLCBkaXN0YW5jZSwgLTEgKTtcbiAgLy8gdXNlIGNsb3NlciByZXN0aW5nIGZvciB3cmFwLWFyb3VuZFxuICByZXR1cm4gcG9zaXRpdmVSZXN0aW5nLmRpc3RhbmNlIDwgbmVnYXRpdmVSZXN0aW5nLmRpc3RhbmNlID9cbiAgICBwb3NpdGl2ZVJlc3RpbmcuaW5kZXggOiBuZWdhdGl2ZVJlc3RpbmcuaW5kZXg7XG59O1xuXG4vKipcbiAqIGdpdmVuIHJlc3RpbmcgWCBhbmQgZGlzdGFuY2UgdG8gc2VsZWN0ZWQgY2VsbFxuICogZ2V0IHRoZSBkaXN0YW5jZSBhbmQgaW5kZXggb2YgdGhlIGNsb3Nlc3QgY2VsbFxuICogQHBhcmFtIHtOdW1iZXJ9IHJlc3RpbmdYIC0gZXN0aW1hdGVkIHBvc3QtZmxpY2sgcmVzdGluZyBwb3NpdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IGRpc3RhbmNlIC0gZGlzdGFuY2UgdG8gc2VsZWN0ZWQgY2VsbFxuICogQHBhcmFtIHtJbnRlZ2VyfSBpbmNyZW1lbnQgLSArMSBvciAtMSwgZ29pbmcgdXAgb3IgZG93blxuICogQHJldHVybnMge09iamVjdH0gLSB7IGRpc3RhbmNlOiB7TnVtYmVyfSwgaW5kZXg6IHtJbnRlZ2VyfSB9XG4gKi9cbnByb3RvLl9nZXRDbG9zZXN0UmVzdGluZyA9IGZ1bmN0aW9uKCByZXN0aW5nWCwgZGlzdGFuY2UsIGluY3JlbWVudCApIHtcbiAgbGV0IGluZGV4ID0gdGhpcy5zZWxlY3RlZEluZGV4O1xuICBsZXQgbWluRGlzdGFuY2UgPSBJbmZpbml0eTtcbiAgbGV0IGNvbmRpdGlvbiA9IHRoaXMub3B0aW9ucy5jb250YWluICYmICF0aGlzLmlzV3JhcHBpbmcgP1xuICAgIC8vIGlmIGNvbnRhaW5pbmcsIGtlZXAgZ29pbmcgaWYgZGlzdGFuY2UgaXMgZXF1YWwgdG8gbWluRGlzdGFuY2VcbiAgICAoIGRpc3QsIG1pbkRpc3QgKSA9PiBkaXN0IDw9IG1pbkRpc3QgOlxuICAgICggZGlzdCwgbWluRGlzdCApID0+IGRpc3QgPCBtaW5EaXN0O1xuXG4gIHdoaWxlICggY29uZGl0aW9uKCBkaXN0YW5jZSwgbWluRGlzdGFuY2UgKSApIHtcbiAgICAvLyBtZWFzdXJlIGRpc3RhbmNlIHRvIG5leHQgY2VsbFxuICAgIGluZGV4ICs9IGluY3JlbWVudDtcbiAgICBtaW5EaXN0YW5jZSA9IGRpc3RhbmNlO1xuICAgIGRpc3RhbmNlID0gdGhpcy5nZXRTbGlkZURpc3RhbmNlKCAtcmVzdGluZ1gsIGluZGV4ICk7XG4gICAgaWYgKCBkaXN0YW5jZSA9PT0gbnVsbCApIGJyZWFrO1xuXG4gICAgZGlzdGFuY2UgPSBNYXRoLmFicyggZGlzdGFuY2UgKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGRpc3RhbmNlOiBtaW5EaXN0YW5jZSxcbiAgICAvLyBzZWxlY3RlZCB3YXMgcHJldmlvdXMgaW5kZXhcbiAgICBpbmRleDogaW5kZXggLSBpbmNyZW1lbnQsXG4gIH07XG59O1xuXG4vKipcbiAqIG1lYXN1cmUgZGlzdGFuY2UgYmV0d2VlbiB4IGFuZCBhIHNsaWRlIHRhcmdldFxuICogQHBhcmFtIHtOdW1iZXJ9IHggLSBob3Jpem9udGFsIHBvc2l0aW9uXG4gKiBAcGFyYW0ge0ludGVnZXJ9IGluZGV4IC0gc2xpZGUgaW5kZXhcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IC0gc2xpZGUgZGlzdGFuY2VcbiAqL1xucHJvdG8uZ2V0U2xpZGVEaXN0YW5jZSA9IGZ1bmN0aW9uKCB4LCBpbmRleCApIHtcbiAgbGV0IGxlbiA9IHRoaXMuc2xpZGVzLmxlbmd0aDtcbiAgLy8gd3JhcCBhcm91bmQgaWYgYXQgbGVhc3QgMiBzbGlkZXNcbiAgbGV0IGlzV3JhcEFyb3VuZCA9IHRoaXMub3B0aW9ucy53cmFwQXJvdW5kICYmIGxlbiA+IDE7XG4gIGxldCBzbGlkZUluZGV4ID0gaXNXcmFwQXJvdW5kID8gdXRpbHMubW9kdWxvKCBpbmRleCwgbGVuICkgOiBpbmRleDtcbiAgbGV0IHNsaWRlID0gdGhpcy5zbGlkZXNbIHNsaWRlSW5kZXggXTtcbiAgaWYgKCAhc2xpZGUgKSByZXR1cm4gbnVsbDtcblxuICAvLyBhZGQgZGlzdGFuY2UgZm9yIHdyYXAtYXJvdW5kIHNsaWRlc1xuICBsZXQgd3JhcCA9IGlzV3JhcEFyb3VuZCA/IHRoaXMuc2xpZGVhYmxlV2lkdGggKiBNYXRoLmZsb29yKCBpbmRleC9sZW4gKSA6IDA7XG4gIHJldHVybiB4IC0gKCBzbGlkZS50YXJnZXQgKyB3cmFwICk7XG59O1xuXG5wcm90by5kcmFnRW5kQm9vc3RTZWxlY3QgPSBmdW5jdGlvbigpIHtcbiAgLy8gZG8gbm90IGJvb3N0IGlmIG5vIHByZXZpb3VzRHJhZ1ggb3IgZHJhZ01vdmVUaW1lXG4gIGlmICggdGhpcy5wcmV2aW91c0RyYWdYID09PSB1bmRlZmluZWQgfHwgIXRoaXMuZHJhZ01vdmVUaW1lIHx8XG4gICAgLy8gb3IgaWYgZHJhZyB3YXMgaGVsZCBmb3IgMTAwIG1zXG4gICAgbmV3IERhdGUoKSAtIHRoaXMuZHJhZ01vdmVUaW1lID4gMTAwICkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgbGV0IGRpc3RhbmNlID0gdGhpcy5nZXRTbGlkZURpc3RhbmNlKCAtdGhpcy5kcmFnWCwgdGhpcy5zZWxlY3RlZEluZGV4ICk7XG4gIGxldCBkZWx0YSA9IHRoaXMucHJldmlvdXNEcmFnWCAtIHRoaXMuZHJhZ1g7XG4gIGlmICggZGlzdGFuY2UgPiAwICYmIGRlbHRhID4gMCApIHtcbiAgICAvLyBib29zdCB0byBuZXh0IGlmIG1vdmluZyB0b3dhcmRzIHRoZSByaWdodCwgYW5kIHBvc2l0aXZlIHZlbG9jaXR5XG4gICAgcmV0dXJuIDE7XG4gIH0gZWxzZSBpZiAoIGRpc3RhbmNlIDwgMCAmJiBkZWx0YSA8IDAgKSB7XG4gICAgLy8gYm9vc3QgdG8gcHJldmlvdXMgaWYgbW92aW5nIHRvd2FyZHMgdGhlIGxlZnQsIGFuZCBuZWdhdGl2ZSB2ZWxvY2l0eVxuICAgIHJldHVybiAtMTtcbiAgfVxuICByZXR1cm4gMDtcbn07XG5cbi8vIC0tLS0tIHNjcm9sbCAtLS0tLSAvL1xuXG5wcm90by5vbnNjcm9sbCA9IGZ1bmN0aW9uKCkge1xuICBsZXQgc2Nyb2xsID0gZ2V0U2Nyb2xsUG9zaXRpb24oKTtcbiAgbGV0IHNjcm9sbE1vdmVYID0gdGhpcy5wb2ludGVyRG93blNjcm9sbC54IC0gc2Nyb2xsLng7XG4gIGxldCBzY3JvbGxNb3ZlWSA9IHRoaXMucG9pbnRlckRvd25TY3JvbGwueSAtIHNjcm9sbC55O1xuICAvLyBjYW5jZWwgY2xpY2svdGFwIGlmIHNjcm9sbCBpcyB0b28gbXVjaFxuICBpZiAoIE1hdGguYWJzKCBzY3JvbGxNb3ZlWCApID4gMyB8fCBNYXRoLmFicyggc2Nyb2xsTW92ZVkgKSA+IDMgKSB7XG4gICAgdGhpcy5wb2ludGVyRG9uZSgpO1xuICB9XG59O1xuXG4vLyAtLS0tLSB1dGlscyAtLS0tLSAvL1xuXG5mdW5jdGlvbiBnZXRTY3JvbGxQb3NpdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiB3aW5kb3cucGFnZVhPZmZzZXQsXG4gICAgeTogd2luZG93LnBhZ2VZT2Zmc2V0LFxuICB9O1xufVxuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxucmV0dXJuIEZsaWNraXR5O1xuXG59ICkgKTtcbiIsIi8vIHByZXYvbmV4dCBidXR0b25zXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoIHJlcXVpcmUoJy4vY29yZScpICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICBmYWN0b3J5KCB3aW5kb3cuRmxpY2tpdHkgKTtcbiAgfVxuXG59KCB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24gZmFjdG9yeSggRmxpY2tpdHkgKSB7XG5cbmNvbnN0IHN2Z1VSSSA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFByZXZOZXh0QnV0dG9uIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmZ1bmN0aW9uIFByZXZOZXh0QnV0dG9uKCBpbmNyZW1lbnQsIGRpcmVjdGlvbiwgYXJyb3dTaGFwZSApIHtcbiAgdGhpcy5pbmNyZW1lbnQgPSBpbmNyZW1lbnQ7XG4gIHRoaXMuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuICB0aGlzLmlzUHJldmlvdXMgPSBpbmNyZW1lbnQgPT09ICdwcmV2aW91cyc7XG4gIHRoaXMuaXNMZWZ0ID0gZGlyZWN0aW9uID09PSAnbGVmdCc7XG4gIHRoaXMuX2NyZWF0ZSggYXJyb3dTaGFwZSApO1xufVxuXG5QcmV2TmV4dEJ1dHRvbi5wcm90b3R5cGUuX2NyZWF0ZSA9IGZ1bmN0aW9uKCBhcnJvd1NoYXBlICkge1xuICAvLyBwcm9wZXJ0aWVzXG4gIGxldCBlbGVtZW50ID0gdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gIGVsZW1lbnQuY2xhc3NOYW1lID0gYGZsaWNraXR5LWJ1dHRvbiBmbGlja2l0eS1wcmV2LW5leHQtYnV0dG9uICR7dGhpcy5pbmNyZW1lbnR9YDtcbiAgbGV0IGxhYmVsID0gdGhpcy5pc1ByZXZpb3VzID8gJ1ByZXZpb3VzJyA6ICdOZXh0JztcbiAgLy8gcHJldmVudCBidXR0b24gZnJvbSBzdWJtaXR0aW5nIGZvcm0gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzEwODM2MDc2LzE4MjE4M1xuICBlbGVtZW50LnNldEF0dHJpYnV0ZSggJ3R5cGUnLCAnYnV0dG9uJyApO1xuICBlbGVtZW50LnNldEF0dHJpYnV0ZSggJ2FyaWEtbGFiZWwnLCBsYWJlbCApO1xuICAvLyBpbml0IGFzIGRpc2FibGVkXG4gIHRoaXMuZGlzYWJsZSgpO1xuICAvLyBjcmVhdGUgYXJyb3dcbiAgbGV0IHN2ZyA9IHRoaXMuY3JlYXRlU1ZHKCBsYWJlbCwgYXJyb3dTaGFwZSApO1xuICBlbGVtZW50LmFwcGVuZCggc3ZnICk7XG59O1xuXG5QcmV2TmV4dEJ1dHRvbi5wcm90b3R5cGUuY3JlYXRlU1ZHID0gZnVuY3Rpb24oIGxhYmVsLCBhcnJvd1NoYXBlICkge1xuICBsZXQgc3ZnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCBzdmdVUkksICdzdmcnICk7XG4gIHN2Zy5zZXRBdHRyaWJ1dGUoICdjbGFzcycsICdmbGlja2l0eS1idXR0b24taWNvbicgKTtcbiAgc3ZnLnNldEF0dHJpYnV0ZSggJ3ZpZXdCb3gnLCAnMCAwIDEwMCAxMDAnICk7XG4gIC8vIGFkZCB0aXRsZSAjMTE4OVxuICBsZXQgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoIHN2Z1VSSSwgJ3RpdGxlJyApO1xuICB0aXRsZS5hcHBlbmQoIGxhYmVsICk7XG4gIC8vIGFkZCBwYXRoXG4gIGxldCBwYXRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCBzdmdVUkksICdwYXRoJyApO1xuICBsZXQgcGF0aE1vdmVtZW50cyA9IGdldEFycm93TW92ZW1lbnRzKCBhcnJvd1NoYXBlICk7XG4gIHBhdGguc2V0QXR0cmlidXRlKCAnZCcsIHBhdGhNb3ZlbWVudHMgKTtcbiAgcGF0aC5zZXRBdHRyaWJ1dGUoICdjbGFzcycsICdhcnJvdycgKTtcbiAgLy8gcm90YXRlIGFycm93XG4gIGlmICggIXRoaXMuaXNMZWZ0ICkge1xuICAgIHBhdGguc2V0QXR0cmlidXRlKCAndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgxMDAsIDEwMCkgcm90YXRlKDE4MCknICk7XG4gIH1cbiAgc3ZnLmFwcGVuZCggdGl0bGUsIHBhdGggKTtcbiAgcmV0dXJuIHN2Zztcbn07XG5cbi8vIGdldCBTVkcgcGF0aCBtb3ZtZW1lbnRcbmZ1bmN0aW9uIGdldEFycm93TW92ZW1lbnRzKCBzaGFwZSApIHtcbiAgLy8gdXNlIHNoYXBlIGFzIG1vdmVtZW50IGlmIHN0cmluZ1xuICBpZiAoIHR5cGVvZiBzaGFwZSA9PSAnc3RyaW5nJyApIHJldHVybiBzaGFwZTtcblxuICBsZXQgeyB4MCwgeDEsIHgyLCB4MywgeTEsIHkyIH0gPSBzaGFwZTtcblxuICAvLyBjcmVhdGUgbW92ZW1lbnQgc3RyaW5nXG4gIHJldHVybiBgTSAke3gwfSwgNTBcbiAgICBMICR7eDF9LCAke3kxICsgNTB9XG4gICAgTCAke3gyfSwgJHt5MiArIDUwfVxuICAgIEwgJHt4M30sIDUwXG4gICAgTCAke3gyfSwgJHs1MCAtIHkyfVxuICAgIEwgJHt4MX0sICR7NTAgLSB5MX1cbiAgICBaYDtcbn1cblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cblByZXZOZXh0QnV0dG9uLnByb3RvdHlwZS5lbmFibGUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbn07XG5cblByZXZOZXh0QnV0dG9uLnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoICdkaXNhYmxlZCcsIHRydWUgKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEZsaWNraXR5IHByb3RvdHlwZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5PYmplY3QuYXNzaWduKCBGbGlja2l0eS5kZWZhdWx0cywge1xuICBwcmV2TmV4dEJ1dHRvbnM6IHRydWUsXG4gIGFycm93U2hhcGU6IHtcbiAgICB4MDogMTAsXG4gICAgeDE6IDYwLCB5MTogNTAsXG4gICAgeDI6IDcwLCB5MjogNDAsXG4gICAgeDM6IDMwLFxuICB9LFxufSApO1xuXG5GbGlja2l0eS5jcmVhdGUucHJldk5leHRCdXR0b25zID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMub3B0aW9ucy5wcmV2TmV4dEJ1dHRvbnMgKSByZXR1cm47XG5cbiAgbGV0IHsgcmlnaHRUb0xlZnQsIGFycm93U2hhcGUgfSA9IHRoaXMub3B0aW9ucztcbiAgbGV0IHByZXZEaXJlY3Rpb24gPSByaWdodFRvTGVmdCA/ICdyaWdodCcgOiAnbGVmdCc7XG4gIGxldCBuZXh0RGlyZWN0aW9uID0gcmlnaHRUb0xlZnQgPyAnbGVmdCcgOiAncmlnaHQnO1xuICB0aGlzLnByZXZCdXR0b24gPSBuZXcgUHJldk5leHRCdXR0b24oICdwcmV2aW91cycsIHByZXZEaXJlY3Rpb24sIGFycm93U2hhcGUgKTtcbiAgdGhpcy5uZXh0QnV0dG9uID0gbmV3IFByZXZOZXh0QnV0dG9uKCAnbmV4dCcsIG5leHREaXJlY3Rpb24sIGFycm93U2hhcGUgKTtcbiAgdGhpcy5mb2N1c2FibGVFbGVtcy5wdXNoKCB0aGlzLnByZXZCdXR0b24uZWxlbWVudCApO1xuICB0aGlzLmZvY3VzYWJsZUVsZW1zLnB1c2goIHRoaXMubmV4dEJ1dHRvbi5lbGVtZW50ICk7XG5cbiAgdGhpcy5oYW5kbGVQcmV2QnV0dG9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgdGhpcy51aUNoYW5nZSgpO1xuICAgIHRoaXMucHJldmlvdXMoKTtcbiAgfTtcblxuICB0aGlzLmhhbmRsZU5leHRCdXR0b25DbGljayA9ICgpID0+IHtcbiAgICB0aGlzLnVpQ2hhbmdlKCk7XG4gICAgdGhpcy5uZXh0KCk7XG4gIH07XG5cbiAgdGhpcy5vbiggJ2FjdGl2YXRlJywgdGhpcy5hY3RpdmF0ZVByZXZOZXh0QnV0dG9ucyApO1xuICB0aGlzLm9uKCAnc2VsZWN0JywgdGhpcy51cGRhdGVQcmV2TmV4dEJ1dHRvbnMgKTtcbn07XG5cbmxldCBwcm90byA9IEZsaWNraXR5LnByb3RvdHlwZTtcblxucHJvdG8udXBkYXRlUHJldk5leHRCdXR0b25zID0gZnVuY3Rpb24oKSB7XG4gIGxldCBsYXN0SW5kZXggPSB0aGlzLnNsaWRlcy5sZW5ndGggPyB0aGlzLnNsaWRlcy5sZW5ndGggLSAxIDogMDtcbiAgdGhpcy51cGRhdGVQcmV2TmV4dEJ1dHRvbiggdGhpcy5wcmV2QnV0dG9uLCAwICk7XG4gIHRoaXMudXBkYXRlUHJldk5leHRCdXR0b24oIHRoaXMubmV4dEJ1dHRvbiwgbGFzdEluZGV4ICk7XG59O1xuXG5wcm90by51cGRhdGVQcmV2TmV4dEJ1dHRvbiA9IGZ1bmN0aW9uKCBidXR0b24sIGRpc2FibGVkSW5kZXggKSB7XG4gIC8vIGVuYWJsZSBpcyB3cmFwQXJvdW5kIGFuZCBhdCBsZWFzdCAyIHNsaWRlc1xuICBpZiAoIHRoaXMuaXNXcmFwcGluZyAmJiB0aGlzLnNsaWRlcy5sZW5ndGggPiAxICkge1xuICAgIGJ1dHRvbi5lbmFibGUoKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgaXNFbmFibGVkID0gdGhpcy5zZWxlY3RlZEluZGV4ICE9PSBkaXNhYmxlZEluZGV4O1xuICBidXR0b25bIGlzRW5hYmxlZCA/ICdlbmFibGUnIDogJ2Rpc2FibGUnIF0oKTtcbiAgLy8gaWYgZGlzYWJsaW5nIGJ1dHRvbiB0aGF0IGlzIGZvY3VzZWQsXG4gIC8vIHNoaWZ0IGZvY3VzIHRvIGVsZW1lbnQgdG8gbWFpbnRhaW4ga2V5Ym9hcmQgYWNjZXNzaWJpbGl0eVxuICBsZXQgaXNEaXNhYmxlZEZvY3VzZWQgPSAhaXNFbmFibGVkICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGJ1dHRvbi5lbGVtZW50O1xuICBpZiAoIGlzRGlzYWJsZWRGb2N1c2VkICkgdGhpcy5mb2N1cygpO1xufTtcblxucHJvdG8uYWN0aXZhdGVQcmV2TmV4dEJ1dHRvbnMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wcmV2QnV0dG9uLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgdGhpcy5oYW5kbGVQcmV2QnV0dG9uQ2xpY2sgKTtcbiAgdGhpcy5uZXh0QnV0dG9uLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgdGhpcy5oYW5kbGVOZXh0QnV0dG9uQ2xpY2sgKTtcbiAgdGhpcy5lbGVtZW50LmFwcGVuZCggdGhpcy5wcmV2QnV0dG9uLmVsZW1lbnQsIHRoaXMubmV4dEJ1dHRvbi5lbGVtZW50ICk7XG4gIHRoaXMub24oICdkZWFjdGl2YXRlJywgdGhpcy5kZWFjdGl2YXRlUHJldk5leHRCdXR0b25zICk7XG59O1xuXG5wcm90by5kZWFjdGl2YXRlUHJldk5leHRCdXR0b25zID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucHJldkJ1dHRvbi5lbGVtZW50LnJlbW92ZSgpO1xuICB0aGlzLm5leHRCdXR0b24uZWxlbWVudC5yZW1vdmUoKTtcbiAgdGhpcy5wcmV2QnV0dG9uLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgdGhpcy5oYW5kbGVQcmV2QnV0dG9uQ2xpY2sgKTtcbiAgdGhpcy5uZXh0QnV0dG9uLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgdGhpcy5oYW5kbGVOZXh0QnV0dG9uQ2xpY2sgKTtcbiAgdGhpcy5vZmYoICdkZWFjdGl2YXRlJywgdGhpcy5kZWFjdGl2YXRlUHJldk5leHRCdXR0b25zICk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuRmxpY2tpdHkuUHJldk5leHRCdXR0b24gPSBQcmV2TmV4dEJ1dHRvbjtcblxucmV0dXJuIEZsaWNraXR5O1xuXG59ICkgKTtcbiIsIi8vIGltYWdlc2xvYWRlZFxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgICByZXF1aXJlKCcuL2NvcmUnKSxcbiAgICAgICAgcmVxdWlyZSgnaW1hZ2VzbG9hZGVkJyksXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIGZhY3RvcnkoXG4gICAgICAgIHdpbmRvdy5GbGlja2l0eSxcbiAgICAgICAgd2luZG93LmltYWdlc0xvYWRlZCxcbiAgICApO1xuICB9XG5cbn0oIHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLFxuICAgIGZ1bmN0aW9uIGZhY3RvcnkoIEZsaWNraXR5LCBpbWFnZXNMb2FkZWQgKSB7XG5cbkZsaWNraXR5LmNyZWF0ZS5pbWFnZXNMb2FkZWQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5vbiggJ2FjdGl2YXRlJywgdGhpcy5pbWFnZXNMb2FkZWQgKTtcbn07XG5cbkZsaWNraXR5LnByb3RvdHlwZS5pbWFnZXNMb2FkZWQgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5vcHRpb25zLmltYWdlc0xvYWRlZCApIHJldHVybjtcblxuICBsZXQgb25JbWFnZXNMb2FkZWRQcm9ncmVzcyA9ICggaW5zdGFuY2UsIGltYWdlICkgPT4ge1xuICAgIGxldCBjZWxsID0gdGhpcy5nZXRQYXJlbnRDZWxsKCBpbWFnZS5pbWcgKTtcbiAgICB0aGlzLmNlbGxTaXplQ2hhbmdlKCBjZWxsICYmIGNlbGwuZWxlbWVudCApO1xuICAgIGlmICggIXRoaXMub3B0aW9ucy5mcmVlU2Nyb2xsICkgdGhpcy5wb3NpdGlvblNsaWRlckF0U2VsZWN0ZWQoKTtcbiAgfTtcbiAgaW1hZ2VzTG9hZGVkKCB0aGlzLnNsaWRlciApLm9uKCAncHJvZ3Jlc3MnLCBvbkltYWdlc0xvYWRlZFByb2dyZXNzICk7XG59O1xuXG5yZXR1cm4gRmxpY2tpdHk7XG5cbn0gKSApO1xuIiwiLy8gc2xpZGVcbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LkZsaWNraXR5ID0gd2luZG93LkZsaWNraXR5IHx8IHt9O1xuICAgIHdpbmRvdy5GbGlja2l0eS5TbGlkZSA9IGZhY3RvcnkoKTtcbiAgfVxuXG59KCB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24gZmFjdG9yeSgpIHtcblxuZnVuY3Rpb24gU2xpZGUoIGJlZ2luTWFyZ2luLCBlbmRNYXJnaW4sIGNlbGxBbGlnbiApIHtcbiAgdGhpcy5iZWdpbk1hcmdpbiA9IGJlZ2luTWFyZ2luO1xuICB0aGlzLmVuZE1hcmdpbiA9IGVuZE1hcmdpbjtcbiAgdGhpcy5jZWxsQWxpZ24gPSBjZWxsQWxpZ247XG4gIHRoaXMuY2VsbHMgPSBbXTtcbiAgdGhpcy5vdXRlcldpZHRoID0gMDtcbiAgdGhpcy5oZWlnaHQgPSAwO1xufVxuXG5sZXQgcHJvdG8gPSBTbGlkZS5wcm90b3R5cGU7XG5cbnByb3RvLmFkZENlbGwgPSBmdW5jdGlvbiggY2VsbCApIHtcbiAgdGhpcy5jZWxscy5wdXNoKCBjZWxsICk7XG4gIHRoaXMub3V0ZXJXaWR0aCArPSBjZWxsLnNpemUub3V0ZXJXaWR0aDtcbiAgdGhpcy5oZWlnaHQgPSBNYXRoLm1heCggY2VsbC5zaXplLm91dGVySGVpZ2h0LCB0aGlzLmhlaWdodCApO1xuICAvLyBmaXJzdCBjZWxsIHN0dWZmXG4gIGlmICggdGhpcy5jZWxscy5sZW5ndGggPT09IDEgKSB7XG4gICAgdGhpcy54ID0gY2VsbC54OyAvLyB4IGNvbWVzIGZyb20gZmlyc3QgY2VsbFxuICAgIHRoaXMuZmlyc3RNYXJnaW4gPSBjZWxsLnNpemVbIHRoaXMuYmVnaW5NYXJnaW4gXTtcbiAgfVxufTtcblxucHJvdG8udXBkYXRlVGFyZ2V0ID0gZnVuY3Rpb24oKSB7XG4gIGxldCBsYXN0Q2VsbCA9IHRoaXMuZ2V0TGFzdENlbGwoKTtcbiAgbGV0IGxhc3RNYXJnaW4gPSBsYXN0Q2VsbCA/IGxhc3RDZWxsLnNpemVbIHRoaXMuZW5kTWFyZ2luIF0gOiAwO1xuICBsZXQgc2xpZGVXaWR0aCA9IHRoaXMub3V0ZXJXaWR0aCAtICggdGhpcy5maXJzdE1hcmdpbiArIGxhc3RNYXJnaW4gKTtcbiAgdGhpcy50YXJnZXQgPSB0aGlzLnggKyB0aGlzLmZpcnN0TWFyZ2luICsgc2xpZGVXaWR0aCAqIHRoaXMuY2VsbEFsaWduO1xufTtcblxucHJvdG8uZ2V0TGFzdENlbGwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuY2VsbHNbIHRoaXMuY2VsbHMubGVuZ3RoIC0gMSBdO1xufTtcblxucHJvdG8uc2VsZWN0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY2VsbHMuZm9yRWFjaCggKCBjZWxsICkgPT4gY2VsbC5zZWxlY3QoKSApO1xufTtcblxucHJvdG8udW5zZWxlY3QgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5jZWxscy5mb3JFYWNoKCAoIGNlbGwgKSA9PiBjZWxsLnVuc2VsZWN0KCkgKTtcbn07XG5cbnByb3RvLmdldENlbGxFbGVtZW50cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5jZWxscy5tYXAoICggY2VsbCApID0+IGNlbGwuZWxlbWVudCApO1xufTtcblxucmV0dXJuIFNsaWRlO1xuXG59ICkgKTtcbiIsIi8qIVxuICogRmxpY2tpdHkgdjMuMC4wXG4gKiBUb3VjaCwgcmVzcG9uc2l2ZSwgZmxpY2thYmxlIGNhcm91c2Vsc1xuICpcbiAqIExpY2Vuc2VkIEdQTHYzIGZvciBvcGVuIHNvdXJjZSB1c2VcbiAqIG9yIEZsaWNraXR5IENvbW1lcmNpYWwgTGljZW5zZSBmb3IgY29tbWVyY2lhbCB1c2VcbiAqXG4gKiBodHRwczovL2ZsaWNraXR5Lm1ldGFmaXp6eS5jb1xuICogQ29weXJpZ2h0IDIwMTUtMjAyMiBNZXRhZml6enlcbiAqL1xuXG5pZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gIGNvbnN0IEZsaWNraXR5ID0gcmVxdWlyZSgnLi9jb3JlJyk7XG4gIHJlcXVpcmUoJy4vZHJhZycpO1xuICByZXF1aXJlKCcuL3ByZXYtbmV4dC1idXR0b24nKTtcbiAgcmVxdWlyZSgnLi9wYWdlLWRvdHMnKTtcbiAgcmVxdWlyZSgnLi9wbGF5ZXInKTtcbiAgcmVxdWlyZSgnLi9hZGQtcmVtb3ZlLWNlbGwnKTtcbiAgcmVxdWlyZSgnLi9sYXp5bG9hZCcpO1xuICByZXF1aXJlKCcuL2ltYWdlc2xvYWRlZCcpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gRmxpY2tpdHk7XG59XG4iLCIvLyBsYXp5bG9hZFxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgICByZXF1aXJlKCcuL2NvcmUnKSxcbiAgICAgICAgcmVxdWlyZSgnZml6enktdWktdXRpbHMnKSxcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgZmFjdG9yeShcbiAgICAgICAgd2luZG93LkZsaWNraXR5LFxuICAgICAgICB3aW5kb3cuZml6enlVSVV0aWxzLFxuICAgICk7XG4gIH1cblxufSggdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uIGZhY3RvcnkoIEZsaWNraXR5LCB1dGlscyApIHtcblxuY29uc3QgbGF6eUF0dHIgPSAnZGF0YS1mbGlja2l0eS1sYXp5bG9hZCc7XG5jb25zdCBsYXp5U3JjQXR0ciA9IGAke2xhenlBdHRyfS1zcmNgO1xuY29uc3QgbGF6eVNyY3NldEF0dHIgPSBgJHtsYXp5QXR0cn0tc3Jjc2V0YDtcbmNvbnN0IGltZ1NlbGVjdG9yID0gYGltZ1ske2xhenlBdHRyfV0sIGltZ1ske2xhenlTcmNBdHRyfV0sIGAgK1xuICBgaW1nWyR7bGF6eVNyY3NldEF0dHJ9XSwgc291cmNlWyR7bGF6eVNyY3NldEF0dHJ9XWA7XG5cbkZsaWNraXR5LmNyZWF0ZS5sYXp5TG9hZCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLm9uKCAnc2VsZWN0JywgdGhpcy5sYXp5TG9hZCApO1xuXG4gIHRoaXMuaGFuZGxlTGF6eUxvYWRDb21wbGV0ZSA9IHRoaXMub25MYXp5TG9hZENvbXBsZXRlLmJpbmQoIHRoaXMgKTtcbn07XG5cbmxldCBwcm90byA9IEZsaWNraXR5LnByb3RvdHlwZTtcblxucHJvdG8ubGF6eUxvYWQgPSBmdW5jdGlvbigpIHtcbiAgbGV0IHsgbGF6eUxvYWQgfSA9IHRoaXMub3B0aW9ucztcbiAgaWYgKCAhbGF6eUxvYWQgKSByZXR1cm47XG5cbiAgLy8gZ2V0IGFkamFjZW50IGNlbGxzLCB1c2UgbGF6eUxvYWQgb3B0aW9uIGZvciBhZGphY2VudCBjb3VudFxuICBsZXQgYWRqQ291bnQgPSB0eXBlb2YgbGF6eUxvYWQgPT0gJ251bWJlcicgPyBsYXp5TG9hZCA6IDA7XG4gIC8vIGxhenkgbG9hZCBpbWFnZXNcbiAgdGhpcy5nZXRBZGphY2VudENlbGxFbGVtZW50cyggYWRqQ291bnQgKVxuICAgIC5tYXAoIGdldENlbGxMYXp5SW1hZ2VzIClcbiAgICAuZmxhdCgpXG4gICAgLmZvckVhY2goICggaW1nICkgPT4gbmV3IExhenlMb2FkZXIoIGltZywgdGhpcy5oYW5kbGVMYXp5TG9hZENvbXBsZXRlICkgKTtcbn07XG5cbmZ1bmN0aW9uIGdldENlbGxMYXp5SW1hZ2VzKCBjZWxsRWxlbSApIHtcbiAgLy8gY2hlY2sgaWYgY2VsbCBlbGVtZW50IGlzIGxhenkgaW1hZ2VcbiAgaWYgKCBjZWxsRWxlbS5tYXRjaGVzKCdpbWcnKSApIHtcbiAgICBsZXQgY2VsbEF0dHIgPSBjZWxsRWxlbS5nZXRBdHRyaWJ1dGUoIGxhenlBdHRyICk7XG4gICAgbGV0IGNlbGxTcmNBdHRyID0gY2VsbEVsZW0uZ2V0QXR0cmlidXRlKCBsYXp5U3JjQXR0ciApO1xuICAgIGxldCBjZWxsU3Jjc2V0QXR0ciA9IGNlbGxFbGVtLmdldEF0dHJpYnV0ZSggbGF6eVNyY3NldEF0dHIgKTtcbiAgICBpZiAoIGNlbGxBdHRyIHx8IGNlbGxTcmNBdHRyIHx8IGNlbGxTcmNzZXRBdHRyICkge1xuICAgICAgcmV0dXJuIGNlbGxFbGVtO1xuICAgIH1cbiAgfVxuICAvLyBzZWxlY3QgbGF6eSBpbWFnZXMgaW4gY2VsbFxuICByZXR1cm4gWyAuLi5jZWxsRWxlbS5xdWVyeVNlbGVjdG9yQWxsKCBpbWdTZWxlY3RvciApIF07XG59XG5cbnByb3RvLm9uTGF6eUxvYWRDb21wbGV0ZSA9IGZ1bmN0aW9uKCBpbWcsIGV2ZW50ICkge1xuICBsZXQgY2VsbCA9IHRoaXMuZ2V0UGFyZW50Q2VsbCggaW1nICk7XG4gIGxldCBjZWxsRWxlbSA9IGNlbGwgJiYgY2VsbC5lbGVtZW50O1xuICB0aGlzLmNlbGxTaXplQ2hhbmdlKCBjZWxsRWxlbSApO1xuXG4gIHRoaXMuZGlzcGF0Y2hFdmVudCggJ2xhenlMb2FkJywgZXZlbnQsIGNlbGxFbGVtICk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBMYXp5TG9hZGVyIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8qKlxuICogY2xhc3MgdG8gaGFuZGxlIGxvYWRpbmcgaW1hZ2VzXG4gKiBAcGFyYW0ge0ltYWdlfSBpbWcgLSBJbWFnZSBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvbkNvbXBsZXRlIC0gY2FsbGJhY2sgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gTGF6eUxvYWRlciggaW1nLCBvbkNvbXBsZXRlICkge1xuICB0aGlzLmltZyA9IGltZztcbiAgdGhpcy5vbkNvbXBsZXRlID0gb25Db21wbGV0ZTtcbiAgdGhpcy5sb2FkKCk7XG59XG5cbkxhenlMb2FkZXIucHJvdG90eXBlLmhhbmRsZUV2ZW50ID0gdXRpbHMuaGFuZGxlRXZlbnQ7XG5cbkxhenlMb2FkZXIucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5pbWcuYWRkRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCB0aGlzICk7XG4gIHRoaXMuaW1nLmFkZEV2ZW50TGlzdGVuZXIoICdlcnJvcicsIHRoaXMgKTtcbiAgLy8gZ2V0IHNyYyAmIHNyY3NldFxuICBsZXQgc3JjID0gdGhpcy5pbWcuZ2V0QXR0cmlidXRlKCBsYXp5QXR0ciApIHx8XG4gICAgdGhpcy5pbWcuZ2V0QXR0cmlidXRlKCBsYXp5U3JjQXR0ciApO1xuICBsZXQgc3Jjc2V0ID0gdGhpcy5pbWcuZ2V0QXR0cmlidXRlKCBsYXp5U3Jjc2V0QXR0ciApO1xuICAvLyBzZXQgc3JjICYgc2Vyc2V0XG4gIHRoaXMuaW1nLnNyYyA9IHNyYztcbiAgaWYgKCBzcmNzZXQgKSB0aGlzLmltZy5zZXRBdHRyaWJ1dGUoICdzcmNzZXQnLCBzcmNzZXQgKTtcbiAgLy8gcmVtb3ZlIGF0dHJcbiAgdGhpcy5pbWcucmVtb3ZlQXR0cmlidXRlKCBsYXp5QXR0ciApO1xuICB0aGlzLmltZy5yZW1vdmVBdHRyaWJ1dGUoIGxhenlTcmNBdHRyICk7XG4gIHRoaXMuaW1nLnJlbW92ZUF0dHJpYnV0ZSggbGF6eVNyY3NldEF0dHIgKTtcbn07XG5cbkxhenlMb2FkZXIucHJvdG90eXBlLm9ubG9hZCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy5jb21wbGV0ZSggZXZlbnQsICdmbGlja2l0eS1sYXp5bG9hZGVkJyApO1xufTtcblxuTGF6eUxvYWRlci5wcm90b3R5cGUub25lcnJvciA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy5jb21wbGV0ZSggZXZlbnQsICdmbGlja2l0eS1sYXp5ZXJyb3InICk7XG59O1xuXG5MYXp5TG9hZGVyLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uKCBldmVudCwgY2xhc3NOYW1lICkge1xuICAvLyB1bmJpbmQgZXZlbnRzXG4gIHRoaXMuaW1nLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLmltZy5yZW1vdmVFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG4gIGxldCBtZWRpYUVsZW0gPSB0aGlzLmltZy5wYXJlbnROb2RlLm1hdGNoZXMoJ3BpY3R1cmUnKSA/IHRoaXMuaW1nLnBhcmVudE5vZGUgOiB0aGlzLmltZztcbiAgbWVkaWFFbGVtLmNsYXNzTGlzdC5hZGQoIGNsYXNzTmFtZSApO1xuXG4gIHRoaXMub25Db21wbGV0ZSggdGhpcy5pbWcsIGV2ZW50ICk7XG59O1xuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxuRmxpY2tpdHkuTGF6eUxvYWRlciA9IExhenlMb2FkZXI7XG5cbnJldHVybiBGbGlja2l0eTtcblxufSApICk7XG4iLCIvKiFcbiAqIGltYWdlc0xvYWRlZCB2NS4wLjBcbiAqIEphdmFTY3JpcHQgaXMgYWxsIGxpa2UgXCJZb3UgaW1hZ2VzIGFyZSBkb25lIHlldCBvciB3aGF0P1wiXG4gKiBNSVQgTGljZW5zZVxuICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSggd2luZG93LCByZXF1aXJlKCdldi1lbWl0dGVyJykgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5pbWFnZXNMb2FkZWQgPSBmYWN0b3J5KCB3aW5kb3csIHdpbmRvdy5FdkVtaXR0ZXIgKTtcbiAgfVxuXG59ICkoIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcyxcbiAgICBmdW5jdGlvbiBmYWN0b3J5KCB3aW5kb3csIEV2RW1pdHRlciApIHtcblxubGV0ICQgPSB3aW5kb3cualF1ZXJ5O1xubGV0IGNvbnNvbGUgPSB3aW5kb3cuY29uc29sZTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaGVscGVycyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vLyB0dXJuIGVsZW1lbnQgb3Igbm9kZUxpc3QgaW50byBhbiBhcnJheVxuZnVuY3Rpb24gbWFrZUFycmF5KCBvYmogKSB7XG4gIC8vIHVzZSBvYmplY3QgaWYgYWxyZWFkeSBhbiBhcnJheVxuICBpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkgcmV0dXJuIG9iajtcblxuICBsZXQgaXNBcnJheUxpa2UgPSB0eXBlb2Ygb2JqID09ICdvYmplY3QnICYmIHR5cGVvZiBvYmoubGVuZ3RoID09ICdudW1iZXInO1xuICAvLyBjb252ZXJ0IG5vZGVMaXN0IHRvIGFycmF5XG4gIGlmICggaXNBcnJheUxpa2UgKSByZXR1cm4gWyAuLi5vYmogXTtcblxuICAvLyBhcnJheSBvZiBzaW5nbGUgaW5kZXhcbiAgcmV0dXJuIFsgb2JqIF07XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGltYWdlc0xvYWRlZCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vKipcbiAqIEBwYXJhbSB7W0FycmF5LCBFbGVtZW50LCBOb2RlTGlzdCwgU3RyaW5nXX0gZWxlbVxuICogQHBhcmFtIHtbT2JqZWN0LCBGdW5jdGlvbl19IG9wdGlvbnMgLSBpZiBmdW5jdGlvbiwgdXNlIGFzIGNhbGxiYWNrXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvbkFsd2F5cyAtIGNhbGxiYWNrIGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7SW1hZ2VzTG9hZGVkfVxuICovXG5mdW5jdGlvbiBJbWFnZXNMb2FkZWQoIGVsZW0sIG9wdGlvbnMsIG9uQWx3YXlzICkge1xuICAvLyBjb2VyY2UgSW1hZ2VzTG9hZGVkKCkgd2l0aG91dCBuZXcsIHRvIGJlIG5ldyBJbWFnZXNMb2FkZWQoKVxuICBpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBJbWFnZXNMb2FkZWQgKSApIHtcbiAgICByZXR1cm4gbmV3IEltYWdlc0xvYWRlZCggZWxlbSwgb3B0aW9ucywgb25BbHdheXMgKTtcbiAgfVxuICAvLyB1c2UgZWxlbSBhcyBzZWxlY3RvciBzdHJpbmdcbiAgbGV0IHF1ZXJ5RWxlbSA9IGVsZW07XG4gIGlmICggdHlwZW9mIGVsZW0gPT0gJ3N0cmluZycgKSB7XG4gICAgcXVlcnlFbGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggZWxlbSApO1xuICB9XG4gIC8vIGJhaWwgaWYgYmFkIGVsZW1lbnRcbiAgaWYgKCAhcXVlcnlFbGVtICkge1xuICAgIGNvbnNvbGUuZXJyb3IoYEJhZCBlbGVtZW50IGZvciBpbWFnZXNMb2FkZWQgJHtxdWVyeUVsZW0gfHwgZWxlbX1gKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLmVsZW1lbnRzID0gbWFrZUFycmF5KCBxdWVyeUVsZW0gKTtcbiAgdGhpcy5vcHRpb25zID0ge307XG4gIC8vIHNoaWZ0IGFyZ3VtZW50cyBpZiBubyBvcHRpb25zIHNldFxuICBpZiAoIHR5cGVvZiBvcHRpb25zID09ICdmdW5jdGlvbicgKSB7XG4gICAgb25BbHdheXMgPSBvcHRpb25zO1xuICB9IGVsc2Uge1xuICAgIE9iamVjdC5hc3NpZ24oIHRoaXMub3B0aW9ucywgb3B0aW9ucyApO1xuICB9XG5cbiAgaWYgKCBvbkFsd2F5cyApIHRoaXMub24oICdhbHdheXMnLCBvbkFsd2F5cyApO1xuXG4gIHRoaXMuZ2V0SW1hZ2VzKCk7XG4gIC8vIGFkZCBqUXVlcnkgRGVmZXJyZWQgb2JqZWN0XG4gIGlmICggJCApIHRoaXMuanFEZWZlcnJlZCA9IG5ldyAkLkRlZmVycmVkKCk7XG5cbiAgLy8gSEFDSyBjaGVjayBhc3luYyB0byBhbGxvdyB0aW1lIHRvIGJpbmQgbGlzdGVuZXJzXG4gIHNldFRpbWVvdXQoIHRoaXMuY2hlY2suYmluZCggdGhpcyApICk7XG59XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBFdkVtaXR0ZXIucHJvdG90eXBlICk7XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuZ2V0SW1hZ2VzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaW1hZ2VzID0gW107XG5cbiAgLy8gZmlsdGVyICYgZmluZCBpdGVtcyBpZiB3ZSBoYXZlIGFuIGl0ZW0gc2VsZWN0b3JcbiAgdGhpcy5lbGVtZW50cy5mb3JFYWNoKCB0aGlzLmFkZEVsZW1lbnRJbWFnZXMsIHRoaXMgKTtcbn07XG5cbmNvbnN0IGVsZW1lbnROb2RlVHlwZXMgPSBbIDEsIDksIDExIF07XG5cbi8qKlxuICogQHBhcmFtIHtOb2RlfSBlbGVtXG4gKi9cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuYWRkRWxlbWVudEltYWdlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICAvLyBmaWx0ZXIgc2libGluZ3NcbiAgaWYgKCBlbGVtLm5vZGVOYW1lID09PSAnSU1HJyApIHtcbiAgICB0aGlzLmFkZEltYWdlKCBlbGVtICk7XG4gIH1cbiAgLy8gZ2V0IGJhY2tncm91bmQgaW1hZ2Ugb24gZWxlbWVudFxuICBpZiAoIHRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kID09PSB0cnVlICkge1xuICAgIHRoaXMuYWRkRWxlbWVudEJhY2tncm91bmRJbWFnZXMoIGVsZW0gKTtcbiAgfVxuXG4gIC8vIGZpbmQgY2hpbGRyZW5cbiAgLy8gbm8gbm9uLWVsZW1lbnQgbm9kZXMsICMxNDNcbiAgbGV0IHsgbm9kZVR5cGUgfSA9IGVsZW07XG4gIGlmICggIW5vZGVUeXBlIHx8ICFlbGVtZW50Tm9kZVR5cGVzLmluY2x1ZGVzKCBub2RlVHlwZSApICkgcmV0dXJuO1xuXG4gIGxldCBjaGlsZEltZ3MgPSBlbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoJ2ltZycpO1xuICAvLyBjb25jYXQgY2hpbGRFbGVtcyB0byBmaWx0ZXJGb3VuZCBhcnJheVxuICBmb3IgKCBsZXQgaW1nIG9mIGNoaWxkSW1ncyApIHtcbiAgICB0aGlzLmFkZEltYWdlKCBpbWcgKTtcbiAgfVxuXG4gIC8vIGdldCBjaGlsZCBiYWNrZ3JvdW5kIGltYWdlc1xuICBpZiAoIHR5cGVvZiB0aGlzLm9wdGlvbnMuYmFja2dyb3VuZCA9PSAnc3RyaW5nJyApIHtcbiAgICBsZXQgY2hpbGRyZW4gPSBlbGVtLnF1ZXJ5U2VsZWN0b3JBbGwoIHRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kICk7XG4gICAgZm9yICggbGV0IGNoaWxkIG9mIGNoaWxkcmVuICkge1xuICAgICAgdGhpcy5hZGRFbGVtZW50QmFja2dyb3VuZEltYWdlcyggY2hpbGQgKTtcbiAgICB9XG4gIH1cbn07XG5cbmNvbnN0IHJlVVJMID0gL3VybFxcKChbJ1wiXSk/KC4qPylcXDFcXCkvZ2k7XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuYWRkRWxlbWVudEJhY2tncm91bmRJbWFnZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgbGV0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuICAvLyBGaXJlZm94IHJldHVybnMgbnVsbCBpZiBpbiBhIGhpZGRlbiBpZnJhbWUgaHR0cHM6Ly9idWd6aWwubGEvNTQ4Mzk3XG4gIGlmICggIXN0eWxlICkgcmV0dXJuO1xuXG4gIC8vIGdldCB1cmwgaW5zaWRlIHVybChcIi4uLlwiKVxuICBsZXQgbWF0Y2hlcyA9IHJlVVJMLmV4ZWMoIHN0eWxlLmJhY2tncm91bmRJbWFnZSApO1xuICB3aGlsZSAoIG1hdGNoZXMgIT09IG51bGwgKSB7XG4gICAgbGV0IHVybCA9IG1hdGNoZXMgJiYgbWF0Y2hlc1syXTtcbiAgICBpZiAoIHVybCApIHtcbiAgICAgIHRoaXMuYWRkQmFja2dyb3VuZCggdXJsLCBlbGVtICk7XG4gICAgfVxuICAgIG1hdGNoZXMgPSByZVVSTC5leGVjKCBzdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge0ltYWdlfSBpbWdcbiAqL1xuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5hZGRJbWFnZSA9IGZ1bmN0aW9uKCBpbWcgKSB7XG4gIGxldCBsb2FkaW5nSW1hZ2UgPSBuZXcgTG9hZGluZ0ltYWdlKCBpbWcgKTtcbiAgdGhpcy5pbWFnZXMucHVzaCggbG9hZGluZ0ltYWdlICk7XG59O1xuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLmFkZEJhY2tncm91bmQgPSBmdW5jdGlvbiggdXJsLCBlbGVtICkge1xuICBsZXQgYmFja2dyb3VuZCA9IG5ldyBCYWNrZ3JvdW5kKCB1cmwsIGVsZW0gKTtcbiAgdGhpcy5pbWFnZXMucHVzaCggYmFja2dyb3VuZCApO1xufTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnByb2dyZXNzZWRDb3VudCA9IDA7XG4gIHRoaXMuaGFzQW55QnJva2VuID0gZmFsc2U7XG4gIC8vIGNvbXBsZXRlIGlmIG5vIGltYWdlc1xuICBpZiAoICF0aGlzLmltYWdlcy5sZW5ndGggKSB7XG4gICAgdGhpcy5jb21wbGV0ZSgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLXN0eWxlICovXG4gIGxldCBvblByb2dyZXNzID0gKCBpbWFnZSwgZWxlbSwgbWVzc2FnZSApID0+IHtcbiAgICAvLyBIQUNLIC0gQ2hyb21lIHRyaWdnZXJzIGV2ZW50IGJlZm9yZSBvYmplY3QgcHJvcGVydGllcyBoYXZlIGNoYW5nZWQuICM4M1xuICAgIHNldFRpbWVvdXQoICgpID0+IHtcbiAgICAgIHRoaXMucHJvZ3Jlc3MoIGltYWdlLCBlbGVtLCBtZXNzYWdlICk7XG4gICAgfSApO1xuICB9O1xuXG4gIHRoaXMuaW1hZ2VzLmZvckVhY2goIGZ1bmN0aW9uKCBsb2FkaW5nSW1hZ2UgKSB7XG4gICAgbG9hZGluZ0ltYWdlLm9uY2UoICdwcm9ncmVzcycsIG9uUHJvZ3Jlc3MgKTtcbiAgICBsb2FkaW5nSW1hZ2UuY2hlY2soKTtcbiAgfSApO1xufTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5wcm9ncmVzcyA9IGZ1bmN0aW9uKCBpbWFnZSwgZWxlbSwgbWVzc2FnZSApIHtcbiAgdGhpcy5wcm9ncmVzc2VkQ291bnQrKztcbiAgdGhpcy5oYXNBbnlCcm9rZW4gPSB0aGlzLmhhc0FueUJyb2tlbiB8fCAhaW1hZ2UuaXNMb2FkZWQ7XG4gIC8vIHByb2dyZXNzIGV2ZW50XG4gIHRoaXMuZW1pdEV2ZW50KCAncHJvZ3Jlc3MnLCBbIHRoaXMsIGltYWdlLCBlbGVtIF0gKTtcbiAgaWYgKCB0aGlzLmpxRGVmZXJyZWQgJiYgdGhpcy5qcURlZmVycmVkLm5vdGlmeSApIHtcbiAgICB0aGlzLmpxRGVmZXJyZWQubm90aWZ5KCB0aGlzLCBpbWFnZSApO1xuICB9XG4gIC8vIGNoZWNrIGlmIGNvbXBsZXRlZFxuICBpZiAoIHRoaXMucHJvZ3Jlc3NlZENvdW50ID09PSB0aGlzLmltYWdlcy5sZW5ndGggKSB7XG4gICAgdGhpcy5jb21wbGV0ZSgpO1xuICB9XG5cbiAgaWYgKCB0aGlzLm9wdGlvbnMuZGVidWcgJiYgY29uc29sZSApIHtcbiAgICBjb25zb2xlLmxvZyggYHByb2dyZXNzOiAke21lc3NhZ2V9YCwgaW1hZ2UsIGVsZW0gKTtcbiAgfVxufTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICBsZXQgZXZlbnROYW1lID0gdGhpcy5oYXNBbnlCcm9rZW4gPyAnZmFpbCcgOiAnZG9uZSc7XG4gIHRoaXMuaXNDb21wbGV0ZSA9IHRydWU7XG4gIHRoaXMuZW1pdEV2ZW50KCBldmVudE5hbWUsIFsgdGhpcyBdICk7XG4gIHRoaXMuZW1pdEV2ZW50KCAnYWx3YXlzJywgWyB0aGlzIF0gKTtcbiAgaWYgKCB0aGlzLmpxRGVmZXJyZWQgKSB7XG4gICAgbGV0IGpxTWV0aG9kID0gdGhpcy5oYXNBbnlCcm9rZW4gPyAncmVqZWN0JyA6ICdyZXNvbHZlJztcbiAgICB0aGlzLmpxRGVmZXJyZWRbIGpxTWV0aG9kIF0oIHRoaXMgKTtcbiAgfVxufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmZ1bmN0aW9uIExvYWRpbmdJbWFnZSggaW1nICkge1xuICB0aGlzLmltZyA9IGltZztcbn1cblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEV2RW1pdHRlci5wcm90b3R5cGUgKTtcblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uKCkge1xuICAvLyBJZiBjb21wbGV0ZSBpcyB0cnVlIGFuZCBicm93c2VyIHN1cHBvcnRzIG5hdHVyYWwgc2l6ZXMsXG4gIC8vIHRyeSB0byBjaGVjayBmb3IgaW1hZ2Ugc3RhdHVzIG1hbnVhbGx5LlxuICBsZXQgaXNDb21wbGV0ZSA9IHRoaXMuZ2V0SXNJbWFnZUNvbXBsZXRlKCk7XG4gIGlmICggaXNDb21wbGV0ZSApIHtcbiAgICAvLyByZXBvcnQgYmFzZWQgb24gbmF0dXJhbFdpZHRoXG4gICAgdGhpcy5jb25maXJtKCB0aGlzLmltZy5uYXR1cmFsV2lkdGggIT09IDAsICduYXR1cmFsV2lkdGgnICk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gSWYgbm9uZSBvZiB0aGUgY2hlY2tzIGFib3ZlIG1hdGNoZWQsIHNpbXVsYXRlIGxvYWRpbmcgb24gZGV0YWNoZWQgZWxlbWVudC5cbiAgdGhpcy5wcm94eUltYWdlID0gbmV3IEltYWdlKCk7XG4gIC8vIGFkZCBjcm9zc09yaWdpbiBhdHRyaWJ1dGUuICMyMDRcbiAgaWYgKCB0aGlzLmltZy5jcm9zc09yaWdpbiApIHtcbiAgICB0aGlzLnByb3h5SW1hZ2UuY3Jvc3NPcmlnaW4gPSB0aGlzLmltZy5jcm9zc09yaWdpbjtcbiAgfVxuICB0aGlzLnByb3h5SW1hZ2UuYWRkRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCB0aGlzICk7XG4gIHRoaXMucHJveHlJbWFnZS5hZGRFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG4gIC8vIGJpbmQgdG8gaW1hZ2UgYXMgd2VsbCBmb3IgRmlyZWZveC4gIzE5MVxuICB0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5pbWcuYWRkRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xuICB0aGlzLnByb3h5SW1hZ2Uuc3JjID0gdGhpcy5pbWcuY3VycmVudFNyYyB8fCB0aGlzLmltZy5zcmM7XG59O1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLmdldElzSW1hZ2VDb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICAvLyBjaGVjayBmb3Igbm9uLXplcm8sIG5vbi11bmRlZmluZWQgbmF0dXJhbFdpZHRoXG4gIC8vIGZpeGVzIFNhZmFyaStJbmZpbml0ZVNjcm9sbCtNYXNvbnJ5IGJ1ZyBpbmZpbml0ZS1zY3JvbGwjNjcxXG4gIHJldHVybiB0aGlzLmltZy5jb21wbGV0ZSAmJiB0aGlzLmltZy5uYXR1cmFsV2lkdGg7XG59O1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLmNvbmZpcm0gPSBmdW5jdGlvbiggaXNMb2FkZWQsIG1lc3NhZ2UgKSB7XG4gIHRoaXMuaXNMb2FkZWQgPSBpc0xvYWRlZDtcbiAgbGV0IHsgcGFyZW50Tm9kZSB9ID0gdGhpcy5pbWc7XG4gIC8vIGVtaXQgcHJvZ3Jlc3Mgd2l0aCBwYXJlbnQgPHBpY3R1cmU+IG9yIHNlbGYgPGltZz5cbiAgbGV0IGVsZW0gPSBwYXJlbnROb2RlLm5vZGVOYW1lID09PSAnUElDVFVSRScgPyBwYXJlbnROb2RlIDogdGhpcy5pbWc7XG4gIHRoaXMuZW1pdEV2ZW50KCAncHJvZ3Jlc3MnLCBbIHRoaXMsIGVsZW0sIG1lc3NhZ2UgXSApO1xufTtcblxuLy8gLS0tLS0gZXZlbnRzIC0tLS0tIC8vXG5cbi8vIHRyaWdnZXIgc3BlY2lmaWVkIGhhbmRsZXIgZm9yIGV2ZW50IHR5cGVcbkxvYWRpbmdJbWFnZS5wcm90b3R5cGUuaGFuZGxlRXZlbnQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIGxldCBtZXRob2QgPSAnb24nICsgZXZlbnQudHlwZTtcbiAgaWYgKCB0aGlzWyBtZXRob2QgXSApIHtcbiAgICB0aGlzWyBtZXRob2QgXSggZXZlbnQgKTtcbiAgfVxufTtcblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5jb25maXJtKCB0cnVlLCAnb25sb2FkJyApO1xuICB0aGlzLnVuYmluZEV2ZW50cygpO1xufTtcblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY29uZmlybSggZmFsc2UsICdvbmVycm9yJyApO1xuICB0aGlzLnVuYmluZEV2ZW50cygpO1xufTtcblxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS51bmJpbmRFdmVudHMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wcm94eUltYWdlLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLnByb3h5SW1hZ2UucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xuICB0aGlzLmltZy5yZW1vdmVFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5pbWcucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gQmFja2dyb3VuZCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5mdW5jdGlvbiBCYWNrZ3JvdW5kKCB1cmwsIGVsZW1lbnQgKSB7XG4gIHRoaXMudXJsID0gdXJsO1xuICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICB0aGlzLmltZyA9IG5ldyBJbWFnZSgpO1xufVxuXG4vLyBpbmhlcml0IExvYWRpbmdJbWFnZSBwcm90b3R5cGVcbkJhY2tncm91bmQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTG9hZGluZ0ltYWdlLnByb3RvdHlwZSApO1xuXG5CYWNrZ3JvdW5kLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5pbWcuYWRkRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xuICB0aGlzLmltZy5zcmMgPSB0aGlzLnVybDtcbiAgLy8gY2hlY2sgaWYgaW1hZ2UgaXMgYWxyZWFkeSBjb21wbGV0ZVxuICBsZXQgaXNDb21wbGV0ZSA9IHRoaXMuZ2V0SXNJbWFnZUNvbXBsZXRlKCk7XG4gIGlmICggaXNDb21wbGV0ZSApIHtcbiAgICB0aGlzLmNvbmZpcm0oIHRoaXMuaW1nLm5hdHVyYWxXaWR0aCAhPT0gMCwgJ25hdHVyYWxXaWR0aCcgKTtcbiAgICB0aGlzLnVuYmluZEV2ZW50cygpO1xuICB9XG59O1xuXG5CYWNrZ3JvdW5kLnByb3RvdHlwZS51bmJpbmRFdmVudHMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5pbWcucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCB0aGlzICk7XG4gIHRoaXMuaW1nLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdlcnJvcicsIHRoaXMgKTtcbn07XG5cbkJhY2tncm91bmQucHJvdG90eXBlLmNvbmZpcm0gPSBmdW5jdGlvbiggaXNMb2FkZWQsIG1lc3NhZ2UgKSB7XG4gIHRoaXMuaXNMb2FkZWQgPSBpc0xvYWRlZDtcbiAgdGhpcy5lbWl0RXZlbnQoICdwcm9ncmVzcycsIFsgdGhpcywgdGhpcy5lbGVtZW50LCBtZXNzYWdlIF0gKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGpRdWVyeSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5JbWFnZXNMb2FkZWQubWFrZUpRdWVyeVBsdWdpbiA9IGZ1bmN0aW9uKCBqUXVlcnkgKSB7XG4gIGpRdWVyeSA9IGpRdWVyeSB8fCB3aW5kb3cualF1ZXJ5O1xuICBpZiAoICFqUXVlcnkgKSByZXR1cm47XG5cbiAgLy8gc2V0IGxvY2FsIHZhcmlhYmxlXG4gICQgPSBqUXVlcnk7XG4gIC8vICQoKS5pbWFnZXNMb2FkZWQoKVxuICAkLmZuLmltYWdlc0xvYWRlZCA9IGZ1bmN0aW9uKCBvcHRpb25zLCBvbkFsd2F5cyApIHtcbiAgICBsZXQgaW5zdGFuY2UgPSBuZXcgSW1hZ2VzTG9hZGVkKCB0aGlzLCBvcHRpb25zLCBvbkFsd2F5cyApO1xuICAgIHJldHVybiBpbnN0YW5jZS5qcURlZmVycmVkLnByb21pc2UoICQoIHRoaXMgKSApO1xuICB9O1xufTtcbi8vIHRyeSBtYWtpbmcgcGx1Z2luXG5JbWFnZXNMb2FkZWQubWFrZUpRdWVyeVBsdWdpbigpO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxucmV0dXJuIEltYWdlc0xvYWRlZDtcblxufSApO1xuIiwiLy8gcGFnZSBkb3RzXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICAgIHJlcXVpcmUoJy4vY29yZScpLFxuICAgICAgICByZXF1aXJlKCdmaXp6eS11aS11dGlscycpLFxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICBmYWN0b3J5KFxuICAgICAgICB3aW5kb3cuRmxpY2tpdHksXG4gICAgICAgIHdpbmRvdy5maXp6eVVJVXRpbHMsXG4gICAgKTtcbiAgfVxuXG59KCB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24gZmFjdG9yeSggRmxpY2tpdHksIHV0aWxzICkge1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBQYWdlRG90cyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5mdW5jdGlvbiBQYWdlRG90cygpIHtcbiAgLy8gY3JlYXRlIGhvbGRlciBlbGVtZW50XG4gIHRoaXMuaG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHRoaXMuaG9sZGVyLmNsYXNzTmFtZSA9ICdmbGlja2l0eS1wYWdlLWRvdHMnO1xuICAvLyBjcmVhdGUgZG90cywgYXJyYXkgb2YgZWxlbWVudHNcbiAgdGhpcy5kb3RzID0gW107XG59XG5cblBhZ2VEb3RzLnByb3RvdHlwZS5zZXREb3RzID0gZnVuY3Rpb24oIHNsaWRlc0xlbmd0aCApIHtcbiAgLy8gZ2V0IGRpZmZlcmVuY2UgYmV0d2VlbiBudW1iZXIgb2Ygc2xpZGVzIGFuZCBudW1iZXIgb2YgZG90c1xuICBsZXQgZGVsdGEgPSBzbGlkZXNMZW5ndGggLSB0aGlzLmRvdHMubGVuZ3RoO1xuICBpZiAoIGRlbHRhID4gMCApIHtcbiAgICB0aGlzLmFkZERvdHMoIGRlbHRhICk7XG4gIH0gZWxzZSBpZiAoIGRlbHRhIDwgMCApIHtcbiAgICB0aGlzLnJlbW92ZURvdHMoIC1kZWx0YSApO1xuICB9XG59O1xuXG5QYWdlRG90cy5wcm90b3R5cGUuYWRkRG90cyA9IGZ1bmN0aW9uKCBjb3VudCApIHtcbiAgbGV0IG5ld0RvdHMgPSBuZXcgQXJyYXkoIGNvdW50ICkuZmlsbCgpXG4gICAgLm1hcCggKCBpdGVtLCBpICkgPT4ge1xuICAgICAgbGV0IGRvdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgZG90LnNldEF0dHJpYnV0ZSggJ3R5cGUnLCAnYnV0dG9uJyApO1xuICAgICAgbGV0IG51bSA9IGkgKyAxICsgdGhpcy5kb3RzLmxlbmd0aDtcbiAgICAgIGRvdC5jbGFzc05hbWUgPSAnZmxpY2tpdHktcGFnZS1kb3QnO1xuICAgICAgZG90LnRleHRDb250ZW50ID0gYFZpZXcgc2xpZGUgJHtudW19YDtcbiAgICAgIHJldHVybiBkb3Q7XG4gICAgfSApO1xuXG4gIHRoaXMuaG9sZGVyLmFwcGVuZCggLi4ubmV3RG90cyApO1xuICB0aGlzLmRvdHMgPSB0aGlzLmRvdHMuY29uY2F0KCBuZXdEb3RzICk7XG59O1xuXG5QYWdlRG90cy5wcm90b3R5cGUucmVtb3ZlRG90cyA9IGZ1bmN0aW9uKCBjb3VudCApIHtcbiAgLy8gcmVtb3ZlIGZyb20gdGhpcy5kb3RzIGNvbGxlY3Rpb25cbiAgbGV0IHJlbW92ZURvdHMgPSB0aGlzLmRvdHMuc3BsaWNlKCB0aGlzLmRvdHMubGVuZ3RoIC0gY291bnQsIGNvdW50ICk7XG4gIC8vIHJlbW92ZSBmcm9tIERPTVxuICByZW1vdmVEb3RzLmZvckVhY2goICggZG90ICkgPT4gZG90LnJlbW92ZSgpICk7XG59O1xuXG5QYWdlRG90cy5wcm90b3R5cGUudXBkYXRlU2VsZWN0ZWQgPSBmdW5jdGlvbiggaW5kZXggKSB7XG4gIC8vIHJlbW92ZSBzZWxlY3RlZCBjbGFzcyBvbiBwcmV2aW91c1xuICBpZiAoIHRoaXMuc2VsZWN0ZWREb3QgKSB7XG4gICAgdGhpcy5zZWxlY3RlZERvdC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1zZWxlY3RlZCcpO1xuICAgIHRoaXMuc2VsZWN0ZWREb3QucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWN1cnJlbnQnKTtcbiAgfVxuICAvLyBkb24ndCBwcm9jZWVkIGlmIG5vIGRvdHNcbiAgaWYgKCAhdGhpcy5kb3RzLmxlbmd0aCApIHJldHVybjtcblxuICB0aGlzLnNlbGVjdGVkRG90ID0gdGhpcy5kb3RzWyBpbmRleCBdO1xuICB0aGlzLnNlbGVjdGVkRG90LmNsYXNzTGlzdC5hZGQoJ2lzLXNlbGVjdGVkJyk7XG4gIHRoaXMuc2VsZWN0ZWREb3Quc2V0QXR0cmlidXRlKCAnYXJpYS1jdXJyZW50JywgJ3N0ZXAnICk7XG59O1xuXG5GbGlja2l0eS5QYWdlRG90cyA9IFBhZ2VEb3RzO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBGbGlja2l0eSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5PYmplY3QuYXNzaWduKCBGbGlja2l0eS5kZWZhdWx0cywge1xuICBwYWdlRG90czogdHJ1ZSxcbn0gKTtcblxuRmxpY2tpdHkuY3JlYXRlLnBhZ2VEb3RzID0gZnVuY3Rpb24oKSB7XG4gIGlmICggIXRoaXMub3B0aW9ucy5wYWdlRG90cyApIHJldHVybjtcblxuICB0aGlzLnBhZ2VEb3RzID0gbmV3IFBhZ2VEb3RzKCk7XG4gIHRoaXMuaGFuZGxlUGFnZURvdHNDbGljayA9IHRoaXMub25QYWdlRG90c0NsaWNrLmJpbmQoIHRoaXMgKTtcbiAgLy8gZXZlbnRzXG4gIHRoaXMub24oICdhY3RpdmF0ZScsIHRoaXMuYWN0aXZhdGVQYWdlRG90cyApO1xuICB0aGlzLm9uKCAnc2VsZWN0JywgdGhpcy51cGRhdGVTZWxlY3RlZFBhZ2VEb3RzICk7XG4gIHRoaXMub24oICdjZWxsQ2hhbmdlJywgdGhpcy51cGRhdGVQYWdlRG90cyApO1xuICB0aGlzLm9uKCAncmVzaXplJywgdGhpcy51cGRhdGVQYWdlRG90cyApO1xuICB0aGlzLm9uKCAnZGVhY3RpdmF0ZScsIHRoaXMuZGVhY3RpdmF0ZVBhZ2VEb3RzICk7XG59O1xuXG5sZXQgcHJvdG8gPSBGbGlja2l0eS5wcm90b3R5cGU7XG5cbnByb3RvLmFjdGl2YXRlUGFnZURvdHMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wYWdlRG90cy5zZXREb3RzKCB0aGlzLnNsaWRlcy5sZW5ndGggKTtcbiAgdGhpcy5mb2N1c2FibGVFbGVtcy5wdXNoKCAuLi50aGlzLnBhZ2VEb3RzLmRvdHMgKTtcbiAgdGhpcy5wYWdlRG90cy5ob2xkZXIuYWRkRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgdGhpcy5oYW5kbGVQYWdlRG90c0NsaWNrICk7XG4gIHRoaXMuZWxlbWVudC5hcHBlbmQoIHRoaXMucGFnZURvdHMuaG9sZGVyICk7XG59O1xuXG5wcm90by5vblBhZ2VEb3RzQ2xpY2sgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIGxldCBpbmRleCA9IHRoaXMucGFnZURvdHMuZG90cy5pbmRleE9mKCBldmVudC50YXJnZXQgKTtcbiAgaWYgKCBpbmRleCA9PT0gLTEgKSByZXR1cm47IC8vIG9ubHkgZG90IGNsaWNrc1xuXG4gIHRoaXMudWlDaGFuZ2UoKTtcbiAgdGhpcy5zZWxlY3QoIGluZGV4ICk7XG59O1xuXG5wcm90by51cGRhdGVTZWxlY3RlZFBhZ2VEb3RzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGFnZURvdHMudXBkYXRlU2VsZWN0ZWQoIHRoaXMuc2VsZWN0ZWRJbmRleCApO1xufTtcblxucHJvdG8udXBkYXRlUGFnZURvdHMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wYWdlRG90cy5kb3RzLmZvckVhY2goICggZG90ICkgPT4ge1xuICAgIHV0aWxzLnJlbW92ZUZyb20oIHRoaXMuZm9jdXNhYmxlRWxlbXMsIGRvdCApO1xuICB9ICk7XG4gIHRoaXMucGFnZURvdHMuc2V0RG90cyggdGhpcy5zbGlkZXMubGVuZ3RoICk7XG4gIHRoaXMuZm9jdXNhYmxlRWxlbXMucHVzaCggLi4udGhpcy5wYWdlRG90cy5kb3RzICk7XG59O1xuXG5wcm90by5kZWFjdGl2YXRlUGFnZURvdHMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wYWdlRG90cy5ob2xkZXIucmVtb3ZlKCk7XG4gIHRoaXMucGFnZURvdHMuaG9sZGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdjbGljaycsIHRoaXMuaGFuZGxlUGFnZURvdHNDbGljayApO1xufTtcblxuLy8gLS0tLS0gIC0tLS0tIC8vXG5cbkZsaWNraXR5LlBhZ2VEb3RzID0gUGFnZURvdHM7XG5cbnJldHVybiBGbGlja2l0eTtcblxufSApICk7XG4iLCIvLyBwbGF5ZXIgJiBhdXRvUGxheVxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCByZXF1aXJlKCcuL2NvcmUnKSApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgZmFjdG9yeSggd2luZG93LkZsaWNraXR5ICk7XG4gIH1cblxufSggdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uIGZhY3RvcnkoIEZsaWNraXR5ICkge1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBQbGF5ZXIgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gUGxheWVyKCBhdXRvUGxheSwgb25UaWNrICkge1xuICB0aGlzLmF1dG9QbGF5ID0gYXV0b1BsYXk7XG4gIHRoaXMub25UaWNrID0gb25UaWNrO1xuICB0aGlzLnN0YXRlID0gJ3N0b3BwZWQnO1xuICAvLyB2aXNpYmlsaXR5IGNoYW5nZSBldmVudCBoYW5kbGVyXG4gIHRoaXMub25WaXNpYmlsaXR5Q2hhbmdlID0gdGhpcy52aXNpYmlsaXR5Q2hhbmdlLmJpbmQoIHRoaXMgKTtcbiAgdGhpcy5vblZpc2liaWxpdHlQbGF5ID0gdGhpcy52aXNpYmlsaXR5UGxheS5iaW5kKCB0aGlzICk7XG59XG5cbi8vIHN0YXJ0IHBsYXlcblBsYXllci5wcm90b3R5cGUucGxheSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIHRoaXMuc3RhdGUgPT09ICdwbGF5aW5nJyApIHJldHVybjtcblxuICAvLyBkbyBub3QgcGxheSBpZiBwYWdlIGlzIGhpZGRlbiwgc3RhcnQgcGxheWluZyB3aGVuIHBhZ2UgaXMgdmlzaWJsZVxuICBsZXQgaXNQYWdlSGlkZGVuID0gZG9jdW1lbnQuaGlkZGVuO1xuICBpZiAoIGlzUGFnZUhpZGRlbiApIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCAndmlzaWJpbGl0eWNoYW5nZScsIHRoaXMub25WaXNpYmlsaXR5UGxheSApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuc3RhdGUgPSAncGxheWluZyc7XG4gIC8vIGxpc3RlbiB0byB2aXNpYmlsaXR5IGNoYW5nZVxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCAndmlzaWJpbGl0eWNoYW5nZScsIHRoaXMub25WaXNpYmlsaXR5Q2hhbmdlICk7XG4gIC8vIHN0YXJ0IHRpY2tpbmdcbiAgdGhpcy50aWNrKCk7XG59O1xuXG5QbGF5ZXIucHJvdG90eXBlLnRpY2sgPSBmdW5jdGlvbigpIHtcbiAgLy8gZG8gbm90IHRpY2sgaWYgbm90IHBsYXlpbmdcbiAgaWYgKCB0aGlzLnN0YXRlICE9PSAncGxheWluZycgKSByZXR1cm47XG5cbiAgLy8gZGVmYXVsdCB0byAzIHNlY29uZHNcbiAgbGV0IHRpbWUgPSB0eXBlb2YgdGhpcy5hdXRvUGxheSA9PSAnbnVtYmVyJyA/IHRoaXMuYXV0b1BsYXkgOiAzMDAwO1xuICAvLyBIQUNLOiByZXNldCB0aWNrcyBpZiBzdG9wcGVkIGFuZCBzdGFydGVkIHdpdGhpbiBpbnRlcnZhbFxuICB0aGlzLmNsZWFyKCk7XG4gIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQoICgpID0+IHtcbiAgICB0aGlzLm9uVGljaygpO1xuICAgIHRoaXMudGljaygpO1xuICB9LCB0aW1lICk7XG59O1xuXG5QbGF5ZXIucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zdGF0ZSA9ICdzdG9wcGVkJztcbiAgdGhpcy5jbGVhcigpO1xuICAvLyByZW1vdmUgdmlzaWJpbGl0eSBjaGFuZ2UgZXZlbnRcbiAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3Zpc2liaWxpdHljaGFuZ2UnLCB0aGlzLm9uVmlzaWJpbGl0eUNoYW5nZSApO1xufTtcblxuUGxheWVyLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICBjbGVhclRpbWVvdXQoIHRoaXMudGltZW91dCApO1xufTtcblxuUGxheWVyLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIHRoaXMuc3RhdGUgPT09ICdwbGF5aW5nJyApIHtcbiAgICB0aGlzLnN0YXRlID0gJ3BhdXNlZCc7XG4gICAgdGhpcy5jbGVhcigpO1xuICB9XG59O1xuXG5QbGF5ZXIucHJvdG90eXBlLnVucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgLy8gcmUtc3RhcnQgcGxheSBpZiBwYXVzZWRcbiAgaWYgKCB0aGlzLnN0YXRlID09PSAncGF1c2VkJyApIHRoaXMucGxheSgpO1xufTtcblxuLy8gcGF1c2UgaWYgcGFnZSB2aXNpYmlsaXR5IGlzIGhpZGRlbiwgdW5wYXVzZSBpZiB2aXNpYmxlXG5QbGF5ZXIucHJvdG90eXBlLnZpc2liaWxpdHlDaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgbGV0IGlzUGFnZUhpZGRlbiA9IGRvY3VtZW50LmhpZGRlbjtcbiAgdGhpc1sgaXNQYWdlSGlkZGVuID8gJ3BhdXNlJyA6ICd1bnBhdXNlJyBdKCk7XG59O1xuXG5QbGF5ZXIucHJvdG90eXBlLnZpc2liaWxpdHlQbGF5ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGxheSgpO1xuICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAndmlzaWJpbGl0eWNoYW5nZScsIHRoaXMub25WaXNpYmlsaXR5UGxheSApO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRmxpY2tpdHkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuT2JqZWN0LmFzc2lnbiggRmxpY2tpdHkuZGVmYXVsdHMsIHtcbiAgcGF1c2VBdXRvUGxheU9uSG92ZXI6IHRydWUsXG59ICk7XG5cbkZsaWNraXR5LmNyZWF0ZS5wbGF5ZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wbGF5ZXIgPSBuZXcgUGxheWVyKCB0aGlzLm9wdGlvbnMuYXV0b1BsYXksICgpID0+IHtcbiAgICB0aGlzLm5leHQoIHRydWUgKTtcbiAgfSApO1xuXG4gIHRoaXMub24oICdhY3RpdmF0ZScsIHRoaXMuYWN0aXZhdGVQbGF5ZXIgKTtcbiAgdGhpcy5vbiggJ3VpQ2hhbmdlJywgdGhpcy5zdG9wUGxheWVyICk7XG4gIHRoaXMub24oICdwb2ludGVyRG93bicsIHRoaXMuc3RvcFBsYXllciApO1xuICB0aGlzLm9uKCAnZGVhY3RpdmF0ZScsIHRoaXMuZGVhY3RpdmF0ZVBsYXllciApO1xufTtcblxubGV0IHByb3RvID0gRmxpY2tpdHkucHJvdG90eXBlO1xuXG5wcm90by5hY3RpdmF0ZVBsYXllciA9IGZ1bmN0aW9uKCkge1xuICBpZiAoICF0aGlzLm9wdGlvbnMuYXV0b1BsYXkgKSByZXR1cm47XG5cbiAgdGhpcy5wbGF5ZXIucGxheSgpO1xuICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ21vdXNlZW50ZXInLCB0aGlzICk7XG59O1xuXG4vLyBQbGF5ZXIgQVBJLCBkb24ndCBoYXRlIHRoZSAuLi4gdGhhbmtzIEkga25vdyB3aGVyZSB0aGUgZG9vciBpc1xuXG5wcm90by5wbGF5UGxheWVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGxheWVyLnBsYXkoKTtcbn07XG5cbnByb3RvLnN0b3BQbGF5ZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wbGF5ZXIuc3RvcCgpO1xufTtcblxucHJvdG8ucGF1c2VQbGF5ZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wbGF5ZXIucGF1c2UoKTtcbn07XG5cbnByb3RvLnVucGF1c2VQbGF5ZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wbGF5ZXIudW5wYXVzZSgpO1xufTtcblxucHJvdG8uZGVhY3RpdmF0ZVBsYXllciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnBsYXllci5zdG9wKCk7XG4gIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAnbW91c2VlbnRlcicsIHRoaXMgKTtcbn07XG5cbi8vIC0tLS0tIG1vdXNlZW50ZXIvbGVhdmUgLS0tLS0gLy9cblxuLy8gcGF1c2UgYXV0by1wbGF5IG9uIGhvdmVyXG5wcm90by5vbm1vdXNlZW50ZXIgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5vcHRpb25zLnBhdXNlQXV0b1BsYXlPbkhvdmVyICkgcmV0dXJuO1xuXG4gIHRoaXMucGxheWVyLnBhdXNlKCk7XG4gIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAnbW91c2VsZWF2ZScsIHRoaXMgKTtcbn07XG5cbi8vIHJlc3VtZSBhdXRvLXBsYXkgb24gaG92ZXIgb2ZmXG5wcm90by5vbm1vdXNlbGVhdmUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5wbGF5ZXIudW5wYXVzZSgpO1xuICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ21vdXNlbGVhdmUnLCB0aGlzICk7XG59O1xuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxuRmxpY2tpdHkuUGxheWVyID0gUGxheWVyO1xuXG5yZXR1cm4gRmxpY2tpdHk7XG5cbn0gKSApO1xuIiwiKGZ1bmN0aW9uKHdpbmRvdywgZmFjdG9yeSkge1xuXHR2YXIgbGF6eVNpemVzID0gZmFjdG9yeSh3aW5kb3csIHdpbmRvdy5kb2N1bWVudCwgRGF0ZSk7XG5cdHdpbmRvdy5sYXp5U2l6ZXMgPSBsYXp5U2l6ZXM7XG5cdGlmKHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpe1xuXHRcdG1vZHVsZS5leHBvcnRzID0gbGF6eVNpemVzO1xuXHR9XG59KHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgP1xuICAgICAgd2luZG93IDoge30sIFxuLyoqXG4gKiBpbXBvcnQoXCIuL3R5cGVzL2dsb2JhbFwiKVxuICogQHR5cGVkZWYgeyBpbXBvcnQoXCIuL3R5cGVzL2xhenlzaXplcy1jb25maWdcIikuTGF6eVNpemVzQ29uZmlnUGFydGlhbCB9IExhenlTaXplc0NvbmZpZ1BhcnRpYWxcbiAqL1xuZnVuY3Rpb24gbCh3aW5kb3csIGRvY3VtZW50LCBEYXRlKSB7IC8vIFBhc3MgaW4gdGhlIHdpbmRvdyBEYXRlIGZ1bmN0aW9uIGFsc28gZm9yIFNTUiBiZWNhdXNlIHRoZSBEYXRlIGNsYXNzIGNhbiBiZSBsb3N0XG5cdCd1c2Ugc3RyaWN0Jztcblx0Lypqc2hpbnQgZXFudWxsOnRydWUgKi9cblxuXHR2YXIgbGF6eXNpemVzLFxuXHRcdC8qKlxuXHRcdCAqIEB0eXBlIHsgTGF6eVNpemVzQ29uZmlnUGFydGlhbCB9XG5cdFx0ICovXG5cdFx0bGF6eVNpemVzQ2ZnO1xuXG5cdChmdW5jdGlvbigpe1xuXHRcdHZhciBwcm9wO1xuXG5cdFx0dmFyIGxhenlTaXplc0RlZmF1bHRzID0ge1xuXHRcdFx0bGF6eUNsYXNzOiAnbGF6eWxvYWQnLFxuXHRcdFx0bG9hZGVkQ2xhc3M6ICdsYXp5bG9hZGVkJyxcblx0XHRcdGxvYWRpbmdDbGFzczogJ2xhenlsb2FkaW5nJyxcblx0XHRcdHByZWxvYWRDbGFzczogJ2xhenlwcmVsb2FkJyxcblx0XHRcdGVycm9yQ2xhc3M6ICdsYXp5ZXJyb3InLFxuXHRcdFx0Ly9zdHJpY3RDbGFzczogJ2xhenlzdHJpY3QnLFxuXHRcdFx0YXV0b3NpemVzQ2xhc3M6ICdsYXp5YXV0b3NpemVzJyxcblx0XHRcdGZhc3RMb2FkZWRDbGFzczogJ2xzLWlzLWNhY2hlZCcsXG5cdFx0XHRpZnJhbWVMb2FkTW9kZTogMCxcblx0XHRcdHNyY0F0dHI6ICdkYXRhLXNyYycsXG5cdFx0XHRzcmNzZXRBdHRyOiAnZGF0YS1zcmNzZXQnLFxuXHRcdFx0c2l6ZXNBdHRyOiAnZGF0YS1zaXplcycsXG5cdFx0XHQvL3ByZWxvYWRBZnRlckxvYWQ6IGZhbHNlLFxuXHRcdFx0bWluU2l6ZTogNDAsXG5cdFx0XHRjdXN0b21NZWRpYToge30sXG5cdFx0XHRpbml0OiB0cnVlLFxuXHRcdFx0ZXhwRmFjdG9yOiAxLjUsXG5cdFx0XHRoRmFjOiAwLjgsXG5cdFx0XHRsb2FkTW9kZTogMixcblx0XHRcdGxvYWRIaWRkZW46IHRydWUsXG5cdFx0XHRyaWNUaW1lb3V0OiAwLFxuXHRcdFx0dGhyb3R0bGVEZWxheTogMTI1LFxuXHRcdH07XG5cblx0XHRsYXp5U2l6ZXNDZmcgPSB3aW5kb3cubGF6eVNpemVzQ29uZmlnIHx8IHdpbmRvdy5sYXp5c2l6ZXNDb25maWcgfHwge307XG5cblx0XHRmb3IocHJvcCBpbiBsYXp5U2l6ZXNEZWZhdWx0cyl7XG5cdFx0XHRpZighKHByb3AgaW4gbGF6eVNpemVzQ2ZnKSl7XG5cdFx0XHRcdGxhenlTaXplc0NmZ1twcm9wXSA9IGxhenlTaXplc0RlZmF1bHRzW3Byb3BdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSkoKTtcblxuXHRpZiAoIWRvY3VtZW50IHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGluaXQ6IGZ1bmN0aW9uICgpIHt9LFxuXHRcdFx0LyoqXG5cdFx0XHQgKiBAdHlwZSB7IExhenlTaXplc0NvbmZpZ1BhcnRpYWwgfVxuXHRcdFx0ICovXG5cdFx0XHRjZmc6IGxhenlTaXplc0NmZyxcblx0XHRcdC8qKlxuXHRcdFx0ICogQHR5cGUgeyB0cnVlIH1cblx0XHRcdCAqL1xuXHRcdFx0bm9TdXBwb3J0OiB0cnVlLFxuXHRcdH07XG5cdH1cblxuXHR2YXIgZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXHR2YXIgc3VwcG9ydFBpY3R1cmUgPSB3aW5kb3cuSFRNTFBpY3R1cmVFbGVtZW50O1xuXG5cdHZhciBfYWRkRXZlbnRMaXN0ZW5lciA9ICdhZGRFdmVudExpc3RlbmVyJztcblxuXHR2YXIgX2dldEF0dHJpYnV0ZSA9ICdnZXRBdHRyaWJ1dGUnO1xuXG5cdC8qKlxuXHQgKiBVcGRhdGUgdG8gYmluZCB0byB3aW5kb3cgYmVjYXVzZSAndGhpcycgYmVjb21lcyBudWxsIGR1cmluZyBTU1Jcblx0ICogYnVpbGRzLlxuXHQgKi9cblx0dmFyIGFkZEV2ZW50TGlzdGVuZXIgPSB3aW5kb3dbX2FkZEV2ZW50TGlzdGVuZXJdLmJpbmQod2luZG93KTtcblxuXHR2YXIgc2V0VGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0O1xuXG5cdHZhciByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHNldFRpbWVvdXQ7XG5cblx0dmFyIHJlcXVlc3RJZGxlQ2FsbGJhY2sgPSB3aW5kb3cucmVxdWVzdElkbGVDYWxsYmFjaztcblxuXHR2YXIgcmVnUGljdHVyZSA9IC9ecGljdHVyZSQvaTtcblxuXHR2YXIgbG9hZEV2ZW50cyA9IFsnbG9hZCcsICdlcnJvcicsICdsYXp5aW5jbHVkZWQnLCAnX2xhenlsb2FkZWQnXTtcblxuXHR2YXIgcmVnQ2xhc3NDYWNoZSA9IHt9O1xuXG5cdHZhciBmb3JFYWNoID0gQXJyYXkucHJvdG90eXBlLmZvckVhY2g7XG5cblx0LyoqXG5cdCAqIEBwYXJhbSBlbGUge0VsZW1lbnR9XG5cdCAqIEBwYXJhbSBjbHMge3N0cmluZ31cblx0ICovXG5cdHZhciBoYXNDbGFzcyA9IGZ1bmN0aW9uKGVsZSwgY2xzKSB7XG5cdFx0aWYoIXJlZ0NsYXNzQ2FjaGVbY2xzXSl7XG5cdFx0XHRyZWdDbGFzc0NhY2hlW2Nsc10gPSBuZXcgUmVnRXhwKCcoXFxcXHN8XiknK2NscysnKFxcXFxzfCQpJyk7XG5cdFx0fVxuXHRcdHJldHVybiByZWdDbGFzc0NhY2hlW2Nsc10udGVzdChlbGVbX2dldEF0dHJpYnV0ZV0oJ2NsYXNzJykgfHwgJycpICYmIHJlZ0NsYXNzQ2FjaGVbY2xzXTtcblx0fTtcblxuXHQvKipcblx0ICogQHBhcmFtIGVsZSB7RWxlbWVudH1cblx0ICogQHBhcmFtIGNscyB7c3RyaW5nfVxuXHQgKi9cblx0dmFyIGFkZENsYXNzID0gZnVuY3Rpb24oZWxlLCBjbHMpIHtcblx0XHRpZiAoIWhhc0NsYXNzKGVsZSwgY2xzKSl7XG5cdFx0XHRlbGUuc2V0QXR0cmlidXRlKCdjbGFzcycsIChlbGVbX2dldEF0dHJpYnV0ZV0oJ2NsYXNzJykgfHwgJycpLnRyaW0oKSArICcgJyArIGNscyk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBAcGFyYW0gZWxlIHtFbGVtZW50fVxuXHQgKiBAcGFyYW0gY2xzIHtzdHJpbmd9XG5cdCAqL1xuXHR2YXIgcmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbihlbGUsIGNscykge1xuXHRcdHZhciByZWc7XG5cdFx0aWYgKChyZWcgPSBoYXNDbGFzcyhlbGUsY2xzKSkpIHtcblx0XHRcdGVsZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgKGVsZVtfZ2V0QXR0cmlidXRlXSgnY2xhc3MnKSB8fCAnJykucmVwbGFjZShyZWcsICcgJykpO1xuXHRcdH1cblx0fTtcblxuXHR2YXIgYWRkUmVtb3ZlTG9hZEV2ZW50cyA9IGZ1bmN0aW9uKGRvbSwgZm4sIGFkZCl7XG5cdFx0dmFyIGFjdGlvbiA9IGFkZCA/IF9hZGRFdmVudExpc3RlbmVyIDogJ3JlbW92ZUV2ZW50TGlzdGVuZXInO1xuXHRcdGlmKGFkZCl7XG5cdFx0XHRhZGRSZW1vdmVMb2FkRXZlbnRzKGRvbSwgZm4pO1xuXHRcdH1cblx0XHRsb2FkRXZlbnRzLmZvckVhY2goZnVuY3Rpb24oZXZ0KXtcblx0XHRcdGRvbVthY3Rpb25dKGV2dCwgZm4pO1xuXHRcdH0pO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBAcGFyYW0gZWxlbSB7IEVsZW1lbnQgfVxuXHQgKiBAcGFyYW0gbmFtZSB7IHN0cmluZyB9XG5cdCAqIEBwYXJhbSBkZXRhaWwgeyBhbnkgfVxuXHQgKiBAcGFyYW0gbm9CdWJibGVzIHsgYm9vbGVhbiB9XG5cdCAqIEBwYXJhbSBub0NhbmNlbGFibGUgeyBib29sZWFuIH1cblx0ICogQHJldHVybnMgeyBDdXN0b21FdmVudCB9XG5cdCAqL1xuXHR2YXIgdHJpZ2dlckV2ZW50ID0gZnVuY3Rpb24oZWxlbSwgbmFtZSwgZGV0YWlsLCBub0J1YmJsZXMsIG5vQ2FuY2VsYWJsZSl7XG5cdFx0dmFyIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG5cblx0XHRpZighZGV0YWlsKXtcblx0XHRcdGRldGFpbCA9IHt9O1xuXHRcdH1cblxuXHRcdGRldGFpbC5pbnN0YW5jZSA9IGxhenlzaXplcztcblxuXHRcdGV2ZW50LmluaXRFdmVudChuYW1lLCAhbm9CdWJibGVzLCAhbm9DYW5jZWxhYmxlKTtcblxuXHRcdGV2ZW50LmRldGFpbCA9IGRldGFpbDtcblxuXHRcdGVsZW0uZGlzcGF0Y2hFdmVudChldmVudCk7XG5cdFx0cmV0dXJuIGV2ZW50O1xuXHR9O1xuXG5cdHZhciB1cGRhdGVQb2x5ZmlsbCA9IGZ1bmN0aW9uIChlbCwgZnVsbCl7XG5cdFx0dmFyIHBvbHlmaWxsO1xuXHRcdGlmKCAhc3VwcG9ydFBpY3R1cmUgJiYgKCBwb2x5ZmlsbCA9ICh3aW5kb3cucGljdHVyZWZpbGwgfHwgbGF6eVNpemVzQ2ZnLnBmKSApICl7XG5cdFx0XHRpZihmdWxsICYmIGZ1bGwuc3JjICYmICFlbFtfZ2V0QXR0cmlidXRlXSgnc3Jjc2V0Jykpe1xuXHRcdFx0XHRlbC5zZXRBdHRyaWJ1dGUoJ3NyY3NldCcsIGZ1bGwuc3JjKTtcblx0XHRcdH1cblx0XHRcdHBvbHlmaWxsKHtyZWV2YWx1YXRlOiB0cnVlLCBlbGVtZW50czogW2VsXX0pO1xuXHRcdH0gZWxzZSBpZihmdWxsICYmIGZ1bGwuc3JjKXtcblx0XHRcdGVsLnNyYyA9IGZ1bGwuc3JjO1xuXHRcdH1cblx0fTtcblxuXHR2YXIgZ2V0Q1NTID0gZnVuY3Rpb24gKGVsZW0sIHN0eWxlKXtcblx0XHRyZXR1cm4gKGdldENvbXB1dGVkU3R5bGUoZWxlbSwgbnVsbCkgfHwge30pW3N0eWxlXTtcblx0fTtcblxuXHQvKipcblx0ICpcblx0ICogQHBhcmFtIGVsZW0geyBFbGVtZW50IH1cblx0ICogQHBhcmFtIHBhcmVudCB7IEVsZW1lbnQgfVxuXHQgKiBAcGFyYW0gW3dpZHRoXSB7bnVtYmVyfVxuXHQgKiBAcmV0dXJucyB7bnVtYmVyfVxuXHQgKi9cblx0dmFyIGdldFdpZHRoID0gZnVuY3Rpb24oZWxlbSwgcGFyZW50LCB3aWR0aCl7XG5cdFx0d2lkdGggPSB3aWR0aCB8fCBlbGVtLm9mZnNldFdpZHRoO1xuXG5cdFx0d2hpbGUod2lkdGggPCBsYXp5U2l6ZXNDZmcubWluU2l6ZSAmJiBwYXJlbnQgJiYgIWVsZW0uX2xhenlzaXplc1dpZHRoKXtcblx0XHRcdHdpZHRoID0gIHBhcmVudC5vZmZzZXRXaWR0aDtcblx0XHRcdHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuXHRcdH1cblxuXHRcdHJldHVybiB3aWR0aDtcblx0fTtcblxuXHR2YXIgckFGID0gKGZ1bmN0aW9uKCl7XG5cdFx0dmFyIHJ1bm5pbmcsIHdhaXRpbmc7XG5cdFx0dmFyIGZpcnN0Rm5zID0gW107XG5cdFx0dmFyIHNlY29uZEZucyA9IFtdO1xuXHRcdHZhciBmbnMgPSBmaXJzdEZucztcblxuXHRcdHZhciBydW4gPSBmdW5jdGlvbigpe1xuXHRcdFx0dmFyIHJ1bkZucyA9IGZucztcblxuXHRcdFx0Zm5zID0gZmlyc3RGbnMubGVuZ3RoID8gc2Vjb25kRm5zIDogZmlyc3RGbnM7XG5cblx0XHRcdHJ1bm5pbmcgPSB0cnVlO1xuXHRcdFx0d2FpdGluZyA9IGZhbHNlO1xuXG5cdFx0XHR3aGlsZShydW5GbnMubGVuZ3RoKXtcblx0XHRcdFx0cnVuRm5zLnNoaWZ0KCkoKTtcblx0XHRcdH1cblxuXHRcdFx0cnVubmluZyA9IGZhbHNlO1xuXHRcdH07XG5cblx0XHR2YXIgcmFmQmF0Y2ggPSBmdW5jdGlvbihmbiwgcXVldWUpe1xuXHRcdFx0aWYocnVubmluZyAmJiAhcXVldWUpe1xuXHRcdFx0XHRmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm5zLnB1c2goZm4pO1xuXG5cdFx0XHRcdGlmKCF3YWl0aW5nKXtcblx0XHRcdFx0XHR3YWl0aW5nID0gdHJ1ZTtcblx0XHRcdFx0XHQoZG9jdW1lbnQuaGlkZGVuID8gc2V0VGltZW91dCA6IHJlcXVlc3RBbmltYXRpb25GcmFtZSkocnVuKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyYWZCYXRjaC5fbHNGbHVzaCA9IHJ1bjtcblxuXHRcdHJldHVybiByYWZCYXRjaDtcblx0fSkoKTtcblxuXHR2YXIgckFGSXQgPSBmdW5jdGlvbihmbiwgc2ltcGxlKXtcblx0XHRyZXR1cm4gc2ltcGxlID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyQUYoZm4pO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpe1xuXHRcdFx0XHR2YXIgdGhhdCA9IHRoaXM7XG5cdFx0XHRcdHZhciBhcmdzID0gYXJndW1lbnRzO1xuXHRcdFx0XHRyQUYoZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRmbi5hcHBseSh0aGF0LCBhcmdzKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0O1xuXHR9O1xuXG5cdHZhciB0aHJvdHRsZSA9IGZ1bmN0aW9uKGZuKXtcblx0XHR2YXIgcnVubmluZztcblx0XHR2YXIgbGFzdFRpbWUgPSAwO1xuXHRcdHZhciBnRGVsYXkgPSBsYXp5U2l6ZXNDZmcudGhyb3R0bGVEZWxheTtcblx0XHR2YXIgcklDVGltZW91dCA9IGxhenlTaXplc0NmZy5yaWNUaW1lb3V0O1xuXHRcdHZhciBydW4gPSBmdW5jdGlvbigpe1xuXHRcdFx0cnVubmluZyA9IGZhbHNlO1xuXHRcdFx0bGFzdFRpbWUgPSBEYXRlLm5vdygpO1xuXHRcdFx0Zm4oKTtcblx0XHR9O1xuXHRcdHZhciBpZGxlQ2FsbGJhY2sgPSByZXF1ZXN0SWRsZUNhbGxiYWNrICYmIHJJQ1RpbWVvdXQgPiA0OSA/XG5cdFx0XHRmdW5jdGlvbigpe1xuXHRcdFx0XHRyZXF1ZXN0SWRsZUNhbGxiYWNrKHJ1biwge3RpbWVvdXQ6IHJJQ1RpbWVvdXR9KTtcblxuXHRcdFx0XHRpZihySUNUaW1lb3V0ICE9PSBsYXp5U2l6ZXNDZmcucmljVGltZW91dCl7XG5cdFx0XHRcdFx0cklDVGltZW91dCA9IGxhenlTaXplc0NmZy5yaWNUaW1lb3V0O1xuXHRcdFx0XHR9XG5cdFx0XHR9IDpcblx0XHRcdHJBRkl0KGZ1bmN0aW9uKCl7XG5cdFx0XHRcdHNldFRpbWVvdXQocnVuKTtcblx0XHRcdH0sIHRydWUpXG5cdFx0O1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uKGlzUHJpb3JpdHkpe1xuXHRcdFx0dmFyIGRlbGF5O1xuXG5cdFx0XHRpZigoaXNQcmlvcml0eSA9IGlzUHJpb3JpdHkgPT09IHRydWUpKXtcblx0XHRcdFx0cklDVGltZW91dCA9IDMzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihydW5uaW5nKXtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRydW5uaW5nID0gIHRydWU7XG5cblx0XHRcdGRlbGF5ID0gZ0RlbGF5IC0gKERhdGUubm93KCkgLSBsYXN0VGltZSk7XG5cblx0XHRcdGlmKGRlbGF5IDwgMCl7XG5cdFx0XHRcdGRlbGF5ID0gMDtcblx0XHRcdH1cblxuXHRcdFx0aWYoaXNQcmlvcml0eSB8fCBkZWxheSA8IDkpe1xuXHRcdFx0XHRpZGxlQ2FsbGJhY2soKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNldFRpbWVvdXQoaWRsZUNhbGxiYWNrLCBkZWxheSk7XG5cdFx0XHR9XG5cdFx0fTtcblx0fTtcblxuXHQvL2Jhc2VkIG9uIGh0dHA6Ly9tb2Rlcm5qYXZhc2NyaXB0LmJsb2dzcG90LmRlLzIwMTMvMDgvYnVpbGRpbmctYmV0dGVyLWRlYm91bmNlLmh0bWxcblx0dmFyIGRlYm91bmNlID0gZnVuY3Rpb24oZnVuYykge1xuXHRcdHZhciB0aW1lb3V0LCB0aW1lc3RhbXA7XG5cdFx0dmFyIHdhaXQgPSA5OTtcblx0XHR2YXIgcnVuID0gZnVuY3Rpb24oKXtcblx0XHRcdHRpbWVvdXQgPSBudWxsO1xuXHRcdFx0ZnVuYygpO1xuXHRcdH07XG5cdFx0dmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbGFzdCA9IERhdGUubm93KCkgLSB0aW1lc3RhbXA7XG5cblx0XHRcdGlmIChsYXN0IDwgd2FpdCkge1xuXHRcdFx0XHRzZXRUaW1lb3V0KGxhdGVyLCB3YWl0IC0gbGFzdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQocmVxdWVzdElkbGVDYWxsYmFjayB8fCBydW4pKHJ1bik7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdHRpbWVzdGFtcCA9IERhdGUubm93KCk7XG5cblx0XHRcdGlmICghdGltZW91dCkge1xuXHRcdFx0XHR0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG5cdFx0XHR9XG5cdFx0fTtcblx0fTtcblxuXHR2YXIgbG9hZGVyID0gKGZ1bmN0aW9uKCl7XG5cdFx0dmFyIHByZWxvYWRFbGVtcywgaXNDb21wbGV0ZWQsIHJlc2V0UHJlbG9hZGluZ1RpbWVyLCBsb2FkTW9kZSwgc3RhcnRlZDtcblxuXHRcdHZhciBlTHZXLCBlbHZILCBlTHRvcCwgZUxsZWZ0LCBlTHJpZ2h0LCBlTGJvdHRvbSwgaXNCb2R5SGlkZGVuO1xuXG5cdFx0dmFyIHJlZ0ltZyA9IC9eaW1nJC9pO1xuXHRcdHZhciByZWdJZnJhbWUgPSAvXmlmcmFtZSQvaTtcblxuXHRcdHZhciBzdXBwb3J0U2Nyb2xsID0gKCdvbnNjcm9sbCcgaW4gd2luZG93KSAmJiAhKC8oZ2xlfGluZylib3QvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpO1xuXG5cdFx0dmFyIHNocmlua0V4cGFuZCA9IDA7XG5cdFx0dmFyIGN1cnJlbnRFeHBhbmQgPSAwO1xuXG5cdFx0dmFyIGlzTG9hZGluZyA9IDA7XG5cdFx0dmFyIGxvd1J1bnMgPSAtMTtcblxuXHRcdHZhciByZXNldFByZWxvYWRpbmcgPSBmdW5jdGlvbihlKXtcblx0XHRcdGlzTG9hZGluZy0tO1xuXHRcdFx0aWYoIWUgfHwgaXNMb2FkaW5nIDwgMCB8fCAhZS50YXJnZXQpe1xuXHRcdFx0XHRpc0xvYWRpbmcgPSAwO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR2YXIgaXNWaXNpYmxlID0gZnVuY3Rpb24gKGVsZW0pIHtcblx0XHRcdGlmIChpc0JvZHlIaWRkZW4gPT0gbnVsbCkge1xuXHRcdFx0XHRpc0JvZHlIaWRkZW4gPSBnZXRDU1MoZG9jdW1lbnQuYm9keSwgJ3Zpc2liaWxpdHknKSA9PSAnaGlkZGVuJztcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGlzQm9keUhpZGRlbiB8fCAhKGdldENTUyhlbGVtLnBhcmVudE5vZGUsICd2aXNpYmlsaXR5JykgPT0gJ2hpZGRlbicgJiYgZ2V0Q1NTKGVsZW0sICd2aXNpYmlsaXR5JykgPT0gJ2hpZGRlbicpO1xuXHRcdH07XG5cblx0XHR2YXIgaXNOZXN0ZWRWaXNpYmxlID0gZnVuY3Rpb24oZWxlbSwgZWxlbUV4cGFuZCl7XG5cdFx0XHR2YXIgb3V0ZXJSZWN0O1xuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW07XG5cdFx0XHR2YXIgdmlzaWJsZSA9IGlzVmlzaWJsZShlbGVtKTtcblxuXHRcdFx0ZUx0b3AgLT0gZWxlbUV4cGFuZDtcblx0XHRcdGVMYm90dG9tICs9IGVsZW1FeHBhbmQ7XG5cdFx0XHRlTGxlZnQgLT0gZWxlbUV4cGFuZDtcblx0XHRcdGVMcmlnaHQgKz0gZWxlbUV4cGFuZDtcblxuXHRcdFx0d2hpbGUodmlzaWJsZSAmJiAocGFyZW50ID0gcGFyZW50Lm9mZnNldFBhcmVudCkgJiYgcGFyZW50ICE9IGRvY3VtZW50LmJvZHkgJiYgcGFyZW50ICE9IGRvY0VsZW0pe1xuXHRcdFx0XHR2aXNpYmxlID0gKChnZXRDU1MocGFyZW50LCAnb3BhY2l0eScpIHx8IDEpID4gMCk7XG5cblx0XHRcdFx0aWYodmlzaWJsZSAmJiBnZXRDU1MocGFyZW50LCAnb3ZlcmZsb3cnKSAhPSAndmlzaWJsZScpe1xuXHRcdFx0XHRcdG91dGVyUmVjdCA9IHBhcmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHRcdFx0XHR2aXNpYmxlID0gZUxyaWdodCA+IG91dGVyUmVjdC5sZWZ0ICYmXG5cdFx0XHRcdFx0XHRlTGxlZnQgPCBvdXRlclJlY3QucmlnaHQgJiZcblx0XHRcdFx0XHRcdGVMYm90dG9tID4gb3V0ZXJSZWN0LnRvcCAtIDEgJiZcblx0XHRcdFx0XHRcdGVMdG9wIDwgb3V0ZXJSZWN0LmJvdHRvbSArIDFcblx0XHRcdFx0XHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZpc2libGU7XG5cdFx0fTtcblxuXHRcdHZhciBjaGVja0VsZW1lbnRzID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZUxsZW4sIGksIHJlY3QsIGF1dG9Mb2FkRWxlbSwgbG9hZGVkU29tZXRoaW5nLCBlbGVtRXhwYW5kLCBlbGVtTmVnYXRpdmVFeHBhbmQsIGVsZW1FeHBhbmRWYWwsXG5cdFx0XHRcdGJlZm9yZUV4cGFuZFZhbCwgZGVmYXVsdEV4cGFuZCwgcHJlbG9hZEV4cGFuZCwgaEZhYztcblx0XHRcdHZhciBsYXp5bG9hZEVsZW1zID0gbGF6eXNpemVzLmVsZW1lbnRzO1xuXG5cdFx0XHRpZigobG9hZE1vZGUgPSBsYXp5U2l6ZXNDZmcubG9hZE1vZGUpICYmIGlzTG9hZGluZyA8IDggJiYgKGVMbGVuID0gbGF6eWxvYWRFbGVtcy5sZW5ndGgpKXtcblxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0XHRsb3dSdW5zKys7XG5cblx0XHRcdFx0Zm9yKDsgaSA8IGVMbGVuOyBpKyspe1xuXG5cdFx0XHRcdFx0aWYoIWxhenlsb2FkRWxlbXNbaV0gfHwgbGF6eWxvYWRFbGVtc1tpXS5fbGF6eVJhY2Upe2NvbnRpbnVlO31cblxuXHRcdFx0XHRcdGlmKCFzdXBwb3J0U2Nyb2xsIHx8IChsYXp5c2l6ZXMucHJlbWF0dXJlVW52ZWlsICYmIGxhenlzaXplcy5wcmVtYXR1cmVVbnZlaWwobGF6eWxvYWRFbGVtc1tpXSkpKXt1bnZlaWxFbGVtZW50KGxhenlsb2FkRWxlbXNbaV0pO2NvbnRpbnVlO31cblxuXHRcdFx0XHRcdGlmKCEoZWxlbUV4cGFuZFZhbCA9IGxhenlsb2FkRWxlbXNbaV1bX2dldEF0dHJpYnV0ZV0oJ2RhdGEtZXhwYW5kJykpIHx8ICEoZWxlbUV4cGFuZCA9IGVsZW1FeHBhbmRWYWwgKiAxKSl7XG5cdFx0XHRcdFx0XHRlbGVtRXhwYW5kID0gY3VycmVudEV4cGFuZDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIWRlZmF1bHRFeHBhbmQpIHtcblx0XHRcdFx0XHRcdGRlZmF1bHRFeHBhbmQgPSAoIWxhenlTaXplc0NmZy5leHBhbmQgfHwgbGF6eVNpemVzQ2ZnLmV4cGFuZCA8IDEpID9cblx0XHRcdFx0XHRcdFx0ZG9jRWxlbS5jbGllbnRIZWlnaHQgPiA1MDAgJiYgZG9jRWxlbS5jbGllbnRXaWR0aCA+IDUwMCA/IDUwMCA6IDM3MCA6XG5cdFx0XHRcdFx0XHRcdGxhenlTaXplc0NmZy5leHBhbmQ7XG5cblx0XHRcdFx0XHRcdGxhenlzaXplcy5fZGVmRXggPSBkZWZhdWx0RXhwYW5kO1xuXG5cdFx0XHRcdFx0XHRwcmVsb2FkRXhwYW5kID0gZGVmYXVsdEV4cGFuZCAqIGxhenlTaXplc0NmZy5leHBGYWN0b3I7XG5cdFx0XHRcdFx0XHRoRmFjID0gbGF6eVNpemVzQ2ZnLmhGYWM7XG5cdFx0XHRcdFx0XHRpc0JvZHlIaWRkZW4gPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRpZihjdXJyZW50RXhwYW5kIDwgcHJlbG9hZEV4cGFuZCAmJiBpc0xvYWRpbmcgPCAxICYmIGxvd1J1bnMgPiAyICYmIGxvYWRNb2RlID4gMiAmJiAhZG9jdW1lbnQuaGlkZGVuKXtcblx0XHRcdFx0XHRcdFx0Y3VycmVudEV4cGFuZCA9IHByZWxvYWRFeHBhbmQ7XG5cdFx0XHRcdFx0XHRcdGxvd1J1bnMgPSAwO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmKGxvYWRNb2RlID4gMSAmJiBsb3dSdW5zID4gMSAmJiBpc0xvYWRpbmcgPCA2KXtcblx0XHRcdFx0XHRcdFx0Y3VycmVudEV4cGFuZCA9IGRlZmF1bHRFeHBhbmQ7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjdXJyZW50RXhwYW5kID0gc2hyaW5rRXhwYW5kO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmKGJlZm9yZUV4cGFuZFZhbCAhPT0gZWxlbUV4cGFuZCl7XG5cdFx0XHRcdFx0XHRlTHZXID0gaW5uZXJXaWR0aCArIChlbGVtRXhwYW5kICogaEZhYyk7XG5cdFx0XHRcdFx0XHRlbHZIID0gaW5uZXJIZWlnaHQgKyBlbGVtRXhwYW5kO1xuXHRcdFx0XHRcdFx0ZWxlbU5lZ2F0aXZlRXhwYW5kID0gZWxlbUV4cGFuZCAqIC0xO1xuXHRcdFx0XHRcdFx0YmVmb3JlRXhwYW5kVmFsID0gZWxlbUV4cGFuZDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZWN0ID0gbGF6eWxvYWRFbGVtc1tpXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdFx0XHRcdGlmICgoZUxib3R0b20gPSByZWN0LmJvdHRvbSkgPj0gZWxlbU5lZ2F0aXZlRXhwYW5kICYmXG5cdFx0XHRcdFx0XHQoZUx0b3AgPSByZWN0LnRvcCkgPD0gZWx2SCAmJlxuXHRcdFx0XHRcdFx0KGVMcmlnaHQgPSByZWN0LnJpZ2h0KSA+PSBlbGVtTmVnYXRpdmVFeHBhbmQgKiBoRmFjICYmXG5cdFx0XHRcdFx0XHQoZUxsZWZ0ID0gcmVjdC5sZWZ0KSA8PSBlTHZXICYmXG5cdFx0XHRcdFx0XHQoZUxib3R0b20gfHwgZUxyaWdodCB8fCBlTGxlZnQgfHwgZUx0b3ApICYmXG5cdFx0XHRcdFx0XHQobGF6eVNpemVzQ2ZnLmxvYWRIaWRkZW4gfHwgaXNWaXNpYmxlKGxhenlsb2FkRWxlbXNbaV0pKSAmJlxuXHRcdFx0XHRcdFx0KChpc0NvbXBsZXRlZCAmJiBpc0xvYWRpbmcgPCAzICYmICFlbGVtRXhwYW5kVmFsICYmIChsb2FkTW9kZSA8IDMgfHwgbG93UnVucyA8IDQpKSB8fCBpc05lc3RlZFZpc2libGUobGF6eWxvYWRFbGVtc1tpXSwgZWxlbUV4cGFuZCkpKXtcblx0XHRcdFx0XHRcdHVudmVpbEVsZW1lbnQobGF6eWxvYWRFbGVtc1tpXSk7XG5cdFx0XHRcdFx0XHRsb2FkZWRTb21ldGhpbmcgPSB0cnVlO1xuXHRcdFx0XHRcdFx0aWYoaXNMb2FkaW5nID4gOSl7YnJlYWs7fVxuXHRcdFx0XHRcdH0gZWxzZSBpZighbG9hZGVkU29tZXRoaW5nICYmIGlzQ29tcGxldGVkICYmICFhdXRvTG9hZEVsZW0gJiZcblx0XHRcdFx0XHRcdGlzTG9hZGluZyA8IDQgJiYgbG93UnVucyA8IDQgJiYgbG9hZE1vZGUgPiAyICYmXG5cdFx0XHRcdFx0XHQocHJlbG9hZEVsZW1zWzBdIHx8IGxhenlTaXplc0NmZy5wcmVsb2FkQWZ0ZXJMb2FkKSAmJlxuXHRcdFx0XHRcdFx0KHByZWxvYWRFbGVtc1swXSB8fCAoIWVsZW1FeHBhbmRWYWwgJiYgKChlTGJvdHRvbSB8fCBlTHJpZ2h0IHx8IGVMbGVmdCB8fCBlTHRvcCkgfHwgbGF6eWxvYWRFbGVtc1tpXVtfZ2V0QXR0cmlidXRlXShsYXp5U2l6ZXNDZmcuc2l6ZXNBdHRyKSAhPSAnYXV0bycpKSkpe1xuXHRcdFx0XHRcdFx0YXV0b0xvYWRFbGVtID0gcHJlbG9hZEVsZW1zWzBdIHx8IGxhenlsb2FkRWxlbXNbaV07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoYXV0b0xvYWRFbGVtICYmICFsb2FkZWRTb21ldGhpbmcpe1xuXHRcdFx0XHRcdHVudmVpbEVsZW1lbnQoYXV0b0xvYWRFbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR2YXIgdGhyb3R0bGVkQ2hlY2tFbGVtZW50cyA9IHRocm90dGxlKGNoZWNrRWxlbWVudHMpO1xuXG5cdFx0dmFyIHN3aXRjaExvYWRpbmdDbGFzcyA9IGZ1bmN0aW9uKGUpe1xuXHRcdFx0dmFyIGVsZW0gPSBlLnRhcmdldDtcblxuXHRcdFx0aWYgKGVsZW0uX2xhenlDYWNoZSkge1xuXHRcdFx0XHRkZWxldGUgZWxlbS5fbGF6eUNhY2hlO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHJlc2V0UHJlbG9hZGluZyhlKTtcblx0XHRcdGFkZENsYXNzKGVsZW0sIGxhenlTaXplc0NmZy5sb2FkZWRDbGFzcyk7XG5cdFx0XHRyZW1vdmVDbGFzcyhlbGVtLCBsYXp5U2l6ZXNDZmcubG9hZGluZ0NsYXNzKTtcblx0XHRcdGFkZFJlbW92ZUxvYWRFdmVudHMoZWxlbSwgcmFmU3dpdGNoTG9hZGluZ0NsYXNzKTtcblx0XHRcdHRyaWdnZXJFdmVudChlbGVtLCAnbGF6eWxvYWRlZCcpO1xuXHRcdH07XG5cdFx0dmFyIHJhZmVkU3dpdGNoTG9hZGluZ0NsYXNzID0gckFGSXQoc3dpdGNoTG9hZGluZ0NsYXNzKTtcblx0XHR2YXIgcmFmU3dpdGNoTG9hZGluZ0NsYXNzID0gZnVuY3Rpb24oZSl7XG5cdFx0XHRyYWZlZFN3aXRjaExvYWRpbmdDbGFzcyh7dGFyZ2V0OiBlLnRhcmdldH0pO1xuXHRcdH07XG5cblx0XHR2YXIgY2hhbmdlSWZyYW1lU3JjID0gZnVuY3Rpb24oZWxlbSwgc3JjKXtcblx0XHRcdHZhciBsb2FkTW9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlKCdkYXRhLWxvYWQtbW9kZScpIHx8IGxhenlTaXplc0NmZy5pZnJhbWVMb2FkTW9kZTtcblxuXHRcdFx0Ly8gbG9hZE1vZGUgY2FuIGJlIGFsc28gYSBzdHJpbmchXG5cdFx0XHRpZiAobG9hZE1vZGUgPT0gMCkge1xuXHRcdFx0XHRlbGVtLmNvbnRlbnRXaW5kb3cubG9jYXRpb24ucmVwbGFjZShzcmMpO1xuXHRcdFx0fSBlbHNlIGlmIChsb2FkTW9kZSA9PSAxKSB7XG5cdFx0XHRcdGVsZW0uc3JjID0gc3JjO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR2YXIgaGFuZGxlU291cmNlcyA9IGZ1bmN0aW9uKHNvdXJjZSl7XG5cdFx0XHR2YXIgY3VzdG9tTWVkaWE7XG5cblx0XHRcdHZhciBzb3VyY2VTcmNzZXQgPSBzb3VyY2VbX2dldEF0dHJpYnV0ZV0obGF6eVNpemVzQ2ZnLnNyY3NldEF0dHIpO1xuXG5cdFx0XHRpZiggKGN1c3RvbU1lZGlhID0gbGF6eVNpemVzQ2ZnLmN1c3RvbU1lZGlhW3NvdXJjZVtfZ2V0QXR0cmlidXRlXSgnZGF0YS1tZWRpYScpIHx8IHNvdXJjZVtfZ2V0QXR0cmlidXRlXSgnbWVkaWEnKV0pICl7XG5cdFx0XHRcdHNvdXJjZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgY3VzdG9tTWVkaWEpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihzb3VyY2VTcmNzZXQpe1xuXHRcdFx0XHRzb3VyY2Uuc2V0QXR0cmlidXRlKCdzcmNzZXQnLCBzb3VyY2VTcmNzZXQpO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR2YXIgbGF6eVVudmVpbCA9IHJBRkl0KGZ1bmN0aW9uIChlbGVtLCBkZXRhaWwsIGlzQXV0bywgc2l6ZXMsIGlzSW1nKXtcblx0XHRcdHZhciBzcmMsIHNyY3NldCwgcGFyZW50LCBpc1BpY3R1cmUsIGV2ZW50LCBmaXJlc0xvYWQ7XG5cblx0XHRcdGlmKCEoZXZlbnQgPSB0cmlnZ2VyRXZlbnQoZWxlbSwgJ2xhenliZWZvcmV1bnZlaWwnLCBkZXRhaWwpKS5kZWZhdWx0UHJldmVudGVkKXtcblxuXHRcdFx0XHRpZihzaXplcyl7XG5cdFx0XHRcdFx0aWYoaXNBdXRvKXtcblx0XHRcdFx0XHRcdGFkZENsYXNzKGVsZW0sIGxhenlTaXplc0NmZy5hdXRvc2l6ZXNDbGFzcyk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCdzaXplcycsIHNpemVzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzcmNzZXQgPSBlbGVtW19nZXRBdHRyaWJ1dGVdKGxhenlTaXplc0NmZy5zcmNzZXRBdHRyKTtcblx0XHRcdFx0c3JjID0gZWxlbVtfZ2V0QXR0cmlidXRlXShsYXp5U2l6ZXNDZmcuc3JjQXR0cik7XG5cblx0XHRcdFx0aWYoaXNJbWcpIHtcblx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdFx0aXNQaWN0dXJlID0gcGFyZW50ICYmIHJlZ1BpY3R1cmUudGVzdChwYXJlbnQubm9kZU5hbWUgfHwgJycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZmlyZXNMb2FkID0gZGV0YWlsLmZpcmVzTG9hZCB8fCAoKCdzcmMnIGluIGVsZW0pICYmIChzcmNzZXQgfHwgc3JjIHx8IGlzUGljdHVyZSkpO1xuXG5cdFx0XHRcdGV2ZW50ID0ge3RhcmdldDogZWxlbX07XG5cblx0XHRcdFx0YWRkQ2xhc3MoZWxlbSwgbGF6eVNpemVzQ2ZnLmxvYWRpbmdDbGFzcyk7XG5cblx0XHRcdFx0aWYoZmlyZXNMb2FkKXtcblx0XHRcdFx0XHRjbGVhclRpbWVvdXQocmVzZXRQcmVsb2FkaW5nVGltZXIpO1xuXHRcdFx0XHRcdHJlc2V0UHJlbG9hZGluZ1RpbWVyID0gc2V0VGltZW91dChyZXNldFByZWxvYWRpbmcsIDI1MDApO1xuXHRcdFx0XHRcdGFkZFJlbW92ZUxvYWRFdmVudHMoZWxlbSwgcmFmU3dpdGNoTG9hZGluZ0NsYXNzLCB0cnVlKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmKGlzUGljdHVyZSl7XG5cdFx0XHRcdFx0Zm9yRWFjaC5jYWxsKHBhcmVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc291cmNlJyksIGhhbmRsZVNvdXJjZXMpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoc3Jjc2V0KXtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSgnc3Jjc2V0Jywgc3Jjc2V0KTtcblx0XHRcdFx0fSBlbHNlIGlmKHNyYyAmJiAhaXNQaWN0dXJlKXtcblx0XHRcdFx0XHRpZihyZWdJZnJhbWUudGVzdChlbGVtLm5vZGVOYW1lKSl7XG5cdFx0XHRcdFx0XHRjaGFuZ2VJZnJhbWVTcmMoZWxlbSwgc3JjKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZWxlbS5zcmMgPSBzcmM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoaXNJbWcgJiYgKHNyY3NldCB8fCBpc1BpY3R1cmUpKXtcblx0XHRcdFx0XHR1cGRhdGVQb2x5ZmlsbChlbGVtLCB7c3JjOiBzcmN9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZihlbGVtLl9sYXp5UmFjZSl7XG5cdFx0XHRcdGRlbGV0ZSBlbGVtLl9sYXp5UmFjZTtcblx0XHRcdH1cblx0XHRcdHJlbW92ZUNsYXNzKGVsZW0sIGxhenlTaXplc0NmZy5sYXp5Q2xhc3MpO1xuXG5cdFx0XHRyQUYoZnVuY3Rpb24oKXtcblx0XHRcdFx0Ly8gUGFydCBvZiB0aGlzIGNhbiBiZSByZW1vdmVkIGFzIHNvb24gYXMgdGhpcyBmaXggaXMgb2xkZXI6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTc3MzEgKDIwMTUpXG5cdFx0XHRcdHZhciBpc0xvYWRlZCA9IGVsZW0uY29tcGxldGUgJiYgZWxlbS5uYXR1cmFsV2lkdGggPiAxO1xuXG5cdFx0XHRcdGlmKCAhZmlyZXNMb2FkIHx8IGlzTG9hZGVkKXtcblx0XHRcdFx0XHRpZiAoaXNMb2FkZWQpIHtcblx0XHRcdFx0XHRcdGFkZENsYXNzKGVsZW0sIGxhenlTaXplc0NmZy5mYXN0TG9hZGVkQ2xhc3MpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRzd2l0Y2hMb2FkaW5nQ2xhc3MoZXZlbnQpO1xuXHRcdFx0XHRcdGVsZW0uX2xhenlDYWNoZSA9IHRydWU7XG5cdFx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0aWYgKCdfbGF6eUNhY2hlJyBpbiBlbGVtKSB7XG5cdFx0XHRcdFx0XHRcdGRlbGV0ZSBlbGVtLl9sYXp5Q2FjaGU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSwgOSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGVsZW0ubG9hZGluZyA9PSAnbGF6eScpIHtcblx0XHRcdFx0XHRpc0xvYWRpbmctLTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdHJ1ZSk7XG5cdFx0fSk7XG5cblx0XHQvKipcblx0XHQgKlxuXHRcdCAqIEBwYXJhbSBlbGVtIHsgRWxlbWVudCB9XG5cdFx0ICovXG5cdFx0dmFyIHVudmVpbEVsZW1lbnQgPSBmdW5jdGlvbiAoZWxlbSl7XG5cdFx0XHRpZiAoZWxlbS5fbGF6eVJhY2UpIHtyZXR1cm47fVxuXHRcdFx0dmFyIGRldGFpbDtcblxuXHRcdFx0dmFyIGlzSW1nID0gcmVnSW1nLnRlc3QoZWxlbS5ub2RlTmFtZSk7XG5cblx0XHRcdC8vYWxsb3cgdXNpbmcgc2l6ZXM9XCJhdXRvXCIsIGJ1dCBkb24ndCB1c2UuIGl0J3MgaW52YWxpZC4gVXNlIGRhdGEtc2l6ZXM9XCJhdXRvXCIgb3IgYSB2YWxpZCB2YWx1ZSBmb3Igc2l6ZXMgaW5zdGVhZCAoaS5lLjogc2l6ZXM9XCI4MHZ3XCIpXG5cdFx0XHR2YXIgc2l6ZXMgPSBpc0ltZyAmJiAoZWxlbVtfZ2V0QXR0cmlidXRlXShsYXp5U2l6ZXNDZmcuc2l6ZXNBdHRyKSB8fCBlbGVtW19nZXRBdHRyaWJ1dGVdKCdzaXplcycpKTtcblx0XHRcdHZhciBpc0F1dG8gPSBzaXplcyA9PSAnYXV0byc7XG5cblx0XHRcdGlmKCAoaXNBdXRvIHx8ICFpc0NvbXBsZXRlZCkgJiYgaXNJbWcgJiYgKGVsZW1bX2dldEF0dHJpYnV0ZV0oJ3NyYycpIHx8IGVsZW0uc3Jjc2V0KSAmJiAhZWxlbS5jb21wbGV0ZSAmJiAhaGFzQ2xhc3MoZWxlbSwgbGF6eVNpemVzQ2ZnLmVycm9yQ2xhc3MpICYmIGhhc0NsYXNzKGVsZW0sIGxhenlTaXplc0NmZy5sYXp5Q2xhc3MpKXtyZXR1cm47fVxuXG5cdFx0XHRkZXRhaWwgPSB0cmlnZ2VyRXZlbnQoZWxlbSwgJ2xhenl1bnZlaWxyZWFkJykuZGV0YWlsO1xuXG5cdFx0XHRpZihpc0F1dG8pe1xuXHRcdFx0XHQgYXV0b1NpemVyLnVwZGF0ZUVsZW0oZWxlbSwgdHJ1ZSwgZWxlbS5vZmZzZXRXaWR0aCk7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uX2xhenlSYWNlID0gdHJ1ZTtcblx0XHRcdGlzTG9hZGluZysrO1xuXG5cdFx0XHRsYXp5VW52ZWlsKGVsZW0sIGRldGFpbCwgaXNBdXRvLCBzaXplcywgaXNJbWcpO1xuXHRcdH07XG5cblx0XHR2YXIgYWZ0ZXJTY3JvbGwgPSBkZWJvdW5jZShmdW5jdGlvbigpe1xuXHRcdFx0bGF6eVNpemVzQ2ZnLmxvYWRNb2RlID0gMztcblx0XHRcdHRocm90dGxlZENoZWNrRWxlbWVudHMoKTtcblx0XHR9KTtcblxuXHRcdHZhciBhbHRMb2FkbW9kZVNjcm9sbExpc3RuZXIgPSBmdW5jdGlvbigpe1xuXHRcdFx0aWYobGF6eVNpemVzQ2ZnLmxvYWRNb2RlID09IDMpe1xuXHRcdFx0XHRsYXp5U2l6ZXNDZmcubG9hZE1vZGUgPSAyO1xuXHRcdFx0fVxuXHRcdFx0YWZ0ZXJTY3JvbGwoKTtcblx0XHR9O1xuXG5cdFx0dmFyIG9ubG9hZCA9IGZ1bmN0aW9uKCl7XG5cdFx0XHRpZihpc0NvbXBsZXRlZCl7cmV0dXJuO31cblx0XHRcdGlmKERhdGUubm93KCkgLSBzdGFydGVkIDwgOTk5KXtcblx0XHRcdFx0c2V0VGltZW91dChvbmxvYWQsIDk5OSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXG5cdFx0XHRpc0NvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdGxhenlTaXplc0NmZy5sb2FkTW9kZSA9IDM7XG5cblx0XHRcdHRocm90dGxlZENoZWNrRWxlbWVudHMoKTtcblxuXHRcdFx0YWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgYWx0TG9hZG1vZGVTY3JvbGxMaXN0bmVyLCB0cnVlKTtcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdF86IGZ1bmN0aW9uKCl7XG5cdFx0XHRcdHN0YXJ0ZWQgPSBEYXRlLm5vdygpO1xuXG5cdFx0XHRcdGxhenlzaXplcy5lbGVtZW50cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUobGF6eVNpemVzQ2ZnLmxhenlDbGFzcyk7XG5cdFx0XHRcdHByZWxvYWRFbGVtcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUobGF6eVNpemVzQ2ZnLmxhenlDbGFzcyArICcgJyArIGxhenlTaXplc0NmZy5wcmVsb2FkQ2xhc3MpO1xuXG5cdFx0XHRcdGFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRocm90dGxlZENoZWNrRWxlbWVudHMsIHRydWUpO1xuXG5cdFx0XHRcdGFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRocm90dGxlZENoZWNrRWxlbWVudHMsIHRydWUpO1xuXG5cdFx0XHRcdGFkZEV2ZW50TGlzdGVuZXIoJ3BhZ2VzaG93JywgZnVuY3Rpb24gKGUpIHtcblx0XHRcdFx0XHRpZiAoZS5wZXJzaXN0ZWQpIHtcblx0XHRcdFx0XHRcdHZhciBsb2FkaW5nRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIGxhenlTaXplc0NmZy5sb2FkaW5nQ2xhc3MpO1xuXG5cdFx0XHRcdFx0XHRpZiAobG9hZGluZ0VsZW1lbnRzLmxlbmd0aCAmJiBsb2FkaW5nRWxlbWVudHMuZm9yRWFjaCkge1xuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0XHRcdGxvYWRpbmdFbGVtZW50cy5mb3JFYWNoKCBmdW5jdGlvbiAoaW1nKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoaW1nLmNvbXBsZXRlKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHVudmVpbEVsZW1lbnQoaW1nKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRpZih3aW5kb3cuTXV0YXRpb25PYnNlcnZlcil7XG5cdFx0XHRcdFx0bmV3IE11dGF0aW9uT2JzZXJ2ZXIoIHRocm90dGxlZENoZWNrRWxlbWVudHMgKS5vYnNlcnZlKCBkb2NFbGVtLCB7Y2hpbGRMaXN0OiB0cnVlLCBzdWJ0cmVlOiB0cnVlLCBhdHRyaWJ1dGVzOiB0cnVlfSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRvY0VsZW1bX2FkZEV2ZW50TGlzdGVuZXJdKCdET01Ob2RlSW5zZXJ0ZWQnLCB0aHJvdHRsZWRDaGVja0VsZW1lbnRzLCB0cnVlKTtcblx0XHRcdFx0XHRkb2NFbGVtW19hZGRFdmVudExpc3RlbmVyXSgnRE9NQXR0ck1vZGlmaWVkJywgdGhyb3R0bGVkQ2hlY2tFbGVtZW50cywgdHJ1ZSk7XG5cdFx0XHRcdFx0c2V0SW50ZXJ2YWwodGhyb3R0bGVkQ2hlY2tFbGVtZW50cywgOTk5KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGFkZEV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCB0aHJvdHRsZWRDaGVja0VsZW1lbnRzLCB0cnVlKTtcblxuXHRcdFx0XHQvLywgJ2Z1bGxzY3JlZW5jaGFuZ2UnXG5cdFx0XHRcdFsnZm9jdXMnLCAnbW91c2VvdmVyJywgJ2NsaWNrJywgJ2xvYWQnLCAndHJhbnNpdGlvbmVuZCcsICdhbmltYXRpb25lbmQnXS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpe1xuXHRcdFx0XHRcdGRvY3VtZW50W19hZGRFdmVudExpc3RlbmVyXShuYW1lLCB0aHJvdHRsZWRDaGVja0VsZW1lbnRzLCB0cnVlKTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0aWYoKC9kJHxeYy8udGVzdChkb2N1bWVudC5yZWFkeVN0YXRlKSkpe1xuXHRcdFx0XHRcdG9ubG9hZCgpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBvbmxvYWQpO1xuXHRcdFx0XHRcdGRvY3VtZW50W19hZGRFdmVudExpc3RlbmVyXSgnRE9NQ29udGVudExvYWRlZCcsIHRocm90dGxlZENoZWNrRWxlbWVudHMpO1xuXHRcdFx0XHRcdHNldFRpbWVvdXQob25sb2FkLCAyMDAwMCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZihsYXp5c2l6ZXMuZWxlbWVudHMubGVuZ3RoKXtcblx0XHRcdFx0XHRjaGVja0VsZW1lbnRzKCk7XG5cdFx0XHRcdFx0ckFGLl9sc0ZsdXNoKCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhyb3R0bGVkQ2hlY2tFbGVtZW50cygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0Y2hlY2tFbGVtczogdGhyb3R0bGVkQ2hlY2tFbGVtZW50cyxcblx0XHRcdHVudmVpbDogdW52ZWlsRWxlbWVudCxcblx0XHRcdF9hTFNMOiBhbHRMb2FkbW9kZVNjcm9sbExpc3RuZXIsXG5cdFx0fTtcblx0fSkoKTtcblxuXG5cdHZhciBhdXRvU2l6ZXIgPSAoZnVuY3Rpb24oKXtcblx0XHR2YXIgYXV0b3NpemVzRWxlbXM7XG5cblx0XHR2YXIgc2l6ZUVsZW1lbnQgPSByQUZJdChmdW5jdGlvbihlbGVtLCBwYXJlbnQsIGV2ZW50LCB3aWR0aCl7XG5cdFx0XHR2YXIgc291cmNlcywgaSwgbGVuO1xuXHRcdFx0ZWxlbS5fbGF6eXNpemVzV2lkdGggPSB3aWR0aDtcblx0XHRcdHdpZHRoICs9ICdweCc7XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCdzaXplcycsIHdpZHRoKTtcblxuXHRcdFx0aWYocmVnUGljdHVyZS50ZXN0KHBhcmVudC5ub2RlTmFtZSB8fCAnJykpe1xuXHRcdFx0XHRzb3VyY2VzID0gcGFyZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzb3VyY2UnKTtcblx0XHRcdFx0Zm9yKGkgPSAwLCBsZW4gPSBzb3VyY2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKXtcblx0XHRcdFx0XHRzb3VyY2VzW2ldLnNldEF0dHJpYnV0ZSgnc2l6ZXMnLCB3aWR0aCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYoIWV2ZW50LmRldGFpbC5kYXRhQXR0cil7XG5cdFx0XHRcdHVwZGF0ZVBvbHlmaWxsKGVsZW0sIGV2ZW50LmRldGFpbCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0LyoqXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0gZWxlbSB7RWxlbWVudH1cblx0XHQgKiBAcGFyYW0gZGF0YUF0dHJcblx0XHQgKiBAcGFyYW0gW3dpZHRoXSB7IG51bWJlciB9XG5cdFx0ICovXG5cdFx0dmFyIGdldFNpemVFbGVtZW50ID0gZnVuY3Rpb24gKGVsZW0sIGRhdGFBdHRyLCB3aWR0aCl7XG5cdFx0XHR2YXIgZXZlbnQ7XG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZihwYXJlbnQpe1xuXHRcdFx0XHR3aWR0aCA9IGdldFdpZHRoKGVsZW0sIHBhcmVudCwgd2lkdGgpO1xuXHRcdFx0XHRldmVudCA9IHRyaWdnZXJFdmVudChlbGVtLCAnbGF6eWJlZm9yZXNpemVzJywge3dpZHRoOiB3aWR0aCwgZGF0YUF0dHI6ICEhZGF0YUF0dHJ9KTtcblxuXHRcdFx0XHRpZighZXZlbnQuZGVmYXVsdFByZXZlbnRlZCl7XG5cdFx0XHRcdFx0d2lkdGggPSBldmVudC5kZXRhaWwud2lkdGg7XG5cblx0XHRcdFx0XHRpZih3aWR0aCAmJiB3aWR0aCAhPT0gZWxlbS5fbGF6eXNpemVzV2lkdGgpe1xuXHRcdFx0XHRcdFx0c2l6ZUVsZW1lbnQoZWxlbSwgcGFyZW50LCBldmVudCwgd2lkdGgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR2YXIgdXBkYXRlRWxlbWVudHNTaXplcyA9IGZ1bmN0aW9uKCl7XG5cdFx0XHR2YXIgaTtcblx0XHRcdHZhciBsZW4gPSBhdXRvc2l6ZXNFbGVtcy5sZW5ndGg7XG5cdFx0XHRpZihsZW4pe1xuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0XHRmb3IoOyBpIDwgbGVuOyBpKyspe1xuXHRcdFx0XHRcdGdldFNpemVFbGVtZW50KGF1dG9zaXplc0VsZW1zW2ldKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR2YXIgZGVib3VuY2VkVXBkYXRlRWxlbWVudHNTaXplcyA9IGRlYm91bmNlKHVwZGF0ZUVsZW1lbnRzU2l6ZXMpO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdF86IGZ1bmN0aW9uKCl7XG5cdFx0XHRcdGF1dG9zaXplc0VsZW1zID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShsYXp5U2l6ZXNDZmcuYXV0b3NpemVzQ2xhc3MpO1xuXHRcdFx0XHRhZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBkZWJvdW5jZWRVcGRhdGVFbGVtZW50c1NpemVzKTtcblx0XHRcdH0sXG5cdFx0XHRjaGVja0VsZW1zOiBkZWJvdW5jZWRVcGRhdGVFbGVtZW50c1NpemVzLFxuXHRcdFx0dXBkYXRlRWxlbTogZ2V0U2l6ZUVsZW1lbnRcblx0XHR9O1xuXHR9KSgpO1xuXG5cdHZhciBpbml0ID0gZnVuY3Rpb24oKXtcblx0XHRpZighaW5pdC5pICYmIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUpe1xuXHRcdFx0aW5pdC5pID0gdHJ1ZTtcblx0XHRcdGF1dG9TaXplci5fKCk7XG5cdFx0XHRsb2FkZXIuXygpO1xuXHRcdH1cblx0fTtcblxuXHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdFx0aWYobGF6eVNpemVzQ2ZnLmluaXQpe1xuXHRcdFx0aW5pdCgpO1xuXHRcdH1cblx0fSk7XG5cblx0bGF6eXNpemVzID0ge1xuXHRcdC8qKlxuXHRcdCAqIEB0eXBlIHsgTGF6eVNpemVzQ29uZmlnUGFydGlhbCB9XG5cdFx0ICovXG5cdFx0Y2ZnOiBsYXp5U2l6ZXNDZmcsXG5cdFx0YXV0b1NpemVyOiBhdXRvU2l6ZXIsXG5cdFx0bG9hZGVyOiBsb2FkZXIsXG5cdFx0aW5pdDogaW5pdCxcblx0XHR1UDogdXBkYXRlUG9seWZpbGwsXG5cdFx0YUM6IGFkZENsYXNzLFxuXHRcdHJDOiByZW1vdmVDbGFzcyxcblx0XHRoQzogaGFzQ2xhc3MsXG5cdFx0ZmlyZTogdHJpZ2dlckV2ZW50LFxuXHRcdGdXOiBnZXRXaWR0aCxcblx0XHRyQUY6IHJBRixcblx0fTtcblxuXHRyZXR1cm4gbGF6eXNpemVzO1xufVxuKSk7XG4iLCIvKiFcbiAqIEluZmluaXRlIFNjcm9sbCB2Mi4wLjRcbiAqIG1lYXN1cmUgc2l6ZSBvZiBlbGVtZW50c1xuICogTUlUIGxpY2Vuc2VcbiAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LmdldFNpemUgPSBmYWN0b3J5KCk7XG4gIH1cblxufSApKCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoKSB7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGhlbHBlcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLy8gZ2V0IGEgbnVtYmVyIGZyb20gYSBzdHJpbmcsIG5vdCBhIHBlcmNlbnRhZ2VcbmZ1bmN0aW9uIGdldFN0eWxlU2l6ZSggdmFsdWUgKSB7XG4gIGxldCBudW0gPSBwYXJzZUZsb2F0KCB2YWx1ZSApO1xuICAvLyBub3QgYSBwZXJjZW50IGxpa2UgJzEwMCUnLCBhbmQgYSBudW1iZXJcbiAgbGV0IGlzVmFsaWQgPSB2YWx1ZS5pbmRleE9mKCclJykgPT0gLTEgJiYgIWlzTmFOKCBudW0gKTtcbiAgcmV0dXJuIGlzVmFsaWQgJiYgbnVtO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBtZWFzdXJlbWVudHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxubGV0IG1lYXN1cmVtZW50cyA9IFtcbiAgJ3BhZGRpbmdMZWZ0JyxcbiAgJ3BhZGRpbmdSaWdodCcsXG4gICdwYWRkaW5nVG9wJyxcbiAgJ3BhZGRpbmdCb3R0b20nLFxuICAnbWFyZ2luTGVmdCcsXG4gICdtYXJnaW5SaWdodCcsXG4gICdtYXJnaW5Ub3AnLFxuICAnbWFyZ2luQm90dG9tJyxcbiAgJ2JvcmRlckxlZnRXaWR0aCcsXG4gICdib3JkZXJSaWdodFdpZHRoJyxcbiAgJ2JvcmRlclRvcFdpZHRoJyxcbiAgJ2JvcmRlckJvdHRvbVdpZHRoJyxcbl07XG5cbmxldCBtZWFzdXJlbWVudHNMZW5ndGggPSBtZWFzdXJlbWVudHMubGVuZ3RoO1xuXG5mdW5jdGlvbiBnZXRaZXJvU2l6ZSgpIHtcbiAgbGV0IHNpemUgPSB7XG4gICAgd2lkdGg6IDAsXG4gICAgaGVpZ2h0OiAwLFxuICAgIGlubmVyV2lkdGg6IDAsXG4gICAgaW5uZXJIZWlnaHQ6IDAsXG4gICAgb3V0ZXJXaWR0aDogMCxcbiAgICBvdXRlckhlaWdodDogMCxcbiAgfTtcbiAgbWVhc3VyZW1lbnRzLmZvckVhY2goICggbWVhc3VyZW1lbnQgKSA9PiB7XG4gICAgc2l6ZVsgbWVhc3VyZW1lbnQgXSA9IDA7XG4gIH0gKTtcbiAgcmV0dXJuIHNpemU7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGdldFNpemUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gZ2V0U2l6ZSggZWxlbSApIHtcbiAgLy8gdXNlIHF1ZXJ5U2VsZXRvciBpZiBlbGVtIGlzIHN0cmluZ1xuICBpZiAoIHR5cGVvZiBlbGVtID09ICdzdHJpbmcnICkgZWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIGVsZW0gKTtcblxuICAvLyBkbyBub3QgcHJvY2VlZCBvbiBub24tb2JqZWN0c1xuICBsZXQgaXNFbGVtZW50ID0gZWxlbSAmJiB0eXBlb2YgZWxlbSA9PSAnb2JqZWN0JyAmJiBlbGVtLm5vZGVUeXBlO1xuICBpZiAoICFpc0VsZW1lbnQgKSByZXR1cm47XG5cbiAgbGV0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuXG4gIC8vIGlmIGhpZGRlbiwgZXZlcnl0aGluZyBpcyAwXG4gIGlmICggc3R5bGUuZGlzcGxheSA9PSAnbm9uZScgKSByZXR1cm4gZ2V0WmVyb1NpemUoKTtcblxuICBsZXQgc2l6ZSA9IHt9O1xuICBzaXplLndpZHRoID0gZWxlbS5vZmZzZXRXaWR0aDtcbiAgc2l6ZS5oZWlnaHQgPSBlbGVtLm9mZnNldEhlaWdodDtcblxuICBsZXQgaXNCb3JkZXJCb3ggPSBzaXplLmlzQm9yZGVyQm94ID0gc3R5bGUuYm94U2l6aW5nID09ICdib3JkZXItYm94JztcblxuICAvLyBnZXQgYWxsIG1lYXN1cmVtZW50c1xuICBtZWFzdXJlbWVudHMuZm9yRWFjaCggKCBtZWFzdXJlbWVudCApID0+IHtcbiAgICBsZXQgdmFsdWUgPSBzdHlsZVsgbWVhc3VyZW1lbnQgXTtcbiAgICBsZXQgbnVtID0gcGFyc2VGbG9hdCggdmFsdWUgKTtcbiAgICAvLyBhbnkgJ2F1dG8nLCAnbWVkaXVtJyB2YWx1ZSB3aWxsIGJlIDBcbiAgICBzaXplWyBtZWFzdXJlbWVudCBdID0gIWlzTmFOKCBudW0gKSA/IG51bSA6IDA7XG4gIH0gKTtcblxuICBsZXQgcGFkZGluZ1dpZHRoID0gc2l6ZS5wYWRkaW5nTGVmdCArIHNpemUucGFkZGluZ1JpZ2h0O1xuICBsZXQgcGFkZGluZ0hlaWdodCA9IHNpemUucGFkZGluZ1RvcCArIHNpemUucGFkZGluZ0JvdHRvbTtcbiAgbGV0IG1hcmdpbldpZHRoID0gc2l6ZS5tYXJnaW5MZWZ0ICsgc2l6ZS5tYXJnaW5SaWdodDtcbiAgbGV0IG1hcmdpbkhlaWdodCA9IHNpemUubWFyZ2luVG9wICsgc2l6ZS5tYXJnaW5Cb3R0b207XG4gIGxldCBib3JkZXJXaWR0aCA9IHNpemUuYm9yZGVyTGVmdFdpZHRoICsgc2l6ZS5ib3JkZXJSaWdodFdpZHRoO1xuICBsZXQgYm9yZGVySGVpZ2h0ID0gc2l6ZS5ib3JkZXJUb3BXaWR0aCArIHNpemUuYm9yZGVyQm90dG9tV2lkdGg7XG5cbiAgLy8gb3ZlcndyaXRlIHdpZHRoIGFuZCBoZWlnaHQgaWYgd2UgY2FuIGdldCBpdCBmcm9tIHN0eWxlXG4gIGxldCBzdHlsZVdpZHRoID0gZ2V0U3R5bGVTaXplKCBzdHlsZS53aWR0aCApO1xuICBpZiAoIHN0eWxlV2lkdGggIT09IGZhbHNlICkge1xuICAgIHNpemUud2lkdGggPSBzdHlsZVdpZHRoICtcbiAgICAgIC8vIGFkZCBwYWRkaW5nIGFuZCBib3JkZXIgdW5sZXNzIGl0J3MgYWxyZWFkeSBpbmNsdWRpbmcgaXRcbiAgICAgICggaXNCb3JkZXJCb3ggPyAwIDogcGFkZGluZ1dpZHRoICsgYm9yZGVyV2lkdGggKTtcbiAgfVxuXG4gIGxldCBzdHlsZUhlaWdodCA9IGdldFN0eWxlU2l6ZSggc3R5bGUuaGVpZ2h0ICk7XG4gIGlmICggc3R5bGVIZWlnaHQgIT09IGZhbHNlICkge1xuICAgIHNpemUuaGVpZ2h0ID0gc3R5bGVIZWlnaHQgK1xuICAgICAgLy8gYWRkIHBhZGRpbmcgYW5kIGJvcmRlciB1bmxlc3MgaXQncyBhbHJlYWR5IGluY2x1ZGluZyBpdFxuICAgICAgKCBpc0JvcmRlckJveCA/IDAgOiBwYWRkaW5nSGVpZ2h0ICsgYm9yZGVySGVpZ2h0ICk7XG4gIH1cblxuICBzaXplLmlubmVyV2lkdGggPSBzaXplLndpZHRoIC0gKCBwYWRkaW5nV2lkdGggKyBib3JkZXJXaWR0aCApO1xuICBzaXplLmlubmVySGVpZ2h0ID0gc2l6ZS5oZWlnaHQgLSAoIHBhZGRpbmdIZWlnaHQgKyBib3JkZXJIZWlnaHQgKTtcblxuICBzaXplLm91dGVyV2lkdGggPSBzaXplLndpZHRoICsgbWFyZ2luV2lkdGg7XG4gIHNpemUub3V0ZXJIZWlnaHQgPSBzaXplLmhlaWdodCArIG1hcmdpbkhlaWdodDtcblxuICByZXR1cm4gc2l6ZTtcbn1cblxucmV0dXJuIGdldFNpemU7XG5cbn0gKTtcbiIsIi8qIVxuICogVW5pZHJhZ2dlciB2My4wLjFcbiAqIERyYWdnYWJsZSBiYXNlIGNsYXNzXG4gKiBNSVQgbGljZW5zZVxuICovXG5cbiggZnVuY3Rpb24oIHdpbmRvdywgZmFjdG9yeSApIHtcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgICAgd2luZG93LFxuICAgICAgICByZXF1aXJlKCdldi1lbWl0dGVyJyksXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5VbmlkcmFnZ2VyID0gZmFjdG9yeShcbiAgICAgICAgd2luZG93LFxuICAgICAgICB3aW5kb3cuRXZFbWl0dGVyLFxuICAgICk7XG4gIH1cblxufSggdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgRXZFbWl0dGVyICkge1xuXG5mdW5jdGlvbiBVbmlkcmFnZ2VyKCkge31cblxuLy8gaW5oZXJpdCBFdkVtaXR0ZXJcbmxldCBwcm90byA9IFVuaWRyYWdnZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggRXZFbWl0dGVyLnByb3RvdHlwZSApO1xuXG4vLyAtLS0tLSBiaW5kIHN0YXJ0IC0tLS0tIC8vXG5cbi8vIHRyaWdnZXIgaGFuZGxlciBtZXRob2RzIGZvciBldmVudHNcbnByb3RvLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICBsZXQgbWV0aG9kID0gJ29uJyArIGV2ZW50LnR5cGU7XG4gIGlmICggdGhpc1sgbWV0aG9kIF0gKSB7XG4gICAgdGhpc1sgbWV0aG9kIF0oIGV2ZW50ICk7XG4gIH1cbn07XG5cbmxldCBzdGFydEV2ZW50LCBhY3RpdmVFdmVudHM7XG5pZiAoICdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyApIHtcbiAgLy8gSEFDSyBwcmVmZXIgVG91Y2ggRXZlbnRzIGFzIHlvdSBjYW4gcHJldmVudERlZmF1bHQgb24gdG91Y2hzdGFydCB0b1xuICAvLyBkaXNhYmxlIHNjcm9sbCBpbiBpT1MgJiBtb2JpbGUgQ2hyb21lIG1ldGFmaXp6eS9mbGlja2l0eSMxMTc3XG4gIHN0YXJ0RXZlbnQgPSAndG91Y2hzdGFydCc7XG4gIGFjdGl2ZUV2ZW50cyA9IFsgJ3RvdWNobW92ZScsICd0b3VjaGVuZCcsICd0b3VjaGNhbmNlbCcgXTtcbn0gZWxzZSBpZiAoIHdpbmRvdy5Qb2ludGVyRXZlbnQgKSB7XG4gIC8vIFBvaW50ZXIgRXZlbnRzXG4gIHN0YXJ0RXZlbnQgPSAncG9pbnRlcmRvd24nO1xuICBhY3RpdmVFdmVudHMgPSBbICdwb2ludGVybW92ZScsICdwb2ludGVydXAnLCAncG9pbnRlcmNhbmNlbCcgXTtcbn0gZWxzZSB7XG4gIC8vIG1vdXNlIGV2ZW50c1xuICBzdGFydEV2ZW50ID0gJ21vdXNlZG93bic7XG4gIGFjdGl2ZUV2ZW50cyA9IFsgJ21vdXNlbW92ZScsICdtb3VzZXVwJyBdO1xufVxuXG4vLyBwcm90b3R5cGUgc28gaXQgY2FuIGJlIG92ZXJ3cml0ZWFibGUgYnkgRmxpY2tpdHlcbnByb3RvLnRvdWNoQWN0aW9uVmFsdWUgPSAnbm9uZSc7XG5cbnByb3RvLmJpbmRIYW5kbGVzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2JpbmRIYW5kbGVzKCAnYWRkRXZlbnRMaXN0ZW5lcicsIHRoaXMudG91Y2hBY3Rpb25WYWx1ZSApO1xufTtcblxucHJvdG8udW5iaW5kSGFuZGxlcyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9iaW5kSGFuZGxlcyggJ3JlbW92ZUV2ZW50TGlzdGVuZXInLCAnJyApO1xufTtcblxuLyoqXG4gKiBBZGQgb3IgcmVtb3ZlIHN0YXJ0IGV2ZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gYmluZE1ldGhvZCAtIGFkZEV2ZW50TGlzdGVuZXIgb3IgcmVtb3ZlRXZlbnRMaXN0ZW5lclxuICogQHBhcmFtIHtTdHJpbmd9IHRvdWNoQWN0aW9uIC0gdmFsdWUgZm9yIHRvdWNoLWFjdGlvbiBDU1MgcHJvcGVydHlcbiAqL1xucHJvdG8uX2JpbmRIYW5kbGVzID0gZnVuY3Rpb24oIGJpbmRNZXRob2QsIHRvdWNoQWN0aW9uICkge1xuICB0aGlzLmhhbmRsZXMuZm9yRWFjaCggKCBoYW5kbGUgKSA9PiB7XG4gICAgaGFuZGxlWyBiaW5kTWV0aG9kIF0oIHN0YXJ0RXZlbnQsIHRoaXMgKTtcbiAgICBoYW5kbGVbIGJpbmRNZXRob2QgXSggJ2NsaWNrJywgdGhpcyApO1xuICAgIC8vIHRvdWNoLWFjdGlvbjogbm9uZSB0byBvdmVycmlkZSBicm93c2VyIHRvdWNoIGdlc3R1cmVzLiBtZXRhZml6enkvZmxpY2tpdHkjNTQwXG4gICAgaWYgKCB3aW5kb3cuUG9pbnRlckV2ZW50ICkgaGFuZGxlLnN0eWxlLnRvdWNoQWN0aW9uID0gdG91Y2hBY3Rpb247XG4gIH0gKTtcbn07XG5cbnByb3RvLmJpbmRBY3RpdmVQb2ludGVyRXZlbnRzID0gZnVuY3Rpb24oKSB7XG4gIGFjdGl2ZUV2ZW50cy5mb3JFYWNoKCAoIGV2ZW50TmFtZSApID0+IHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggZXZlbnROYW1lLCB0aGlzICk7XG4gIH0gKTtcbn07XG5cbnByb3RvLnVuYmluZEFjdGl2ZVBvaW50ZXJFdmVudHMgPSBmdW5jdGlvbigpIHtcbiAgYWN0aXZlRXZlbnRzLmZvckVhY2goICggZXZlbnROYW1lICkgPT4ge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBldmVudE5hbWUsIHRoaXMgKTtcbiAgfSApO1xufTtcblxuLy8gLS0tLS0gZXZlbnQgaGFuZGxlciBoZWxwZXJzIC0tLS0tIC8vXG5cbi8vIHRyaWdnZXIgbWV0aG9kIHdpdGggbWF0Y2hpbmcgcG9pbnRlclxucHJvdG8ud2l0aFBvaW50ZXIgPSBmdW5jdGlvbiggbWV0aG9kTmFtZSwgZXZlbnQgKSB7XG4gIGlmICggZXZlbnQucG9pbnRlcklkID09PSB0aGlzLnBvaW50ZXJJZGVudGlmaWVyICkge1xuICAgIHRoaXNbIG1ldGhvZE5hbWUgXSggZXZlbnQsIGV2ZW50ICk7XG4gIH1cbn07XG5cbi8vIHRyaWdnZXIgbWV0aG9kIHdpdGggbWF0Y2hpbmcgdG91Y2hcbnByb3RvLndpdGhUb3VjaCA9IGZ1bmN0aW9uKCBtZXRob2ROYW1lLCBldmVudCApIHtcbiAgbGV0IHRvdWNoO1xuICBmb3IgKCBsZXQgY2hhbmdlZFRvdWNoIG9mIGV2ZW50LmNoYW5nZWRUb3VjaGVzICkge1xuICAgIGlmICggY2hhbmdlZFRvdWNoLmlkZW50aWZpZXIgPT09IHRoaXMucG9pbnRlcklkZW50aWZpZXIgKSB7XG4gICAgICB0b3VjaCA9IGNoYW5nZWRUb3VjaDtcbiAgICB9XG4gIH1cbiAgaWYgKCB0b3VjaCApIHRoaXNbIG1ldGhvZE5hbWUgXSggZXZlbnQsIHRvdWNoICk7XG59O1xuXG4vLyAtLS0tLSBzdGFydCBldmVudCAtLS0tLSAvL1xuXG5wcm90by5vbm1vdXNlZG93biA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy5wb2ludGVyRG93biggZXZlbnQsIGV2ZW50ICk7XG59O1xuXG5wcm90by5vbnRvdWNoc3RhcnQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMucG9pbnRlckRvd24oIGV2ZW50LCBldmVudC5jaGFuZ2VkVG91Y2hlc1swXSApO1xufTtcblxucHJvdG8ub25wb2ludGVyZG93biA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy5wb2ludGVyRG93biggZXZlbnQsIGV2ZW50ICk7XG59O1xuXG4vLyBub2RlcyB0aGF0IGhhdmUgdGV4dCBmaWVsZHNcbmNvbnN0IGN1cnNvck5vZGVzID0gWyAnVEVYVEFSRUEnLCAnSU5QVVQnLCAnU0VMRUNUJywgJ09QVElPTicgXTtcbi8vIGlucHV0IHR5cGVzIHRoYXQgZG8gbm90IGhhdmUgdGV4dCBmaWVsZHNcbmNvbnN0IGNsaWNrVHlwZXMgPSBbICdyYWRpbycsICdjaGVja2JveCcsICdidXR0b24nLCAnc3VibWl0JywgJ2ltYWdlJywgJ2ZpbGUnIF07XG5cbi8qKlxuICogYW55IHRpbWUgeW91IHNldCBgZXZlbnQsIHBvaW50ZXJgIGl0IHJlZmVycyB0bzpcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gKiBAcGFyYW0ge0V2ZW50IHwgVG91Y2h9IHBvaW50ZXJcbiAqL1xucHJvdG8ucG9pbnRlckRvd24gPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIC8vIGRpc21pc3MgbXVsdGktdG91Y2ggdGFwcywgcmlnaHQgY2xpY2tzLCBhbmQgY2xpY2tzIG9uIHRleHQgZmllbGRzXG4gIGxldCBpc0N1cnNvck5vZGUgPSBjdXJzb3JOb2Rlcy5pbmNsdWRlcyggZXZlbnQudGFyZ2V0Lm5vZGVOYW1lICk7XG4gIGxldCBpc0NsaWNrVHlwZSA9IGNsaWNrVHlwZXMuaW5jbHVkZXMoIGV2ZW50LnRhcmdldC50eXBlICk7XG4gIGxldCBpc09rYXlFbGVtZW50ID0gIWlzQ3Vyc29yTm9kZSB8fCBpc0NsaWNrVHlwZTtcbiAgbGV0IGlzT2theSA9ICF0aGlzLmlzUG9pbnRlckRvd24gJiYgIWV2ZW50LmJ1dHRvbiAmJiBpc09rYXlFbGVtZW50O1xuICBpZiAoICFpc09rYXkgKSByZXR1cm47XG5cbiAgdGhpcy5pc1BvaW50ZXJEb3duID0gdHJ1ZTtcbiAgLy8gc2F2ZSBwb2ludGVyIGlkZW50aWZpZXIgdG8gbWF0Y2ggdXAgdG91Y2ggZXZlbnRzXG4gIHRoaXMucG9pbnRlcklkZW50aWZpZXIgPSBwb2ludGVyLnBvaW50ZXJJZCAhPT0gdW5kZWZpbmVkID9cbiAgICAvLyBwb2ludGVySWQgZm9yIHBvaW50ZXIgZXZlbnRzLCB0b3VjaC5pbmRlbnRpZmllciBmb3IgdG91Y2ggZXZlbnRzXG4gICAgcG9pbnRlci5wb2ludGVySWQgOiBwb2ludGVyLmlkZW50aWZpZXI7XG4gIC8vIHRyYWNrIHBvc2l0aW9uIGZvciBtb3ZlXG4gIHRoaXMucG9pbnRlckRvd25Qb2ludGVyID0ge1xuICAgIHBhZ2VYOiBwb2ludGVyLnBhZ2VYLFxuICAgIHBhZ2VZOiBwb2ludGVyLnBhZ2VZLFxuICB9O1xuXG4gIHRoaXMuYmluZEFjdGl2ZVBvaW50ZXJFdmVudHMoKTtcbiAgdGhpcy5lbWl0RXZlbnQoICdwb2ludGVyRG93bicsIFsgZXZlbnQsIHBvaW50ZXIgXSApO1xufTtcblxuLy8gLS0tLS0gbW92ZSAtLS0tLSAvL1xuXG5wcm90by5vbm1vdXNlbW92ZSA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy5wb2ludGVyTW92ZSggZXZlbnQsIGV2ZW50ICk7XG59O1xuXG5wcm90by5vbnBvaW50ZXJtb3ZlID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB0aGlzLndpdGhQb2ludGVyKCAncG9pbnRlck1vdmUnLCBldmVudCApO1xufTtcblxucHJvdG8ub250b3VjaG1vdmUgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMud2l0aFRvdWNoKCAncG9pbnRlck1vdmUnLCBldmVudCApO1xufTtcblxucHJvdG8ucG9pbnRlck1vdmUgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIGxldCBtb3ZlVmVjdG9yID0ge1xuICAgIHg6IHBvaW50ZXIucGFnZVggLSB0aGlzLnBvaW50ZXJEb3duUG9pbnRlci5wYWdlWCxcbiAgICB5OiBwb2ludGVyLnBhZ2VZIC0gdGhpcy5wb2ludGVyRG93blBvaW50ZXIucGFnZVksXG4gIH07XG4gIHRoaXMuZW1pdEV2ZW50KCAncG9pbnRlck1vdmUnLCBbIGV2ZW50LCBwb2ludGVyLCBtb3ZlVmVjdG9yIF0gKTtcbiAgLy8gc3RhcnQgZHJhZyBpZiBwb2ludGVyIGhhcyBtb3ZlZCBmYXIgZW5vdWdoIHRvIHN0YXJ0IGRyYWdcbiAgbGV0IGlzRHJhZ1N0YXJ0aW5nID0gIXRoaXMuaXNEcmFnZ2luZyAmJiB0aGlzLmhhc0RyYWdTdGFydGVkKCBtb3ZlVmVjdG9yICk7XG4gIGlmICggaXNEcmFnU3RhcnRpbmcgKSB0aGlzLmRyYWdTdGFydCggZXZlbnQsIHBvaW50ZXIgKTtcbiAgaWYgKCB0aGlzLmlzRHJhZ2dpbmcgKSB0aGlzLmRyYWdNb3ZlKCBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciApO1xufTtcblxuLy8gY29uZGl0aW9uIGlmIHBvaW50ZXIgaGFzIG1vdmVkIGZhciBlbm91Z2ggdG8gc3RhcnQgZHJhZ1xucHJvdG8uaGFzRHJhZ1N0YXJ0ZWQgPSBmdW5jdGlvbiggbW92ZVZlY3RvciApIHtcbiAgcmV0dXJuIE1hdGguYWJzKCBtb3ZlVmVjdG9yLnggKSA+IDMgfHwgTWF0aC5hYnMoIG1vdmVWZWN0b3IueSApID4gMztcbn07XG5cbi8vIC0tLS0tIGRyYWcgLS0tLS0gLy9cblxucHJvdG8uZHJhZ1N0YXJ0ID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB0aGlzLmlzRHJhZ2dpbmcgPSB0cnVlO1xuICB0aGlzLmlzUHJldmVudGluZ0NsaWNrcyA9IHRydWU7IC8vIHNldCBmbGFnIHRvIHByZXZlbnQgY2xpY2tzXG4gIHRoaXMuZW1pdEV2ZW50KCAnZHJhZ1N0YXJ0JywgWyBldmVudCwgcG9pbnRlciBdICk7XG59O1xuXG5wcm90by5kcmFnTW92ZSA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciwgbW92ZVZlY3RvciApIHtcbiAgdGhpcy5lbWl0RXZlbnQoICdkcmFnTW92ZScsIFsgZXZlbnQsIHBvaW50ZXIsIG1vdmVWZWN0b3IgXSApO1xufTtcblxuLy8gLS0tLS0gZW5kIC0tLS0tIC8vXG5cbnByb3RvLm9ubW91c2V1cCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy5wb2ludGVyVXAoIGV2ZW50LCBldmVudCApO1xufTtcblxucHJvdG8ub25wb2ludGVydXAgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMud2l0aFBvaW50ZXIoICdwb2ludGVyVXAnLCBldmVudCApO1xufTtcblxucHJvdG8ub250b3VjaGVuZCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy53aXRoVG91Y2goICdwb2ludGVyVXAnLCBldmVudCApO1xufTtcblxucHJvdG8ucG9pbnRlclVwID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB0aGlzLnBvaW50ZXJEb25lKCk7XG4gIHRoaXMuZW1pdEV2ZW50KCAncG9pbnRlclVwJywgWyBldmVudCwgcG9pbnRlciBdICk7XG5cbiAgaWYgKCB0aGlzLmlzRHJhZ2dpbmcgKSB7XG4gICAgdGhpcy5kcmFnRW5kKCBldmVudCwgcG9pbnRlciApO1xuICB9IGVsc2Uge1xuICAgIC8vIHBvaW50ZXIgZGlkbid0IG1vdmUgZW5vdWdoIGZvciBkcmFnIHRvIHN0YXJ0XG4gICAgdGhpcy5zdGF0aWNDbGljayggZXZlbnQsIHBvaW50ZXIgKTtcbiAgfVxufTtcblxucHJvdG8uZHJhZ0VuZCA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7IC8vIHJlc2V0IGZsYWdcbiAgLy8gcmUtZW5hYmxlIGNsaWNraW5nIGFzeW5jXG4gIHNldFRpbWVvdXQoICgpID0+IGRlbGV0ZSB0aGlzLmlzUHJldmVudGluZ0NsaWNrcyApO1xuXG4gIHRoaXMuZW1pdEV2ZW50KCAnZHJhZ0VuZCcsIFsgZXZlbnQsIHBvaW50ZXIgXSApO1xufTtcblxuLy8gdHJpZ2dlcmVkIG9uIHBvaW50ZXIgdXAgJiBwb2ludGVyIGNhbmNlbFxucHJvdG8ucG9pbnRlckRvbmUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5pc1BvaW50ZXJEb3duID0gZmFsc2U7XG4gIGRlbGV0ZSB0aGlzLnBvaW50ZXJJZGVudGlmaWVyO1xuICB0aGlzLnVuYmluZEFjdGl2ZVBvaW50ZXJFdmVudHMoKTtcbiAgdGhpcy5lbWl0RXZlbnQoJ3BvaW50ZXJEb25lJyk7XG59O1xuXG4vLyAtLS0tLSBjYW5jZWwgLS0tLS0gLy9cblxucHJvdG8ub25wb2ludGVyY2FuY2VsID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB0aGlzLndpdGhQb2ludGVyKCAncG9pbnRlckNhbmNlbCcsIGV2ZW50ICk7XG59O1xuXG5wcm90by5vbnRvdWNoY2FuY2VsID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB0aGlzLndpdGhUb3VjaCggJ3BvaW50ZXJDYW5jZWwnLCBldmVudCApO1xufTtcblxucHJvdG8ucG9pbnRlckNhbmNlbCA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgdGhpcy5wb2ludGVyRG9uZSgpO1xuICB0aGlzLmVtaXRFdmVudCggJ3BvaW50ZXJDYW5jZWwnLCBbIGV2ZW50LCBwb2ludGVyIF0gKTtcbn07XG5cbi8vIC0tLS0tIGNsaWNrIC0tLS0tIC8vXG5cbi8vIGhhbmRsZSBhbGwgY2xpY2tzIGFuZCBwcmV2ZW50IGNsaWNrcyB3aGVuIGRyYWdnaW5nXG5wcm90by5vbmNsaWNrID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICBpZiAoIHRoaXMuaXNQcmV2ZW50aW5nQ2xpY2tzICkgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbn07XG5cbi8vIHRyaWdnZXJlZCBhZnRlciBwb2ludGVyIGRvd24gJiB1cCB3aXRoIG5vL3RpbnkgbW92ZW1lbnRcbnByb3RvLnN0YXRpY0NsaWNrID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICAvLyBpZ25vcmUgZW11bGF0ZWQgbW91c2UgdXAgY2xpY2tzXG4gIGxldCBpc01vdXNldXAgPSBldmVudC50eXBlID09PSAnbW91c2V1cCc7XG4gIGlmICggaXNNb3VzZXVwICYmIHRoaXMuaXNJZ25vcmluZ01vdXNlVXAgKSByZXR1cm47XG5cbiAgdGhpcy5lbWl0RXZlbnQoICdzdGF0aWNDbGljaycsIFsgZXZlbnQsIHBvaW50ZXIgXSApO1xuXG4gIC8vIHNldCBmbGFnIGZvciBlbXVsYXRlZCBjbGlja3MgMzAwbXMgYWZ0ZXIgdG91Y2hlbmRcbiAgaWYgKCBpc01vdXNldXAgKSB7XG4gICAgdGhpcy5pc0lnbm9yaW5nTW91c2VVcCA9IHRydWU7XG4gICAgLy8gcmVzZXQgZmxhZyBhZnRlciA0MDBtc1xuICAgIHNldFRpbWVvdXQoICgpID0+IHtcbiAgICAgIGRlbGV0ZSB0aGlzLmlzSWdub3JpbmdNb3VzZVVwO1xuICAgIH0sIDQwMCApO1xuICB9XG59O1xuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxucmV0dXJuIFVuaWRyYWdnZXI7XG5cbn0gKSApO1xuIiwiLyohXG4gKiBVbmlwb2ludGVyIHYyLjQuMFxuICogYmFzZSBjbGFzcyBmb3IgZG9pbmcgb25lIHRoaW5nIHdpdGggcG9pbnRlciBldmVudFxuICogTUlUIGxpY2Vuc2VcbiAqL1xuXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCB1bmRlZjogdHJ1ZSwgdW51c2VkOiB0cnVlLCBzdHJpY3Q6IHRydWUgKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgLyoganNoaW50IHN0cmljdDogZmFsc2UgKi8gLypnbG9iYWwgZGVmaW5lLCBtb2R1bGUsIHJlcXVpcmUgKi9cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIFtcbiAgICAgICdldi1lbWl0dGVyL2V2LWVtaXR0ZXInXG4gICAgXSwgZnVuY3Rpb24oIEV2RW1pdHRlciApIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIEV2RW1pdHRlciApO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgcmVxdWlyZSgnZXYtZW1pdHRlcicpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIGdsb2JhbFxuICAgIHdpbmRvdy5Vbmlwb2ludGVyID0gZmFjdG9yeShcbiAgICAgIHdpbmRvdyxcbiAgICAgIHdpbmRvdy5FdkVtaXR0ZXJcbiAgICApO1xuICB9XG5cbn0oIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSggd2luZG93LCBFdkVtaXR0ZXIgKSB7XG5cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmZ1bmN0aW9uIFVuaXBvaW50ZXIoKSB7fVxuXG4vLyBpbmhlcml0IEV2RW1pdHRlclxudmFyIHByb3RvID0gVW5pcG9pbnRlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBFdkVtaXR0ZXIucHJvdG90eXBlICk7XG5cbnByb3RvLmJpbmRTdGFydEV2ZW50ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIHRoaXMuX2JpbmRTdGFydEV2ZW50KCBlbGVtLCB0cnVlICk7XG59O1xuXG5wcm90by51bmJpbmRTdGFydEV2ZW50ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIHRoaXMuX2JpbmRTdGFydEV2ZW50KCBlbGVtLCBmYWxzZSApO1xufTtcblxuLyoqXG4gKiBBZGQgb3IgcmVtb3ZlIHN0YXJ0IGV2ZW50XG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzQWRkIC0gcmVtb3ZlIGlmIGZhbHNleVxuICovXG5wcm90by5fYmluZFN0YXJ0RXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgaXNBZGQgKSB7XG4gIC8vIG11bmdlIGlzQWRkLCBkZWZhdWx0IHRvIHRydWVcbiAgaXNBZGQgPSBpc0FkZCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGlzQWRkO1xuICB2YXIgYmluZE1ldGhvZCA9IGlzQWRkID8gJ2FkZEV2ZW50TGlzdGVuZXInIDogJ3JlbW92ZUV2ZW50TGlzdGVuZXInO1xuXG4gIC8vIGRlZmF1bHQgdG8gbW91c2UgZXZlbnRzXG4gIHZhciBzdGFydEV2ZW50ID0gJ21vdXNlZG93bic7XG4gIGlmICggJ29udG91Y2hzdGFydCcgaW4gd2luZG93ICkge1xuICAgIC8vIEhBQ0sgcHJlZmVyIFRvdWNoIEV2ZW50cyBhcyB5b3UgY2FuIHByZXZlbnREZWZhdWx0IG9uIHRvdWNoc3RhcnQgdG9cbiAgICAvLyBkaXNhYmxlIHNjcm9sbCBpbiBpT1MgJiBtb2JpbGUgQ2hyb21lIG1ldGFmaXp6eS9mbGlja2l0eSMxMTc3XG4gICAgc3RhcnRFdmVudCA9ICd0b3VjaHN0YXJ0JztcbiAgfSBlbHNlIGlmICggd2luZG93LlBvaW50ZXJFdmVudCApIHtcbiAgICAvLyBQb2ludGVyIEV2ZW50c1xuICAgIHN0YXJ0RXZlbnQgPSAncG9pbnRlcmRvd24nO1xuICB9XG4gIGVsZW1bIGJpbmRNZXRob2QgXSggc3RhcnRFdmVudCwgdGhpcyApO1xufTtcblxuLy8gdHJpZ2dlciBoYW5kbGVyIG1ldGhvZHMgZm9yIGV2ZW50c1xucHJvdG8uaGFuZGxlRXZlbnQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHZhciBtZXRob2QgPSAnb24nICsgZXZlbnQudHlwZTtcbiAgaWYgKCB0aGlzWyBtZXRob2QgXSApIHtcbiAgICB0aGlzWyBtZXRob2QgXSggZXZlbnQgKTtcbiAgfVxufTtcblxuLy8gcmV0dXJucyB0aGUgdG91Y2ggdGhhdCB3ZSdyZSBrZWVwaW5nIHRyYWNrIG9mXG5wcm90by5nZXRUb3VjaCA9IGZ1bmN0aW9uKCB0b3VjaGVzICkge1xuICBmb3IgKCB2YXIgaT0wOyBpIDwgdG91Y2hlcy5sZW5ndGg7IGkrKyApIHtcbiAgICB2YXIgdG91Y2ggPSB0b3VjaGVzW2ldO1xuICAgIGlmICggdG91Y2guaWRlbnRpZmllciA9PSB0aGlzLnBvaW50ZXJJZGVudGlmaWVyICkge1xuICAgICAgcmV0dXJuIHRvdWNoO1xuICAgIH1cbiAgfVxufTtcblxuLy8gLS0tLS0gc3RhcnQgZXZlbnQgLS0tLS0gLy9cblxucHJvdG8ub25tb3VzZWRvd24gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIC8vIGRpc21pc3MgY2xpY2tzIGZyb20gcmlnaHQgb3IgbWlkZGxlIGJ1dHRvbnNcbiAgdmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcbiAgaWYgKCBidXR0b24gJiYgKCBidXR0b24gIT09IDAgJiYgYnV0dG9uICE9PSAxICkgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMuX3BvaW50ZXJEb3duKCBldmVudCwgZXZlbnQgKTtcbn07XG5cbnByb3RvLm9udG91Y2hzdGFydCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy5fcG9pbnRlckRvd24oIGV2ZW50LCBldmVudC5jaGFuZ2VkVG91Y2hlc1swXSApO1xufTtcblxucHJvdG8ub25wb2ludGVyZG93biA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy5fcG9pbnRlckRvd24oIGV2ZW50LCBldmVudCApO1xufTtcblxuLyoqXG4gKiBwb2ludGVyIHN0YXJ0XG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICogQHBhcmFtIHtFdmVudCBvciBUb3VjaH0gcG9pbnRlclxuICovXG5wcm90by5fcG9pbnRlckRvd24gPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIC8vIGRpc21pc3MgcmlnaHQgY2xpY2sgYW5kIG90aGVyIHBvaW50ZXJzXG4gIC8vIGJ1dHRvbiA9IDAgaXMgb2theSwgMS00IG5vdFxuICBpZiAoIGV2ZW50LmJ1dHRvbiB8fCB0aGlzLmlzUG9pbnRlckRvd24gKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5pc1BvaW50ZXJEb3duID0gdHJ1ZTtcbiAgLy8gc2F2ZSBwb2ludGVyIGlkZW50aWZpZXIgdG8gbWF0Y2ggdXAgdG91Y2ggZXZlbnRzXG4gIHRoaXMucG9pbnRlcklkZW50aWZpZXIgPSBwb2ludGVyLnBvaW50ZXJJZCAhPT0gdW5kZWZpbmVkID9cbiAgICAvLyBwb2ludGVySWQgZm9yIHBvaW50ZXIgZXZlbnRzLCB0b3VjaC5pbmRlbnRpZmllciBmb3IgdG91Y2ggZXZlbnRzXG4gICAgcG9pbnRlci5wb2ludGVySWQgOiBwb2ludGVyLmlkZW50aWZpZXI7XG5cbiAgdGhpcy5wb2ludGVyRG93biggZXZlbnQsIHBvaW50ZXIgKTtcbn07XG5cbnByb3RvLnBvaW50ZXJEb3duID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB0aGlzLl9iaW5kUG9zdFN0YXJ0RXZlbnRzKCBldmVudCApO1xuICB0aGlzLmVtaXRFdmVudCggJ3BvaW50ZXJEb3duJywgWyBldmVudCwgcG9pbnRlciBdICk7XG59O1xuXG4vLyBoYXNoIG9mIGV2ZW50cyB0byBiZSBib3VuZCBhZnRlciBzdGFydCBldmVudFxudmFyIHBvc3RTdGFydEV2ZW50cyA9IHtcbiAgbW91c2Vkb3duOiBbICdtb3VzZW1vdmUnLCAnbW91c2V1cCcgXSxcbiAgdG91Y2hzdGFydDogWyAndG91Y2htb3ZlJywgJ3RvdWNoZW5kJywgJ3RvdWNoY2FuY2VsJyBdLFxuICBwb2ludGVyZG93bjogWyAncG9pbnRlcm1vdmUnLCAncG9pbnRlcnVwJywgJ3BvaW50ZXJjYW5jZWwnIF0sXG59O1xuXG5wcm90by5fYmluZFBvc3RTdGFydEV2ZW50cyA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgaWYgKCAhZXZlbnQgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGdldCBwcm9wZXIgZXZlbnRzIHRvIG1hdGNoIHN0YXJ0IGV2ZW50XG4gIHZhciBldmVudHMgPSBwb3N0U3RhcnRFdmVudHNbIGV2ZW50LnR5cGUgXTtcbiAgLy8gYmluZCBldmVudHMgdG8gbm9kZVxuICBldmVudHMuZm9yRWFjaCggZnVuY3Rpb24oIGV2ZW50TmFtZSApIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggZXZlbnROYW1lLCB0aGlzICk7XG4gIH0sIHRoaXMgKTtcbiAgLy8gc2F2ZSB0aGVzZSBhcmd1bWVudHNcbiAgdGhpcy5fYm91bmRQb2ludGVyRXZlbnRzID0gZXZlbnRzO1xufTtcblxucHJvdG8uX3VuYmluZFBvc3RTdGFydEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuICAvLyBjaGVjayBmb3IgX2JvdW5kRXZlbnRzLCBpbiBjYXNlIGRyYWdFbmQgdHJpZ2dlcmVkIHR3aWNlIChvbGQgSUU4IGJ1ZylcbiAgaWYgKCAhdGhpcy5fYm91bmRQb2ludGVyRXZlbnRzICkge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLl9ib3VuZFBvaW50ZXJFdmVudHMuZm9yRWFjaCggZnVuY3Rpb24oIGV2ZW50TmFtZSApIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggZXZlbnROYW1lLCB0aGlzICk7XG4gIH0sIHRoaXMgKTtcblxuICBkZWxldGUgdGhpcy5fYm91bmRQb2ludGVyRXZlbnRzO1xufTtcblxuLy8gLS0tLS0gbW92ZSBldmVudCAtLS0tLSAvL1xuXG5wcm90by5vbm1vdXNlbW92ZSA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy5fcG9pbnRlck1vdmUoIGV2ZW50LCBldmVudCApO1xufTtcblxucHJvdG8ub25wb2ludGVybW92ZSA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgaWYgKCBldmVudC5wb2ludGVySWQgPT0gdGhpcy5wb2ludGVySWRlbnRpZmllciApIHtcbiAgICB0aGlzLl9wb2ludGVyTW92ZSggZXZlbnQsIGV2ZW50ICk7XG4gIH1cbn07XG5cbnByb3RvLm9udG91Y2htb3ZlID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB2YXIgdG91Y2ggPSB0aGlzLmdldFRvdWNoKCBldmVudC5jaGFuZ2VkVG91Y2hlcyApO1xuICBpZiAoIHRvdWNoICkge1xuICAgIHRoaXMuX3BvaW50ZXJNb3ZlKCBldmVudCwgdG91Y2ggKTtcbiAgfVxufTtcblxuLyoqXG4gKiBwb2ludGVyIG1vdmVcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gKiBAcGFyYW0ge0V2ZW50IG9yIFRvdWNofSBwb2ludGVyXG4gKiBAcHJpdmF0ZVxuICovXG5wcm90by5fcG9pbnRlck1vdmUgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHRoaXMucG9pbnRlck1vdmUoIGV2ZW50LCBwb2ludGVyICk7XG59O1xuXG4vLyBwdWJsaWNcbnByb3RvLnBvaW50ZXJNb3ZlID0gZnVuY3Rpb24oIGV2ZW50LCBwb2ludGVyICkge1xuICB0aGlzLmVtaXRFdmVudCggJ3BvaW50ZXJNb3ZlJywgWyBldmVudCwgcG9pbnRlciBdICk7XG59O1xuXG4vLyAtLS0tLSBlbmQgZXZlbnQgLS0tLS0gLy9cblxuXG5wcm90by5vbm1vdXNldXAgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMuX3BvaW50ZXJVcCggZXZlbnQsIGV2ZW50ICk7XG59O1xuXG5wcm90by5vbnBvaW50ZXJ1cCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgaWYgKCBldmVudC5wb2ludGVySWQgPT0gdGhpcy5wb2ludGVySWRlbnRpZmllciApIHtcbiAgICB0aGlzLl9wb2ludGVyVXAoIGV2ZW50LCBldmVudCApO1xuICB9XG59O1xuXG5wcm90by5vbnRvdWNoZW5kID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB2YXIgdG91Y2ggPSB0aGlzLmdldFRvdWNoKCBldmVudC5jaGFuZ2VkVG91Y2hlcyApO1xuICBpZiAoIHRvdWNoICkge1xuICAgIHRoaXMuX3BvaW50ZXJVcCggZXZlbnQsIHRvdWNoICk7XG4gIH1cbn07XG5cbi8qKlxuICogcG9pbnRlciB1cFxuICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAqIEBwYXJhbSB7RXZlbnQgb3IgVG91Y2h9IHBvaW50ZXJcbiAqIEBwcml2YXRlXG4gKi9cbnByb3RvLl9wb2ludGVyVXAgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHRoaXMuX3BvaW50ZXJEb25lKCk7XG4gIHRoaXMucG9pbnRlclVwKCBldmVudCwgcG9pbnRlciApO1xufTtcblxuLy8gcHVibGljXG5wcm90by5wb2ludGVyVXAgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHRoaXMuZW1pdEV2ZW50KCAncG9pbnRlclVwJywgWyBldmVudCwgcG9pbnRlciBdICk7XG59O1xuXG4vLyAtLS0tLSBwb2ludGVyIGRvbmUgLS0tLS0gLy9cblxuLy8gdHJpZ2dlcmVkIG9uIHBvaW50ZXIgdXAgJiBwb2ludGVyIGNhbmNlbFxucHJvdG8uX3BvaW50ZXJEb25lID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX3BvaW50ZXJSZXNldCgpO1xuICB0aGlzLl91bmJpbmRQb3N0U3RhcnRFdmVudHMoKTtcbiAgdGhpcy5wb2ludGVyRG9uZSgpO1xufTtcblxucHJvdG8uX3BvaW50ZXJSZXNldCA9IGZ1bmN0aW9uKCkge1xuICAvLyByZXNldCBwcm9wZXJ0aWVzXG4gIHRoaXMuaXNQb2ludGVyRG93biA9IGZhbHNlO1xuICBkZWxldGUgdGhpcy5wb2ludGVySWRlbnRpZmllcjtcbn07XG5cbnByb3RvLnBvaW50ZXJEb25lID0gbm9vcDtcblxuLy8gLS0tLS0gcG9pbnRlciBjYW5jZWwgLS0tLS0gLy9cblxucHJvdG8ub25wb2ludGVyY2FuY2VsID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICBpZiAoIGV2ZW50LnBvaW50ZXJJZCA9PSB0aGlzLnBvaW50ZXJJZGVudGlmaWVyICkge1xuICAgIHRoaXMuX3BvaW50ZXJDYW5jZWwoIGV2ZW50LCBldmVudCApO1xuICB9XG59O1xuXG5wcm90by5vbnRvdWNoY2FuY2VsID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuICB2YXIgdG91Y2ggPSB0aGlzLmdldFRvdWNoKCBldmVudC5jaGFuZ2VkVG91Y2hlcyApO1xuICBpZiAoIHRvdWNoICkge1xuICAgIHRoaXMuX3BvaW50ZXJDYW5jZWwoIGV2ZW50LCB0b3VjaCApO1xuICB9XG59O1xuXG4vKipcbiAqIHBvaW50ZXIgY2FuY2VsXG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICogQHBhcmFtIHtFdmVudCBvciBUb3VjaH0gcG9pbnRlclxuICogQHByaXZhdGVcbiAqL1xucHJvdG8uX3BvaW50ZXJDYW5jZWwgPSBmdW5jdGlvbiggZXZlbnQsIHBvaW50ZXIgKSB7XG4gIHRoaXMuX3BvaW50ZXJEb25lKCk7XG4gIHRoaXMucG9pbnRlckNhbmNlbCggZXZlbnQsIHBvaW50ZXIgKTtcbn07XG5cbi8vIHB1YmxpY1xucHJvdG8ucG9pbnRlckNhbmNlbCA9IGZ1bmN0aW9uKCBldmVudCwgcG9pbnRlciApIHtcbiAgdGhpcy5lbWl0RXZlbnQoICdwb2ludGVyQ2FuY2VsJywgWyBldmVudCwgcG9pbnRlciBdICk7XG59O1xuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxuLy8gdXRpbGl0eSBmdW5jdGlvbiBmb3IgZ2V0dGluZyB4L3kgY29vcmRzIGZyb20gZXZlbnRcblVuaXBvaW50ZXIuZ2V0UG9pbnRlclBvaW50ID0gZnVuY3Rpb24oIHBvaW50ZXIgKSB7XG4gIHJldHVybiB7XG4gICAgeDogcG9pbnRlci5wYWdlWCxcbiAgICB5OiBwb2ludGVyLnBhZ2VZXG4gIH07XG59O1xuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxucmV0dXJuIFVuaXBvaW50ZXI7XG5cbn0pKTtcbiIsIi8vIHZlbmRvclxyXG53aW5kb3cuRmxpY2tpdHkgPSByZXF1aXJlKCdmbGlja2l0eScpO1xyXG5yZXF1aXJlKCdsYXp5c2l6ZXMnKTtcclxucmVxdWlyZSgnZmxpY2tpdHktaW1hZ2VzbG9hZGVkJyk7XHJcbnJlcXVpcmUoJ2ZsaWNraXR5LWZ1bGxzY3JlZW4nKTtcclxucmVxdWlyZSgnZmxpY2tpdHktYXMtbmF2LWZvcicpO1xyXG5cclxuLy8gbW9kdWxlc1xyXG53aW5kb3cuUHViU3ViID0gcmVxdWlyZSgnLi9zY3JpcHRzL3B1YnN1YicpO1xyXG5cclxuZnVuY3Rpb24gZGVib3VuY2UoZm4sIHdhaXQpIHtcclxuXHRsZXQgdDtcclxuXHRyZXR1cm4gKC4uLmFyZ3MpID0+IHtcclxuXHRcdGNsZWFyVGltZW91dCh0KTtcclxuXHRcdHQgPSBzZXRUaW1lb3V0KCgpID0+IGZuLmFwcGx5KHRoaXMsIGFyZ3MpLCB3YWl0KTtcclxuXHR9O1xyXG59XHJcblxyXG5cclxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XHJcblx0RVZFTlRTOiB7XHJcblx0XHRjYXJ0VXBkYXRlZDogJ2NhcnQtdXBkYXRlZCdcclxuXHR9LFxyXG5cdHN1YnNjcmliZXJzOiB7fSxcclxuXHRzdWJzY3JpYmU6IGZ1bmN0aW9uIChldmVudE5hbWUsIGNhbGxiYWNrKSB7XHJcblx0XHRpZiAodGhpcy5zdWJzY3JpYmVyc1tldmVudE5hbWVdID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0dGhpcy5zdWJzY3JpYmVyc1tldmVudE5hbWVdID0gW107XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5zdWJzY3JpYmVyc1tldmVudE5hbWVdID0gWy4uLnRoaXMuc3Vic2NyaWJlcnNbZXZlbnROYW1lXSwgY2FsbGJhY2tdO1xyXG5cclxuXHRcdHJldHVybiAoKSA9PiB7XHJcblx0XHRcdHRoaXMuc3Vic2NyaWJlcnNbZXZlbnROYW1lXSA9IHRoaXMuc3Vic2NyaWJlcnNbZXZlbnROYW1lXS5maWx0ZXIoKGNiKSA9PiB7XHJcblx0XHRcdFx0cmV0dXJuIGNiICE9PSBjYWxsYmFjaztcclxuXHRcdFx0fSk7XHJcblx0XHR9O1xyXG5cdH0sXHJcblx0cHVibGlzaDogZnVuY3Rpb24gKGV2ZW50TmFtZSwgZGF0YSkge1xyXG5cdFx0aWYgKHRoaXMuc3Vic2NyaWJlcnNbZXZlbnROYW1lXSkge1xyXG5cdFx0XHR0aGlzLnN1YnNjcmliZXJzW2V2ZW50TmFtZV0uZm9yRWFjaCgoY2FsbGJhY2spID0+IHtcclxuXHRcdFx0XHRjYWxsYmFjayhkYXRhKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG59XHJcbiJdfQ==
